<?xml version="1.0" encoding="utf-8" ?>

<g-truc xmlns:g="http://www.g-truc.net/2010/g-truc" version="7.0.3">

  <!--
    Matrix product: strassen, coppersmith-winograd
  -->

  <!--post-list picture="20090317.jpg" comment="Floating colors"-->
  <!--post-list picture="20090722.jpg" comment="Mankind legacy"-->
  <!--post-list picture="20090812.jpg" comment="Flavors and the secret ingredient"-->

  <draft index="0998" date="23/08/2010" std-date="2010-08-23T23:30:00.00Z" title="16 tools free for download">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>
    <paragraph>

    </paragraph>
    <list>
      <list-element href="http://www.realtech-vr.com/glview/index.html">OpenGL Extensions Viewer</list-element>
      <list-element href="http://www.vis.uni-stuttgart.de/glsldevil/">glslDevil</list-element>
      <list-element href="http://developer.amd.com/gpu/compressonator/Pages/default.aspx">The Compressonator</list-element>
      <list-element href="http://www.xnview.com/en/index.html">XnView</list-element>
      <list-element href="http://www.stack.nl/~dimitri/doxygen/">Doxygen</list-element>

      <list-element href="http://www.cmake.org/cmake/resources/software.html">CMake</list-element>
      <list-element href="http://www.microsoft.com/express/downloads/">Visual Studio Express</list-element>
      <list-element href="http://qt.nokia.com/products/developer-tools">Qt Creator</list-element>
      <list-element href="http://tdm-gcc.tdragon.net">Recent GCC</list-element>
      <list-element href="http://www.mingw.org/wiki/MSYS">MSys</list-element>

      <list-element href="http://www.cygwin.com/">Cygwin</list-element>
      <list-element href="http://git-scm.com/download">Git</list-element>
      <list-element href="http://filezilla-project.org/">Filezilla</list-element>
      <list-element href="http://www.fraps.com/">Fraps</list-element>

      <list-element href="http://www.videolan.org/vlc/">VLC</list-element>
      <list-element href="">VirtualDub</list-element>
    </list>
    <paragraph>
      Enjoy!
    </paragraph>
  </draft>

  <draft index="0999" date="16/02/2013" std-date="2013-02-16T23:30:00.00Z" title="WebGL test" published="no">
    <webgl index="canvas">
      <script type="text/javascript" href="./script/0376.js" />
    </webgl>

    <source-list>
      <source-download index="1064" />
    </source-list>
  </draft>

  <draft index="0550" date="10/03/2013" std-date="2013-03-10T02:00:00.00Z" title="Playing with Unigine on Mac">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>
  </draft>

  <post index="0549" date="10/03/2013" std-date="2013-03-10T02:30:00.00Z" title="GLI 0.4.1.0 released">
    <meta>
      <tag>gtc-tech-project-gli</tag>
    </meta>

    <paragraph>
      GLI 0.4.1.0 essentially add the support of texture export to DDS files. Issues with GCC and XCode have been fixed as well.
    </paragraph>

    <code title="Create a texture with GLI 0.4 and save it to a DDS file:">
      <line>
        <keyword>#include </keyword>
        <string>&lt;glm/glm.hpp&gt;</string>
      </line>
      <line>
        <keyword>#include </keyword>
        <string>&lt;gli/gli.hpp&gt;</string>
      </line>
      <line>
      </line>
      <line>
        <comment>// Allocated a 32 bits texture with one mipmap level</comment>
      </line>
      <line>
        gli::texture2D Texture(1, gli::RGBA8_UNORM, gli::texture2D::dimensions_type(256, 256));
      </line>
      <line>
        glm::u8vec4 * LinearAddress = Texture.data&lt;glm::u8vec4&gt;();
      </line>
      <line>
        ...
      </line>
      <line>
        <comment>// Do something</comment>
      </line>
      <line>
        ...
      </line>
      <line>
        gli::saveStorageDDS(Texture, "texture.dds");
      </line>
    </code>

    <paragraph>
      Already a lot of work as been done for <link href="https://github.com/g-truc/gli/issues">GLI 0.5.0</link> including an extended support of texture views and copies, comparison operators and texture clearing.
    </paragraph>

    <code title="Create an OpenGL 4.2 texture with GLI 0.4:">
      <line>
        <keyword>#include </keyword>
        <string>&lt;gli/gli.hpp&gt;</string>
      </line>
      <line>
      </line>
      <line>
        <comment>// </comment>
      </line>
      <line>
        gli::texture2D Texture(gli::loadStorageDDS("kueken2.dds"));
      </line>
      <line>
        assert(!Texture.empty());
      </line>
      <line>
      </line>
      <line>
        glBindTexture(GL_TEXTURE_2D, TextureName);
      </line>
      <line>
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, 0);
      </line>
      <line>
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, GLint(Texture.levels() - 1));
      </line>
      <line>
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_R, GL_RED);
      </line>
      <line>
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_G, GL_GREEN);
      </line>
      <line>
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_B, GL_BLUE);
      </line>
      <line>
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_A, GL_ALPHA);
      </line>
      <line>
        glTexStorage2D(GL_TEXTURE_2D,
      </line>
      <line align="32px">
        GLint(Texture.levels()),
      </line>
      <line align="32px">
        GLenum(gli::internal_format(Texture.format())),
      </line>
      <line align="32px">
        GLsizei(Texture.dimensions().x),
      </line>
      <line align="32px">
        GLsizei(Texture.dimensions().y));
      </line>
      <line>

      </line>
      <line>
        if(gli::is_compressed(Texture.format()))
      </line>
      <line>
        {
      </line>
      <line align="32px">
        for(gli::texture2D::size_type Level = 0; Level &lt; Texture.levels(); ++Level)
      </line>
      <line align="32px">
        {
      </line>
      <line align="64px">
        glCompressedTexSubImage2D(GL_TEXTURE_2D,
      </line>
      <line align="96px">
        GLint(Level),
      </line>
      <line align="96px">
        0, 0,
      </line>
      <line align="96px">
        GLsizei(Texture[Level].dimensions().x),
      </line>
      <line align="96px">
        GLsizei(Texture[Level].dimensions().y),
      </line>
      <line align="96px">
        GLenum(gli::internal_format(Texture.format())),
      </line>
      <line align="96px">
        GLsizei(Texture[Level].size()),
      </line>
      <line align="96px">
        Texture[Level].data());
      </line>
      <line align="32px">
        }
      </line>
      <line>
        }
      </line>
      <line>
        else
      </line>
      <line>
        {
      </line>

      <line align="32px">
        for(gli::texture2D::size_type Level = 0; Level &lt; Texture.levels(); ++Level)
      </line>
      <line align="32px">
        {
      </line>
      <line align="64px">
        glTexSubImage2D(GL_TEXTURE_2D,
      </line>
      <line align="96px">
        GLint(Level),
      </line>
      <line align="96px">
        0, 0,
      </line>
      <line align="96px">
        GLsizei(Texture[Level].dimensions().x),
      </line>
      <line align="96px">
        GLsizei(Texture[Level].dimensions().y),
      </line>
      <line align="96px">
        GLenum(gli::external_format(Texture.format())),
      </line>
      <line align="96px">
        GLenum(gli::type_format(Texture.format())),
      </line>
      <line align="96px">
        Texture[Level].data());
      </line>
      <line align="32px">
        }
      </line>
      <line>
        }
      </line>
    </code>

    <source-list>
      <source-download type="Download" index="1132" />
      <source-element type="Link" href="https://github.com/g-truc/gli/issues" title="Submit a bug report" />
    </source-list>
  </post>
  
  <post index="0548" date="09/03/2013" std-date="2013-03-09T16:00:00.00Z" title="Photograph week 8">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2013-08-960.jpg"
      href="./photo/2013-08.jpg" />
  </post>


  <post index="0547" date="26/02/2013" std-date="2013-02-26T02:00:00.00Z" title="A look at OpenGL and Direct3D performance with Unigine">
    <meta>
        <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <title>Is OpenGL faster than Direct3D?</title>
    <paragraph>
      Last summer we had a quite stunning news coming from Valve saying that Left 4 Dead 2 is almost 20% faster on Linux than on Windows. Quickly this news has been interpreted by
      <link href="http://www.extremetech.com/gaming/133824-valve-opengl-is-faster-than-directx-even-on-windows">"OpenGL is faster than DirectX"</link>.
    </paragraph>
    <paragraph>
      I really can't believe this claim and I don't believe the days where this will happen are near. Direct3D mainly has to support an ecosystem mades of games which is very restricted context.
      Furthermore, we can expect that these programmers are relatively good or at least better than the average OpenGL programmer who sometime use OpenGL to display something but with no care at all about how efficient is the code
      because rendering is not the purpose of the program.
    </paragraph>
    <paragraph>
      Supporting these inefficient programs efficiently results in slower OpenGL implementations which can't just focus on making fast code running faster. Afterall, optimization is about making slow code run faster.
      Making these optimizations result in making the "fast path" go slower. <bold>If we really want better OpenGL drivers, what we need is programmers that write better OpenGL programs.</bold>
      This is one way to explain why the OpenGL core profile has been created but considering the low adoption of the core profile, I guess the OpenGL ecosystem doesn't care too much about writing fast OpenGL code.
      Then the only real Core Profile implementation is Apple OpenGL 3.2 implementation, others are just compatibility profile with extra error checking. How could we expect better performance? The chicken and the egg...
    </paragraph>
    <paragraph>
      The case of Left 4 Dead 2 is interesting because it was a major title but this game is built on an old engine design for Direct3D 9.
      Chances are that IVHs are more interested in optimizing Direct3D 11 implementations but also Direct3D 11 reflects better how today's hardware works.
      The release of <link href="http://unigine.com/products/heaven/">Unigine Heaven 4</link> and <link href="http://unigine.com/products/valley/">Unigine Valley 1</link> is another opportunity
      to evalute the performance difference between OpenGL and Direct3D especially considering that the engine is designed for Direct3D 11 hardware and support Direct3D 9 and OpenGL 4.
      We can still argue that Unigine is using OpenGL 4.0 which remain a significant subset of OpenGL 4.3 which makes it an unfair comparison but this is the best we curently have.
    </paragraph>

    <title>Comparing OpenGL 4.0 with Direct3D 9 and Direct3D 11 implementations with Unigine</title>

    <image
      color="white"
      img="./post/0546-01.png"
      href="./post/0546-01.png" />

    <image
      color="white"
      img="./post/0546-02.png"
      href="./post/0546-02.png" />

    <paragraph>
      In these charts we don't care about the absolute level of performance, we only consider the relative level of performance, arbitrary based on
      the results given using the Direct3D9 version of Unigine engine.
    </paragraph>
    <paragraph>
      Generally speaking, the Direct3D 11 version is faster for every vendors, especially on Heaven benchmark.
      Considering that Heaven has been around for a while, this difference might only be due to IHVs drivers optimizations.
      The OpenGL drivers seem to be particularly optimized for Heaven on Intel and NVIDIA implementations.
      On Heaven, the OpenGL renderer performs better than the Direct3D 9 renderer but not on Valley. 
      I can personally expect that no vendor will care too much about optimizing the Direct3D 9 renderer of these benchmarks 
    </paragraph>
    <paragraph>
      AMD drivers implementation behaves very similarly between Valley and Heaven. Sadly, the OpenGL drivers fall behind the Direct3D 11 implemenstation by 19.4%.
    </paragraph>
    <paragraph>
      NVIDIA OpenGL implementation performs quite badly on Valley, being about 33.7% slower than the Direct3D 11 implementation.
      If we assume that the performance drop we see on Valley is not present on Heaven is due to drivers optimizations by NVIDIA,
      it means that the implementation can get the performance however for most of us, NVIDIA won't care about our program performances and we will be stuck with very bad performances.
    </paragraph>

    <image
      color="white"
      img="./post/0546-03.png"
      href="./post/0546-03.png" />

    <image
      color="white"
      img="./post/0546-04.png"
      href="./post/0546-04.png" />

    <paragraph>
      The minimum FPS is probably the most important number. If this number is too low, the user experience will be jaepodized.
    </paragraph>
    <paragraph>
      Here, the shiny Direct3D 11 performances fade a little has the minimum framerate is lower on Direct3D 11 than Direct3D 9.
      On NVIDIA is seem that there is a specific performance bug on Direct3D 11 drivers.
    </paragraph>
    <paragraph>
      Sadly the OpenGL implementations are again not performing well, especially on Valley where AMD and NVIDIA OpenGL drivers are 22% slower than the Direct3D 9 drivers.
    </paragraph>
    <paragraph>
      Intel implementation seems to be the most balance here.
    </paragraph>

    <image
      color="white"
      img="./post/0546-05.png"
      href="./post/0546-05.png" />

    <image
      color="white"
      img="./post/0546-06.png"
      href="./post/0546-06.png" />

    <paragraph>
      The maximum FPS doesn't matter much except that it's better when it is as close as possible to the average FPS.
      Having huge difference is just a waste of performance that bias the average FPS making it looks better without giving the user experience that should come with it.
    </paragraph>

    <title>Unigine at low resolution and quality, more CPU limited</title>
    <image
      color="white"
      img="./post/0547-01.png"
      href="./post/0547-01.png" />

    <image
      color="white"
      img="./post/0547-02.png"
      href="./post/0547-02.png" />

    <paragraph>
      Now we run the test in low quality and a small resolution hoping that the CPU becomes the bottleneck to see how the implementation behaves.
    </paragraph>
    <paragraph>
      Looking at these results is seems that the level of performance of Intel drivers is very stable across APIs.
      It is possible that the HD4000 is simply too slow for these benchmarks for not hitting a specific GPU bottleneck. Our maybe the drivers are very optimise but I have a doubt about that.
      Considering optimizations of HD4000 drivers, picture the dream: A driver written for a Intel HD4000 can assume that the CPU will be an Ivy Bridge which means that the drivers can use AVX2 intrincis code or 
      compile with AVX2 optimization enable. ♥_♥
    </paragraph>
    <paragraph>
      The most striking results is that <bold>NVIDIA OpenGL implementation turns out to be particularly slow</bold> but this is not really a surprized.
      <bold>NVIDIA OpenGL implementation is about 25% and 32% slower than Direct3D 9 implementation, 30% and 33% slower than Direct3D 11 implementation on respectively Valley and Heaven.</bold>
      NVIDIA implementation is supposed to be the most robust which means that it is also probably the one which has the most workarounds and checkings to optimize all sorts of strange behaviours.
      It is very likely that NVIDIA implementation is the one doing the most work behind our back which affects our nicely crafted code.
    </paragraph>
    <paragraph>
      <bold>AMD OpenGL implementation is about 7% and 9% slower than Direct3D 9 implementation, 8% and 13% slower than Direct3D 11 implementation on respectively Valley and Heaven.</bold>
    </paragraph>
    <paragraph>
      <bold>For all ISVs, Direct3D 9 or Direct3D 11 makes very little differences</bold>, when it comes to CPU usage different API design doesn't seem to matter too much how maybe their design is too similar.
    </paragraph>

    <image
      color="white"
      img="./post/0547-03.png"
      href="./post/0547-03.png" />

    <image
      color="white"
      img="./post/0547-04.png"
      href="./post/0547-04.png" />

    <paragraph>
      Here Intel performs best but actually <bold>all vendors performs very badly</bold>. We see that <bold>keeping a stable framerate with OpenGL is really hard</bold>.
      A possible explanation for that is OpenGL memory model which prevent OpenGL programmers and applications to control memory transactions.
      With OpenGL, we only provide "hints" hoping that the drivers will interpret them appropriately and do the transfers when it's the most wise to do them. 
      Good luck with that! My first request for OpenGL remains <link href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">Direct State Access</link>, 4 years after the extension release...,
      but my second is a new memory model where the application, which is the only one to know what to do with the memory, will be able to manage itself the memory (allocation, transfer, access).
      Then, my hypothesis for this performance issue might be just wrong but what close to sure is that this issue conscerns every vendors so this is an OpenGL design issue, not a vendor specific issue.
    </paragraph>
    <paragraph>
      Speaking of vendor specific issues, Intel seems to have a performance bug on its Direct3D 11 drivers.
    </paragraph>

    <image
      color="white"
      img="./post/0547-05.png"
      href="./post/0547-05.png" />

    <image
      color="white"
      img="./post/0547-06.png"
      href="./post/0547-06.png" />

    <title>Conclusion on performance</title>

    <paragraph>
      Building a conclusion without access to the code is quite challenging so I really don't want any of this post being seen as truth but instead as axis of thoughts. 
      There are some different behaviours across vendors which makes me believe that Heaven is particularly optimized by the hardware vendors but not Valley.
      It is also possible that others factors are involved in these differences but I haven't seen them.
      For example, I can imagine that all the assets in Heaven can be store in GPU memory so that the benchmark doesn't need any data streaming during the program execusion.
      In Valley, the terrain is pretty large its geometry rendering is performed using a CPU based CLOD method which let me believe that there is a significant amount of data streaming.
    </paragraph>
    <paragraph>
      Hence, either because the OpenGL implementations are generally slow or because streaming assets is slower with OpenGL,
      <bold>rendering with OpenGL is significantly slower than rendering with Direct3D 11</bold> even with nicely crafted code like I expect Unigine to be.
      However, it appears that Intel OpenGL implementation is the one performing best or should I say the less badly.
    </paragraph>
    <paragraph>
      When reducing resolution and quality, we see that <bold>NVIDIA OpenGL implementation seems to be the one that suffers the most of CPU overhead</bold>.
      NVIDIA has the reputation to provide the most robust implementation which I guess implies that they are making more work on the CPU side to make sure that applications are not using OpenGL the "funny" way.
    </paragraph>
    <paragraph>
      <bold>Intel comes as a good surprized when it comes to performance</bold>.
      Obviously, the overall performance is not great because here we are speaking of an integrated chip but
      <bold>the performance differences with Direct3D 11 and OpenGL implementation is roughly 10% for Intel against about 20% for AMD and 30% for NVIDIA</bold>.
    </paragraph>
  </post>

  <post index="0546" date="25/02/2013" std-date="2003-02-25T23:30:00.00Z" title="February 2013 OpenGL status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      The tested drivers this month are
      <link href="http://www.guru3d.com/files_details/amd_catalyst_13_2_download.html">AMD Catalyst 13.2 beta 6</link>,
      <link href="http://drivers.mydrivers.com/download/459-183835-Intel-Core-i3-Core-i5-Core-i7-CPU-9.18.1/">
        Intel 9.18.10.2973
      </link> and
      <link href="http://www.guru3d.com/files_details/geforce_314_07_whql_driver_download.html">NVIDIA Forceware 314.07 beta</link>. No newer drivers for Intel, I just kept using last month one.
    </paragraph>

    <paragraph>
      Once again the new Intel drivers seem to be coming from a leak so there are probably unreliable but the OpenGL drivers is the most rescent available.
      The detailled <link href="project-0033.html#menu">OpenGL drivers status</link> and <link href="project-0034.html#menu">OpenGL extensions matrix</link> are available for download.
    </paragraph>

    <image
      color="white"
      img="./post/0546.png"
      href="project-0033.html#menu" />

    <title>First Apple OpenGL implementation status</title>
    <paragraph>
      The MacOS X platform is becoming a more and more relevant platform to support by our OpenGL program.
      For this reason, I have been long looking forward to see this first Apple OpenGL implementation status coming but thanks to the <link href="post-0545.html#menu">OpenGL Samples Pack 4.3.2 branch</link> this is now possible.
    </paragraph>

    <paragraph>
      Apple implementation is far behind AMD, Intel and NVIDIA implementations in term of feature set as it only claims <link href="doc/OpenGL%20matrix%202013-02.pdf">OpenGL 3.2 core profile support</link>.
      Sadly, even the drivers quality is particularly poor as the <link href="http://www.g-truc.net/doc/OpenGL%20status%202013-02.pdf">February OpenGL drivers status</link> shows 
      that <bold>only 61% of the samples run successfully on Apple OpenGL 3.2 implementation</bold> against 95% for Intel and NVIDIA implementations or 89% for AMD implementations, far behind everyone else once against.
    </paragraph>

    <paragraph>
      IHVs only provides "low level" drivers so that effectivement Apple writes most of the implementation. It is very unfortunate that Apple doesn't let IHVs write the OpenGL drivers.
      Even if there isn't an existing perfect OpenGL implementation, supporting another platform for IHVs is mostly a matter of reusing the existing OpenGL drivers source code.
      Both AMD and NVIDIA share the same tree for Linux and Windows.
      For Intel, the situation is different because Linux OpenGL implementation (OpenGL 3.0) is based on <link href="http://www.mesa3d.org/">Mesa</link> and open source but Windows implementation (OpenGL 4.0) is closed source. 
      We could easily imagine Intel reusing their Windows implementation for MacOS X. 
    </paragraph>

    <paragraph>
      Few days ago I saw a <link href="https://www.change.org/petitions/apple-os-x-10-9-support-opengl-4-3-and-zfs">petition for OpenGL 4.3 on MacOS X</link>. 
      Please sign it! But then don't believe one second that Apple will write an OpenGL 4.3 implementation for the next version of MacOS X or even the next one. 
      Writing an OpenGL drivers is really hard and cost a lot of money in term hours of development. 
      <bold>The only possible way for OpenGL 4.3 on MacOS X to happen is that Apple let IHVs provide OpenGL drivers for MacOS X</bold>... 
      Sounds challenging for Apple and this is too bad because I really enjoy my MacBook
    </paragraph>

    <title>A lot of bugs fixed for Intel OpenGL implementation</title>
    <paragraph>
      The <link href="doc/OpenGL%20status%202012-12.pdf">first OpenGL status I made in December for Intel</link> wasn't particularly flattering however 
      it is clear to me that Intel is working really hard to provide a better implementation and this is paying of. 
      <bold>On the OpenGL 4.0 feature set, Intel implementation now runs the highest number of samples successfully</bold>.
    </paragraph>

    <paragraph>
      I was hoping to provide a status for Intel Linux implementation. 
      Unfortunately, even if the <link href="doc/OpenGL%20matrix%202013-02.pdf">feature set is particularly advanced</link>, 
      <link href="http://www.opengl.org/registry/specs/ARB/texture_multisample.txt">ARB_texture_multisample</link> isn't supported so that we can't create an OpenGL 3.2 core context 
      with Mesa and we must rely on OpenGL extensions. It's not such a big deal but it remains quite some works to be done on the <link href="project-0026.html#menu">OpenGL Samples Pack</link>
      Let's hope the work on this extension get completed soon and I will be pleased to include an OpenGL drivers status for Intel Linux implementation in this report.
    </paragraph>

    <title>About AMD drivers release frequency</title>
    <paragraph>
      AMD announced that they would release less drivers and it can seem that this is not really the case. In practice, it's the number of stable release which is reduced to about 4 per year instead of 12 per year. 
      However there are still beta drivers regularly (monthly?), so that developers can get fixes quickly. I think this strategy build a pretty robust ecosystem with fewer stable drivers largely used to somehow support by the programs.
    </paragraph>

    <paragraph>
      Once again, don't forget to contribute to the OpenGL community by <link href="post-0430.html#menu">reporting your bugs</link>!
    </paragraph>

    <source-list>
      <source-download index="1131" />
      <source-download index="1130" />
      <source-download index="1129" />
    </source-list>
  </post>

  <post index="0545" date="24/02/2013" std-date="2013-02-24T17:00:00.00Z" title="OpenGL Samples Pack 4.3.2.1 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack 4.3.2.1 adds many OpenGL 3.2 samples for a total of 43 samples. It adds some workarounds for the samples to run on Apple implementations...
      Finally, it fixes the two OpenGL 3.0 samples.
    </paragraph>

    <source-list>
      <source-download index="1129" />
      <source-element type="Link" href="https://github.com/g-truc/ogl-samples/issues" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0544" date="24/02/2013" std-date="2013-02-24T23:00:00.00Z" title="Week 7: *_*">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2013-07-960.jpg"
      href="./photo/2013-07.jpg" />
  </post>

  <post index="0543" date="16/02/2013" std-date="2013-02-16T23:00:00.00Z" title="Week 6: Faktorý">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2013-06-960.jpg"
      href="./photo/2013-06.jpg" />
  </post>

  <post index="0542" date="16/02/2013" std-date="2013-02-16T17:00:00.00Z" title="OpenGL Samples Pack 4.3.2.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack 4.3.2.0 mainly adds MacOS X support through a set of 27 OpenGL 3.2 samples and it restaures Linux support.
      This has been made possible by replacing FreeGLUT by GLFW and removing GLEW which doesn't support the core profile. 
      The 27 OpenGL 3.2 samples are essentially back port of previously OpenGL 3.3 samples.
    </paragraph>
    <paragraph>
      Apple OpenGL implementation fails to run 4 samples on a GeForce 9600M. 
      With <codeword>320-buffer-uniform-shared</codeword> that generates a GLSL compiler error failing to interpret global scope layout qualifier on uniform.
      With <codeword>320-glsl-builtin-blocks</codeword>, the implementation doesn't support built-in block redeclarations.
      <codeword>320-glsl-precision</codeword> generates a drivers crash. 
      Finally, <codeword>320-texture-integer</codeword> fails to render an integer texture.
    </paragraph>

    <source-list>
      <source-download index="1128" />
      <source-element type="Link" href="https://github.com/g-truc/ogl-samples/issues" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0541" date="14/02/2013" title="GLM 0.9.4.2 released" image="goodies/logo.png" image-mini="image/logo-mini.png">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      A new revision of GLM is available. It fixes the following issues.
    </paragraph>

    <list name="Changelog:">
      <list-element>Fixed compAdd from GTX_component_wise</list-element>
      <list-element>Fixed SIMD support for Intel compiler on Windows</list-element>
      <list-element>Fixed isnan and isinf for CUDA compiler</list-element>
      <list-element>Fixed GLM_FORCE_RADIANS on glm::perspective</list-element>
      <list-element>Fixed GCC warnings</list-element>
      <list-element>Fixed packDouble2x32 on XCode</list-element>
      <list-element>Fixed mix for vec4 SSE implementation</list-element>
      <list-element>Fixed 0x2013 dash character in comments that cause issue in Windows Japanese mode</list-element>
      <list-element>Fixed documentation warnings</list-element>
      <list-element>Fixed CUDA warnings</list-element>
    </list>

    <source-download index="1127" />
    <source-element type="Link" href="https://github.com/g-truc/glm/issues" title="Submit a bug report" />
    <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.4.pdf" title="GLM 0.9.4 Manual" />
    <source-element type="Link" href="http://glm.g-truc.net/api-0.9.4/index.html" title="GLM 0.9.4 API" />
  </post>
  
  <post index="0540" date="09/02/2013" std-date="2013-02-09T22:00:00.00Z" title="Week 5: le plein dans le vide">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2013-05-960.jpg"
      href="./photo/2013-05.jpg" />
  </post>
  
  <post index="0539" date="02/02/2013" std-date="2013-02-02T17:00:00.00Z" title="Week 4: Earth is blue like an orange">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2013-04-960.jpg"
      href="./photo/2013-04.jpg" />
  </post>

  <post index="0538" date="30/01/2013" std-date="2003-01-30T23:30:00.00Z" title="January 2013 OpenGL status">
    <meta>
        <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      The tested drivers this month are 
      <link href="http://www.guru3d.com/files_details/amd_catalyst_13_2_download.html">AMD Catalyst 13.2 beta 3</link>, 
      <link href="http://www.necacom.net/index.php?option=com_content&amp;view=article&amp;id=6577:intel-hd-graphics-4000-drivers-version-1531642885&amp;catid=68:intel&amp;Itemid=86">Intel 15.31.64.2885</link> and 
      <link href="http://www.guru3d.com/files_details/geforce_313_95_beta_driver_download.html">NVIDIA Forceware 313.95 beta</link>. No newer drivers for Intel, I just kept using last month one.
    </paragraph>

    <title>Core and compatibility profile issues</title>
    <paragraph>
      I am typically working with the core profile because it supports rendering without vertex attributes according to the specification.
      However, both Intel and NVIDIA supports rendering without vertex attributes with the compatibility profile.
    </paragraph>

    <title>New exposed extensions</title>
    <paragraph>
      AMD implementation exposes four new extensions from OpenGL 4.3 core specification: 
      <link href="http://www.opengl.org/registry/specs/ARB/texture_storage_multisample.txt">ARB_texture_storage_multisample</link>,
      <link href="http://www.opengl.org/registry/specs/ARB/texture_buffer_range.txt">ARB_texture_buffer_range</link>,
      <link href="http://www.opengl.org/registry/specs/ARB/fragment_layer_viewport.txt">ARB_fragment_layer_viewport</link> and
      <link href="http://www.opengl.org/registry/specs/ARB/multi_draw_indirect.txt">ARB_multi_draw_indirect</link>.
    </paragraph>
    <paragraph>
      I have updated the extension matrix with the new extensions but also including MacOS X and Mesa implementations. MacOS X implementation seems to be really far behind everyone else. 
      Mesa is making great progress as only <link href="http://www.opengl.org/registry/specs/ARB/texture_multisample.txt">ARB_texture_multisample</link> is missing for a full OpenGL 3.3 support 
      and a good amount of OpenGL 4 hardware extensions are also supported.
    </paragraph>

    <image title="January 2013 extensions available"
      color="white"
      img="./post/0538-status-2013-01-800.png"
      href="./post/0538-status-2013-01.png" />

    <title>Bugs fixed</title>

    <paragraph>
      The work on the OpenGL Samples Pack 4.3.2 is focussed on OpenGL 3.2 samples and a MacOS X port. It allowed me to identify new bugs on AMD where creating a depth buffer only framebuffer results 
      into a crash when using the core profile or generates an incomplete framebuffer error using the compatibility profile. Furthermore, using multi draw indirect on SI results in a crash.
    </paragraph>
    <paragraph>
      On NVIDIA side, we can now use double for the vertex attributes.
    </paragraph>
    
    <image title="January 2013 drivers status"
      color="white"
      img="./post/0538-status-2013-01-800-B.png"
      href="./post/0538-status-2013-01-B.png" />
    
    <paragraph>
        Once again, don't forget to contribute to the OpenGL community by <link href="post-0430.html#menu">reporting your bugs</link>!
        The detailled <link href="project-0033.html#menu">OpenGL drivers status</link> and <link href="project-0034.html#menu">OpenGL extensions matrix</link> are available for download below.
    </paragraph>
        
    <source-list>
        <source-download index="1126" />
        <source-download index="1125" />
        <source-element type="Link" href="https://github.com/g-truc/ogl-samples/tree/4.3.2" title="OpenGL Samples Pack 4.3.2 branch snapshot" />
        <source-download index="1120" />
    </source-list>
  </post>
  
  <post index="0537" date="28/01/2013" std-date="2013-01-28T02:30:00.00Z" title="GLI 0.4.0.0 released">
    <meta>
      <tag>gtc-tech-project-gli</tag>
    </meta>

    <paragraph>
      I have been wishing to release a new version of <a href="project-0024.html">GLI</a> for more than a year but GLI 0.4.0.0 is finally available.
    </paragraph>
    <paragraph>
      This new version is a large refactoring / rewrite of the code which aims at avoiding memory copies, reduce memory fragmentation, memory allocations and constant time memory access.
      Just for loading textures, performance tests show a gain of 50% in release build and 50X in debug build.
    </paragraph>
    <paragraph>
      Currently, there is no documentation and the features set remains very limited. All it is good for is loading DDS files containing basically any formats supported by OpenGL for either texture 2d, cube maps or texture 3d. 
      It should be considered as an alpha version but expect regular updates from now on, aiming at making it a good image processing library. 
    </paragraph>

    <code title="Creating an OpenGL 4.2 compressed texture with GLI 0.4.0:">
      <line>
        <keyword>#include </keyword>
        <string>&lt;gli/gli.hpp&gt;</string>
      </line>
      <line>
      </line>
      <line>
        <comment>// </comment>
      </line>
      <line>
        gli::texture2D Texture(gli::loadStorageDDS("kueken2.dds"));
      </line>
      <line>
        assert(!Texture.empty());
      </line>
      <line>
      </line>
      <line>
        glBindTexture(GL_TEXTURE_2D, TextureName);
      </line>
      <line>
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, 0);
      </line>
      <line>
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, GLint(Texture.levels() - 1));
      </line>
      <line>
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_R, GL_RED);
      </line>
      <line>
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_G, GL_GREEN);
      </line>
      <line>
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_B, GL_BLUE);
      </line>
      <line>
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_A, GL_ALPHA);
      </line>
      <line>
        glTexStorage2D(GL_TEXTURE_2D,
      </line>
      <line align="32px">
        GLint(Texture.levels()),
      </line>
      <line align="32px">
        GLenum(gli::internal_format(Texture.format())),
      </line>
      <line align="32px">
        GLsizei(Texture.dimensions().x),
      </line>
      <line align="32px">
        GLsizei(Texture.dimensions().y));
      </line>
      <line>

      </line>
      <line>
        if(gli::is_compressed(Texture.format()))
      </line>
      <line>
        {
      </line>
      <line align="32px">
        for(gli::texture2D::size_type Level = 0; Level &lt; Texture.levels(); ++Level)
      </line>
      <line align="32px">
        {
      </line>
      <line align="64px">
        glCompressedTexSubImage2D(GL_TEXTURE_2D,
      </line>
      <line align="96px">
        GLint(Level),
      </line>
      <line align="96px">
        0, 0,
      </line>
      <line align="96px">
        GLsizei(Texture[Level].dimensions().x),
      </line>
      <line align="96px">
        GLsizei(Texture[Level].dimensions().y),
      </line>
      <line align="96px">
        GLenum(gli::internal_format(Texture.format())),
      </line>
      <line align="96px">
        GLsizei(Texture[Level].size()),
      </line>
      <line align="96px">
        Texture[Level].data());
      </line>
      <line align="32px">
        }
      </line>
      <line>
        }
      </line>
      <line>
        else
      </line>
      <line>
        {
      </line>

      <line align="32px">
        for(gli::texture2D::size_type Level = 0; Level &lt; Texture.levels(); ++Level)
      </line>
      <line align="32px">
        {
      </line>
      <line align="64px">
        glTexSubImage2D(GL_TEXTURE_2D,
      </line>
      <line align="96px">
        GLint(Level),
      </line>
      <line align="96px">
        0, 0,
      </line>
      <line align="96px">
        GLsizei(Texture[Level].dimensions().x),
      </line>
      <line align="96px">
        GLsizei(Texture[Level].dimensions().y),
      </line>
      <line align="96px">
        GLenum(gli::external_format(Texture.format())),
      </line>
      <line align="96px">
        GLenum(gli::type_format(Texture.format())),
      </line>
      <line align="96px">
        Texture[Level].data());
      </line>
      <line align="32px">
        }
      </line>
      <line>
        }
      </line>
    </code>
    
    <source-list>
      <source-download type="Download" index="1124" />
      <source-element type="Link" href="https://github.com/g-truc/gli/issues" title="Submit a bug report" />
    </source-list>
  </post>
  
  <post index="0536" date="25/01/2013" std-date="2013-01-25T04:00:00.00Z" title="Week 3: La plénitude du vide">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2013-03-960.jpg"
      href="./photo/2013-03.jpg" />
  </post>

  <post index="0535" date="18/01/2013" std-date="2013-01-18T22:00:00.00Z" title="Week 2: Just arrived on Earth">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2013-02-960.jpg"
      href="./photo/2013-02.jpg" />
  </post>
    
  <post index="0534" date="15/01/2013" std-date="2013-01-15T22:00:00.00Z" title="Week 1: Reykja geisli">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2013-01-960.jpg"
      href="./photo/2013-01.jpg" />
  </post>

  <post index="0533" date="28/12/2012" std-date="2012-12-28T23:30:00.00Z" title="December 2012 OpenGL status">
        <meta>
            <tag>gtc-tech-project-openglstatus</tag>
        </meta>
        
        <paragraph>
            This month I had my first experience with Intel OpenGL drivers since four or five years.
            Back then working on Intel was a nightmare, the implementation would report VBO supports but no entry point would be available...
            Intel has been more and more active on the GPU side so that having an Intel GPU on a laptop sounds like a reasonnable option to me...
            but is the OpenGL implementation descent?
        </paragraph>
        
        <paragraph>
            The lastest drivers I found is the version <link href="http://www.necacom.net/index.php?option=com_content&amp;view=article&amp;id=6577:intel-hd-graphics-4000-drivers-version-1531642885&amp;catid=68:intel&amp;Itemid=86">15.31.64.2885</link> which doesn't appears to be an official driver but it resolves a lot of issues regarding
            rendering to framebuffer objects. The implementation provides a full support of OpenGL 4.0 specification adn the work on OpenGL 4.1 and OpenGL 4.2 has began
            as we can see that
            <link href="http://www.opengl.org/registry/specs/ARB/ES2_compatibility.txt">ARB_ES2_compatibility</link> (4.1),
            <link href="http://www.opengl.org/registry/specs/ARB/base_instance.txt">ARB_base_instance</link> (4.2),
            <link href="http://www.opengl.org/registry/specs/ARB/conservative_depth.txt">ARB_conservative_depth</link> (4.2),
            <link href="http://www.opengl.org/registry/specs/ARB/internalformat_query.txt">ARB_internalformat_query</link> (4.2),
            <link href="http://www.opengl.org/registry/specs/ARB/map_buffer_alignment.txt">ARB_map_buffer_alignment</link> (4.2) and
            <link href="http://www.opengl.org/registry/specs/ARB/texture_storage.txt">ARB_texture_storage</link> (4.2)
            extensions are exposed. 
        </paragraph>
        
        <paragraph>
            More digging also shows that the work on more extensions has began as we can find entry points for
            <link href="http://www.opengl.org/registry/specs/ARB/get_program_binary.txt">ARB_get_program_binary</link> (4.1),
            <link href="http://www.opengl.org/registry/specs/ARB/invalidate_subdata.txt">ARB_invalidate_subdata</link> (4.3),
            <link href="http://www.opengl.org/registry/specs/ARB/shader_image_load_store.txt">ARB_shader_image_load_store</link> (4.2),
            <link href="http://www.opengl.org/registry/specs/ARB/shader_atomic_counter.txt">ARB_shader_atomic_counter</link> (4.2) and
            <link href="http://www.opengl.org/registry/specs/ARB/separate_shader_objects.txt">ARB_separate_shader_objects</link> (4.1).
        </paragraph>
        
        <paragraph>
            At this point, the biggest issue is that ARB_debug_output is still not supported which makes debugging to painful for this modern age.
            <link href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">ARB_debug_output</link>
            support is definetely my number one feature request for this implementation!
        </paragraph>

        <paragraph>
          For this new OpenGL status, I refactored the table using Excel to make it easier for me to maintain the status especially now that it includes Intel results. 
          The complete and details status can be download at the end of this post. The PDF version doesn't show the comments embedded in the Excel version.
        </paragraph>

        <paragraph>
            For this month status I am using <link href="http://www.guru3d.com/files_details/amd_catalyst_12_11_beta_download.html">Catalyst 12.11 beta 11</link> as AMD hasn't release new drivers.
            On NVIDIA side, I am testing <link href="http://www.guru3d.com/files_details/geforce_310_70_whql_driver_download.html">Forceware 310.64</link> and 
            for Intel <link href="http://www.necacom.net/index.php?option=com_content&amp;view=article&amp;id=6577">drivers 15.31.64.2885</link>. 
            Lot of fixes for Intel regarding rendering to framebuffer, indirect draws and point sprite rendering.
        </paragraph>

        <image title="December 2012 level of samples passing on implementations"
          color="white"
          img="./post/0513-status-2012-12.png"
          href="./post/0513-status-2012-12.png" />

        <paragraph>
          All in all, I am quite surprized by the good quality of Intel OpenGL driver. Considering the size of Intel market share, it sounds reasonable to consider
          supporting this implementation by our software and the future sounds pretty promessing. Hopefully, in 2013 Intel will provide an OpenGL 4.2 implementation
          which will lead to some pretty interesting programming across all vendors.
        </paragraph>
        
        <paragraph>
            Once again, don't forget to contribute to the OpenGL community by <link href="post-0430.html#menu">reporting your bugs</link>!
        </paragraph>
        
        <source-list>
            <source-download index="1122" />
            <source-download index="1121" />
            <source-element type="Link" href="https://github.com/g-truc/ogl-samples/tree/4.3.1" title="OpenGL Samples Pack 4.3.1 branch snapshot" />
            <source-download index="1120" />
        </source-list>
    </post>

  <post index="0532" date="28/12/2012" std-date="2012-12-28T22:00:00.00Z" title="Week 52 photograph: M'enfin !">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-52-960.jpg"
      href="./photo/2012-52.jpg" />
  </post>

  <post index="0531" date="27/12/2012" std-date="2012-12-27T01:30:00.00Z" title="December 2012 OpenGL matrix">
    <meta>
      <tag>gtc-tech-project-openglmatrix</tag>
    </meta>

    <paragraph>
      The OpenGL ecosystem is particularly fragmented. There is a lot of different OpenGL implementations but none of them is reaching the same level of features.
    </paragraph>
    <paragraph>
      NVIDIA implements OpenGL 4.3; AMD implements OpenGL 4.2; Intel implements OpenGL 4.0; Apple implements OpenGL 3.2; and MESA implements OpenGL 3.1.
      On top of this, even if there are OpenGL 3 and OpenGL 4 hardware supporting each minor revision of the specifications,
      a lot of OpenGL 4 extensions are available on OpenGL 3 hardware.
    </paragraph>
    <paragraph>
      It can be complicated to navigate into the OpenGL extensions and optimize our application to maximize the use of OpenGL features.
      I created an OpenGL features matrix to resolve this issue. It summarizes for each architecture the list of supported extensions.
    </paragraph>

    <source-list>
      <source-download index="1123" />
    </source-list>
  </post>

  <post index="0530" date="27/12/2012" std-date="2012-12-27T21:00:00.00Z" title="Week 51 photograph: Visited">
        <meta>
            <tag>gtc-crea-photograph</tag>
        </meta>
        
        <image
        color="black"
        img="./photo/2012-51-960.jpg"
        href="./photo/2012-51.jpg" />
    </post>
    
  <post index="0529" date="23/12/2012" std-date="2012-12-23T14:00:00.00Z" title="OpenGL Samples Pack 4.3.1.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack 4.3.1.0 adds Intel OpenGL implementation support to ensure that all OpenGL 3.3 and OpenGL 4.0 are not using extensions.
    </paragraph>

    <source-list>
      <source-download index="1120" />
      <source-element type="Link" href="https://github.com/g-truc/ogl-samples/issues" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0528" date="22/12/2012" std-date="2012-12-22T22:00:00.00Z" title="Week 50 photograph: Lines of structure and perspective">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-50-960.jpg"
      href="./photo/2012-50.jpg" />
  </post>
  
  <post index="0527" date="22/12/2012" title="GLM 0.9.4.1 released" image="goodies/logo.png" image-mini="image/logo-mini.png">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    
    <paragraph>
      GLM 0.9.4.1 fixes various bugs and clarifies quaternion interpolations. There are now three different functions now: <codeword>mix</codeword>, <codeword>slerp</codeword> and <codeword>lerp</codeword>.
    </paragraph>
    <paragraph>
      <codeword>lerp</codeword> performs a linear interpolation between two quaternions. 
      This operation is only defined with interpolation factors between [0, 1] and doesn't perform the rotation at constant speed. 
      <codeword>slerp</codeword> perform a spherical linear interpolation between two quaternion. 
      It always takes the short rotation path and it is performed at constant speed for interpolation factors between ]-inf, +inf[. This function is similar to the old <codeword>shortMix</codeword> function.
      <codeword>mix</codeword> is an oriented spherical linear interpolation between two quaternion. It is performed at constant speed for interpolation factors between ]-inf, +inf[.
    </paragraph>

    <list name="Changelog:">
      <list-element>Improved half support: -0.0 case and implicit conversions</list-element>
      <list-element>Fixed Intel Composer Compiler support on Linux</list-element>
      <list-element>Fixed interaction between quaternion and euler angles</list-element>
      <list-element>Fixed GTC_constants build</list-element>
      <list-element>Fixed quat slerp using mix function when cosTheta close to 1</list-element>
      <list-element>Improved fvec4SIMD and fmat4x4SIMD implementations</list-element>
      <list-element>Fixed assert messages</list-element>
      <list-element>Added slerp and lerp quaternion functions and tests</list-element>
    </list>

    <source-download index="1119" />
    <source-element type="Link" href="https://github.com/g-truc/glm/issues" title="Submit a bug report" />
    <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.4.pdf" title="GLM 0.9.4 Manual" />
    <source-element type="Link" href="http://glm.g-truc.net/api-0.9.4/index.html" title="GLM 0.9.4 API" />
  </post>
  
  <post index="0526" date="20/12/2012" std-date="2012-12-20T22:00:00.00Z" title="Week 49 photograph: The Four Angels Staying the Winds">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-49-960.jpg"
      href="./photo/2012-49.jpg" />
  </post>

  <post index="0525" date="16/12/2012" std-date="2012-12-16T22:00:00.00Z" title="Week 48 photograph: A noticed random event">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-48-960.jpg"
      href="./photo/2012-48.jpg" />
  </post>

  <post index="0524" date="12/12/2012" std-date="2012-12-12T22:00:00.00Z" title="Week 47 photograph: Accommodated with agony">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-47-960.jpg"
      href="./photo/2012-47.jpg" />
  </post>
  
  <post index="0523" date="09/12/2012" std-date="2012-12-09T14:00:00.00Z" title="Week 46 photograph: It's all about light">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-46-960.jpg"
      href="./photo/2012-46.jpg" />
  </post>
  
  <post index="0522" date="04/12/2012" std-date="2012-12-04T23:30:00.00Z" title="November 2012 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      Late review this month. I am laking advantage of today's release of <link href="http://www.guru3d.com/files_details/amd_catalyst_12_11_beta_download.html">Catalyst 12.11 beta 11</link> for this review. 
      On NVIDIA side, I am testing <link href="http://www.guru3d.com/files_details/geforce_310_64_beta_driver_download.html">Forceware 310.64</link>.
      Lot of fixes on NVIDIA side!
    </paragraph>

    <title>The test</title>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <paragraph>
      Once again, don't forget to contribute to the OpenGL community by <link href="post-0430.html#menu">reporting your bugs</link>!
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.3.0 branch, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 12.11 beta 4 (23/10/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.11 beta 11 (04/12/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 310.33 (24/10/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 310.64 (28/11/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>430-texture-view</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-texture-storage</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-texture-query</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-texture-copy</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-texture-buffer</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-program-subroutine</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-program-compute</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">readonly and writeonly qualifiers generates parsing errors</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-program-compute-image</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-multi-draw-indirect</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-interface-matching</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">dvec4 vertex input generates an error: "unknown opcode modifier"</table-entry-element>
        <table-entry-element color="red">dvec4 vertex input generates an error: "unknown opcode modifier"</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-image-store</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">coherent qualifier on image2D result in a parsing error.</table-entry-element>
        <table-entry-element color="orange">coherent qualifier on image2D result in a parsing error.</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-image-sampling</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-draw-without-vertex-attrib</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-debug</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">Object labels not used in the debug output log.</table-entry-element>
        <table-entry-element color="orange">Object labels not used in the debug output log.</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-atomic-counter</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>

      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="orange">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="orange">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-conversion</table-entry-element>
        <table-entry-element color="white">BPTC online conversions is not/won't be supported</table-entry-element>
        <table-entry-element color="white">BPTC online conversions is not/won't be supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-picking</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-interface-matching</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="blue">Structure for vertex inputs supported</table-entry-element>
        <table-entry-element color="blue">Structure for vertex inputs supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-debug-output</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-subroutine</table-entry-element>
        <table-entry-element color="red">Unable to call directly a subroutine</table-entry-element>
        <table-entry-element color="red">Unable to call directly a subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-format</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample-explicit</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">
          GL_INVALID_VALUE error generated. Texture 0 had no mipmaps, while it's min filter requires mipmap.
        </table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.3.0 branch, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 12.11 beta 4 (23/10/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.11 beta 11 (04/12/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 310.33 (24/10/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 310.64 (28/11/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>430-direct-state-access-ext</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-sparse-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sparse_texture not supported</table-entry-element>
        <table-entry-element color="white">AMD_sparse_texture not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_bindless_texture not supported</table-entry-element>
        <table-entry-element color="white">NV_bindless_texture not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-clamp-separate-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_depth _clamp_separate not supported</table-entry-element>
        <table-entry-element color="white">AMD_depth _clamp_separate not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader _buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader _buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-srgb-decode-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">GL_INVALID_VALUE error generated. Texture 0 had no mipmaps, while it's min filter requires mipmap. </table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-position-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sample _positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample _positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_vertex _shader_layer and AMD_vertex_shader _viewport_index not supported</table-entry-element>
        <table-entry-element color="white">AMD_vertex _shader_layer and AMD_vertex_shader _viewport_index not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture _multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture _multisample not supported</table-entry-element>
        <table-entry-element color="red">
          GL_INVALID_VALUE error generated. Texture 0 had no mipmaps, while
          it's min filter requires mipmap.
        </table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-pinned-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_pinned _memory not supported</table-entry-element>
        <table-entry-element color="white">AMD_pinned _memory not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-barrier-gtc</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-blend-op-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample-explicit-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">
          GL_INVALID_VALUE error generated. Texture 0 had no mipmaps, while
          it's min filter requires mipmap.
        </table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>es-200-draw-elements-ext</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-element type="Link" href="https://github.com/g-truc/ogl-samples/tree/4.3.0" title="OpenGL Samples Pack 4.3.0 branch snapshot" />
      <source-download index="1117" />
    </source-list>
  </post>
  
  <post index="0521" date="29/11/2012" std-date="2012-11-29T19:00:00.00Z" title="Week 45 photograph: Disparition d'une source de bruit">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-45-960.jpg"
      href="./photo/2012-45.jpg" />
  </post>
  
  <post index="0520" date="18/11/2012" std-date="2012-11-18T19:00:00.00Z" title="GLM 0.9.4 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    
    <list name="Changelog:">
      <list-element>Added Intel Composer Compiler support</list-element>
      <list-element>
        Promoted <link href="http://glm.g-truc.net/api-0.9.4/a00146.html">GLM_GTC_espilon</link> extension
      </list-element>
      <list-element>
        Promoted <link href="http://glm.g-truc.net/api-0.9.4/a00159.html">GLM_GTC_ulp</link> extension
      </list-element>
      <list-element>Removed GLM website from the source repository</list-element>
      <list-element>Added GLM_FORCE_RADIANS so that all functions takes radians for arguments</list-element>
      <list-element>Fixed detection of Clang and LLVM GCC on MacOS X</list-element>
      <list-element>Added debugger visualizers for Visual C++ 2012</list-element>
      <list-element>Etc.</list-element>
    </list>

    <source-download index="1118" />
    <source-element type="Link" href="https://github.com/g-truc/glm/issues" title="Submit a bug report" />
    <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.4.pdf" title="GLM 0.9.4 Manual" />
    <source-element type="Link" href="http://glm.g-truc.net/api-0.9.4/index.html" title="GLM 0.9.4 API" />
  </post>

  <post index="0519" date="18/11/2012" std-date="2012-11-18T19:00:00.00Z" title="Week 44 photograph: l'absurde, la révolte, l'amour">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-44-960.jpg"
      href="./photo/2012-44.jpg" />
  </post>

  <post index="0518" date="17/11/2012" std-date="2012-11-17T18:30:00.00Z" title="Surviving without gl_DrawID">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>
    <paragraph>
      <link href="http://www.opengl.org/registry/specs/AMD/multi_draw_indirect.txt">AMD_multi_draw_indirect</link> is 
        a functionality that Direct3D 11 programmers can be particularly jaleous as it reached OpenGL 4.3 specification but this great feature is still missing in the Direct3D 11 world.
        Direct3D 11 and OpenGL 4.0 introduced the draw indirect functionnality to submit a draw using parameters stored in a buffer object.
        <link href="http://www.opengl.org/registry/specs/AMD/multi_draw_indirect.txt">AMD_multi_draw_indirect</link> 
        extends this feature by allowing multiple draw submissions in a single call. This approach moves a CPU loop to a GPU command processor loop, 
        hence potencially significantly reducing the CPU overhead and the possible number of draws per frame.
        Unfortunately, unlike instanced draw, OpenGL doesn't provide a unique identifier per draw (let's call it <codeword>gl_DrawID</codeword>) for each draw... 
    </paragraph>
      
      <paragraph>
          A first approach we could thought of is to use an atomic counter and increment each draw its value when <codeword>gl_VertexID</codeword> and <codeword>gl_InstanceID</codeword> are equal to 0.
        Unfortunately, this idea is not working because of the GPU architechture so that OpenGL doesn't provide garantee on the order of excutions so that we can't be sure with this method that the first draw will be identified with the value 0.
        On AMD hardware this behaviour is almost possible but not all the time. On NVIDIA hardware atomic counter are asynchronously executed which nearly garantee that we will never have the right identifier for a draw.
      </paragraph>
      
      <paragraph>
        Fortunately, there is one method we can use using a vertex attribute with a divisor and base instance. 
      </paragraph>
      <code title="DrawID with a divisor and base instance">
          <line>
              <comment>// Create a vertex array object with a DrawID attribute</comment>
          </line>
          <line>
              glGenVertexArrays(1, &amp;VertexArrayName);
          </line>
          <line>
              glBindVertexArray(VertexArrayName);
          </line>
          <line align="32px">
              glBindBuffer(GL_ARRAY_BUFFER, BufferName[buffer::DRAW_ID]);
          </line>
          <line align="32px">
              glVertexAttribIPointer(DRAW_ID, 1, GL_UNSIGNED_INT, sizeof(glm::uint), 0);
          </line>
          <line align="32px">
              glVertexAttribDivisor(DRAW_ID, 1);
          </line>
          <line align="32px">
              glBindBuffer(GL_ARRAY_BUFFER, 0);
          </line>
          <line align="32px">
              glEnableVertexAttribArray(DRAW_ID);
          </line>
          <line align="32px">
              glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, BufferName[buffer::ELEMENT]); 
          </line>
          <line>
              glBindVertexArray(0);
          </line>
          <line>
          </line>
        </code>
      <paragraph>
          With a divisor equal to 1, all the vertices of a draw will access to the same buffer value. Then, for each draw we use the base instance parameter as an offset to set where in the buffer we are reading the DrawID value. 
          The base instance value act here as an indirection value which increases the execution latency but allow to set a specific value for each DrawID, providing a behaviours more advanced than a simple increase of the value for each draw. 
          This behaviours allows to maximize the usage of each draws by the application. When each draw is associated with a specific mesh, for a specific frame a lot of draws will be useless for the rendering. 
          This bahaviours wouldn't matter if discarding a draw was particularly efficient but it isn't on both Kepler and Southern Islands architechtures. 
          By being able to assign a specific DrawID to each draw we can assign a specific mesh for each draw allowing to build the needed list of meshes for each draw.
      </paragraph>
      <code title="Content of the DrawID buffer for three draws">
          <line>
              GLsizei const DrawDataCount(3);
          </line>
          <line>
              GLsizeiptr const DrawSize = DrawDataCount * sizeof(glm::uint);
          </line>
          <line>
              glm::uint const DrawIDData[DrawDataCount] = {
          </line>
          <line align="32px">
              76, 64, 321 <comment>Each value is the identifier of a specific mesh.</comment>
          </line>
          <line>
              };
          </line>
      </code>
      <paragraph>
        This DrawID gives an interesting fonctional quality to the multi draw indirect approach however adding an application specific semantic could increase the flexibility and even the change the application performance balance. 
        This DrawID is useful because it allows indexing ressources in the shader. Typically, we would like to use it to index material in the fragment shader stage. 
        We can even imagine that multiple ressources will be indexed thanks this this DrawID. 
        Hence, we need an indirection table that per draw and this table will be embodied by a uniform block which stores indexes to access each ressources per draw. 
        Unfortunately indirections imply latences which cost performances... 
      </paragraph>

    <paragraph>
      A possible improvement for this DrawID is to add to itself some semantics to skip one level of indirection. 
      Hence, we can create multiple DrawIDs using both a divisor equal to 1 and <codeword>BaseInstance</codeword> and call them "MaterialID", "VertexFormatID" or whatever an OpenGL application needs.
    </paragraph>

    <paragraph>
      A scenario with multi draw indirect is to pack multiple meshes of different objects into a single set of buffers and manually fetch each vertex for each draw so that each draw can have different vertex format. 
      One tricky issue with this approach is that each the <codeword>BaseVertex</codeword> and the <codeword>BaseInstance</codeword> parameters are not exposed into the vertex shader stage as input variable. 
      Using the divisor equal to 1 and BaseInstance is also an approach to expose these variables in the vertex shader stage. People used to ridiculously optimized code (If you do VHDL you will understand me !:p)
      could even naturally pack the <codeword>BaseVertex</codeword> and the <codeword>VertexFormat</codeword> ids into a single integer by allocating a part bits for <codeword>BaseVertex</codeword> and the rest to <codeword>VertexFormat</codeword>
      relying on the limitations given by <codeword>GL_MAX_SHADER_STORAGE_BLOCK_SIZE</codeword> and <codeword>GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT</codeword>.
    </paragraph>

    <paragraph>
      The divisor by 1 and <codeword>BaseInstance</codeword> method provides a lot of opportunities to the multi draw indirect approach.
      However, we can question the problem of optimal performances. Even if a single value for a vertex attribute is fetched for all the vertex invocations of a draw,
      there are little reasons to think that this value won't be fetched each time for each vertex shader invocations.
      Chances are that the latency and bandwidth impact will be small as we can expect a good cache reuse hoping that many vertex shader invocations will be triggered at the same time.
    </paragraph>

    <paragraph>
      A question remains, how fast an automatically increased <codeword>gl_DrawID</codeword> would be compare to the proposed solution? 
      No immediate bandwidth and latency impact but this approach would require an indirection table (uniform block) to identify which actual ressource to access which may not do a better cache reuse than the divisor.
      Another approach would be to add another draw parameter alongside with <codeword>BaseVertex</codeword> and <codeword>BaseInstance</codeword> where the user could set its own value for the DrawID parameter. 
      We could even imagine multiple of those parameters. However, what garantee us that those parameters would not have to be fetched for each vertex shader invocation? 
      As a result, this approach could perform equally than using vertex attribute with divisors.
    </paragraph>

    <list name="Per draw indexing perspectives:">
      <list-element>Vertex attributes with divisor equal to one and base instance to set a specific value to this attribute. (OpenGL 4.3)</list-element>
      <list-element>A gl_DrawID automatically increased by GPUs command processor with a resource indirection table/uniform block. (Sci-Fi)</list-element>
      <list-element>Per-draw draw parameters stored in a command processor cache that would be accessible by shader invocations and pre-fetched. (Heroic Fantasy)</list-element>
    </list>

    <paragraph>
      A sample showing the usage of multi draw indirect is available in the OpenGL Samples Pack 4.3.
    </paragraph>

    <source-download index="1117" />
  </post>

  <post index="0517" date="13/11/2012" std-date="2012-11-13T19:00:00.00Z" title="Week 43 photograph: Freedom">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-43-960.jpg"
      href="./photo/2012-43.jpg" />
  </post>

  <post index="0516" date="04/11/2012" std-date="2012-11-04T00:30:00.00Z" title="GL_AMD_sparse_texture comments">
        <meta>
            <tag>gtc-tech-opengl-tips</tag>
        </meta>
        
        <paragraph>
            We have heard of <link href="http://www.opengl.org/registry/specs/AMD/sparse_texture.txt">AMD_sparse_texture</link> for quite some time but finally the extension is available. It rose quite some excitement from OpenGL programmers: Having textures for which we can allocate and unallocate memory pages sounds great especially for virtual texturing where we need to address large amount of data. It handles case where wecan't espect that all the textures can fit entierely into graphics memory. Sparse texture allows sampling across texture pages without artefacts even with high anisotropic filtering.         </paragraph>
        
        <code title="Creating a sparse texture">
            <line>
                <comment>// Create a sparse texture</comment>
            </line>
            <line>
                glGenTextures(1, &amp;TextureName);
            </line>
            <line>
                glTextureStorageSparseAMD(TextureName, GL_TEXTURE_2D, 
            </line>
            <line align="32px">
                GL_RGBA8, <comment>// Internal format</comment>
            </line>
            <line align="32px">
                16384, 16384, 1,<comment>// width, height, depth</comment>
            </line>
            <line align="32px">
                1, // layers
            </line>
            <line align="32px">
                GL_TEXTURE_STORAGE_SPARSE_BIT_AMD); // Handle the texture as a sparse texture. (Not a hint)
            </line>
            <line>
            </line>
            <line>
                <comment>// Allocate the texture pages of the sparse texture</comment>
            </line>
            <line align="0px">
                <keyword>for</keyword>(std::size_t i = 0; i &lt; n; ++i)
            </line>
            <line align="0px">
                {
            </line>
            <line align="32px">
                ...
            </line>
            <line align="32px">
                glTextureSubImage2DEXT( <comment>// Using the classic texture sub image function.</comment>
            </line>
            <line align="64px">
              TextureName, GL_TEXTURE_2D,
            </line>
            <line align="64px">
              GLint(Level),
            </line>
            <line align="64px">
              GLint(Position.x), GLint(Position.y),
            </line>
            <line align="64px">
              GLsizei(Size.x), GLsizei(Size.y),
            </line>
            <line align="64px">
              GL_RGBA, GL_UNSIGNED_BYTE, Texture[0].data());
            </line>
            <line align="0px">
                }
            </line>
        </code>
        
        <paragraph>
                Texture pages can be deleted using the same <codeword>glTextureSubImage2DEXT</codeword> function but passing NULL for the data.
            This behavours highlight a design issue with this extension which prevents allocating a texture page without passing data to fill the texture pages.
            A workaround to reduce the performance impact is to source a pack buffer object, reading (even garbage) from GPU memory instead of through the PCI express bus.
        </paragraph>
        
        <paragraph>
            The texture page size must be multiple of the value returned by the GL_VIRTUAL_PAGE_SIZE_[X,Y,Z]_AMD queries.
        </paragraph>
        
        <code title="Query texture page sizes">
            <line>
                GLint PageSizeX(0), PageSizeY(0), PageSizeZ(0);
            </line>
            <line>
                glGetInternalformativ(GL_TEXTURE_2D, GL_RGBA8, GL_VIRTUAL_PAGE_SIZE_X_AMD, 1, &amp;PageSizeX);
            </line>
            <line>
                glGetInternalformativ(GL_TEXTURE_2D, GL_RGBA8, GL_VIRTUAL_PAGE_SIZE_Y_AMD, 1, &amp;PageSizeY);
            </line>
            <line>
                glGetInternalformativ(GL_TEXTURE_2D, GL_RGBA8, GL_VIRTUAL_PAGE_SIZE_Z_AMD, 1, &amp;PageSizeZ);
            </line>
        </code>
        
        <paragraph>
            In practice the texture page memory size must be a multiple a 64 KB so that if the texture internal format store large texels (RGBA32F = 16 bytes per texels), the number of texels per page will be reduced only bound by the 64 KB memory size. Hence, the texture page dimensions for a RGBA32F texture is 64 by 64 texels. For a DXT1/BC1 texture, a texel is encoded with 4 bits which results in a mimimum of 256 by 256 texels per texture page.
        </paragraph>
        
        <paragraph>
            Sparse textures can be used for texture 2d, texture 2d array and texture 3d. Unfortunately, on Southern Islands GPUs, the texture pages dimensions are always the same shape, flat 2D slices even for texture 3d. An application (<link href="http://realtimevoxels.blogspot.fr/">global illumiation with sparse voxel octrees</link>) could take advantage of 3d texture pages (dices instead of slices) for texture 3d, unfortunately this shape reflects the texture 3d layout of Southern Islands GPUs <link href="http://en.wikipedia.org/wiki/Z-order">memory layout</link>.
        </paragraph>
        
        <paragraph>
            On the GLSL size, the usual texture sampling language can be used to sample a sparse texture. However, in some cases it can be useful to sample in area where no texture pages have been allocated. For this, <link href="http://www.opengl.org/registry/specs/AMD/sparse_texture.txt">AMD_sparse_texture</link> provides some new GLSL functions that return a code qualified the result of the sampling. 
        </paragraph>
        
        <code title="New GLSL functions returning a code:">
            <line>
                <keyword>#version</keyword> 420 core
            </line>
            <line>
                <keyword>#extension</keyword> AMD_sparse_texture : require
            </line>
            <line>
            </line>
            <line>
                <keyword>layout</keyword>(<keyword>binding</keyword> = DIFFUSE) <keyword>uniform sampler2D</keyword> Diffuse;
            </line>
            <line>
                ...
            </line>
            <line>
                
            </line>
            <line>
                <keyword>void</keyword> main() {
            </line>
            <line align="32px">
                <keyword>vec4</keyword> Color;
            </line>
            <line align="32px">
                <keyword>int</keyword> Code = sparseTexture(Diffuse, Texcoord, Color);
            </line>
            <line align="32px">
                <comment>// Did we fetch somewhere all the texels are resident?</comment>
            </line>
            <line align="32px">
                <keyword>bool</keyword> Resident = sparseTexelResident(Code);
            </line>
            <line align="32px">
                <comment>// Do we need a texel from any LOD lower than the user specified LOD warning threshold?</comment>
            </line>
            <line align="32px">
                <keyword>bool</keyword> MinLodWarning = sparseTexelMinLodWarning(Code);
            </line>
                <comment>// What level was it?</comment>
            <line align="32px">
                <keyword>int</keyword> LodWarningFetch = sparseTexelLodWarningFetch(Code);
            </line>
            <line align="32px">
                ...
            </line>
            <line>
                }
            </line>
        </code>
        
        <paragraph>
                It is also possible to do rendering to sparse framebuffer but unfortunately not to depth textures. Supporting depth textures could make high resolution shadow mapping a lot easier and particularly memory efficient.
        </paragraph>
        
        <paragraph>
            Even if this extension remains quite experimental from my opinion, it defines one of the key feature for post OpenGL 4 hardware. Considering that NVIDIA GPUs support some form of virtual memory system, I wouldn't be surprise to see them releasing an implementation with at least a subset of the functionnalities given by this extension. 
        </paragraph>
        
        <paragraph>
            Some people will argue that NVIDIA supports <link href="http://www.opengl.org/registry/specs/NV/bindless_texture.txt">bindless textures</link> and hence NVIDIA doesn't need sparse textures. This is either a misleading argument, a misunderstanding of the features or simply a marketing lie. Bindless textures are great but bindless and sparse textures are simply complementary features. Bindless textures allows an unlimited number of textures while sparse textures ensure filtering between texture pages. We need both!
        </paragraph>
    </post>

  <post index="0515" date="02/11/2012" std-date="2012-11-02T00:30:00.00Z" title="Week 42 photograph: The crush of a sunset's dying blush">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-42-960.jpg"
      href="./photo/2012-42.jpg" />
  </post>
  
    <post index="0514" date="01/11/2012" std-date="2012-11-01T23:30:00.00Z" title="October 2012 OpenGL drivers status">
        <meta>
            <tag>gtc-tech-project-openglstatus</tag>
        </meta>
        
        <paragraph>
            This month we are testing <link href="http://www.guru3d.com/files_details/amd_catalyst_12_11_beta_download.html">Catalyst 12.11 beta 4 (9.10.8)</link> and <link href="http://www.guru3d.com/files_details/geforce_310_33_beta_driver_download.html">Forceware 310.33</link>.
        </paragraph>
        
        <paragraph>
            No sign yet from AMD OpenGL 4.3 implementation. On NVIDIA side the debug output implementation has been improved regarding the texture information.
            Unfortunately, there is an issue with it and a warning is reported as an error. The KHR_debug implemenation has progressed but the object labels are not used within debug messages.
        </paragraph>
        
        <paragraph>
            In ForceWare 310.33, NVIDIA exposes a new extension called <link href="http://www.opengl.org/registry/specs/NV/draw_texture.txt">NV_draw_texture</link> for image space rendering. It could be an interesting extension but the design is very limitating as no fragment shader can we used for with this command reducing the functionnalities of this extension to something close to texture blitting... 
        </paragraph>
        
        <title>The test</title>
        
        <list name="Drivers test results nomenclature:">
            <list-element>White: Unsupported or untested.</list-element>
            <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
            <list-element>Green: The sample works following the OpenGL specification.</list-element>
            <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
            <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
            <list-element>Black: Really distubing problem!</list-element>
        </list>
        
        <paragraph>
            Once again, don't forget to contribute to the OpenGL community by <link href="post-0430.html#menu">reporting your bugs</link>!
        </paragraph>
        
        <table>
            <table-title>
                <table-title-element class="sample-name">OpenGL Samples Pack 4.3.0.3, OpenGL specification tests</table-title-element>
                <table-title-element>AMD Catalyst 12.9 beta, 9.01 (26/09/2012)</table-title-element>
                <table-title-element>AMD Catalyst 12.11 beta 4, 9.10.8 (23/10/2012)</table-title-element>
                <table-title-element>NVIDIA Forceware 306.63 (26/09/2012)</table-title-element>
                <table-title-element>NVIDIA Forceware 310.33 (24/10/2012)</table-title-element>
            </table-title>
            <table-entry>
                <table-entry-element>430-texture-view</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-texture-storage</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-texture-query</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-texture-copy</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-texture-buffer</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-program-subroutine</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-program-compute</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="orange">readonly and writeonly qualifiers generates parsing errors</table-entry-element>
                <table-entry-element color="orange">readonly and writeonly qualifiers generates parsing errors</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-program-compute-image</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-multi-draw-indirect</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-interface-matching</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="orange">dvec4 vertex input generates an error: "unknown opcode modifier"</table-entry-element>
                <table-entry-element color="orange">dvec4 vertex input generates an error: "unknown opcode modifier"</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-image-store</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="orange">coherent qualifier on image2D result in a parsing error.</table-entry-element>
                <table-entry-element color="orange">coherent qualifier on image2D result in a parsing error.</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-image-sampling</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-draw-without-vertex-attrib</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-debug</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="orange">Object labels not used in the debug output log.</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>430-atomic-counter</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            
            <table-entry>
                <table-entry-element>420-transform-feedback-instanced</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-texture-storage</table-entry-element>
                <table-entry-element color="orange">Allows an implicit cast on texture coordinates parameter</table-entry-element>
                <table-entry-element color="orange">Allows an implicit cast on texture coordinates parameter</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-texture-pixel-store</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-texture-conversion</table-entry-element>
                <table-entry-element color="white">BPTC online conversions is not/won't be supported</table-entry-element>
                <table-entry-element color="white">BPTC online conversions is not/won't be supported</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-texture-compressed</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-test-depth-conservative</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-sampler-fetch</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-picking</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-memory-barrier</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-interface-matching</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="red">Structure for vertex inputs supported</table-entry-element>
                <table-entry-element color="red">Doesn't detect varying mismatch. Structure for vertex inputs supported</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-image-unpack</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-image-store</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-image-load</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-fbo</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-draw-base-instance</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-direct-state-access-ext</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-debug-output</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-buffer-uniform</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-atomic-counter</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>410-program-separate</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="orange">The implementation doesn't return an error when a built-in block isn't declared</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>410-program-binary</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>410-program-64</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>410-primitive-tessellation-5</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>410-primitive-tessellation-2</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>410-primitive-instanced</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>410-fbo-layered</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>400-transform-feedback-stream</table-entry-element>
                <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
                <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
                <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
                <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>400-transform-feedback-object</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
                <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>400-subroutine</table-entry-element>
                <table-entry-element color="red">Unable to call directly a subroutine</table-entry-element>
                <table-entry-element color="red">Unable to call directly a subroutine</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>330-texture-format</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
                <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>330-texture-array</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>330-primitive-point-sprite</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="blue">Pop free clipping</table-entry-element>
                <table-entry-element color="blue">Pop free clipping</table-entry-element>
            </table-entry>
          <table-entry>
            <table-entry-element>330-fbo-multisample-explicit</table-entry-element>
            <table-entry-element color="green"></table-entry-element>
            <table-entry-element color="green"></table-entry-element>
            <table-entry-element color="green"></table-entry-element>
            <table-entry-element color="red">GL_INVALID_VALUE error generated. Texture 0 had no mipmaps, while it's min filter requires mipmap.
            </table-entry-element>
          </table-entry>
        </table>
        
        <table>
            <table-title>
                <table-title-element class="sample-name">OpenGL Samples Pack 4.3.0.3, proprietary features</table-title-element>
                <table-title-element>AMD Catalyst 12.9 beta, 9.01 (26/09/2012)</table-title-element>
                <table-title-element>AMD Catalyst 12.11 beta 4, 9.10.8 (23/10/2012)</table-title-element>
                <table-title-element>NVIDIA Forceware 306.63 (26/09/2012)</table-title-element>
                <table-title-element>NVIDIA Forceware 310.33 (24/10/2012)</table-title-element>
            </table-title>
            <table-entry>
                <table-entry-element>430-direct-state-access-ext</table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-texture-sparse-amd</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="white">AMD_sparse_texture not supported</table-entry-element>
                <table-entry-element color="white">AMD_sparse_texture not supported</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-texture-bindless-nv</table-entry-element>
                <table-entry-element color="white">NV_bindless_texture not supported</table-entry-element>
                <table-entry-element color="white">NV_bindless_texture not supported</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-test-depth-clamp-separate-amd</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="white">AMD_depth _clamp_separate not supported</table-entry-element>
                <table-entry-element color="white">AMD_depth _clamp_separate not supported</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-primitive-bindless-nv</table-entry-element>
                <table-entry-element color="white">NV_shader _buffer_load not supported</table-entry-element>
                <table-entry-element color="white">NV_shader _buffer_load not supported</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-fbo-srgb-decode-ext</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="red">GL_INVALID_VALUE error generated. Texture 0 had no mipmaps, while it's min filter requires mipmap. </table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-fbo-multisample-position-amd</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="white">AMD_sample _positions not supported</table-entry-element>
                <table-entry-element color="white">AMD_sample _positions not supported</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-fbo-layered-amd</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="white">AMD_vertex _shader_layer and AMD_vertex_shader _viewport_index not supported</table-entry-element>
                <table-entry-element color="white">AMD_vertex _shader_layer and AMD_vertex_shader _viewport_index not supported</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-fbo-multisample-dsa-nv</table-entry-element>
                <table-entry-element color="white">NV_texture _multisample not supported</table-entry-element>
                <table-entry-element color="white">NV_texture _multisample not supported</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="red">GL_INVALID_VALUE error generated. Texture 0 had no mipmaps, while
                    it's min filter requires mipmap.</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-buffer-pinned-amd</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="white">AMD_pinned _memory not supported</table-entry-element>
                <table-entry-element color="white">AMD_pinned _memory not supported</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-buffer-barrier-gtc</table-entry-element>
                <table-entry-element color="blue">Works as desired</table-entry-element>
                <table-entry-element color="blue">Works as desired</table-entry-element>
                <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
                <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>420-blend-op-amd</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
                <table-entry-element color="white"></table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>330-fbo-multisample-explicit-nv</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="red">GL_INVALID_VALUE error generated. Texture 0 had no mipmaps, while
                    it's min filter requires mipmap.</table-entry-element>
            </table-entry>
            <table-entry>
                <table-entry-element>es-200-draw-elements-ext</table-entry-element>
                <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
                <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
                <table-entry-element color="green"></table-entry-element>
                <table-entry-element color="green"></table-entry-element>
            </table-entry>
        </table>
        
        <source-list>
            <source-download index="1117" />
            <source-element type="Link" href="https://github.com/g-truc/ogl-samples/tree/4.3.0" title="OpenGL Samples Pack 4.3.0 branch snapshot" />
        </source-list>
    </post>

  <post index="0513" date="31/10/2012" std-date="2012-10-31T14:00:00.00Z" title="OpenGL Samples Pack 4.3.0.3 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack 4.3.0.3 adds few samples: 430-program-compute-image, 430-debug, 420-texture-sparse-amd, 420-texture-bindless-nv and updating 430-multi-draw-indirect to illustrate how to identify each draws.
    </paragraph>

    <source-list>
      <source-download index="1117" />
      <source-element type="Link" href="https://github.com/g-truc/ogl-samples/issues" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0512" date="28/10/2012" std-date="2012-10-28T16:00:00.00Z" title="10th Anniversary contest: and the winner is...">
        <meta>
            <tag>gtc-tech-opengl-tips</tag>
        </meta>
        <paragraph>
            Congratulation to <bold>Wilhansen Li</bold> who answered all the questions correctly and won a copy of <link href="http://openglinsights.com/">OpenGL Insights</link>! Here is the answers with some details.
        </paragraph>
        
        <subtitle>What shader stages are available?</subtitle>
        <paragraph>
            Vertex shader, Tessellation Control Shader, Tessellation Evaluation Shader, Geometry Shader, Fragment Shader, Compute Shader.
        </paragraph>
        
        <subtitle>What's the minimum maximum number of uniform blocks we can use simultanously?</subtitle>
        <paragraph>
            14 blocks per stage. This limits has been raised with OpenGL 4.3 from 12 to 14 and is given by querying <codeword>GL_MAX_VERTEX_UNIFORM_BLOCKS</codeword>, <codeword>GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS</codeword>, <codeword>GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS</codeword>, <codeword>GL_MAX_GEOMETRY_UNIFORM_BLOCKS</codeword>, <codeword>GL_MAX_GEOMETRY_UNIFORM_BLOCKS</codeword> and <codeword>GL_MAX_COMPUTE_UNIFORM_BLOCKS</codeword>.
            
            In practice, AMD implementation supports 15 blocks per stage, Intel implementation supports 12 blocks per stage and NVIDIA implementation supports 14 blocks per stage.
        </paragraph>
        
        <subtitle>What's the minimum maximum size for a uniform block?</subtitle>
        <paragraph>
            The minimum maximum size for a uniform block is given by the <codeword>GL_MAX_UNIFORM_BLOCK_SIZE</codeword> query. OpenGL 4.3 set this minimum to 16384 bytes. This limit remains the same as the one set when the <link href="http://www.opengl.org/registry/specs/ARB/uniform_buffer_object.txt">GL_ARB_uniform_buffer_object</link>
            was introduce as part of OpenGL 3.1 specification. In practice, AMD and NVIDIA implementation support 65536 bytes for this limit but Intel implementation is limited to 16384 bytes.
        </paragraph>
        
        <subtitle>What ressources can only be indexed with dynamically uniform expressions?</subtitle>
        <paragraph>
            Dynamically uniform expressions restrict the access to ressources within a shader stage set of invocations, that is to say within a work group. Every ressources are evolved: textures, images, atomic counter buffer, uniform blocks and shader storage buffers. This is both true for indexing arrays of these resources and selecting ressources through if statements. For example, it is not legal to use a built-in variable that evolves for each shader invocation to index ressources. However, this index might be used to index ressources in a subsequent shader stage where all the shader invocations per work group will access the same ressources.
        </paragraph>
        
        <code title="Illegal indexing of uniform blocks:">
            <line>
                <comment>// --- Vertex Shader ---</comment>
            </line>
            <line>
            </line>
            <line>
                <keyword>layout</keyword>(<keyword>binding</keyword> = INSTANCES) <keyword>uniform</keyword> perInstance {
            </line>
            <line align="32px">
                    ...
            </line>
            <line>
                } Instance[MAX_INSTANCE_COUNT];
            </line>
            <line>
            </line>
            <line>
                <keyword>void</keyword> main() {
            </line>
            <line align="32px">
                ...
            </line>
            <line align="32px">
                <comment>// /!\ Any indexing of ressources, no error but the rendering result is undefined. /!\</comment>
            </line>
            <line align="32px">
                <keyword>mat4</keyword> Transform = Instance[gl_InstanceID].Transform;
            </line>
            <line align="32px">
                ...
            </line>
            <line>
                }
            </line>
        </code>
  
        <code title="Illegal ressource selection of uniform blocks:">
            <line>
                <comment>// --- Vertex Shader ---</comment>
            </line>
            <line>
            </line>
            <line>
                <keyword>layout</keyword>(<keyword>binding</keyword> = LOW_QUALITY_LOD) <keyword>uniform</keyword> lowQuality {
            </line>
            <line align="32px">
                ...
            </line>
            <line>
                } LowQuality;
            </line>
            <line>
            </line>
            <line>
                <keyword>layout</keyword>(<keyword>binding</keyword> = HIGH_QUALITY_LOD) <keyword>uniform</keyword> highQuality {
            </line>
            <line align="32px">
                ...
            </line>
            <line>
            </line>
            <line>
                } HighQuality;
            </line>
            <line>
                <keyword>vec4</keyword> highQualityTransform() {
            </line>
            <line align="32px">
                ... <comment>// Access HighQuality block</comment>
            </line>
            <line>
                }
            </line>
            <line>
            </line>
            <line>
                <keyword>vec4</keyword> lowQualityTransform() {
            </line>
            <line align="32px">
                ... <comment>// Access LowQuality block</comment>
            </line>
            <line>
                }
            </line>
            <line>
            </line>
            <line>
                <keyword>void</keyword> main() {
            </line>
            <line align="32px">
                if(isObjectCloseToCamera())
            </line>
            <line align="64px">
                    gl_Position = highQualityTransform();
            </line>
            <line align="32px">
                else
            </line>
            <line align="64px">
                    gl_Position = lowQualityTransform();
            </line>
            <line align="32px">
                ...
            </line>
            <line>
                }
            </line>
        </code>
        
        <subtitle>How to ensure that an OpenGL implementation will be able to build GLSL shaders in parallels?</subtitle>
        <paragraph>
            Single core CPU performances haven't significantly evolve for years now so that it's important to take advantge of the multi core architechture to ensure that shader compilation will be as fast as possible which is especially important for large application building thousand of shaders. For this it is extremely simple that the application only need to issue all the compilation commands before querying the individual compilation results.
        </paragraph>
        
        <code title="Single CPU core shader compilation:">
            <line>
                for(std::size_t i = 0; i &lt; n; ++n) {
            </line>
            <line align="32px">
                ...
            </line>
            <line align="32px">
                GLuint Name = glCreateShader(Type);
            </line>
            <line align="32px">
                glShaderSource(Name, 1, &amp;Source, NULL);
            </line>
            <line align="32px">
                glCompileShader(Name);
            </line>
            <line>
                
            </line>
            <line align="32px">
                GLint Result = GL_FALSE;
            </line>
            <line align="32px">
                glGetShaderiv(Name, GL_COMPILE_STATUS, &amp;Result);
            </line>
            <line align="32px">
                ...
            </line>
            <line>
                }
            </line>
        </code>
        
        <code title="Multiple CPU core shader compilation:">
            <line>
                for(std::size_t i = 0; i &lt; n; ++n) {
            </line>
            <line align="32px">
                ...
            </line>
            <line align="32px">
                GLuint Name = glCreateShader(Type);
            </line>
            <line align="32px">
                glShaderSource(Name, 1, &amp;Source, NULL);
            </line>
            <line align="32px">
                glCompileShader(Name);
            </line>
            <line>
                }
            </line>
            <line>
                
            </line>
            <line>
                for(std::size_t i = 0; i &lt; n; ++n) {
            </line>
            <line align="32px">
                ...
            </line>
            <line align="32px">
                GLint Result = GL_FALSE;
            </line>
            <line align="32px">
                glGetShaderiv(ShaderName, GL_COMPILE_STATUS, &amp;Result);
            </line>
            <line align="32px">
                ...
            </line>
            <line>
                }
            </line>
            <line>
                
            </line>
        </code>
    </post>

  <post index="0511" date="27/10/2012" std-date="2012-10-27T23:00:00.00Z" title="Week 41 photograph: Filling the stomach of roving seals">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-41-960.jpg"
      href="./photo/2012-41.jpg" />
  </post>

  <post index="0510" date="23/10/2012" std-date="2012-10-23T23:00:00.00Z" title="Week 40 photograph: The real and its double">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-40-960.jpg"
      href="./photo/2012-40.jpg" />
  </post>
    
  <post index="0509" date="20/10/2012" std-date="2012-10-20T16:00:00.00Z" title="10th Anniversary: win a copy of OpenGL Insights">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      To celebrate G-truc Creation 10th Anniversary, I propose a contest to win a copy of <link href="http://openglinsights.com">OpenGL Insights</link>. For this, answer to the following questions in <link href="mailto:mail@g-truc.net">an email</link>. 
      A winner will be randomly selected from those submitting the best answers.
    </paragraph>

    <list name="With OpenGL 4.3...">
      <list-element>What shader stages are available?</list-element>
      <list-element>What's the minimum maximum number of uniform blocks we can use simultanously?</list-element>
      <list-element>What's the minimum maximum size for a uniform block?</list-element>
      <list-element>What ressources can only be indexed with dynamically uniform expressions?</list-element>
      <list-element>How to ensure that an OpenGL implementation will be able to build GLSL shaders in parallels?</list-element>
    </list>

    <paragraph>
      Submissions are running until Sunday 28 October, good luck!
    </paragraph>
  </post>

  <post index="0508" date="20/10/2012" std-date="2012-10-20T11:00:00.00Z" title="G-Truc Creation, 10 years old today!">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      Aniversaries are not an information which makes me typically not really keen to celebrate them. 10 years, I thought I could make an effort.
    </paragraph>

    <paragraph>
      After my very first real scale programming experience on <link href="project-0002.html">WormsHL</link> 
      (<link href="http://www.dailymotion.com/video/x2acqi_wormshl-teaser-beta-2-0_videogames">video</link>), an Half-Life modification, I had the desire to discover, learn, do and share more.
      Somehow, I was inspired by Micheal Abrash's <link href="http://www.amazon.com/Michael-Abrashs-Graphics-Programming-Special/dp/1576101746">Black book</link> maybe less by the content than the reasonning approach around the content. 
      This leaded me to explore the code of <link href="project-0003.html">Quake 2</link> and wrote my first OpenGL experiment, a <link href="project-0004.html">particle effect</link> that I still find somewhat pretty... 
      With WormsHL, we used to have website and actually each "modification" had its website so I guess I didn't really thought of it, I just made a website: <link href="project-0005.html#menu">G-Truc Creation</link> was born.
    </paragraph>

    <paragraph>
      Why this name "G-Truc Creation"? Let say that I have never been driven by a sense of rationnality as I am more focus doing "stuff", which is the direct translation for the French word "Truc". 
      Associated with the first letter of my username that gave me the name of my first ever program, "G-Truc", written in <link href="http://en.wikipedia.org/wiki/GW-BASIC">GW Basic</link> about five years before. 
      I gave more thought to "Creation". It's the symbol of what actually matters when we write code. 
    </paragraph>

    <paragraph>
      10 years later "stuff" have been accumulate here and I have lost really a few thanks to my use of XML files for my data. G-Truc Creation remains the only website that requires to be built to be updated! 
      Very basic but afterall, the content mostly survive thanks to this process. Unfortunately, some issues from the beginning remains: It's impossible to find anything on G-Truc Creation without using Google!
    </paragraph>

    <paragraph>
      This is my space of freedom which evolve to become mostly an OpenGL space with few projects that became somewhat useful for the community: 
      <link href="http://glm.g-truc.net">GLM</link> and <link href="https://github.com/g-truc">The OpenGL Samples Pack</link>. 
      I really hope that in the future that I will be able to build a good image library for OpenGL. So far <link href="https://github.com/g-truc/gli">GLI</link> remains behind this goal but hope remains as
      this is the code I am working on the most these days on my personal time and version 4 is promissing: 
      Nearly 50x better performance for loading texture in VC debug build, About 50% better performance in release mode; zero copy and copy on write; support of all texture targets (3D, 2D Arrays, cube maps) throught DDS files.
    </paragraph>

    <paragraph>
      G-Truc Creation is a set of projects but also some writing mainly <link href="http://www.g-truc.net/project-0032.html#menu">OpenGL specification reviews</link> but also what I call tips: 
      <link href="http://www.g-truc.net/post-0263.html#menu">Using sRGB color space with OpenGL</link>, 
      <link href="http://www.g-truc.net/post-0335.html#menu">Texture compression formats: lost in translation</link>, 
      <link href="http://www.g-truc.net/post-0340.html#menu">First look at BPTC (BC7) texture compression format</link>,
      <link href="http://www.g-truc.net/post-0256.html#menu">Generate mipmaps</link>.
    </paragraph>

    <paragraph>
      Finally, G-Truc Creation gave me the opportunity to work on <link href="http://openglinsights.com">OpenGL Insights</link>! I can't wait to start working on the next one.
    </paragraph>

    <paragraph>
      I hope you will continue to enjoy G-Truc Creation and if this website has anyhow helped you to contribute to the OpenGL community, it met its purpose.
    </paragraph>

    <image title="First ever record of G-Truc Creation"
        color="white"
        img="./post/0508-small.png"
        href="./post/0508.png" />
  </post>

  <post index="0507" date="19/10/2012" std-date="2012-10-19T02:00:00.00Z" title="Week 39 photograph: Midnight hike">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-39-960.jpg"
      href="./photo/2012-39.jpg" />
  </post>

  <post index="0506" date="13/10/2012" std-date="2012-10-13T17:00:00.00Z" title="Week 38 photograph: Rye legacy">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-38-960.jpg"
      href="./photo/2012-38.jpg" />
  </post>

  <post index="0505" date="08/10/2012" std-date="2012-10-08T23:30:00.00Z" title="Week 37 photograph: 500m">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-37-960.jpg"
      href="./photo/2012-37.jpg" />
  </post>

  <post index="0504" date="30/09/2012" std-date="2012-09-30T23:30:00.00Z" title="September 2012 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      With the release of OpenGL 4.3 at Siggraph, NVIDIA as released an OpenGL 4.3 drivers (<link href="http://www.guru3d.com/files_details/nvidia_geforce_306_63_vista_and_7_64_bit_download.html">Forceware 306.63</link>).
      This gives us an opportunity to try out the new samples of the <link href="https://github.com/g-truc/ogl-samples/tree/4.3.0.2">OpenGL Samples Pack 4.3.0.2</link>.
      For the AMD side, we will use the  <link href="http://www.guru3d.com/files_details/amd_catalyst_12_9_beta_64_bit_download.html">Catalyst 12.9 (9.01)</link>.
    </paragraph>

    <paragraph>
      No change for AMD drivers. On the NVIDIA side, the OpenGL 4.3 implementation is encouraging even if I didn't have time to explore it
      too much and I had to use workarounds so that samples could pass.
      I also encountered quite few issues on the GLSL compiler with not too obvious error messages.
    </paragraph>
    
    <paragraph>
      This month I was expecting a lot of improvements for the OpenGL 4.3 NVIDIA drivers but even if I have not doubt they have been improved, none of the tests reflect this idea. On the AMD side all the TDRs have been fixed and many fixes applied in the meantime, great month for AMD! Unfortunately still no sign of OpenGL 4.3 drivers...
    </paragraph>

    <title>ERRATA</title>

    <paragraph>
      Catalyst 12.9 beta supports <link href="http://www.opengl.org/registry/specs/EXT/texture_sRGB_decode.txt">EXT_texture_sRGB_decode</link>.
    </paragraph>

    <title>The test</title>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <paragraph>
      Once again, don't forget to contribute to the OpenGL community by <link href="post-0430.html#menu">reporting your bugs</link>!
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.3.0.2, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 12.8, 8.982 (15/08/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.9 beta, 9.01 (26/09/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 305.53 (06/08/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 306.63 (26/09/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>430-texture-view</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-texture-copy</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-program-subroutine</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-program-compute</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">readonly and writeonly qualifiers generates parsing errors</table-entry-element>
        <table-entry-element color="orange">readonly and writeonly qualifiers generates parsing errors</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-multi-draw-indirect</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-interface-matching</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">dvec4 vertex input generates an error: "unknown opcode modifier"</table-entry-element>
        <table-entry-element color="orange">dvec4 vertex input generates an error: "unknown opcode modifier"</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-image-store</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">coherent qualifier on image2D result in a parsing error.</table-entry-element>
        <table-entry-element color="orange">coherent qualifier on image2D result in a parsing error.</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-image-sampling</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-draw-without-vertex-attrib</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-direct-state-access-ext</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-atomic-counter</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>

      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-conversion</table-entry-element>
        <table-entry-element color="white">BPTC online conversions is not/won't be supported</table-entry-element>
        <table-entry-element color="white">BPTC online conversions is not/won't be supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-picking</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-interface-matching</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. Structure for vertex inputs supported</table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. Structure for vertex inputs supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-store</table-entry-element>
        <table-entry-element color="orange">glClear is skipped for the first frame</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-debug-output</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">The implementation doesn't return an error when a built-in block isn't declared</table-entry-element>
        <table-entry-element color="orange">The implementation doesn't return an error when a built-in block isn't declared</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-format</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.3.0.2, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 12.8, 8.982 (15/08/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.9 beta, 9.01 (26/09/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 305.53 (06/08/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 306.63 (26/09/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-test-depth-clamp-separate-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_depth _clamp_separate not supported</table-entry-element>
        <table-entry-element color="white">AMD_depth _clamp_separate not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader _buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader _buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-srgb-decode-ext</table-entry-element>
        <table-entry-element color="white">EXT_texture _sRGB_decode not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-position-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sample _positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample _positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_vertex _shader_layer and AMD_vertex_shader _viewport_index not supported</table-entry-element>
        <table-entry-element color="white">AMD_vertex _shader_layer and AMD_vertex_shader _viewport_index not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture _multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture _multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-pinned-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_pinned _memory not supported</table-entry-element>
        <table-entry-element color="white">AMD_pinned _memory not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-barrier-gtc</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-blend-op-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample-explicit-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>es-200-draw-elements-ext</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1116" />
      <source-element type="Link" href="https://github.com/g-truc/ogl-samples/tree/4.3.0" title="OpenGL Samples Pack 4.3.0 branch snapshot" />
    </source-list>
  </post>

  <post index="0503" date="29/09/2012" std-date="2012-09-29T14:00:00.00Z" title="OpenGL Samples Pack 4.3.0.2 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack 4.3.0.2 is a revision fixing the 420-fbo-multisample-position-amd sample, improving 430-program-subroutine with subroutine indexing and 430-multi-draw-indirect with a DrawID for ressource indexing.
      This revision also modify the shader build infrastructure to ensure that the sample can rely on multithreaded compilation.
    </paragraph>

    <source-list>
      <source-download index="1116" />
      <source-element type="Link" href="https://github.com/Groovounet/ogl-samples/issues" title="Report a bug or submit a request"/>
    </source-list>
  </post>
  
  <post index="0502" date="29/09/2012" std-date="2012-09-29T14:30:00.00Z" title="Week 36 photograph: Strings">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-36-960.jpg"
      href="./photo/2012-36.jpg" />
  </post>

  <post index="0501" date="24/09/2012" std-date="2012-09-24T12:30:00.00Z" title="Week 35 photograph: Textures">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-35-960.jpg"
      href="./photo/2012-35.jpg" />
  </post>

  <post index="0500" date="19/09/2012" std-date="2012-09-19T23:30:00.00Z" title="Week 34 photograph: Domination and control">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-34-960.jpg"
      href="./photo/2012-34.jpg" />
  </post>

  <post index="0499" date="31/08/2012" std-date="2012-08-31T23:30:00.00Z" title="August 2012 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      With the release of OpenGL 4.3 at Siggraph, NVIDIA as released an OpenGL 4.3 drivers (<link href="http://developer.nvidia.com/opengl-driver">Forceware 305.53</link>). 
      This gives us an opportunity to try out the new samples of the <link href="https://github.com/Groovounet/ogl-samples/tree/4.3.0">OpenGL Samples Pack 4.3.0.1</link>.
      For the AMD side, we will use the  <link href="http://downloads.guru3d.com/AMD-Catalyst-12.8-WHQL-64-bit-download-2959.html">Catalyst 12.8 (8.982)</link>.
    </paragraph>

    <paragraph>
      No change for AMD drivers. On the NVIDIA side, the OpenGL 4.3 implementation is encouraging even if I didn't have time to explore it 
      too much and I had to use workarounds so that samples could pass. 
      I also encountered quite few issues on the GLSL compiler with not too obvious error messages.
    </paragraph>

    <title>The test</title>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <paragraph>
      Once again, don't forget to contribute to the OpenGL community by <link href="post-0430.html#menu">reporting your bugs</link>!
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.3.0.1, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 12.7 beta, 8.981 (27/06/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.8, 8.982 (15/08/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 304.48 (19/06/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 305.53 (06/08/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>430-texture-view</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-texture-copy</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-program-subroutine</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-program-compute</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">readonly and writeonly qualifiers generates parsing errors</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-multi-draw-indirect</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-interface-matching</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">dvec4 vertex input generates an error: "unknown opcode modifier"</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-image-store</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">coherent qualifier on image2D result in a parsing error.</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-image-sampling</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-draw-without-vertex-attrib</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-direct-state-access-ext</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>430-atomic-counter</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>

      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-conversion</table-entry-element>
        <table-entry-element color="white">BPTC online conversions is not/won't be supported</table-entry-element>
        <table-entry-element color="white">BPTC online conversions is not/won't be supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-picking</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-interface-matching</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. Structure for vertex inputs supported</table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. Structure for vertex inputs supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-store</table-entry-element>
        <table-entry-element color="orange">glClear is skipped for the first frame</table-entry-element>
        <table-entry-element color="orange">glClear is skipped for the first frame</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-debug-output</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">The implementation doesn't return an error when a built-in block isn't declared</table-entry-element>
        <table-entry-element color="orange">The implementation doesn't return an error when a built-in block isn't declared</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>t>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; declaration is required by the specification</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-format</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.3.0.1, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 12.7 beta, 8.981 (27/06/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.8, 8.982 (15/08/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 304.48 (19/06/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 305.53 (06/08/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-test-depth-clamp-separate-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_depth _clamp_separate not supported</table-entry-element>
        <table-entry-element color="white">AMD_depth _clamp_separate not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader _buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader _buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-srgb-decode-ext</table-entry-element>
        <table-entry-element color="white">EXT_texture _sRGB_decode not supported</table-entry-element>
        <table-entry-element color="white">EXT_texture _sRGB_decode not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-position-amd</table-entry-element>
        <table-entry-element color="red">glLinkProgram generates an invalid operation error</table-entry-element>
        <table-entry-element color="red">glLinkProgram generates an invalid operation error</table-entry-element>
        <table-entry-element color="white">AMD_sample _positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample _positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_vertex _shader_layer and AMD_vertex_shader _viewport_index not supported</table-entry-element>
        <table-entry-element color="white">AMD_vertex _shader_layer and AMD_vertex_shader _viewport_index not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture _multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture _multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-multi-draw-indirect-amd</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-pinned-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_pinned _memory not supported</table-entry-element>
        <table-entry-element color="white">AMD_pinned _memory not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-barrier-gtc</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-blend-op-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample-explicit-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>es-200-draw-elements-ext</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1115" />
      <source-element type="Link" href="https://github.com/Groovounet/ogl-samples/tree/4.3.0" title="OpenGL Samples Pack 4.3.0 branch snapshot" />
    </source-list>
  </post>

  <post index="0498" date="30/08/2012" std-date="2012-08-30T02:00:00.00Z" title="OpenGL Samples Pack 4.3.0.1 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack has been updated mainly fixing some new OpenGL 4.3 samples. The OpenGL Samples Pack now contains 123 samples including 11 dedicated OpenGL 4.3 samples.
    </paragraph>
    
    <source-list>
      <source-download index="1115" />
      <source-element type="Link" href="https://github.com/Groovounet/ogl-samples/issues" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0497" date="29/08/2012" std-date="2012-08-29T23:30:00.00Z" title="Week 33 photograph: Pleasure without a gradient up there">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-33-960.jpg"
      href="./photo/2012-33.jpg" />
  </post>

  <post index="0496" date="20/08/2012" std-date="2012-08-20T23:00:00.00Z" title="Week 32 photograph: The secret ingredient never last">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-32-960.jpg"
      href="./photo/2012-32.jpg" />
  </post>
  
  <post index="0495" date="12/08/2012" std-date="2012-08-12T20:30:00.00Z" title="OpenGL Samples Pack 4.3.0.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
    	  The OpenGL Samples Pack has been updated to introduce 9 OpenGL 4.3 samples. 
    </paragraph>

    <list name="New OpenGL 4.3 samples:">
      <list-element>430-atomic-counter</list-element>
      <list-element>430-direct-state-access-ext</list-element>
      <list-element>430-draw-without-vertex-attrib</list-element>
      <list-element>430-image-store</list-element>
      <list-element>430-interface-matching</list-element>
      <list-element>430-multi-draw-indirect</list-element>
      <list-element>430-program-compute</list-element>
      <list-element>430-texture-copy</list-element>
      <list-element>430-texture-view</list-element>
    </list>
    
    <paragraph>
      The coverage of the OpenGL 4.3 specification remains far from exostive and this package has only been tested on Windows.
      I used <link href="http://www.nvidia.com/content/devzone/opengl-driver-4.3.html">NVIDIA OpenGL 4.3 beta drivers</link>. 
      The support so far seems really at an early stage considering that the implementation is only capable to pass five out of the nine samples.
    </paragraph>
    <paragraph>
      This new package is for Windows only for the moment.
    </paragraph>

    <source-list>
      <source-download index="1114" />
      <source-element type="Link" href="https://github.com/Groovounet/ogl-samples/issues" title="Report a bug or submit a request"/>
      <source-download index="1113" />
    </source-list>
  </post>

  <post index="0494" date="06/08/2012" std-date="2012-08-06T12:00:00.00Z" title="OpenGL 4.3 review">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
      <tag>gtc-tech-project-openglreviews</tag>
    </meta>

    <paragraph>
      The <link href="http://www.khronos.org">Khronos Group</link> has released the OpenGL 4.3 at 
      <link href="http://www.siggraph.org/s2012/">Siggraph 2012</link>.
    </paragraph>
    
    <paragraph>
    	It might be a surprize for many but OpenGL 4.3 is a rather bigger release than expected, bringing to interesting perspective to the rendering pipeline.
    </paragraph>

    <list name="OpenGL 4.3 feature set:">
      <list-element href="http://www.opengl.org/registry/specs/ARB/arrays_of_arrays.txt">GL_ARB_arrays_of_arrays</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/clear_buffer_object.txt">GL_ARB_clear_buffer_object</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/compute_shader.txt">GL_ARB_compute_shader</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/copy_image.txt">GL_ARB_copy_image</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/ES3_compatibility.txt">GL_ARB_ES3_compatibility</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/explicit_uniform_location.txt">GL_ARB_explicit_uniform_location</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/fragment_layer_viewport.txt">GL_ARB_fragment_layer_viewport</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/framebuffer_no_attachments.txt">GL_ARB_framebuffer_no_attachments</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/internalformat_query2.txt">GL_ARB_internalformat_query2</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/invalidate_subdata.txt">GL_ARB_invalidate_subdata</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/multi_draw_indirect.txt">GL_ARB_multi_draw_indirect</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/program_interface_query.txt">GL_ARB_program_interface_query</list-element>
    	<list-element href="http://www.opengl.org/registry/specs/ARB/shader_image_size.txt">GL_ARB_shader_image_size</list-element>
        <list-element href="http://www.opengl.org/registry/specs/ARB/shader_storage_buffer_object.txt">GL_ARB_shader_storage_buffer_object</list-element>
        <list-element href="http://www.opengl.org/registry/specs/ARB/stencil_texturing.txt">GL_ARB_stencil_texturing</list-element>
        <list-element href="http://www.opengl.org/registry/specs/ARB/texture_buffer_range.txt">GL_ARB_texture_buffer_range</list-element>  
        <list-element href="http://www.opengl.org/registry/specs/ARB/texture_query_levels.txt">GL_ARB_texture_query_levels</list-element>  
        <list-element href="http://www.opengl.org/registry/specs/ARB/texture_storage_multisample.txt">GL_ARB_texture_storage_multisample</list-element>  
        <list-element href="http://www.opengl.org/registry/specs/ARB/texture_view.txt">GL_ARB_texture_view</list-element>  
        <list-element href="http://www.opengl.org/registry/specs/ARB/vertex_attrib_binding.txt">GL_ARB_vertex_attrib_binding</list-element>  
        <list-element href="http://www.opengl.org/registry/specs/KHR/debug.txt">GL_KHR_debug</list-element>  
    </list>

	<list name="New ARB extensions:">
      <list-element href="http://www.opengl.org/registry/specs/ARB/robust_buffer_access_behavior.txt">GL_ARB_robust_buffer_access_behavior</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/robustness_isolation.txt">GL_ARB_robustness_isolation</list-element>
	</list>

    <paragraph>
    	As it became customary, I wrote a review of the OpenGL 4.3 specification that I hope will help the community to move forward with it.
    </paragraph>
    <paragraph>
    	I have also started working on the OpenGL Samples Pack 4.3 with some help from Piers Daniell. 
    	The OpenGL 4.3 coverage is pretty small still but I hope to be able to expend it rapidly.
    </paragraph>

    <!--paragraph>
      NVIDIA has already announced their <link href="http://developer.nvidia.com/opengl-driver">OpenGL 4.2 drivers</link>, I am curious to see what my samples have to say about that.
    </paragraph-->

    <paragraph>
      More information and celebration at the <link href="http://www.khronos.org/news/events/siggraph-los-angeles-2012">OpenGL BOF and party</link>!
    </paragraph>

    <image
      color="white"
      img="./post/0414.png"
      href="./post/0414.png" />

    <source-list>
      <source-element type="Download" href="http://www.opengl.org/registry/doc/glspec43.core.20120806.withchanges.pdf" title="OpenGL 4.3 core specification" />
      <source-element type="Download" href="http://www.opengl.org/registry/doc/GLSLangSpec.4.30.6.pdf" title="GLSL 4.3 specification" />
      <source-download index="1113" />
    </source-list>
  </post>

  <post index="0493" date="02/08/2012" std-date="2012-08-02T23:00:00.00Z" title="Week 31 photograph: Island Mountain Glacier's ashes">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-31-960.jpg"
      href="./photo/2012-31.jpg" />
  </post>

  <post index="0492" date="01/08/2012" std-date="2012-08-01T15:30:00.00Z" title="Let's meet at Siggraph 2012">
    <meta>
      <tag>gtc-tech-project-openglinsights</tag>
    </meta>
    <paragraph>
    	CRC Press, OpenGL Insights' publisher, is organizing a 
    	<link href="http://computer-science-and-engineering.crcpress.com/events/siggraph-2012-crc-press-author-signings/">book signing</link> for
    	<link href="http://openglinsights.com">OpenGL Insights</link> 
    	on Tuesday 7 of August between 2pm and 3pm, booth #929. 
    	Patrick and I will be present and we hope to see as many authors as possible! :D
    	I think it will be a great opportunity to meet our readers too! 
    </paragraph>
    
    <paragraph>
		I will also give an exhibitor talk on Wednesday 8 of August between 11:15am and 12:15pm at the Booth #967. 
		Despite that it is an exhibitor talk, I focussed my efforts preparing it to proper technical stuff. 
		I believe that a very interesting part of this talk will be the one about the Programmable Vertex Pulling 
		rendering pipeline that provides a practical and effective solution to significantly increase the scene complexity. 
		We will go through GPU architectural details to highlight why this pipeline is relevant and 
		how OpenGL is making possible this step forward for scene complexity. 
		We will also discuss how we could stretch further this pipeline.
		1 million draws per frame, here we are coming!
	</paragraph>
	
	<paragraph>
		Indeed, I will be at the Khronos Group BOFs including the 
		<link href="http://www.khronos.org/news/events/opengl-20th-anniversary-party">OpenGL 20th anniversary party</link> 
		where copies of <link href="http://openglinsights.com">OpenGL Insights</link> will be given away!
	</paragraph>
	
	<paragraph>
		Welcome back home, welcome to Siggraph!
	</paragraph>

    <image title="OpenGL Insights cover based on Chapter 20, Efficient Layered Fragment Buffer Techniques, by Pyarelal Knowles, Geoff Leach, and Fabio Zambetta"
      color="black"
      img="./post/openglinsights.png"
      href="http://openglinsights.com" />
  </post>

  <post index="0491" date="28/07/2012" std-date="2012-07-28T23:00:00.00Z" title="Week 30 photograph: The Dark Mountain Rises">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-30-960.jpg"
      href="./photo/2012-30.jpg" />
  </post>

  <post index="0490" date="24/07/2012" std-date="2012-07-24T01:00:00.00Z" title="Week 29 photograph: Mondrian">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./post/openglinsights.png"
      href="http://openglinsights.com" />
  </post>

  <post index="0489" date="23/07/2012" std-date="2012-07-23T23:30:00.00Z" title="OpenGL Insights website is online!">
    <meta>
      <tag>gtc-tech-project-openglinsights</tag>
    </meta>
    <paragraph>
      It has been quite a journey but <link href="http://openglinsights.com">OpenGL Insights</link> 
      is about to be available everywhere, just in time for <link href="http://s2012.siggraph.org/">Siggraph 2012</link> and the <link href="http://www.khronos.org/news/events/opengl-20th-anniversary-party">OpenGL 20th anniversary</link> where
      copies of the book will be given away during the WebGL, the OpenGL ES and the OpenGL BOFs. To get ready for the release, the <link href="http://openglinsights.com">OpenGL Insights website</link> is now online!
    </paragraph>
    <list title="You will find on the website:">
      <list-element>
        The complete <link href="http://openglinsights.com/toc.html">table of content</link>
      </list-element>
      <list-element>
        A list of <link href="http://openglinsights.com/tips.html">tips</link>. Please submit your tips to extend this page!
      </list-element>
      <list-element>
        The <link href="https://github.com/OpenGLInsights/OpenGLInsightsCode">chapters' code</link> available through github, please fork!
      </list-element>
      <list-element>
        The <link href="http://openglinsights.com/pipeline.html">OpenGL Pipeline Map</link> which is the online version of the poster included in the book.
      </list-element>
      <list-element>
        <link href="http://openglinsights.com">Five complete chapters</link> to start enjoying the book!
      </list-element>
    </list>
    <paragraph>
      <link href="http://openglinsights.com">OpenGL Insights</link> with numbers is 52 authors, 17 technical reviewers, 2 co-editor, 679 pages, 44 chapters and 1 book that we hope you will enjoy! 
      Thanks to all the contributors who made this book possible with their commitments!
    </paragraph>
    <paragraph>
      A special thanks to <link href="http://www.seas.upenn.edu/~pcozzi/">Patrick</link> for inviting me to this journey and creating the best opportunity I had to contribute to the OpenGL community.
    </paragraph>

    <image title="OpenGL Insights cover based on Chapter 20, Efficient Layered Fragment Buffer Techniques, by Pyarelal Knowles, Geoff Leach, and Fabio Zambetta"
      color="black"
      img="./post/openglinsights.png"
      href="http://openglinsights.com" />
  </post>
  
  <post index="0488" date="22/07/2012" std-date="2012-07-22T23:00:00.00Z" title="Week 28 photograph: Blocks">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-28-960.jpg"
      href="./photo/2012-28.jpg" />
  </post>
  
  <post index="0487" date="17/07/2012" std-date="2012-07-17T23:30:00.00Z" title="'Rasterization patterns' of Kepler and Southern Islands">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>
    <paragraph>
      Six months ago I wrote <link href="post-0434.html">a post</link> about an experiment I did a year ago but a year after these tests it is time to iterate on new GPU architectures. 
      Confusing introduction? This also what GPU rasterizing patterns are!
    </paragraph>

    <image title="Kepler's 'rasterization pattern'" 
      color="black"
      img="./post/0486-1.png"
      href="./post/0486-1.png" />

    <image title="Southern Island's 'rasterization pattern'"
      color="black"
      img="./post/0486-2.png"
      href="./post/0486-2.png" />

    <paragraph>
      
    </paragraph>
  </post>
  
  <post index="0486" date="16/07/2012" std-date="2012-07-16T21:00:00.00Z" title="Week 27 photograph: Without the shadow of a doubt">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-27-960.jpg"
      href="./photo/2012-27.jpg" />
  </post>

  <post index="0485" date="09/07/2012" std-date="2012-07-09T23:30:00.00Z" title="Week 26 photograph: Hvitserkur (white nightshirts)">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-26-960.jpg"
      href="./photo/2012-26.jpg" />
  </post>
  
  <post index="0484" date="01/07/2012" std-date="2012-07-01T23:30:00.00Z" title="June 2012 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      Precedent OpenGL drivers reported quite some issues on the Radeon HD 7750. To get a better view of the issues I have added this month a test with a Nothern Islands GPU.
    </paragraph>

    <paragraph>
      This month the last release drivers appears to be for GeForce, <link href="http://downloads.guru3d.com/NVIDIA-GeForce-304.48-Beta-64-bit-download-2931.html">Forceware 304.48</link>;
      and for Radeon, <link href="http://downloads.guru3d.com/AMD-Catalyst-12.7-Official-BETA-W7-download-2937.html">Catalyst 12.7 beta (8.981)</link>.
    </paragraph>

    <title>The test</title>
    <paragraph>
      These tests have been done on Windows 7 64 with the <link href="https://github.com/Groovounet/ogl-samples/tree/4.2.4">OpenGL Samples Pack 4.2.4 branch</link>,
      still in development, on a GeForce GTX 680, a FirePro V7900 and a Radeon HD 7750.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <paragraph>
      Once again, don't forget to contribute to the OpenGL community by <link href="post-0430.html#menu">reporting your bugs</link>!
    </paragraph>

    <paragraph>
      UPDATE 2012-07-12: It looks like something went wrong during my previous OpenGL status leading to some issues which are not actually present on AMD.
      I haven't manage to identify what went wrong but I have updated the status to fix my mistakes. Sorry about that.
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.4 wip, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 12.7 beta on Northern Islands, 8.981 (27/06/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.6 beta on Southern Islands, 8.98 (01/06/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.7 beta on Southern Islands, 8.981 (27/06/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 301.42 on Kepler (23/05/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 304.48 on Kepler (19/06/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">ERRATA: Actually works fine!</table-entry-element>
        <table-entry-element color="green">ERRATA: Actually works fine!</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-conversion</table-entry-element>
        <table-entry-element color="white">BPTC online conversions is not/won't be supported</table-entry-element>
        <table-entry-element color="white">BPTC online conversions is not/won't be supported</table-entry-element>
        <table-entry-element color="white">BPTC online conversions is not/won't be supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-picking</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-interface-matching</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. Structure for vertex inputs supported</table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. Structure for vertex inputs supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-store</table-entry-element>
        <table-entry-element color="orange">glClear is skipped for the first frame</table-entry-element>
        <table-entry-element color="orange">glClear is skipped for the first frame</table-entry-element>
        <table-entry-element color="orange">glClear is skipped for the first frame</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-debug-output</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">The implementation doesn't return an error when a built-in block isn't declared</table-entry-element>
        <table-entry-element color="orange">The implementation doesn't return an error when a built-in block isn't declared</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="black">Drivers crash</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>t>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="black">Drivers TDR</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">Errata: Is actually working fine!</table-entry-element>
        <table-entry-element color="green">Errata: Is actually working fine!</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-separated</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-interleaved</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-format</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-array</table-entry-element>
        <table-entry-element color="red">Doesn't load the texture correctly</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-without-vertex-attrib</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-type</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.4-wip, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 12.7 beta on Northern Islands, 8.981 (27/06/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.6 beta on Southern Islands, 8.98 (01/06/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.7 beta on Southern Islands, 8.981 (27/06/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 301.42 on Kepler (23/05/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 304.48 on Kepler (19/06/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-texture-copy-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-clamp-separate-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_depth _clamp_separate not supported</table-entry-element>
        <table-entry-element color="white">AMD_depth _clamp_separate not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader _buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader _buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader _buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-srgb-decode-ext</table-entry-element>
        <table-entry-element color="white">EXT_texture _sRGB_decode not supported</table-entry-element>
        <table-entry-element color="white">EXT_texture _sRGB_decode not supported</table-entry-element>
        <table-entry-element color="white">EXT_texture _sRGB_decode not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-position-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">glLinkProgram generates an invalid operation error</table-entry-element>
        <table-entry-element color="white">AMD_sample _positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample _positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_vertex _shader_layer and AMD_vertex_shader _viewport_index not supported</table-entry-element>
        <table-entry-element color="white">AMD_vertex _shader_layer and AMD_vertex_shader _viewport_index not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture _multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture _multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture _multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-multi-draw-indirect-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-pinned-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_pinned _memory not supported</table-entry-element>
        <table-entry-element color="white">AMD_pinned _memory not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-barrier-gtc</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-blend-op-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample-explicit-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">ERRATA: GL_NV_explicit _multisample is still supported!</table-entry-element>
        <table-entry-element color="green">ERRATA: GL_NV_explicit _multisample is still supported!</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>es-200-draw-elements-ext</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1107" />
      <source-element type="Link" href="https://github.com/Groovounet/ogl-samples/tree/4.2.4" title="OpenGL Samples Pack 4.2.4 branch snapshot" />
    </source-list>
  </post>

  <post index="0483" date="30/06/2012" std-date="2012-06-30T00:30:00.00Z" title="GLM 0.9.3.4 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
		This new revision mainly fixed some compatibility issues with GCC.
    </paragraph>

    <paragraph>
      <link href="https://github.com/Groovounet/glm/issues">If you encounter bugs, don't hesitate to report them.</link>
    </paragraph>

    <source-list>
      <source-download index="1112" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.3.pdf" title="GLM 0.9.3 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.3/index.html" title="GLM 0.9.3 API" />
      <source-element type="Link" href="https://github.com/Groovounet/glm/issues" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0482" date="26/06/2012" std-date="2012-06-26T08:30:00.00Z" title="Week 25 photograph: 49 degrees">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-25-960.jpg"
      href="./photo/2012-25.jpg" />
  </post>

  <post index="0481" date="21/06/2012" std-date="2012-06-21T02:30:00.00Z" title="Week 24 photograph: Immaculate conception">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-24-960.jpg"
      href="./photo/2012-24.jpg" />
  </post>

  <post index="0480" date="18/06/2012" std-date="2012-06-18T23:30:00.00Z" title="GL_AMD_query_buffer_object released">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

	<paragraph>
		One aspect where I think the OpenGL specification lack of completeness is the interoperability 
		between the fixed-function parts and the programmable function parts of the OpenGL pipeline. 
	</paragraph>
	<paragraph>
		GL_AMD_query_buffer_object leverages one aspect of this issue allowing an application to reuse 
		in a shader the result of a query object by storing it into a buffer, instead of having to read 
		it on the CPU side and then submitting it back to the GPU through a uniform variable or uniform buffer. 
		This is ensuring a synchronization-less rendering. 
	</paragraph>
	<paragraph>
		Anther use case of this extension is when an application is making a large number of queries. 
		Instead of quering each individual result, an application can collect these results into a buffer object 
		and then read all the content of this buffer to obtain the results on the application-side doing a single 
		GPU-CPU round-trip. 
	</paragraph>
	<paragraph>
		This extension offers us the luxury of four examples, the following example is a copy of the first one.
	</paragraph>
	
    <code title="Example 1: Using occlusion query result in shader:">
      <line>
        <comment>// --- Application side ---</comment>
      </line>    
      <line>
        <comment>// Create a buffer object for the query result</comment>
      </line>
      <line>
        glGenBuffers(1, &amp;queryBuffer);
      </line>
      <line>
        glBindBuffer(GL_QUERY_BUFFER_AMD, queryBuffer);
      </line>
      <line>
        glBufferData(GL_QUERY_BUFFER_AMD, sizeof(GLuint), NULL, GL_DYNAMIC_COPY);
      </line>
      <line>
      </line>
      <line>
        <comment>// Perform occlusion query</comment>
      </line>
      <line>
        glBeginQuery(GL_SAMPLES_PASSED, queryId)
      </line>
      <line>
        ...      
      </line>
      <line>
      	glEndQuery(GL_SAMPLES_PASSED);
      </line>
      <line>
     
      </line>
      <line>
     	<comment>// Get query results to buffer object</comment>
      </line>
      <line>
		glBindBuffer(GL_QUERY_BUFFER_AMD, queryBuffer);     
      </line>
      <line>
        glGetQueryObjectuiv(queryId, GL_QUERY_RESULT, BUFFER_OFFSET(0));     
      </line>
      <line>
     
      </line>
      <line>
     	<comment>// Bind query result buffer as uniform buffer</comment>
      </line>
      <line>
     	glBindBufferBase(GL_UNIFORM_BUFFER, 0, queryBuffer);
      </line>
      <line>
     	...
      </line>
      <line>
     	<comment>// --- Shader ---</comment>
      </line>
      <line>
        ...
      </line>
      <line>
     	uniform queryResult {
      </line>
      <line align="32px">
     	uint samplesPassed;
      </line>
      <line>
     	}
      </line>
      <line>
        
      </line>
      <line>
        void main() {
      </line>
      <line align="32px">
        ...
      </line>
      <line align="32px">
        if (samplesPassed > threshold) {
      </line> 
      <line align="64px">
     	<comment>// Complex processing</comment>
      </line>
      <line align="64px">
        ...
      </line>
      <line align="32px">
        } else {
      </line>
      <line align="64px">
     	<comment>// Simplified processing</comment>
      </line>
      <line align="64px">
        ...
      </line>
      <line align="32px">
        }
      </line>  
      <line>
        }
      </line>
    </code>

    <source-list>
      <source-element type="Link" href="http://www.opengl.org/registry/specs/AMD/query_buffer_object.txt" title="GL_AMD_query_buffer_object" />
    </source-list>
  </post>

  <post index="0479" date="16/06/2012" std-date="2012-06-16T23:30:00.00Z" title="May 2012 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

	<paragraph>
	   A late May OpenGL status drivers this month as I am just back front travelling. 
	   AMD seems to have skip May drivers but a beta of June drivers is available.
	   This looks like to be related to a new drivers release strategy aiming at improving the drivers quality. 
	   With the announcement that AMD will not longer support OpenGL 3 GPUs, this should free quite some resources,
	   so it will be interesting to see how the drivers evolve in the near future. 
     I am personnaly afraid that this is only going to delay even more bug fixes to be released.
	</paragraph>
  <paragraph>
	   Last month quite a few new bugs (crashes) have appeared on the bug report. It looks like that those were 
	   Southern Island architechture specific bugs and the samples work fine on Evergreen GPUs.
	</paragraph>

    <paragraph>
      This month the last release drivers appears to be for GeForce, <link href="http://www.guru3d.com/news/nvidia-geforce-30142-whql-driver-download/">Forceware 301.42</link>;
      and for Radeon, <link href="http://downloads.guru3d.com/AMD-Catalyst-12.6-8.980.0-May-22-BETA-W7-Vista-download-2920.html">Catalyst 12.6 beta (8.98)</link>.
    </paragraph>

    <title>The test</title>
    <paragraph>
      These tests have been done on Windows 7 64 with the <link href="https://github.com/Groovounet/ogl-samples/tree/4.2.4">OpenGL Samples Pack 4.2.4 branch</link>,
      still in development, on a GeForce GTX 680 and a Radeon HD 7750.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <paragraph>
      Once again, don't forget to contribute to the OpenGL community by <link href="post-0430.html#menu">reporting your bugs</link>!
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.4 wip, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 12.4, 8.951 (24/04/2012)</table-title-element>        
        <table-title-element>AMD Catalyst 12.6 beta, 8.98 (01/06/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 301.32 (20/04/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 301.42 (23/05/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-conversion</table-entry-element>
        <table-entry-element color="red">Immutable texture and integer texture conversions is not working</table-entry-element>
        <table-entry-element color="red">Immutable texture and integer texture conversions is not working</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-picking</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-interface-matching</table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. glGetAttribLocation fails to return the location here</table-entry-element>
        <table-entry-element color="red">glGetAttribLocation fails to return the location here</table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. Structure for vertex inputs supported</table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. Structure for vertex inputs supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-store</table-entry-element>
        <table-entry-element color="orange">glClear is skipped for the first frame</table-entry-element>
        <table-entry-element color="orange">glClear is skipped for the first frame</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-debug-output</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Block member array indexing fails when using the binding qualifier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">The implementation doesn't return an error when a built-in block isn't declared</table-entry-element>
        <table-entry-element color="orange">The implementation doesn't return an error when a built-in block isn't declared</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-separated</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-interleaved</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-format</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-without-vertex-attrib</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-type</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.4-wip, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 12.4, 8.951 (24/04/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.6 beta, 8.98 (01/06/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 301.32 (20/04/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 301.42 (23/05/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-texture-copy-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-clamp-separate-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-srgb-decode-ext</table-entry-element>
        <table-entry-element color="white">EXT_texture_sRGB_decode not supported</table-entry-element>
        <table-entry-element color="white">EXT_texture_sRGB_decode not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-position-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD vertex shader layer and AMD vertex shader viewport_index not supported</table-entry-element>
        <table-entry-element color="white">AMD vertex shader layer and AMD vertex shader viewport_index not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-multi-draw-indirect-amd</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="black">Drivers crash on Southern Islands only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-pinned-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_pinned_memory not supported</table-entry-element>
        <table-entry-element color="white">AMD_pinned_memory not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-barrier-gtc</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-blend-op-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample-explicit-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>es-200-draw-elements-ext</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1107" />
      <source-element type="Link" href="https://github.com/Groovounet/ogl-samples/tree/4.2.4" title="OpenGL Samples Pack 4.2.4 branch snapshot" />
    </source-list>
  </post>

  <post index="0478" date="10/06/2012" std-date="2012-06-10T00:30:00.00Z" title="Week 23 photograph: The Lord of the farm">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-23-960.jpg"
      href="./photo/2012-23.jpg" />
  </post>

  <post index="0477" date="04/06/2012" std-date="2012-06-04T00:30:00.00Z" title="Week 22 photograph: Open Air">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-22-960.jpg"
      href="./photo/2012-22.jpg" />
  </post>

  <post index="0476" date="02/06/2012" std-date="2012-06-02T23:30:00.00Z" title="Week 21 photograph: Back in summer">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-21-960.jpg"
      href="./photo/2012-21.jpg" />
  </post>

  <post index="0475" date="21/05/2012" std-date="2012-05-21T00:30:00.00Z" title="Week 20 photograph: 72% milk from the 19th centuary">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-20-960.jpg"
      href="./photo/2012-20.jpg" />
  </post>

  <post index="0474" date="19/05/2012" std-date="2012-05-19T23:30:00.00Z" title="Week 19 photograph: We have the night to fix bugs!">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-19-960.jpg"
      href="./photo/2012-19.jpg" />
  </post>

  <post index="0473" date="10/05/2012" std-date="2012-05-10T00:30:00.00Z" title="GLM 0.9.3.3 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      Nearly two months since the previous release of a GLM revision gave enough time to fix few things reported.
      Most importantly, this revision should provide a better compatibility with Intel C++ compiler.
    </paragraph>

    <list name="Changelog:">
      <list-element>Fixed isinf and isnan</list-element>
      <list-element>Improved compatibility with Intel compiler</list-element>
      <list-element>Added CMake test build options: SIMD, C++11, fast math and MS land ext</list-element>
      <list-element>Fixed SIMD mat4 test on GCC</list-element>
      <list-element>Fixed perspectiveFov implementation</list-element>
      <list-element>Fixed matrixCompMult for none-square matrices</list-element>
      <list-element>Fixed namespace issue on stream operators</list-element>
      <list-element>Fixed various warnings</list-element>
      <list-element>Added VC11 support</list-element>
    </list>

    <paragraph>
      <link href="https://github.com/Groovounet/glm/issues">If you encounter bugs, don't hesitate to report them.</link>
    </paragraph>

    <source-list>
      <source-download index="1111" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.3.pdf" title="GLM 0.9.3 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.3/index.html" title="GLM 0.9.3 API" />
      <source-element type="Link" href="https://github.com/Groovounet/glm/issues" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0472" date="08/05/2012" std-date="2012-05-30T23:30:00.00Z" title="Week 18 photograph: Rest">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-18-img.jpg"
      href="./photo/2012-18.jpg" />
  </post>
  
  <post index="0471" date="08/05/2012" std-date="2012-05-08T23:30:00.00Z" title="OpenGL 3.4 not released">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      At GDC 2010, the Khronos Group released two OpenGL specifications: 
      <link href="http://www.opengl.org/registry/doc/glspec33.core.20100311.withchanges.pdf">OpenGL 3.3</link>, for OpenGL 3 hardware class; and  
      <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link>, for OpenGL 4 hardware class.
      Since then we didn't had any update of the OpenGL 3 specification, but it doesn't mean that all the new extensions are designed only for OpenGL 4 hardware class.
      Actually a lot of them are OpenGL 3 hardware extensions or hardware independent extensions.
      In this post, we are studying AMD and NVIDIA OpenGL implementations of OpenGL 4 extensions on OpenGL 3 hardware. 
    </paragraph>
    <paragraph>
      It seems that Intel OpenGL implementation is becoming more relevant these days with the release of an OpenGL 4.0 drivers 
      so that we might be able to target OpenGL 3.2 minimum (Apple implementation on MacOS X 10.7). 
      I hope to come back soon with a discussion about Intel drivers but it might take some time as I don't have an Ivy Bridge system yets. 
    </paragraph>
    <paragraph>
      There are some extensions released after OpenGL 3.3 which could have form OpenGL 3.4 but this is unlikely to happen.
      How the ARB could justify that OpenGL 3.4 becomes a partial superset of OpenGL 4.0 and 4.1?
      I think, this would only fragment even more the OpenGL ecosystem which is already pretty fragmented as this
      <link href="post-0466.html#menu">rescent poll</link> demonstrates.
    </paragraph>

    <list name="OpenGL 4 hardware only extensions:">
      <list-element href="http://www.opengl.org/registry/specs/ARB/draw_indirect.txt">GL_ARB_draw_indirect</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/gpu_shader5.txt">GL_ARB_gpu_shader5</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/gpu_shader_fp64.txt">GL_ARB_gpu_shader_fp64</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/shader_subroutine.txt">GL_ARB_shader_subroutine</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/tessellation_shader.txt">GL_ARB_tessellation_shader</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/shader_precision.txt">GL_ARB_shader_precision</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/vertex_attrib_64bit.txt">GL_ARB_vertex_attrib_64bit</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/base_instance.txt">GL_ARB_base_instance</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/conservative_depth.txt">GL_ARB_conservative_depth</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/shader_atomic_counters.txt">GL_ARB_shader_atomic_counters</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/shader_image_load_store.txt">GL_ARB_shader_image_load_store</list-element>
    </list>
    
    <paragraph>
    	The case of <link href="http://www.opengl.org/registry/specs/ARB/shader_image_load_store.txt">ARB_shader_image_load_store</link> is quite specific. 
      If we really look at it then it seems that most of the extension could be implemented on OpenGL 3 hardware. 
      "Most of it" includes the load and store, the early-z and the memory barrier. 
    	AMD and NVIDIA implementations both supports <link href="http://www.opengl.org/registry/specs/NV/texture_barrier.txt">NV_texture_barrier</link> 
    	which is nothing less than a subset of <link href="http://www.opengl.org/registry/specs/ARB/shader_image_load_store.txt">ARB_shader_image_load_store</link> 
    	memory barrier for texture memory transactions. This is a very important extension allowing rendering without framebuffer ping-pong on iterative image space algorithms.
	</paragraph>
	
    <list name="Direct3D 10.1 hardware features:">
      <list-element href="http://www.opengl.org/registry/specs/ARB/draw_buffers_blend.txt">GL_ARB_draw_buffers_blend</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/sample_shading.txt">GL_ARB_sample_shading</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/texture_cube_map_array.txt">GL_ARB_texture_cube_map_array</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/texture_gather.txt">GL_ARB_texture_gather</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/texture_query_lod.txt">GL_ARB_texture_query_lod</list-element>
    </list>
    
    <paragraph>
      There is no obvious equivalent to Direct3D 10.1 with OpenGL but if we consider OpenGL 3 plus a set of extensions we reach the equivalence.
      On contrary of Direct3D 11.1, which monstlys add OpenGL features that were already here basically since its creation, we see from this set of extensions that
      Direct3D 10.1 added quite a few interesting features. On OpenGL 3 hardware, this set of features is monstly available on AMD hardware through
      the HD 3000 and HD 4000 series. On NVIDIA side, there is few low end GeForce 200 and 300 series supporting them on OpenGL 3 hardware class.
      Indeed, all these features are available on all OpenGL 4 hardware.
    </paragraph>
	
    <list name="OpenGL 3 hardware only extensions:">
      <list-element href="http://www.opengl.org/registry/specs/ARB/shading_language_packing.txt">GL_ARB_shading_language_packing</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/viewport_array.txt">GL_ARB_viewport_array</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/cl_event.txt">GL_ARB_cl_event (ARB extension only)</list-element>
    </list>
 
 	<paragraph>
		Despite that OpenGL and OpenCL heterogenous rendering and compute is suposed to be a big thing, 
		I am not aware of any implementation supporting <list-element href="http://www.opengl.org/registry/specs/ARB/cl_event.txt">GL_ARB_cl_event</list-element>.
	</paragraph>
	
    <list name="Hardware independent extensions:">
      <list-element href="http://www.opengl.org/registry/specs/ARB/ES2_compatibility.txt">GL_ARB_ES2_compatibility</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/get_program_binary.txt">GL_ARB_get_program_binary</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/separate_shader_objects.txt">GL_ARB_separate_shader_objects</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">GL_ARB_debug_output (ARB extension only)</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/shading_language_420pack.txt">GL_ARB_shading_language_420pack</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/compressed_texture_pixel_storage.txt">GL_ARB_compressed_texture_pixel_storage</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/internalformat_query.txt">GL_ARB_internalformat_query</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/map_buffer_alignment.txt">GL_ARB_map_buffer_alignment</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/texture_storage.txt">GL_ARB_texture_storage</list-element>
    </list>

    <paragraph>
      A lot of new extensions turns out to be hardware independent extensions shwoing a desire for redesign of OpenGL from the ARB: 
      Texture storage which kills texture incomplete issues, separate programs which break the requirement of linked shader stages or debug output 
      which actually says that debugging is the duty of the implementation not the application.
    </paragraph>

    <list name="OpenGL 4 extensions supported on AMD OpenGL 3 hardware (HD 2000+):">
      <list-element href="http://www.opengl.org/registry/specs/ARB/texture_buffer_object_rgb32.txt">GL_ARB_texture_buffer_object_rgb32</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/transform_feedback2.txt">GL_ARB_transform_feedback2</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/transform_feedback3.txt">GL_ARB_transform_feedback3</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/transform_feedback_instanced.txt">GL_ARB_transform_feedback_instanced</list-element>
    </list>
    
    <paragraph>
    	I am a huge fan of transform feedback and I believe that there are still under used and to become really useful we need at least a way to store the data
    	in something else than 32 bits floats or ints. Does it make sense to store a color into four 32 bits floats? Most of the time, no, 
    	it just consumes too much bandwidth. Nevertheless, AMD implementation had an early start to bring OpenGL 4 transform feedback as the entire feature 
    	set was already supported from HD 2000 series.
    </paragraph>

     <list name="OpenGL 4 extensions supported on NVIDIA OpenGL 3 hardware (GTX 200+):">
      <list-element href="http://www.opengl.org/registry/specs/ARB/transform_feedback2.txt">GL_ARB_transform_feedback2</list-element>
    </list>   

	<list name="OpenGL 4+ extensions supported on AMD OpenGL 4 hardware (HD 5000+):">
		<list-element href="http://www.opengl.org/registry/specs/ARB/shader_stencil_export.txt">GL_ARB_shader_stencil_export</list-element>
	</list>

    <list name="OpenGL hardware independent extensions supported on NVIDIA immplementation (GeForce 6+):">
      <list-element href="http://www.opengl.org/registry/specs/ARB/shading_language_include.txt">GL_ARB_shading_language_include</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/robustness.txt">GL_ARB_robustness (ARB extension only)</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/GLX_ARB_create_context_robustness.txt">GLX_ARB_create_context_robustness</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/WGL_ARB_create_context_robustness.txt">WGL_ARB_create_context_robustness</list-element>
    </list>

    <paragraph>
	    I often thought that it would be great to have <codeword>#include</codeword> with GLSL because what I really want to do most of the time is sharing structures
	    for my varying and uniform blocks accross a maximum set of shaders. 
	    When I saw the release of <link href="http://www.opengl.org/registry/specs/ARB/shading_language_include.txt">ARB_shading_language_include</link>, 
	    I was very exited at first but after reading it, I decided to stick to my home made methods: The extension make it so complex to use includes!
      Actually, there is still no sample in the <link href="http://www.g-truc.net/project-0026.html#menu">OpenGL Samples Pack</link> demonstrating its usage.
	    Also, I am a C++ programmer and I mostly did C and C++ programming for all my professional life so far and even most of my education (I chose to forget the rest...).
	    Speaking with others programmers used to others languages, it now appears to me that there are alternatives to <codeword>#include</codeword> so maybe we should 
	    consider something else for GLSL than something which already feels like an odd hack in C++.
    </paragraph>

    <paragraph>
      OpenGL with its extension mechanisum provides a lot of flexibility for applications that can afford to spend this developer effort.
      The desire for an OpenGL 3.4 specification comes from the need of cross platform support and shared code across platform which is certainly not 
      optimal for performance but allows to release an application for a lower developers cost. 
      With this post written, we can build our own OpenGL 3.4 using OpenGL 3.3 and a set of shared extensions across AMD and NVIDIA OpenGL 3 hardware.
    </paragraph>

    <list name="Home-maded OpenGL 3.4:">
      <list-element href="http://www.opengl.org/registry/doc/glspec42.core.20120427.withchanges.pdf">OpenGL 3.3</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/ES2_compatibility.txt">GL_ARB_ES2_compatibility</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/get_program_binary.txt">GL_ARB_get_program_binary</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/separate_shader_objects.txt">GL_ARB_separate_shader_objects</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">GL_ARB_debug_output (ARB extension only)</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/shading_language_420pack.txt">GL_ARB_shading_language_420pack</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/compressed_texture_pixel_storage.txt">GL_ARB_compressed_texture_pixel_storage</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/internalformat_query.txt">GL_ARB_internalformat_query</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/map_buffer_alignment.txt">GL_ARB_map_buffer_alignment</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/texture_storage.txt">GL_ARB_texture_storage</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/shading_language_packing.txt">GL_ARB_shading_language_packing</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/viewport_array.txt">GL_ARB_viewport_array</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/cl_event.txt">GL_ARB_cl_event (ARB extension only)</list-element>
      <list-element href="http://www.opengl.org/registry/specs/NV/texture_barrier.txt">GL_NV_texture_barrier</list-element>
    </list>

    <source-list>
      <source-element type="Link" href="http://www.opengl.org/registry" title="The OpenGL registry" />
    </source-list>
  </post>

  <post index="0470" date="30/04/2012" std-date="2012-04-30T23:30:00.00Z" title="Week 17 photograph: Orange cloud">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-17-img.jpg"
      href="./photo/2012-17.jpg" />
  </post>

  <post index="0469" date="29/04/2012" std-date="2012-04-29T23:30:00.00Z" title="April 2012 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      This month the last release drivers appears to be for GeForce, <link href="http://downloads.guru3d.com/Nvidia-GeForce-301.32-Beta-64-bit-download-2902.html">Forceware 301.32 beta</link>;
      and for Radeon, <link href="http://downloads.guru3d.com/AMD-Catalyst-12.4-WHQL-64-bit-download-2905.html">Catalyst 12.4 (8.961)</link>.
    </paragraph>

    <title>The test</title>
    <paragraph>
      These tests have been done on Windows 7 64 with the <link href="https://github.com/Groovounet/ogl-samples/tree/4.2.4">OpenGL Samples Pack 4.2.4 branch</link>,
      still in development, on an GeForce GTX 470 and a Radeon HD 7750.
    </paragraph>

    <paragraph>
      I didn't had much time to explore any topic this month so it will be just an updated table.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <paragraph>
      Once again, don't forget to contribute to the OpenGL community by <link href="post-0430.html#menu">reporting your bugs</link>!
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.4 wip, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 12.3, 8.951 (29/03/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.4, 8.961 (24/04/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 301.10 (23/03/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 301.32 (20/04/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-conversion</table-entry-element>
        <table-entry-element color="red">Immutable texture and integer texture conversions is not working</table-entry-element>
        <table-entry-element color="red">Immutable texture and integer texture conversions is not working</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-interface-matching</table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. glGetAttribLocation fails to return the location here</table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. glGetAttribLocation fails to return the location here</table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. Structure for vertex inputs supported</table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. Structure for vertex inputs supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-store</table-entry-element>
        <table-entry-element color="orange">glClear is skipped for the first frame</table-entry-element>
        <table-entry-element color="orange">glClear is skipped for the first frame</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="red">Unsupported DSA storage functions</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-debug-output</table-entry-element>
        <table-entry-element color="red">DebugControl doesn't work, null-terminated strings generate errors</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Block member array indexing fails when using the binding qualifier</table-entry-element>
        <table-entry-element color="red">Block member array indexing fails when using the binding qualifier</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">The implementation doesn't return an error when a built-in block isn't declared</table-entry-element>
        <table-entry-element color="orange">The implementation doesn't return an error when a built-in block isn't declared</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="red">May crash if the binary is not AMD's</table-entry-element>
        <table-entry-element color="red">Drivers crash</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Drivers crash</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="red">Drivers crash</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Drivers crash</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Drivers crash</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-separated</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-interleaved</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-format</table-entry-element>
        <table-entry-element color="red">SNORM conversion not performed</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-without-vertex-attrib</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-type</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.4-wip, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 12.3, 8.951 (29/03/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.4, 8.961 (24/04/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 301.10 (23/03/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 301.32 (20/04/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-texture-copy-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-clamp-separate-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-srgb-decode-ext</table-entry-element>
        <table-entry-element color="white">EXT_texture_sRGB_decode not supported</table-entry-element>
        <table-entry-element color="white">EXT_texture_sRGB_decode not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-position-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD vertex shader layer and AMD vertex shader viewport_index not supported</table-entry-element>
        <table-entry-element color="white">AMD vertex shader layer and AMD vertex shader viewport_index not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-indirect-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-pinned-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_pinned_memory not supported</table-entry-element>
        <table-entry-element color="white">AMD_pinned_memory not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-barrier-gtc</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-blend-op-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample-explicit-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>es-200-draw-elements-ext</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1107" />
      <source-element type="Link" href="https://github.com/Groovounet/ogl-samples/tree/4.2.4" title="OpenGL Samples Pack 4.2.4 branch snapshot" />
    </source-list>
  </post>
  
  <post index="0468" date="24/04/2012" std-date="2012-04-24T14:00:00.00Z" title="Week 16 photograph: 80%">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-16-img.jpg"
      href="./photo/2012-16.jpg" />
  </post>
  
  <post index="0467" date="15/04/2012" std-date="2012-04-15T21:30:00.00Z" title="Week 15 photograph: When the shapes express themselves">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-15-img.jpg"
      href="./photo/2012-15.jpg" />
  </post>

  <post index="0466" date="15/04/2012" std-date="2012-04-15T14:30:00.00Z" title="Poll: Which versions of OpenGL are you programming with?">
    <meta>
      <tag>gtc-tech-opengl</tag>
    </meta>

	<poll id="6139189" title="Which versions of OpenGL are you programming with?" />

  </post>

  <post index="0465" date="09/04/2012" std-date="2012-04-09T21:30:00.00Z" title="Week 14 photograph: Random distribution">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-14-img.jpg"
      href="./photo/2012-14.jpg" />
  </post>

  <post index="0464" date="01/04/2012" std-date="2012-04-01T23:30:00.00Z" title="Week 13 photograph: We haven't seen that since 1989">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-13-img.jpg"
      href="./photo/2012-13.jpg" />
  </post>

  <post index="0463" date="31/03/2012" std-date="2012-03-31T23:30:00.00Z" title="March 2012 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      This month the last release drivers appears to be for GeForce, <link href="http://www.guru3d.com/news/geforce-forceware-30110-whql-download/">Forceware 301.10</link>; 
      and for Radeon, <link href="http://www.guru3d.com/news/amd-catalyst-123-89510-march-8-amd-official-whql-drivers/">Catalyst 12.3 (8.951)</link>.
    </paragraph>

    <title>The test</title>
    <paragraph>
      These tests have been done on Windows 7 64 with the <link href="https://github.com/Groovounet/ogl-samples/tree/4.2.4">OpenGL Samples Pack 4.2.4 branch</link>, 
      still in development, on an GeForce GTX 470 and a Radeon HD 5850.
    </paragraph>

    <paragraph>
      Drivers Forceware 301.10 brings the support of <link href="http://www.opengl.org/registry/specs/AMD/multi_draw_indirect.txt">AMD_multi_draw_indirect</link>,
      an extension that would have gave a 2011 award for best extension of the year even if I can picture a lot of possible improvements. 
      NVIDIA also exposes the new <link href="http://www.opengl.org/registry/specs/NV/bindless_texture.txt">NV_bindless_texture</link> extension 
      (2012 nomine...)
      which can be seen as the first virtual texture implementation available. Infortunately this extension is Kepler only so I can't play with it for the moment.
      <link href="http://www.opengl.org/registry/specs/NV/shader_atomic_float.txt">NV_shader_atomic_float</link> adds support for 'add' and 
      'exchance' atomic operations for float values.
      I haven't tested it yet but it will be part of the OpenGL Samples Pack 4.2.4.
    </paragraph>

    <paragraph>
      Also it is worth to mention that NVIDIA has put a continuous effort on the debug output implementation which now 
      provides an incredible amount of messages including descriptive errors, warnings and performaces feedback.
      An outstanding work which is extremely useful for the everyday work of an OpenGL programmer.
    </paragraph>

    <paragraph>
      AMD released the extension specifications of 
      <link href="http://www.opengl.org/registry/specs/AMD/vertex_shader_viewport_index.txt">GL_AMD_vertex_shader_viewport_index</link> 
      and <link href="http://www.opengl.org/registry/specs/AMD/vertex_shader_viewport_layer.txt">GL_AMD_vertex_shader_layer</link> 
      which gave me the opportunity to write a sample for it.
      These extensions allow to set the <link href="http://www.opengl.org/sdk/docs/manglsl/xhtml/gl_ViewportIndex.xml">gl_Layer</link>
      and the <link href="http://www.opengl.org/sdk/docs/manglsl/xhtml/gl_Layer.xml">gl_ViewportIndex</link> 
      in a vertex shader which avoids the overkill of using a geometry shader for this only purpose.
    </paragraph>

    <paragraph>
      Now, a disturbing problem that appeared on both AMD and NVIDIA implementations. 
      The respective linkers are no longer reporting the Shader Interface Matching issues like they have to do.
      This is necesseraly a rescent issue because it's the kind of issues that happen all the time when writing GLSL shader code. 
      Considering that we have no API to query the outputs and the inputs of respectively the vertex shader stage and 
      the fragment shader stage, I think it's at least a major problem.
    </paragraph>

    <quote author="OpenGL 4.2 core specification - Shader Interface Matching">
      When both sides of an interface are contained in the same program object, LinkProgram will detect
      mismatches on an interface and generate link errors.
    </quote>
    
    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <paragraph>
      Once again, don't forget to contribute to the OpenGL community by <link href="post-0430.html#menu">reporting your bugs</link>!
    </paragraph>
    
    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.4 wip, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 12.x preview, 8.96 (14/02/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.3, 8.951 (29/03/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 295.73 (22/02/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 301.10 (23/03/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-conversion</table-entry-element>
        <table-entry-element color="red">Immutable texture and BC7 conversions is not working</table-entry-element>
        <table-entry-element color="red">Immutable texture and BC7 conversions is not working</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-interface-matching</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. glGetAttribLocation fails to return the location here</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Doesn't detect varying mismatch. Structure for vertex inputs supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-store</table-entry-element>
        <table-entry-element color="orange">glClear is skipped for the first frame</table-entry-element>
        <table-entry-element color="orange">glClear is skipped for the first frame</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="red">Unsupported DSA storage functions</table-entry-element>
        <table-entry-element color="red">Unsupported DSA storage functions</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">The implementation doesn't return an error when a built-in block isn't declared</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="red">May crash if the binary is not AMD's</table-entry-element>
        <table-entry-element color="red">May crash if the binary is not AMD's</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
        <table-entry-element color="orange">layout(triangles) in; must be declared</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-debug-output</table-entry-element>
        <table-entry-element color="red">DebugControl doesn't work, null-terminated strings generate errors</table-entry-element>
        <table-entry-element color="red">DebugControl doesn't work, null-terminated strings generate errors</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-separated</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-interleaved</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-format</table-entry-element>
        <table-entry-element color="red">SNORM conversion not performed</table-entry-element>
        <table-entry-element color="red">SNORM conversion not performed</table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-without-vertex-attrib</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-type</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.4-wip, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 12.x preview, 8.96 (14/02/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.3, 8.951 (29/03/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 295.73 (22/02/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 301.10 (23/03/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-texture-copy-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-clamp-separate-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-srgb-decode-ext</table-entry-element>
        <table-entry-element color="white">EXT_texture_sRGB_decode not supported</table-entry-element>
        <table-entry-element color="white">EXT_texture_sRGB_decode not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-position-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD vertex shader layer and AMD vertex shader viewport_index not supported</table-entry-element>
        <table-entry-element color="white">AMD vertex shader layer and AMD vertex shader viewport_index not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-indirect-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-pinned-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_pinned_memory not supported</table-entry-element>
        <table-entry-element color="white">AMD_pinned_memory not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-barrier-gtc</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-blend-op-amd</table-entry-element>
        <table-entry-element color="white">This is a Radeon 6900+ series feature</table-entry-element>
        <table-entry-element color="white">This is a Radeon 6900+ series feature</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample-explicit-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>es-200-draw-elements-ext</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="white">WGL EXT create context es2 profile not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1107" />
      <source-element type="Link" href="https://github.com/Groovounet/ogl-samples/tree/4.2.4" title="OpenGL Samples Pack 4.2.4 branch snapshot" />
    </source-list>
  </post>

  <post index="0462" date="25/03/2012" std-date="2012-03-25T12:30:00.00Z" title="Week 12 photograph: Starry night over ducks">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-12-img.jpg"
      href="./photo/2012-12.jpg" />
  </post>
  
  <post index="0461" date="20/03/2012" std-date="2012-03-20T00:30:00.00Z" title="Internship offer to work on a Southern Islands demo">
    <meta>
      <tag>gtc-tech-opengl</tag>
    </meta>

    <paragraph>
      Are you looking for an internship? I am looking for an intern! You would be working with me on a demo to 
      illustrate the <link href="http://en.wikipedia.org/wiki/Southern_Islands_(GPU_family)">Southern Islands architechture</link>. 
    </paragraph>
    <paragraph>
      The profile for the candidates: C++, OpenGL, OpenCL. Applications with a source code and for the principle of it, a resume. 
    </paragraph>
    <paragraph>
      This is a paid internship. For this purpose it is easier if the applicants are from France, Germany or United Kingdom 
      but we can investigate to make this possible for someone outside of this region. This internship might be remote.
    </paragraph>
    <paragraph>
      Drop me an <link href="mailto:mail@g-truc.net">email</link> and I'll be please to give you all the details and answer any question!
    </paragraph>
  </post>

  <post index="0460" date="18/03/2012" std-date="2012-03-18T23:30:00.00Z" title="Week 11 photograph: Midnight city">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-11-img.jpg"
      href="./photo/2012-11.jpg" />
  </post>

  <post index="0459" date="17/03/2012" std-date="2012-03-17T20:00:00.00Z" title="David Hockney: The big picture">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      <link href="http://www.royalacademy.org.uk/exhibitions/hockney/">The Royal Academy</link> hosts David Hockney (1937-) in a brilliant exhibition focussing mainly on his rescent work.
    </paragraph>

    <paragraph>
      I discovered his work during this exhibition which made me pretty astatic:
      "amazing, beautiful, increadible!" were the first words that came to my mind during the discovery.
    </paragraph>

    <image title="The road acrossthe Wolds, David Hockney, 1997"
        color="white"
        img="./post/0459-2.jpg"
        href="./post/0459-2.jpg" />

    <image title="Garrowby Hill, David Hockney, 1998"
        color="white"
        img="./post/0459-1.jpg"
        href="./post/0459-1.jpg" />

    <paragraph>
      I would say that I rarely saw that much interest in the pictoral properties of the pictures.
      Great colorist, interest in season, space and perspectives: variations.
    </paragraph>

    <paragraph>
      A lot of the work presented has been made for this exhibition which was an opportunity for David Hockney to scale up
      his work to the scale of the Royal Academy walls. It leads him to impressive multiple piece works like "Winter Timber"
      composed of 15 canvases of 91.4x 121.9cm each.
    </paragraph>

    <image title="Winter Timber, David Hockney, 2009"
        color="white"
        img="./post/0459-3.jpg"
        href="./post/0459-3.jpg" />

    <paragraph>
      However, it seems that it was not big enough for David Hockney so that he works for six months
      on a project called "The arrival of spring in woldgate east yorkshire 2011" to surround the visitors in a massive room with 32 canvases
      and 51 iPad drawings (!!!) printed on paper recording this time frame. A new media for drawing is arising,
      almost shocking but this room was such a wonder that David Hockney simply gave it a legimaty.
    </paragraph>

    <image title="The Arrival of Spring in Woldgate (part one of a 52-part work), David Hockney, 2011"
        color="white"
        img="./post/0459-4.jpg"
        href="./post/0459-4.jpg" />

    <paragraph>
      The exhibition is running until the 9th April 2012 and absolutly worth the queuing!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.royalacademy.org.uk/exhibitions/hockney/" title="David Hockney RA: A Bigger Picture; exhibition page" />
      <source-element type="Link" href="http://www.hockneypictures.com/" title="David Hockney website" />
    </source-list>

  </post>

  <post index="0458" date="15/03/2012" std-date="2012-03-15T23:30:00.00Z" title="GLM 0.9.3.2 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      GLM 0.9.3.2 is a regular update fixing few minor bugs.
    </paragraph>

    <source-list>
      <source-download index="1110" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.3.pdf" title="GLM 0.9.3 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.3/index.html" title="GLM 0.9.3 API" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0457" date="13/03/2012" std-date="2012-03-13T01:30:00.00Z" title="OpenGL ES 2.0 and EGL on desktop, updated">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>
    
    <subtitle>Following a surprizing amount of feedbacks, I have updated the entire post accordingly. Thanks for contributing!</subtitle>
    
    <paragraph>
      There is a lot of reasons for OpenGL ES 2.0 on desktop but I especially like to picture it by "for the purpose of convergence".
      This includes computers, tablets and mobile phones but also the web through WebGL which is pretty much a Javascript binding of OpenGL ES 2.0.
      In practice we can imagine that it would be a great to be able to port directly a mobile phone game to a desktop platform and minimized code changes,
      the gap between between mobile phone performances and ultra-book laptop being not that large for example.
      We can also imagine authoring and prototyping GLSL shaders or even applications on desktop before using them on mobile devices.
    </paragraph>
    
    <paragraph>
      EGL, WGL and GLX? What's the way forward? When EGL was originally announced, it brought be a lot of hopes, 
      hopes that we will finally have a unified API across all platforms to handle the OpenGL contexts.
      That was in 2003... An early "leap of faith" hapenned when Sony announced that the PS3 would run OpenGL ES 1 + ES 2 level of extensions and EGL. 
      Unfortunately, OpenGL ES 2 has basically never been used on the PS3, Apple created it's own flavour of EGL 
      (<link href="https://developer.apple.com/library/ios/#DOCUMENTATION/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/WorkingwithOpenGLESContexts/WorkingwithOpenGLESContexts.html">EAGL</link>) and only AMD exposes EGL on desktop.
    </paragraph>
    
    <title>OpenGL ES 2.0 on Windows 7</title>
    
    <paragraph>
      On AMD side, OpenGL ES 2 is brought to desktop thanks to <link href="http://www.khronos.org/egl">EGL</link> and a dedicated 
      <link href="http://developer.amd.com/samples/sampleapps/pages/AMDOpenGLESSDK.aspx">SDK</link> is provided 
      which makes it significantly different from using OpenGL on desktop. A dedicated OpenGL ES 2 DLL for the implementation is provided 
      and I believe distributed with the AMD Catalyst drivers.
    </paragraph>
    
    <paragraph>
      On NVIDIA side, the strategy is different because OpenGL ES 2 is exposed through 
      <link href="http://msdn.microsoft.com/en-us/library/dd374394(v=vs.85).aspx">WGL</link>. 
      The idea was to make OpenGL ES 2 an OpenGL "profile". 
      When I first had a look at it, the implementation would expose all the OpenGL extensions which made me think something like 
      "Not that joke all over again?!" and I didn't waste any time with it.
      However, things have changed because now when creating an OpenGL ES 2 context, 
      only the OpenGL ES extensions are exposed and the drivers is even trying to report all the not ES compliant requests as errors. 
      I expect this to be a challenging work in progress so once again <link href="./post-0430.html#menu">report your bugs</link>!
    </paragraph>
    
    <paragraph>
    	A last option on Windows is <link href="http://code.google.com/p/angleproject/wiki/DevSetup">Angle</link> which brings support for both OpenGL ES 2.0
    	and EGL 1.4 on Windows by translating OpenGL calls to Direct3D 9 calls. It is used by both Firefox and Chrome on Windows.
    	Angle might be the only way to get OpenGL ES 2 running on Intel hardware. 
    	There is no news from Intel about OpenGL ES 2 or EGL support but our experiences tell us that they are most likely going to be last at the party.
    </paragraph>
    
    <title>OpenGL ES 2.0 on Linux</title>
	
	<paragraph>
		It looks like that Mesa is currently providing the <link href="http://www.mesa3d.org/egl.html">best implementation</link>: 
		Not only Mesa supports EGL 1.4 but the implementation can load OpenGL, OpenGL ES, OpenGL ES 2 and even OpenVG. 
		However, it's not clear to me whether it can load the proprierary implementations or not. 
		At least, AMD provides EGL 1.4 and OpenGL ES 2.0 implementations through the its 
		<link href="http://developer.amd.com/samples/sampleapps/pages/AMDOpenGLESSDK.aspx">SDK</link>.
	</paragraph>
    
    <paragraph>
    	On NVIDIA side, OpenGL ES 2.0 is exposed by 
    	<link href="http://www.opengl.org/registry/specs/EXT/glx_create_context_es2_profile.txt">GLX_EXT_create_context_es2_profile</link>
    	in a similar way than on Windows.
    </paragraph>
    
    <paragraph>
    	The Linux world is turning its back on <link href="http://www.x.org/wiki">X.org</link> to adopt 
    	<link href="http://ppaalanen.blogspot.com/2012/03/what-does-egl-do-in-wayland-stack.html">Wayland</link> which uses exclusively 
    	EGL making its support not only desirable but required by proprietary drivers to run their OpenGL ES 2.0 or even an OpenGL implementation.
    </paragraph>
    
    <title>OpenGL ES 2.0 on Windows 8</title>
    
    <paragraph>
    	Windows 8 x86 follows the same behavours than Windows 7 however Microsoft did a large cleaning of APIs on Windows 8 for ARM which implies currently no
    	WGL or EGL. The cleaning, or actually the not ported yet, is so drastic that even 
    	<link href="http://msdn.microsoft.com/en-us/library/bb200104.aspx">XNA</link> isn't supported on Windows 8 for ARM. 
    	Considering that Windows 8 for ARM target tablets and I guess ultra-book kind of laptop it seems unresonnable for Microsoft to avoid the 
    	Adreno, Mali, PowerVR and Tegra chips which software stacks have mainly mature over the years with OpenGL ES 2.0. 
    	In such case, implementing EGL sounds to me like the most reasonnable option for Microsoft. 
    	Another possibility would to use <link href="http://code.google.com/p/angleproject/">Angle</link> on Windows 8 ARM to get the OpenGL support.
    </paragraph>
    
    <title>OpenGL ES 2.0 on MacOS X</title>
    
    <paragraph>
    	Apple is definetely moving toward the convergence of MacOS X (renamed OS X for Mountain Lion) and iOS. 
    	However, beside development tools there is no OpenGL ES 2.0 on MacOS X. 
    	For EGL, Apple only supports it's own flavour, <link href="https://developer.apple.com/library/ios/#DOCUMENTATION/OpenGLES/Reference/EAGLContext_ClassRef/Reference/EAGLContext.html#//apple_ref/doc/uid/TP40007624">EAGL</link>, 
    	which is basiccaly EGL in Objective C with no access to the framebuffer as we much render to a colorbuffer.
    </paragraph>
    
    <title>Libraries</title>
    
    <paragraph>
      On the library point of view, only GLFW supports OpenGL ES 2 on desktop through the 
      <link href="http://www.opengl.org/registry/specs/EXT/wgl_create_context_es2_profile.txt">WGL_EXT_create_context_es2_profile</link> and 
      <link href="http://www.opengl.org/registry/specs/EXT/glx_create_context_es2_profile.txt">GLX_EXT_create_context_es2_profile</link> 
      extensions in the <link href="https://github.com/elmindreda/glfw">version 3</link> work in progress. 
      EGL supports is on the todo list and I certainly hope it will include desktop support.
      <link href="http://freeglut.sourceforge.net/">FreeGLUT 2.8.0</link> released less than two months ago doesn't support OpenGL ES 2 
      in any way but I hacked it to add the ES2 profile approach... 
      It tooks literrally 15 mins to add it to say how easy it was to do!
    </paragraph>
    
    <title>Conclusions</title>

    <paragraph>
      So what the future of OpenGL ES on desktop? First of all, it mainly passed by <link href="http://www.khronos.org/webgl/">WebGL</link> 
      because this is how real time graphics can reach everyone and not only people interested in games or specific graphics software.
      GLX and WGL looks nearly dead as the last version of GLX, <link href="http://www.opengl.org/registry/doc/glx1.4.pdf">GLX 1.4</link> was released in 2005,  
      and Microsoft is certainly not going to move WGL forward. Do we really need updates of these APIs? 
      On other end, the Khronos Group seems to be still actively working on EGL as 
      <link href="http://www.khronos.org/registry/egl/specs/eglspec.1.4.20110406.pdf">version 1.4</link> was released less than a year ago 
      and a <link href="http://www.khronos.org/registry/egl/specs/eglspec.1.4.20110406.pdf">quick reference card</link> 
      is available without forgetting that the embedded market, where EGL is everywhere, is fast growing. 
    </paragraph>

	<paragraph>
		<link href="mailto:mail@g-truc.net">Which direction do you think is the right one?</link>
	</paragraph>

    <source-list>
      <source-element type="Link" href="http://developer.amd.com/samples/sampleapps/pages/AMDOpenGLESSDK.aspx" title="AMD OpenGL ES 2 SDK" />
      <source-element type="Link" href="http://www.khronos.org/egl" title="EGL webpage" />
      <source-element type="Link" href="http://www.khronos.org/files/egl-1-4-quick-reference-card.pdf" title="EGL 1.4 reference card" />
      <source-element type="Link" href="http://www.mesa3d.org/egl.html" title="EGL for Mesa" />
      <source-element type="Link" href="http://ppaalanen.blogspot.com/2012/03/what-does-egl-do-in-wayland-stack.html" title="What does EGL do in the Wayland stack" />
      <source-element type="Link" href="http://www.opengl.org/registry/specs/EXT/wgl_create_context_es2_profile.txt" title="WGL_EXT_create_context_es2_profile" />
      <source-element type="Link" href="http://www.opengl.org/registry/specs/EXT/glx_create_context_es2_profile.txt" title="GLX_EXT_create_context_es2_profile" />
      <source-download index="1109" />
    </source-list>
  </post>
  
  <post index="0456" date="11/03/2012" std-date="2012-03-11T23:30:00.00Z" title="Week 10 photograph: Garbage in, garbage out">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-10-img.jpg"
      href="./photo/2012-10.jpg" />
  </post>

  <post index="0455" date="10/03/2012" title="Moving to github" std-date="2012-03-10T23:00:00.00Z">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      After year with <link href="http://sourceforge.net/users/groovounet">SourceForge.net</link>, I decided to switch some projects 
      (<link href="https://github.com/Groovounet/glm">GLM</link>, <link href="https://github.com/Groovounet/gli">GLI</link> and <link href="https://github.com/Groovounet/ogl-samples">the OpenGL Samples Pack</link>) 
      to <link href="https://github.com/Groovounet">github</link> using its source repository and bug report system.
    </paragraph>
    <paragraph>
      github has a great fork and pull request system, don't hesitate to fork and submit fixes and features.
     </paragraph>

    <source-list>
      <source-element type="Link" href="https://github.com/Groovounet" title="github repository for many G-Truc Creation projects" />
    </source-list>
  </post>
  
  <post index="0454" date="04/03/2012" std-date="2012-03-04T00:00:00.00Z" title="Week 9 photograph: The yellow bile">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-09-img.jpg"
      href="./photo/2012-09.jpg" />
  </post>

  <post index="0453" date="29/02/2012" std-date="2012-02-29T23:30:00.00Z" title="February 2012 OpenGL drivers status, update 2">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      This month the last release drivers appears to be for GeForce, <link href="http://www.guru3d.com/news/geforce-forceware-29553-64bit-whql-download/">Forceware 295.73</link>; and for Radeon, <link href="http://downloads.guru3d.com/AMD-Catalyst-8.96-14-February-download-2865.html">Catalyst 12.x preview 8.96</link>.
    </paragraph>

    <paragraph>
      Catalyst 12.x preview 8.96 looks like a leak but it is available online and performs relatively well as it fixes few bugs.
      Following some discussions about SNORM texture and texture format conversions in OpenGL, I decided to make the following write up for this status for programmers interested by these greedy OpenGL details.
    </paragraph>

    <title>Texture format to internal format conversions</title>
    <paragraph>
      Here is the following up some discussions resulting of the SNORM textures status from last month.
    </paragraph>
    <paragraph>
      Typically with OpenGL textures, we are living in a convenient world where whatever texture format data 
      will be converted automatically by the implementation to whatever internal format the user requested or 
      to be precise, to whatever internal format with a precision at least big enough to store the request 
      internal format. This is to say for example a lot of GPUs doesn’t support anymore <codeword>RGB5A1</codeword> format anymore 
      but this format remains part of OpenGL 4.2 specification. An implementation may implement this format 
      with RGBA8 instead for example. This conversion support is so wide that we can even submit RGBA32F data 
      and convert it to DXT1 using <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glTexImage2D.xml">glTexImage2D</codeword> 
      if we wish… I am not saying I can imagine a good reason to do that but it’s possible.
    </paragraph>
    <paragraph>
      With the release of <codeword href="http://www.opengl.org/registry/specs/EXT/texture_integer.txt">EXT_texture_integer</codeword>, 
      it seems that all these conversions were not really making 
      the authors of this extension in a good mood so that this extension prevent any kind of conversion 
      by forcing the application which want to use an integer texture to use one of the following format 
      without any format conversion possible.
    </paragraph>
    <list>
      <list-element>GL_RED_INTEGER</list-element>
      <list-element>GL_GREEN_INTEGER</list-element>
      <list-element>GL_BLUE_INTEGER</list-element>
      <list-element>GL_ALPHA_INTEGER</list-element>
      <list-element>GL_RGB_INTEGER</list-element>
      <list-element>GL_RGBA_INTEGER</list-element>
      <list-element>GL_BGR_INTEGER</list-element>
      <list-element>GL_BGRA_INTEGER</list-element>
      <list-element>GL_LUMINANCE_INTEGER (compatibility profile)</list-element>
      <list-element>GL_LUMINANCE_ALPHA_INTEGER (compatibility profile)</list-element>      
    </list>
    <paragraph>
      In parallel to this extension, 
      <codeword href="http://www.opengl.org/registry/specs/EXT/texture_snorm.txt">EXT_texture_snorm</codeword> 
      extension was released providing snorm textures 
      (normalized texture between -1.0 and 1.0 instead of 0.0 and 1.0). This extension written against OpenGL 3.0, 
      followed the same precedent than any other OpenGL core textures which means that we could convert 
      any texture format to a snorm texture internal format.
    </paragraph>
    <paragraph>
      Unfortunately and probably because OpenGL tends to build up more exceptions than the French grammar does,
      OpenGL core specification (from 3.1 onward)  allows conversion of only signed format data 
      (<codeword>GL_BYTE</codeword>, <codeword>GL_SHORT</codeword>, <codeword>GL_INTEGER</codeword>) to snorm textures.
    </paragraph>
    <paragraph>
      What implementations do? AMD implementation exposes <codeword href="http://www.opengl.org/registry/specs/EXT/texture_snorm.txt">EXT_texture_snorm</codeword> 
      so we should expect that we could create 
      snorm texture from unsigned integer data. Unfortunately and this is the result of the status, the implementation 
      result isn’t correct. On NVIDIA side, <codeword href="http://www.opengl.org/registry/specs/EXT/texture_snorm.txt">EXT_texture_snorm</codeword> 
      is not exposed so we should get an OpenGL error when 
      trying to convert unsigned format data to snorm texture. However,  this pass and create a functional texture.
    </paragraph>

    <code title="Create a classic OpenGL UNORM texture:">
      <line>
        glGenTextures(1, &amp;TextureName);
      </line>
      <line>
        glBindTexture(GL_TEXTURE_2D, TextureName);
      </line>
      <line>
        <comment>// Memory allocation</comment>
      </line>
      <line>
        glTexStorage2D(GL_TEXTURE_2D, Levels, <bold>GL_RGBA8</bold>, Width, Height); 
      </line>
      <line>
        <comment>// Convertion and memory copy</comment>
      </line>
      <line>
        glTexSubImage2D(GL_TEXTURE_2D, Level, 0, 0, Wdith, Height, <bold>GL_RGBA</bold>, <bold>GL_UNSIGNED_BYTE</bold>, Data);
      </line>
    </code>

    <code title="Create an integer texture:">
      <line>
        glGenTextures(1, &amp;TextureName);
      </line>
      <line>
        glBindTexture(GL_TEXTURE_2D, TextureName);
      </line>
      <line>
        <comment>// Memory allocation</comment>
      </line>
      <line>
        glTexStorage2D(GL_TEXTURE_2D, Levels, <bold>GL_RGBA8UI</bold>, Width, Height); 
      </line>
      <line>
        <comment>// Convertion and memory copy</comment>
      </line>
      <line>
        glTexSubImage2D(GL_TEXTURE_2D, Level, 0, 0, Wdith, Height, <bold>GL_RGBA_INTEGER</bold>, <bold>GL_UNSIGNED_BYTE</bold>, Data);
      </line>
    </code>

    <code title="Create a SNORM texture:">
      <line>
        glGenTextures(1, &amp;TextureName);
      </line>
      <line>
        glBindTexture(GL_TEXTURE_2D, TextureName);
      </line>
      <line>
        <comment>// Memory allocation</comment>
      </line>
      <line>
        glTexStorage2D(GL_TEXTURE_2D, Levels, <bold>GL_RGBA8_SNORM</bold>, Width, Height); 
      </line>
      <line>
        <comment>// Convertion and memory copy</comment>
      </line>
      <line>
        glTexSubImage2D(GL_TEXTURE_2D, Level, 0, 0, Wdith, Height, <bold>GL_RGBA</bold>, <bold>GL_BYTE</bold>, Data);
      </line>
    </code>

    <title>04/03/2012 UPDATE</title>

    <paragraph>
      I recieved few feedbacks and I am taking advantage of this quick update to comment them and update the drivers status.
    </paragraph>

    <subtitle>Conversion of SNORM texture data</subtitle>

    <paragraph>
      Some new evidences demonstrate that I was wrong on the snorm texture and the OpenGL specification allows to convert anything to SNORM textures.
    </paragraph>

    <quote author="OpenGL 4.2 specification, 3.7.2 Transfer of Pixel Rectangles - Unpacking">
      Data are taken from the currently bound pixel unpack buffer or client memory as a
      sequence of signed or unsigned bytes (GL data types byte and ubyte), signed or
      unsigned short integers (GL data types short and ushort), signed or unsigned
      integers (GL data types int and uint), or floating point values (GL data types
      half and float). These elements are grouped into sets of one, two, three, or
      four values, depending on the format, to form a group. Table 3.3 summarizes the
      format of groups obtained from memory; it also indicates those formats that yield
      indices and those that yield floating-point or integer components.
    </quote>
    
    <subtitle>gl-410-fbo-layered broken on NVIDIA?</subtitle>

    <paragraph>
      I didn't really took time to figure out the bottom of this but it looks like there is a problem: 
      The sample displays a black screen, no OpenGL error generates... but the sample is still working on AMD.
      I can't exclude that I did something wrong.
    </paragraph>

    <subtitle>Vertex inputs and structures</subtitle>
    
    <paragraph>
      The GLSL 4.20 clearly specify that vertex input can't be structures but it NVIDIA implementation supports them. 
      Even if the GLSL compiler should generate an error, it sounds like a good idea and it doesn't look like it's an issue for the enumeration API.
    </paragraph>
    
    <quote author="GLSL 4.20.11 specification, section 4.3.4 Input Variables">
      "Vertex shader inputs can also form arrays of these types, but not structures."
    </quote>

    <subtitle>Implicit conversions</subtitle>

    <paragraph>
      I can't say I really understand GLSL implicit conversions. It would be me they would all generate GLSL error and 
      I think an implementation should as least generate an warning for each like a C++ compiler would do. 
      GLSL defines a clear list for the implicit conversion section "4.1.10 Implicit Conversions". In this list, 
      the allowed conversions are always between type with the same number of components. 
      It seems that in some case AMD implementation allows implicit conversions between vectors of different sizes.
    </paragraph>

    <paragraph>
      If you have feedback on this, please don't hesitate to drop me a mail.
    </paragraph>
    
    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <paragraph>
      Once again, don't forget to contribute to the OpenGL community by <link href="post-0430.html#menu">reporting your bugs</link>!
    </paragraph>

    <title>The test</title>
    <paragraph>
      These tests have been done on Windows 7 64 with the OpenGL Samples Pack 4.2.4 branch, still in development, 
      on an GeForce GTX 470 and a Radeon HD 5850.
    </paragraph>

    <title>05/03/2012 UPDATE 2</title>

    <paragraph>
      I think that OpenGL 4.2 is so much better than OpenGL 4.1 because it completely clarifies 
      the interface matching between shader stages. However, I discover a new corner case: 
      With linked programs, if a built-in block is declared on the vertex shader stage but the next shader stage doesn't declare it, 
      this is undefined and either lead to a silent error (NVIDIA implemetation) or a sort of luck (AMD implemetation where it's working). 
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.4 wip, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 12.2 preview, 8.94 (25/01/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.x preview, 8.96 (14/02/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.53 (22/12/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 295.73 (22/02/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="blue">Allows an implicit cast on texture coordinates parameter</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-conversion</table-entry-element>
        <table-entry-element color="red">Immutable texture and BC7 conversions is not working</table-entry-element>
        <table-entry-element color="red">Immutable texture and BC7 conversions is not working</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-interface-matching</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">glGetAttribLocation fails to return the location here</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="blue">Structure for vertex inputs supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="red">Unpack isn't correct?</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-store</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">glClear is skipped for the first frame</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-layered</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green">If a vertex shader declares a built-in block and the geometry shader doesn't the result is undefined.</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="red">Unsupported DSA storage functions</table-entry-element>
        <table-entry-element color="red">Unsupported DSA storage functions</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="red">May crash if the binary is not AMD's</table-entry-element>
        <table-entry-element color="red">May crash if the binary is not AMD's</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
        <table-entry-element color="green">EXT_transform_feedback extension string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-debug-output</table-entry-element>
        <table-entry-element color="red">DebugControl doesn't work, null-terminated strings generate errors</table-entry-element>
        <table-entry-element color="red">DebugControl doesn't work, null-terminated strings generate errors</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-separated</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-interleaved</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-format</table-entry-element>
        <table-entry-element color="red">SNORM conversion not performed</table-entry-element>
        <table-entry-element color="red">SNORM conversion not performed</table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
        <table-entry-element color="green">EXT_texture_snorm string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-without-vertex-attrib</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-type</table-entry-element>
        <table-entry-element color="red">i32 vertex input data not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.4-wip, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 12.2 preview, 8.94 (25/01/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.x preview, 8.96 (14/02/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.53 (22/12/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 295.73 (22/02/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-texture-copy-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-clamp-separate-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-srgb-decode-ext</table-entry-element>
        <table-entry-element color="white">EXT_texture_sRGB_decode not supported</table-entry-element>
        <table-entry-element color="white">EXT_texture_sRGB_decode not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-position-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-indirect-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-pinned-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_pinned_memory not supported</table-entry-element>
        <table-entry-element color="white">AMD_pinned_memory not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-barrier-gtc</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-blend-op-amd</table-entry-element>
        <table-entry-element color="white">This is a Radeon 6900+ series feature</table-entry-element>
        <table-entry-element color="white">This is a Radeon 6900+ series feature</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample-explicit-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1107" />
    </source-list>
  </post>

  <post index="0452" date="26/02/2012" std-date="2012-02-26T00:00:00.00Z" title="Week 8 photograph: 1,500 °C">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-08-img.jpg"
      href="./photo/2012-08.jpg" />
  </post>

  <post index="0451" date="19/02/2012" std-date="2012-02-19T23:00:00.00Z" title="Week 7 photograph: Le re-doux">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-07-img.jpg"
      href="./photo/2012-07.jpg" />
  </post>

  <post index="0450" date="18/12/2012" std-date="2012-02-18T23:00:00.00Z" title="G-Truc Creation 7.0.3 sources released">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      I used to published the source code of G-Truc Creation website but for not particular reason it hasn't been the case since the version 7 got released more than a year ago. This mistake is now fixed.
    </paragraph>

    <source-list>
      <source-download index="1108" />
    </source-list>
  </post>

  <post index="0449" date="14/02/2012" std-date="2012-02-14T03:00:00.00Z" title="Week 6 photograph: Between curves and lines">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-06-img.jpg"
      href="./photo/2012-06.jpg" />
  </post>

  <post index="0448" date="05/02/2012" std-date="2012-02-05T03:00:00.00Z" title="Week 5 photograph: Splash">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-05-img.jpg"
      href="./photo/2012-05.jpg" />
  </post>

  <post index="0447" date="04/02/2012" std-date="2012-02-04T20:00:00.00Z" title="Gerhard Richter: Panorama">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      A large retrospective of <link href="http://en.wikipedia.org/wiki/Gerhard_Richter">Gerhard Richter (1932 - )</link>
      is currently touring in Europe, from the 12 of February to the 13 of May at the
      <link href="http://www.gerhardrichterinberlin.org/">Neue Nationalgalerie</link> and then from the 6 of June to the 24 of September
      at the <link href="http://www.centrepompidou.fr/">Centre Pompidou</link> in Paris. I had the chance to visit the
      <link href="http://www.tate.org.uk/modern/exhibitions/gerhardrichter/">first date of the tour at the London Modern Tate</link>.
    </paragraph>

    <paragraph>
      I had <link href="http://www.npg.org.uk/richter/">the opportunity</link> to largely discover Gerhard Richter's portraits two years ago.
      It was an highly influenciential moment for my practice of portrait photography, missing out this exhibition tour stop in London wasn't an option for me.
    </paragraph>

    <image title="The Reader, Gerhard Richter, 1994"
      color="white"
      img="./post/0448-1.jpg"
      href="./post/0448-1.jpg" />

    <paragraph>
      "The Reader" is a good illutration of how Gerhard Richter fades the boundary between painting and photography.
      In this piece, like in all of his portrait, he created his painting from a photograph which gives this in between look to
      his representation of modern life.
    </paragraph>

    <paragraph>
      One of the most remarcable work exposed was "Annunciation after Titian" which is built with the same process than his portrait but based on a painting.
      He actually explored through multiple experiments where to set the bluriness boundary using different levels of figuration and abtraction.
    </paragraph>

    <image title="Annunciation after Titian, Gerhard Richter, 1973"
      color="white"
      img="./post/0448-2.jpg"
      href="./post/0448-2.jpg" />

    <image title="Annunciation, Titian, 1973"
      color="white"
      img="./post/0448-2b.jpg"
      href="http://en.wikipedia.org/wiki/Titian" />

    <paragraph>
      The most inspirational aspect was for me the color charts.
      There is a part of simplicity in just enjoying a flat color or how a color comes together with its neighbours.
      Also, there is something about the distribution of the colors and the process for choosing which color belong to which case.
      After some experiments I did by myself, I realized that figuring out which color belong to which box is pretty challenging and
      random distribution a bitch. This is a rule of probability but even if a case is unlikely to happen, it might happen!
    </paragraph>

    <image title="4096 Colours, Gerhard Richter, 1974"
      color="white"
      img="./post/0448-3.jpg"
      href="./post/0448-3.jpg" />

    <paragraph>
      I would like to finish with the experiment "Cage" composed by six pieces designed for him to explore the evolution of his mood over a long period of time.
    </paragraph>

    <image title="Cage 1, 2, 3, 4, 5, 6, Gerhard Richter, 2006"
      color="white"
      img="./post/0448-4-small.jpg"
      href="./post/0448-4.jpg" />

    <paragraph>
      The work of Gerhard Richter offers a great variety that only seeing the exhibition can reflect.
      I still can't decide which exhibition between this exhibition and the <link href="post-0421.html#menu">René Magritte</link> exhibition
      was my favorite in 2011 but it is on top of my recommendations in 2012 for people passing by Berlin or Paris.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.tate.org.uk/modern/exhibitions/gerhardrichter/" title="Tate Modern exhibition page" />
      <source-element type="Link" href="http://www.gerhardrichterinberlin.org/" title="Neue Nationalgalerie exhibition page" />
      <source-element type="Link" href="http://www.gerhard-richter.com/" title="Gerhard Richter website" />
    </source-list>
  </post>

  <post index="0446" date="04/02/2012" std-date="2012-02-04T23:30:00.00Z" title="OpenGL Samples Pack 4.2.3.1 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The <link href="project-0026.html#menu">OpenGL Samples Pack</link> 4.2.3.1 improves the sample exposing
      <link href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">ARB_debug_output</link>
      and added 420-memory-barrier sample described in <link href="post-0445.html">January 2012 OpenGL drivers status</link>
    </paragraph>

    <source-list>
      <source-download index="1107" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
      <source-element type="Link" href="post-0414.html" title="OpenGL 4.2 review"/>
    </source-list>
  </post>

  <post index="0445" date="30/01/2012" std-date="2012-01-30T23:30:00.00Z" title="January 2012 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      For this month OpenGL drivers status, the drivers haven't really evolved as surprizingly NVIDIA didn't release any drivers and AMD drivers doesn't fix anything I noticed compare to last month.
      However, the just released <link href="post-0443.html#menu">OpenGL Samples Pack 4.2.3</link> brings a set of changes that give us some new information.
    </paragraph>

    <title>Rendering without fragment shader output variables</title>
    <paragraph>
      First of all, I fixed the results of 420-image-store on NVIDIA as I found some languages that demonstrates that the results of the framebuffer is undefined as NVIDIA implementation leads to.
    </paragraph>

    <quote author="GLSL 4.20.8 specification, section 4.2.1 Selecting Buffers for Writing">
      "If a fragment shader writes to none of gl_FragColor, gl_FragData, nor any user-deﬁned output variables,
      the values of the fragment colors following shader execution are undeﬁned, and may differ for each fragment color."
    </quote>

    <paragraph>
      I pretty much think that this language could be changed to get a more sensible result for rendering without fragment shader output variable
      but in the meantime we will have to use <codeword>glColorMaski(AttachementIndex, GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE);</codeword>.
    </paragraph>

    <title>Using and updating a buffer simultaneously</title>
    <paragraph>
      For four or five years, I have in mind "it's all about memory bandwidth" and this remains true to me even if the problem has slightly evolved.
      These days some interesting solutions are coming with programmable vertex pulling,
      <link href="http://schedule.gdconf.com/session/13473297/Partially-Resident_Textures_on_next-generation_AMD_GPUs_%28Presented_by_AMD%29">partially resident resources</link> or
      <link href="http://maverick.inria.fr/Publications/2011/Cra11/">voxel representations</link> which all converge toward the need for alternative representations of the asserts and a finer control of our accesses and updates the data.
      OpenGL buffer usage flags days are numbered.
      There is still a long way to go but I added a trivial embodiment of this direction with <codeword>420-buffer-barrier-gtc</codeword> which updates a buffer and use it at the same time
      but ensures a fine granularity synchronization with <link href="http://www.opengl.org/sdk/docs/man4/xhtml/glMemoryBarrier.xml">glMemoryBarrier</link>.
      According to the OpenGL specification, this idea should generates an invalide operation error but it appears to work fine on AMD implementation.
      We would probably need a better API to reach something really interesting but it's an interesting start to me.
    </paragraph>

    <quote author="GLSL 4.20.8 specification, Effects of Mapping Buffers on Other GL Commands">
      "Most, but not all GL commands will detect attempts to read data from a mapped
      buffer object. When such an attempt is detected, an INVALID_OPERATION error
      will be generated. Any command which does not detect these attempts, and performs
      such an invalid read, has undefined results and may result in GL interruption
      or termination."
    </quote>

    <paragraph>
      Imagine an OpenGL world with Direct State Access, extensive debugging functionnalities and finer memory control... Pretty nice and ineluctable future!
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <paragraph>
      Once again, don't forget to contribute to the OpenGL community by <link href="post-0430.html#menu">reporting your bugs</link>!
    </paragraph>

    <title>The test</title>
    <paragraph>
      These tests have been done on Windows 7 64 with the OpenGL Samples Pack 4.2.3.1 on an GeForce GTX 470 and a Radeon HD 5850.
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.3.1, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 12.1a preview (06/01/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.2 preview (25/01/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.36 (28/11/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.53 (22/12/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-interface-matching</table-entry-element>
        <table-entry-element color="red">glGetAttribLocation fails to return the location here</table-entry-element>
        <table-entry-element color="red">glGetAttribLocation fails to return the location here</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="red">Unpack isn't correct?</table-entry-element>
        <table-entry-element color="red">Unpack isn't correct?</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="red">Unsupported DSA storage functions</table-entry-element>
        <table-entry-element color="red">Unsupported DSA storage functions</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="red">May crash if the binary is not AMD's</table-entry-element>
        <table-entry-element color="red">May crash if the binary is not AMD's</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="orange">max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="orange">max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">EXT_transform_feedback extension string missing</table-entry-element>
        <table-entry-element color="orange">EXT_transform_feedback extension string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-debug-output</table-entry-element>
        <table-entry-element color="red">DebugControl doesn't work, null-terminated strings generate errors</table-entry-element>
        <table-entry-element color="red">DebugControl doesn't work, null-terminated strings generate errors</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-separated</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-interleaved</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-format</table-entry-element>
        <table-entry-element color="red">SNORM conversion not performed</table-entry-element>
        <table-entry-element color="red">SNORM conversion not performed</table-entry-element>
        <table-entry-element color="orange">EXT_texture_snorm string missing</table-entry-element>
        <table-entry-element color="orange">EXT_texture_snorm string missing</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-sampler-offset</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-without-vertex-attrib</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-type</table-entry-element>
        <table-entry-element color="red">i32 vertex input data not supported</table-entry-element>
        <table-entry-element color="red">i32 vertex input data not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.3.1, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 12.1a preview (06/01/2012)</table-title-element>
        <table-title-element>AMD Catalyst 12.2 preview (25/01/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.36 (28/11/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.53 (22/12/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-texture-copy-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-clamp-separate-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-srgb-decode-ext</table-entry-element>
        <table-entry-element color="white">EXT_texture_sRGB_decode not supported</table-entry-element>
        <table-entry-element color="white">EXT_texture_sRGB_decode not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-position-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-indirect-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-pinned-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_pinned_memory not supported</table-entry-element>
        <table-entry-element color="white">AMD_pinned_memory not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-barrier-gtc</table-entry-element>
        <table-entry-element color="white">Not tested</table-entry-element>
        <table-entry-element color="blue">Works as desired</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
        <table-entry-element color="white">Generates an invalid operation as specified</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-blend-op-amd</table-entry-element>
        <table-entry-element color="white">This is a Radeon 6900+ series feature</table-entry-element>
        <table-entry-element color="white">This is a Radeon 6900+ series feature</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample-explicit-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1106" />
    </source-list>
  </post>

  <post index="0444" date="29/01/2012" std-date="2012-01-29T01:00:00.00Z" title="Week 4 photograph: Pleasure in a gradient up there">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-04-640.jpg"
      href="./photo/2012-04.jpg" />
  </post>

  <post index="0443" date="28/01/2012" std-date="2012-01-28T23:30:00.00Z" title="OpenGL Samples Pack 4.2.3.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The <link href="project-0026.html#menu">OpenGL Samples Pack</link> 4.2.3.0 adds some samples primarily exploring proprietary extensions.
    </paragraph>

    <list name="Changelog:">
      <list-element>Added 420-blend-op-amd sample</list-element>
      <list-element>Added 420-buffer-pinned-amd sample</list-element>
      <list-element>Added 420-debug-output sample</list-element>
      <list-element>Added 420-fbo-srgb-decode-ext sample</list-element>
      <list-element>Added 420-interface-matching sample</list-element>
      <list-element>Added 330-texture-format sample</list-element>
      <list-element>Added 330-fbo-multisample-explicit-nv sample</list-element>
      <list-element>Updated 410-program-binary sample</list-element>
      <list-element>Refactored code</list-element>
    </list>

    <paragraph>
      January 2012 OpenGL drivers status will be based on this version.
    </paragraph>

    <source-list>
      <source-download index="1106" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
      <source-element type="Link" href="post-0414.html" title="OpenGL 4.2 review"/>
    </source-list>
  </post>

  <post index="0442" date="25/01/2012" std-date="2012-01-25T14:30:00.00Z" title="GLM 0.9.3.1 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      GLM 0.9.3.1 fixes some platform detection issues and some warnings.
    </paragraph>

    <source-list>
      <source-download index="1105" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.3.pdf" title="GLM 0.9.3 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.3/index.html" title="GLM 0.9.3 API" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0441" date="24/01/2012" std-date="2012-01-24T15:30:00.00Z" title="OpenGL Samples Pack 4.2.2.1 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      Minor revision of the <link href="project-0026.html#menu">OpenGL Samples Pack</link>. It Fixes few bugs and updates the external libraries.
    </paragraph>

    <source-list>
      <source-download index="1104" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
      <source-element type="Link" href="post-0414.html" title="OpenGL 4.2 review"/>
    </source-list>
  </post>

  <post index="0440" date="22/01/2012" std-date="2012-01-22T23:30:00.00Z" title="Week 3 photograph: White monochrome">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-03-960.jpg"
      href="./photo/2012-03.jpg" />
  </post>

  <post index="0439" date="16/01/2012" std-date="2012-01-16T23:30:00.00Z" title="Week 2 photograph: Mondrian without rest">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-02-960.jpg"
      href="./photo/2012-02.jpg" />
  </post>

  <post index="0438" date="11/01/2012" std-date="2012-01-11T23:30:00.00Z" title="Week 1 photograph: Distributed rocks">
    <meta>
      <tag>gtc-crea-photograph</tag>
    </meta>

    <image
      color="black"
      img="./photo/2012-01-960.jpg"
      href="./photo/2012-01.jpg" />
  </post>

  <post index="0437" date="09/01/2012" std-date="2012-01-09T23:30:00.00Z" title="GLM 0.9.3.0 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      GLM 0.9.3.0 is finally released. Since the branch 0.9.2, the test bench and the Doxygen API documentation has been expended significantly leading
      to an even more reliable implementation and hopefully an even smoother development experience.
    </paragraph>
    <paragraph>
      For the feature set, the GLSL noise functions are added, based on the implementation of <link href="https://github.com/ashima/webgl-noise">webgl-noise</link>.
      Some users might prefer the promoted GLM_GTC_noise extension also based on <link href="https://github.com/ashima/webgl-noise">webgl-noise</link> but with
      a different interface and three noise methods: Perlin noise, periodic noise and simplex noise.
    </paragraph>
    <image img="./post/0437-1.jpg" title="2D simplex noise with GLM_GTC_noise" color="'white'" />
    <paragraph>
      Additionally, the random number generation functions (GLM_GTC_random) which provides various interesting distributions as illustrated below.
      Also reaching GLM tool box, the new experimental extension GLM_GTX_constants provides a set of constants.
    </paragraph>
    <image img="./post/0437-2.jpg" title="Spherical random distribution with GLM_GTC_random" color="'white'" />

    <paragraph>
      Finally, swizzle operators are a challenging task to implement but thanks to the effort of many contributors, GLM 0.9.3.0 provides something interesting, but admittably
      not perfect. The new implementation is a great improvement considering the incompatibilities with some external libraries in GLM 0.9.2.7. GLM 0.9.3 provides two implemetanations, one for C++ 98
      compilers and one for C++ 11 compilers providing an implemetnation closer to what GLSL does. Indeed the C++ 98 implementation is compatible with C++ 11 compilers.
    </paragraph>

    <code title="Implementation for C++ 98 compilers:">
      <line>
        <comment>// To declare before including glm.hpp, to use the swizzle operators</comment>
      </line>
      <line>
        <keyword>#define </keyword> GLM_SWIZZLE
      </line>
      <line>
        <keyword>#include </keyword>
        <string>&lt;glm/glm.hpp&gt;</string>
      </line>
      <line>

      </line>
      <line>
        <keyword>void</keyword> example_cpp98()
      </line>
      <line>
        {
      </line>
      <line align="32px">
        glm::vec4 a = glm::vec4(2, 0, 0, 0);
      </line>
      <line align="32px">
        glm::vec4 b = glm::vec4(0, 2, 0, 0);
      </line>
      <line align="32px">
        glm::vec3 c = vec4((a.zyx() + b.xyz()).xyz() * 0.5f, 1.0f);
      </line>
      <line align="32px">
        glm::vec2 d = glm::normalize(glm::vec2(c.yz()));
      </line>
      <line align="32px">
        a.xyzw() = d.xyxy();
      </line>
      <line>
        }
      </line>
    </code>

    <code title="Implementation for C++ 11 compilers:">
      <line>
        <comment>// To declare before including glm.hpp, to use the swizzle operators</comment>
      </line>
      <line>
        <keyword>#define </keyword> GLM_SWIZZLE
      </line>
      <line>
        <keyword>#include </keyword>
        <string>&lt;glm/glm.hpp&gt;</string>
      </line>
      <line>

      </line>
      <line>
        <keyword>void</keyword> example_cpp11()
      </line>
      <line>
        {
      </line>
      <line align="32px">
        glm::vec4 a = glm::vec4(2, 0, 0, 0);
      </line>
      <line align="32px">
        glm::vec4 b = glm::vec4(0, 2, 0, 0);
      </line>
      <comment>// To use a swizzle operator with an operator, it needs to be cast into a vector either explicitly or with the operator ()</comment>
      <line align="32px">
        glm::vec4 c = glm::vec4((a.zyx() + b.xyz()).xyz * 0.5f, 1.0f);
      </line>
      <line align="32px">
        <comment>// Before being pasted to a function, a swizzle operator needs to be cast into</comment>
      </line>
      <line align="32px">
        <comment>// a vector either explicitly or with the operator ()</comment>
      </line>
      <line align="32px">
        glm::vec2 d = glm::normalize(glm::vec2(c.yz));
      </line>
      <line align="32px">
        <comment>// glm::vec2 d = glm::normalize(c.yz()); // Equivalent code</comment>
      </line>
      <line align="32px">
        a.xyzw = d.xyxy;
      </line>
      <line>
        }
      </line>
    </code>

    <source-list>
      <source-download index="1103" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.3.pdf" title="GLM 0.9.3 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.3/index.html" title="GLM 0.9.3 API" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0436" date="05/01/2012" std-date="2012-01-05T23:30:00.00Z" title="December 2011 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      A little late OpenGL drivers status this month and this is pretty unfortunate considering the progress of AMD OpenGL 4.2 drivers which fixes half of the remaining bugs, leaving only four of them.
    </paragraph>
    <paragraph>
      I had some discussions about the issue I have reported on the 420-image-store and it is not clear to me whether this is a bug or not.
      My understanding is that it is a bug but I have to have a closer look as the specification language which I haven't put to my priorities yet.
    </paragraph>

    <title>UPDATE on the 06/01/2012</title>

    <paragraph>
      AMD Catalyst 12.1a preview support a new extension: NV_copy_image. Futhermore, the extension run successfully the sample 420-texture-copy-nv.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <title>The test</title>
    <paragraph>
      These tests have been done on Windows 7 64 with the <link href="post-0428.html">OpenGL Samples Pack 4.2.2.0</link> on an GeForce GTX 470 and a Radeon HD 5850.
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.2.0, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 11.10 preview 3 (16/10/2011)</table-title-element>
        <table-title-element>AMD Catalyst 12.1a preview (06/01/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.36 (28/11/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.53 (22/12/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="red">Can't readback built-in variables. max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="red">Texture storage with BPTC generates invalid operation errors</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="red">Unpack isn't correct?</table-entry-element>
        <table-entry-element color="red">Unpack isn't correct?</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Scissor test dysfunctional?</table-entry-element>
        <table-entry-element color="red">Scissor test dysfunctional?</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="red">Unsupported DSA storage functions</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="orange">glMapBufferRange on atomic counter fails</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="orange">max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="orange">max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-separated</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-interleaved</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-sampler-offset</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-without-vertex-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-type</table-entry-element>
        <table-entry-element color="red">i32 vertex input data not supported</table-entry-element>
        <table-entry-element color="red">i32 vertex input data not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.2.0, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 11.10 preview 3 (16/10/2011)</table-title-element>
        <table-title-element>AMD Catalyst 12.1a preview (06/01/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.36 (28/11/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.53 (22/12/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-texture-copy-nv</table-entry-element>
        <table-entry-element color="white">NV_copy_image not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-position-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-indirect-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-clamp-separate-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.2.0, specification bugs workaround</table-title-element>
        <table-title-element>AMD Catalyst 11.10 preview 3 (16/10/2011)</table-title-element>
        <table-title-element>AMD Catalyst 12.1a preview (06/01/2012)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.36 (28/11/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.53 (22/12/2012)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-glsl-interface-matching-array-gtc</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array-gtc</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="blue">Allows dynamic indexing of the sampler array</table-entry-element>
        <table-entry-element color="blue">Allows dynamic indexing of the sampler array</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-instanced-array-dsa-gtc</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1101" />
    </source-list>
  </post>

  <post index="0435" date="23/12/2011" std-date="2011-12-23T00:30:00.00Z" title="Erró - Drawings at Reykjavík's Art Museum">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      Reykjavík's Art museum feature an exhibition about the drawings of the Icelandic artist <link href="http://fr.wikipedia.org/wiki/Err%C3%B3">Erró</link> mainly famous for his collages.
    </paragraph>

    <image title="Study for Bureau de propagande Fucky-Strike, Erró, 1959"
      color="white"
      img="./post/0435.jpg"
      href="./post/0435.jpg" />

    <paragraph>
      The exhibition contains 200 drawings mainly from his early career while he was moving from countries to countries before stauing in France where he became obcess with collage.
    </paragraph>

    <video title="Erró - Drawings" href="http://www.youtube.com/v/If0zU3Puvrg?version=3&amp;hl=en_US&amp;rel=0" width="800" height="500" />

    <paragraph>
      This exhibition is the display of the education that lead an artist to become one. It is running until Auguest 2012.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.artmuseum.is/desktopdefault.aspx/tabid-2182/3368_read-1810/date-1698" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0434" date="18/12/2011" std-date="2011-12-18T12:30:00.00Z" title="'Rasterization patterns' of OpenGL 4 hardware">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>
    <paragraph>
      Last summer, inspired by <codeword href="http://www.icare3d.org/blog_techno/gpu/the_froggy_fragsniffer.html">The Froggy FragSniffer</codeword>,
      I made an experiment taking advantage of atomic counters to display the "rasterization patterns" of the GeForce GTX 470 and the Radeon HD 5850 in real time.
    </paragraph>

    <paragraph>
      This is arguably the rasterisation patterns or the order of execution of the atomic counter operations.
      Nevertheless, there is a correlation and the results highlight interesting features.
    </paragraph>
    <paragraph>
      On AMD hardware everything it processes in <link href="http://en.wikipedia.org/wiki/Z-order_(curve)">Z order</link> for the purpose of optimising the cache access.
      The Z-order is kept until a size of 16 pixels height is reached where the processing start to process by bands of 64 pixels per 512 pixels in which tiles of 16 by 16 pixels are scheduled along than band from top to bottom or bottom to top and the reverse order for the following collumn.
      Left to right of right to left order of the scheduling depends of the position of first vertex submitted.
      The Radeon 5850 seems to be highly but not completely reprodutible producing frame after frame nearly the same image.
      It seems that the GPU schedules its work per block of 8 by 8 pixels and this is probably is finest granularity.
    </paragraph>
    <video title="Radeon HD 5000 series rasterizer pattern using OpenGL 4.2 atomic counter" href="http://www.youtube.com/v/WnUS8kzA3dI?version=3&amp;hl=en_US&amp;rel=0" width="800" height="500" />

    <paragraph>
      NVIDIA hardware handles atomic operations in a very different way than AMD hardware as the atomic operations seems to be asynchronous
      which involves a high level of high frequency variations from frame to frame.

      Looking closely as the rendering features, the finest processing granularity seems to be a vertical block of 8 by 2 pixels which are scheduled to be processed.
      No matter how large is the triangle, it will be processed entierely along the width of the framebuffer within a band of 32 pixels height.
      It is hard to say if the GPU schedules the work on that band in a specific order which let me believe that the GeForce GTX 470 could be less efficient in it's usage of its memory bandwidth.
      If we remove atomic operations, my guess is that the GeForce GTX 470 schedule its processing in Z-order as well along this band of 32 pixels height.
    </paragraph>
    <video title="GeForce GTX 470 rasterizer pattern using OpenGL 4.2 atomic counter" href="http://www.youtube.com/v/WFx6StqpRdY?version=3&amp;hl=en_US&amp;rel=0" width="800" height="500" />

    <paragraph>
      Then are these observations useful for anything? Probably not ready in practice but it was certainly intertaining to do!
    </paragraph>
  </post>

  <post index="0433" date="18/12/2011" std-date="2011-12-18T00:30:00.00Z" title="Degas and the Ballet at the London Royal Academy">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      <link href="http://www.royalacademy.org.uk/exhibitions/degas/about-the-exhibition/">Degas and the Ballet: Picturing movement</link> was an exhibition
      that was running until Sunday 11 December 2011 at the <link href="http://www.royalacademy.org.uk">Royal Academy</link>.
    </paragraph>
    <image title="Two Dancers on the Stage, Edgar Degas, 1874"
      color="white"
      img="./post/0433-1.jpg"
      href="./post/0433-1.jpg" />
    <paragraph>
      This exhibition was designed over three main axis: The obcession of Edgar Degas (1834 - 1917) for the Ballet, the interest of the late 19th centuary for the movement
      and finally the impact of the rise of photography.
    </paragraph>
    <paragraph>
      For a long time in his career, Edgar Degas had a low consideration for the photography media as it wasn't able to capture his topic of interest: Movement of the ballet dancers.
      How to take a picture of ballet dancer in an Opera with such dim light?
      However, in 1895, thanks to the progress of the photography intruments, he started using a camera to produce pictures
      which aren't without making us remember the <link href="http://en.wikipedia.org/wiki/Chiaroscuro">Clair Obscur</link> technique, far from what Edgar Degas used to do in his painting.
    </paragraph>
    <image title="Dancer adjusting her shoulder strap, Edgar Degas, 1895"
      color="white"
      img="./post/0433-2.jpg"
      href="./post/0433-2.jpg" />
    <paragraph>
      His study of black and white photography had a direct impact to his painting technique and I have the feeling that he understood better what is the uniqueness that painting can produce but also what photography could provide to painting.
      His painting became more colorful and his technique evolve to produce a visual which recalls photography noise.
    </paragraph>
    <image title="Three Dancers (Blue Skirts, Red Bodices), Edgar Degas, 1903"
      color="white"
      img="./post/0433-3.jpg"
      href="./post/0433-3.jpg" />

    <source-list>
      <source-element type="Link" href="http://www.royalacademy.org.uk/exhibitions/degas/about-the-exhibition" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0432" date="17/12/2011" std-date="2011-12-17T23:30:00.00Z" title="Metropolis at Paris Cinematheque Française">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      I went only once before to <link href="http://www.cinematheque.fr/">La Cinematheque Française</link> to see an exhibition about the movie director <link href="http://www.cinematheque.fr/fr/expositions-cinema/precedentes-expositions/almodovar-exhibition.html">Pedro Almodovar</link>.
      This exhibition was so stunning that clearly not coming back regularly was a huge mistake that my rescent visit of the <link href="http://www.cinematheque.fr/fr/expositions-cinema/metropolis/">Metropolis exhibition</link> confirmed.
    </paragraph>
    <image
      color="white"
      img="./post/0432-1.jpg"
      href="./post/0432-1.jpg" />
    <paragraph>
      Metropolis is <link href="http://www.imdb.com/name/nm0000485">Fritz Lang</link> masterpiece, a movie initially released in Germany in 1927 which no original copy had survived time but one which was discovered in 2001 and gave the opportunity to restaure the entire movie.
    </paragraph>
    <paragraph>
      This exhibition redraws the history of the movie from the film making to the restauration but also dead with the movie at it's time illustrated by copies of original photographs, cameras, scenes of the movie and extra surprises.
    </paragraph>
    <paragraph>
      <link href="http://www.cinematheque.fr/">La Cinematheque Française</link> did an amazing work with this exhibition without giving away too much of it for visitors that haven't seen it yet. It is running until the 29 of January 2012 and a definitive recommandation.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.cinematheque.fr/fr/expositions-cinema/metropolis/" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0431" date="12/12/2011" std-date="2011-12-12T23:30:00.00Z" title="GLM 0.9.3.B released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      GLM 0.9.3 is getting more stable with the release of GLM 0.9.3 Beta. I expect the first stable version to be available in January, enjoy!
    </paragraph>

    <source-list>
      <source-download index="1102" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.3.pdf" title="GLM 0.9.3 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.3/index.html" title="GLM 0.9.3 API" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0430" date="10/12/2011" std-date="2011-12-10T23:30:00.00Z" title="Contribute to The OpenGL Community, report your bugs">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>
    <paragraph>
      In a world at its birth relativily to others sciences, everything remain to be done in computer graphics and it will take everyone to develop it.
      OpenGL being based on a community, what benefit to one benefit to everyone and this is true at the level of every one of us, members of The OpenGL Community.
    </paragraph>

    <paragraph>
      What anyone who cares can do at its level is to report bugs, either from implementations or even from the specifications.
      The OpenGL implementers and the ARB are unfortunately but realisticcally limited in time this is why to contribute,
      an OpenGL Community member is required to back it up so that bug reports will raise interest and effectively be useful to fix an eventual problem.
    </paragraph>

    <title>Report your drivers bugs</title>
    <subtitle>Quick guidelines</subtitle>
    <paragraph>
      When sending a bug report, "it doesn't work" doesn't give to much chance for a bug to reach interest of the people which will fixe them:
      Screenshots, platform, drivers version, a description to reproduce the bug and ultimately a code sample that build, run and reproduce the bug.
    </paragraph>

    <subtitle>On AMD</subtitle>
    <paragraph>
      On AMD, the best approach is to post a message on the <link href="http://forums.amd.com/forum/categories.cfm?catid=392">AMD Graphics Programming sub-forum</link>.
      Many OpenGL team members are monitoring this forum.
      There is also an <link href="http://ati.cchtml.com">unofficial bugzilla</link> maintained by the Linux guys at AMD.
      It is still possible to file Windows bugs on this Bugzilla, they will reach the OpenGL team.
    </paragraph>

    <subtitle>On NVIDIA</subtitle>
    <paragraph>
      On NVIDIA to report a bug, one must become an NVIDIA registered developer http://developer.nvidia.com/join-nvidia-registered-developer-program.
      The place looks pretty much dead but it is still possible to submit bug reports.
    </paragraph>

    <subtitle>OpenGL.org and Khornos.org forums</subtitle>
    <paragraph>
      Two others fine place to report the bugs are the <link href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=postlist&amp;Board=13&amp;page=1">OpenGL.org forums</link>
      and <link href="https://www.khronos.org/message_boards/">Khornos.org forums</link>. Many OpenGL teams of IHV are monitoring these forums and your bugs should be notified.
    </paragraph>

    <title>Report to the Khronos Group</title>
    <paragraph>
      Not only IHV needs bug reports, also the Khronos Group does. For this purpose, the Khronos Group provides a public <link href="http://www.khronos.org/bugzilla">Bugzilla</link>
      which can be used to report specification bugs or even man pages issues. For man pages issues, there is also an email address "manpages (at) opengl {dot} org".
    </paragraph>

    <paragraph>
      When reporting a specification bug on Bugzilla, I think it is necessary to understand the process implied by a bug report.
      If it is just a typo, the bug could be really quickly fixed (even is released only at the next release).
      However, if the bug involves a proper bug, this bug will need to be discuss by the ARB but before that the bug will have to raise the interest of someone who will suggest it for discussion:
      Submitting a specification bug better have to be done seriously.
    </paragraph>

    <paragraph>
      Moreover, we are living with a 20 years old specification and the least we could say is that the specification is complex.
      What could be seen as a bug might be just specify or clarify somewhere else. It is necessary to search beyond the expected scope for a language description and include both OpenGL and GLSL specification.
    </paragraph>

    <paragraph>
      When reporting a bug I think it is mandatory to "quote" the specification, the parts of the language that requires to be clarified or which are contradictory.
    </paragraph>

    <paragraph>
      I personnaly use a bug report strategy which looks like this: 1. Sumarize the problem; 2. Detail and quote the specification; 3. Submit a solution or multiple options.
    </paragraph>

    <list name="Example of good area of topics to reports:">
      <list-element>A typo error.</list-element>
      <list-element>A language clarification.</list-element>
      <list-element>Contradictory language.</list-element>
      <list-element>Missing commands, values in a table.</list-element>
      <list-element>Unspecified OpenGL error.</list-element>
      <list-element>And many more!</list-element>
    </list>

    <title>Conclusion</title>
    <paragraph>
      Getting OpenGL implementations better is not only the duties of implementers but also of the one of the OpenGL programmers.
      There is something worse than a bug: there is an unknowned bug. Contribute to the OpenGL community and report your bugs!
    </paragraph>
  </post>

  <post index="0429" date="30/11/2011" std-date="2011-11-30T23:30:00.00Z" title="November 2011 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <title>Summary of the month</title>
    <paragraph>
      Unfortunately, AMD doesn't provide new OpenGL 4.2 drivers this month as Catalyst 11.11 are OpenGL 4.1 drivers. I am really hopying we will get something fresh next month!
    </paragraph>
    <paragraph>
      The evolutions recorded this month are the result of the newly released <link href="post-0428.html">OpenGL Samples Pack 4.2.2.0</link> which has been tested with last month and this month drivers.
      Beside a new bug highlighted by the new <codeword>420-image-store</codeword> sample on NVIDIA the main element to notice is that the <codeword>420-buffer-uniform</codeword> sample pass succesfully on AMD.
      However, if I am still using the same AMD drivers since last month, how this is possible? Yes, I change the sample.
      It uses "dynamically uniform expression" indexing instead of indexing with "general integer expression" the block array.
    </paragraph>

    <title>Dynamically Uniform Expressions vs General Integer Expressions</title>
    <quote author="GLSL 4.20.8 specification, section 3.8.3 Dynamically Uniform Expressions">
      A fragment-shader expression is dynamically uniform if all fragments evaluating it get the same resulting
      value. When loops are involved, this refers to the expression's value for the same loop iteration. When
      functions are involved, this refers to calls from the same call point.
      This is similarly defined for other shader stages, based on the per-instance data they process.
      Note that constant expressions are trivially dynamically uniform. It follows that typical loop counters
      based on these are also dynamically uniform.
    </quote>

    <paragraph>
      This definsion raises a question: So dynamically uniform expressions only apply to the fragment shader stage?
      This diesn't really make much sense to me because the concept deal with the coherence between different fragment shader execusion but this coherence could apply to other stages as well.
    </paragraph>

    <paragraph>
      The other question is obvisouly where does dynamically uniform expressions apply? A little more of investigation tells us for the sampler arrays and this led me to include the sample <codeword>400-sampler-array-gtc</codeword> as a feature request more than a year ago.
      The specification also clearly specify indexing of atomic counters arrays as quote below.
    </paragraph>

    <quote author="GLSL 4.20.8 specification, section 4.1.7.1 Samplers">
      When aggregated into arrays within a shader, samplers can only be indexed with a dynamically uniform integral expression, otherwise results are undefined
    </quote>

    <quote author="GLSL 4.20.8 specification, section 4.1.7.3 Atomic Counters">
      When aggregated into arrays within a shader, atomic counters can only be indexed with a dynamically uniform integral expression, otherwise results are undefined.
    </quote>

    <paragraph>
      However, in GLSL there is another opaque type that can be declared as an array: image.
      Interestingly the behaviour is not consistent but it seems really hard to imagine that samplers and images would follow radical different memory access coherency requirements.
    </paragraph>

    <quote author="GLSL 4.20.8 specification, section 4.1.7.2 Images">
      When aggregated into arrays within a shader, images can be indexed with general integer expressions.
    </quote>

    <paragraph>
      Following this path, we are reaching another type which evolve memory access and can be declared as an array: uniform blocks.
    </paragraph>

    <quote author="GLSL 4.20.8 specification, section 4.3.7 Interface Blocks">
      Any integral expression can be used to index a uniform block array, as per section 4.1.9 "Arrays".
    </quote>

    <paragraph>
      This leads us to the explanation of why AMD implementation has never pass the uniform buffer array samples of the <link href="project-0026.html#menu">OpenGL Samples Pack</link>:
      It's likely to be an hardware limitation that the OpenGL specification hasn't address correctly and uniformally.
    </paragraph>
    <paragraph>
      This analyse concludes that NVIDIA OpenGL 4 hardware support "general integer expressions" indexing of uniform block, sampler, image and atomic counters arrays but AMD OpenGL 4 hardware to date doesn't.
      As a feature request, I am not really interested by "general integer expressions" indexing of such arrays but it could be good enough
      to limit the correhence constraint to the <codeword href="http://www.opengl.org/sdk/docs/manglsl/xhtml/gl_InstanceID.xml">gl_Instance</codeword> rate... maybe on future hardware but I am afraid that geometry shader instancing prevent us such intermediate strategy.
    </paragraph>

    <paragraph>
      As a general recommandation for OpenGL programmers, using "dynamically uniform expressions" to index uniform block, sampler, image and atomic counters arrays will keep us safe of running into cross-platform problems.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <title>The test</title>
    <paragraph>
      These tests have been done on Windows 7 64 with the <link href="post-0428.html">OpenGL Samples Pack 4.2.2.0</link> on an GeForce GTX 470 and a Radeon HD 5850.
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.2.0, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 11.10 preview 3 (16/10/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 285.62 (25/10/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.36 (28/11/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="red">Can't readback built-in variables. max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="red">Texture storage with BPTC generates invalid operation errors</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="red">Unpack isn't correct?</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Scissor test dysfunctional?</table-entry-element>
        <table-entry-element color="red">Scissor test dysfunctional?</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="red">Unsupported DSA storage functions</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="orange">glMapBufferRange on atomic counter fails</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="orange">max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-separated</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-interleaved</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-sampler-offset</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-without-vertex-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-type</table-entry-element>
        <table-entry-element color="red">i32 vertex input data not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.2.0, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 11.10 preview 3 (16/10/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 285.62 (25/10/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.36 (28/11/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-texture-copy-nv</table-entry-element>
        <table-entry-element color="white">NV_copy_image not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-position-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-indirect-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-clamp-separate-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
        <table-entry-element color="white">AMD_depth_clamp_separate not supported</table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.2.0, specification bugs workaround</table-title-element>
        <table-title-element>AMD Catalyst 11.10 preview 3 (16/10/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 285.62 (25/10/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 290.36 (28/11/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-glsl-interface-matching-array-gtc</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array-gtc</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="blue">Allows dynamic indexing of the sampler array</table-entry-element>
        <table-entry-element color="blue">Allows dynamic indexing of the sampler array</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-instanced-array-dsa-gtc</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1101" />
    </source-list>
  </post>

  <post index="0428" date="26/11/2011" std-date="2011-11-26T23:30:00.00Z" title="OpenGL Samples Pack 4.2.2.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      This new version of the <link href="project-0026.html#menu">OpenGL Samples Pack</link> mainly adds few samples and it fixes a couple of bugs. There is also only one remaining but more complete Direct State Access sample.
    </paragraph>

    <source-list>
      <source-download index="1101" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
      <source-element type="Link" href="post-0414.html" title="OpenGL 4.2 review"/>
    </source-list>
  </post>

  <post index="0427" date="11/11/2011" std-date="2011-11-11T11:11:11.11Z" title="GLM 0.9.3.A released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      GLM 0.9.3 is making progress which is illustrated by the release of this first alpha.
    </paragraph>
    <list name="Changelog:">
      <list-element>
        Improved doxygen documentation
      </list-element>
      <list-element>
        Added GLSL 4.20 length for vector and matrix types
      </list-element>
      <list-element>
        Added GLSL core noise functions
      </list-element>
      <list-element>
        Promoted GLM_GTC_noise extension: simplex, perlin, periodic noise functions
      </list-element>
      <list-element>
        Promoted GLM_GTC_random extension: linear, gaussian and various random number generation distribution
      </list-element>
      <list-element>
        Added GLM_GTX_constants: provides usefull constants
      </list-element>
      <list-element>
        Fixed half based type contructors
      </list-element>
    </list>
    <paragraph>

    </paragraph>
    <source-list>
      <source-download index="1100" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.3.pdf" title="GLM 0.9.3 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.3/index.html" title="GLM 0.9.3 API" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0426" date="31/10/2011" std-date="2011-10-31T23:30:00.00Z" title="October 2011 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      Not many changes this month but this may have to do with the fact that I didn't had time to explore the OpenGL implementations.
      Two bugs have been fixed in the AMD implementation and we will particularly enjoy that rendering without vertex array is now supported which is particularly convenient for image space processing but it could also find further usages that are waiting to be explored.
    </paragraph>
    <paragraph>
      The AMD Catalyst 11.10 drivers released today are not OpenGL 4.2 drivers.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <paragraph>
      These tests have been done on Seven 64 with the <link href="post-0417.html">OpenGL Samples Pack 4.2.1.1</link>.
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.1.1, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 11.8 OpenGL 4.2 beta 3 (30/08/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.10 preview 3 (16/10/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 285.38 (26/09/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 285.62 (25/10/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="red">Can't readback built-in variables. max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="red">Can't readback built-in variables. max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="red">Texture storage with BPTC generates invalid operation errors</table-entry-element>
        <table-entry-element color="red">Texture storage with BPTC generates invalid operation errors</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="red">Unpack isn't correct?</table-entry-element>
        <table-entry-element color="red">Unpack isn't correct?</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="red">Unsupported DSA storage functions</table-entry-element>
        <table-entry-element color="red">Unsupported DSA storage functions</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="orange">glMapBufferRange on atomic counter fails</table-entry-element>
        <table-entry-element color="orange">glMapBufferRange on atomic counter fails</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="orange">max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="orange">max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-separated</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-interleaved</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="red">glPointParameteri (GL_POINT_SPRITE_COORD_ORIGIN, ...) ignored</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-sampler-offset</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-without-vertex-array</table-entry-element>
        <table-entry-element color="red">Location 0 must be bound</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-type</table-entry-element>
        <table-entry-element color="red">i32 vertex input data not supported</table-entry-element>
        <table-entry-element color="red">i32 vertex input data not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.1.1, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 11.8 OpenGL 4.2 beta 3 (30/08/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.10 preview 3 (16/10/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 285.38 (26/09/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 285.62 (25/10/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-texture-copy-nv</table-entry-element>
        <table-entry-element color="white">NV_copy_image not supported</table-entry-element>
        <table-entry-element color="white">NV_copy_image not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-draw-indirect-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.1.1, specification bugs workaround</table-title-element>
        <table-title-element>AMD Catalyst 11.8 OpenGL 4.2 beta 3 (30/08/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.10 preview 3 (16/10/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 285.38 (26/09/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 285.62 (25/10/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-glsl-interface-matching-array-gtc</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array-gtc</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="blue">Allows dynamic indexing of the sampler array</table-entry-element>
        <table-entry-element color="blue">Allows dynamic indexing of the sampler array</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-instanced-array-dsa-gtc</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1095" />
    </source-list>
  </post>

  <post index="0425" date="24/10/2011" std-date="2011-10-24T23:30:00.00Z" title="GLM 0.9.2.7 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      This revision fixes two problems: First, it adds all matrix products for all possible combinations of none-squared matrices. Thanks to <link href="http://www.zeuscmd.com">Grant James</link> who has provide the code for that.
    </paragraph>

    <code>
      <line>
        <keyword>#include </keyword>
        <string>&lt;glm/glm.hpp&gt;</string>
      </line>
      <line>

      </line>
      <line>
        <keyword>void</keyword> kueken()
      </line>
      <line>
        {
      </line>
      <line align="32px">
        glm::mat3x2 m1;
      </line>
      <line align="32px">
        glm::mat2x3 n1;
      </line>
      <line align="32px">
        ...
      </line>
      <line align="32px">
        glm::mat2x2 P = m1 * n1; <comment>// Valid before GLM 0.9.2.7</comment>
      </line>
      <line>

      </line>
      <line align="32px">
        glm::mat3x2 m2;
      </line>
      <line align="32px">
        glm::mat4x3 n2;
      </line>
      <line align="32px">
        ...
      </line>
      <line align="32px">
        glm::mat4x2 P2 = m2 * n2; <comment>// Fixed in GLM 0.9.2.7</comment>
      </line>
      <line>

      </line>
      <line align="32px">
        glm::mat4x3 m3;
      </line>
      <line align="32px">
        glm::mat4x4 n3;
      </line>
      <line align="32px">
        ...
      </line>
      <line align="32px">
        glm::mat4x3 P3 = m3 * n3; <comment>// Fixed in GLM 0.9.2.7</comment>
      </line>
      <line align="32px">
        ...
      </line>
      <line>
        }
      </line>
    </code>
    <paragraph>
      This support is actually pretty useful as soon as we are interested in optimizing the matrix storage.
    </paragraph>

    <paragraph>
      It also fixes vector contructors which can take multiple parameters that may be swizzle operands.
    </paragraph>

    <paragraph>
      Since last summer, most of the effort have been put on GLM 0.9.3. Progress has been good and finally GLM 0.9.3 has only two remaining tests that fails on GCC. Visual C++ is all green!
      Conscequently, many exciting improvements are on their way soon, through a first alpha version.
    </paragraph>

    <source-list>
      <source-download index="1099" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.2.pdf" title="GLM 0.9.2 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.2/index.html" title="GLM 0.9.2 API doc" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0424" date="29/09/2011" std-date="2011-09-29T23:30:00.00Z" title="September 2011 drivers status: OpenGL 4.2 for NVIDIA">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <image
      color="white"
      img="./post/opengl4.2-g-truc-conformance-285.38.png"
      href="./post/opengl4.2-g-truc-conformance-285.38.png" />

    <paragraph>
      It took only two months for NVIDIA to pass all my OpenGL 4.2 samples successfully. This is pretty impressive! Congratulation to NVIDIA for their first official release of OpenGL 4.2 drivers.
    </paragraph>
    <paragraph>
      We are still at a pretty early stage of OpenGL 4.2 life and I can't exclude missing out bugs but the OpenGL Samples Pack 4.2.1 is already doing a pretty large coverage of the OpenGL 4.2 API so that I don't expect too much surprizes.
    </paragraph>
    <paragraph>
      Finally, a NVIDIA bonus on debug output: Following, a message I saw in my debug output while doing this status. I have been mostly working on AMD for the past month, I need to investigate more but this might be a great news!
    </paragraph>
    <quote author="NVIDIA debug output">
      131185: Buffer detailed info: Buffer object 3 (bound to GL_UNIFORM_BUFFER (2), and GL_UNIFORM_BUFFER_EXT, usage hint is GL_ENUM_88e8) will use SYSTEM HEAP memory as the source for buffer object operations.
    </quote>
    <paragraph>
      Meanwhile, no new drivers on AMD side. Hence, the status remains the same than last month. Yes, AMD has released new drivers but no package with a more rescent OpenGL drivers.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <paragraph>
      These tests have been done on Seven 64 with the <link href="post-0417.html">OpenGL Samples Pack 4.2.1.1</link>.
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.1.1, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 11.8 preview (26/07/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.8 OpenGL 4.2 beta 3 (30/08/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 280.36 (24/08/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 285.38 (26/09/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Can't readback built-in variables. max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green">Beta 1: Loading not correct</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Texture storage with BPTC generates invalid operation errors</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Bug on the shader interface matching</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Unpack isn't correct?</table-entry-element>
        <table-entry-element color="red">Parsing error of the binding layout qualifier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Parsing error of the binding layout qualifier</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Unsupported DSA storage functions</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">glMapBufferRange on atomic counter fails</table-entry-element>
        <table-entry-element color="orange">The buffer must be initialized to be allocated</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="orange">layout(location = 0) flat out vec4 Color; generates a parsing error.</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="red">layout(location = 0, stream = 0) result in error: layout location can only set once. Only half of the geometry rendered</table-entry-element>
        <table-entry-element color="orange">max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-separated</table-entry-element>
        <table-entry-element color="orange">GetTransformFeedbackVarying returns the wrong value for the size parameter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-interleaved</table-entry-element>
        <table-entry-element color="orange">GetTransformFeedbackVarying returns the wrong value for the size parameter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="red">glPointParameteri (GL_POINT_SPRITE_COORD_ORIGIN, ...) ignored</table-entry-element>
        <table-entry-element color="red">glPointParameteri (GL_POINT_SPRITE_COORD_ORIGIN, ...) ignored</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="red">A scissor test optimizations introduce a rendering bug</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-sampler-offset</table-entry-element>
        <table-entry-element color="red">GLSL compiler crash</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-without-data</table-entry-element>
        <table-entry-element color="red">Location 0 must be bound</table-entry-element>
        <table-entry-element color="red">Location 0 must be bound</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-type</table-entry-element>
        <table-entry-element color="red">i32 vertex input data not supported</table-entry-element>
        <table-entry-element color="red">i32 vertex input data not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.1.1, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 11.8 preview (26/07/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.8 OpenGL 4.2 beta 3 (30/08/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 280.36 (24/08/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 285.38 (26/09/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-texture-copy-nv</table-entry-element>
        <table-entry-element color="white">NV_copy_image not supported</table-entry-element>
        <table-entry-element color="white">NV_copy_image not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-draw-indirect-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.1.1, specification bugs workaround</table-title-element>
        <table-title-element>AMD Catalyst 11.8 preview (26/07/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.8 OpenGL 4.2 beta 3 (30/08/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 280.36 (24/08/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 285.38 (26/09/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-glsl-interface-matching-array-gtc</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array-gtc</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="blue">Allows dynamic indexing of the sampler array</table-entry-element>
        <table-entry-element color="blue">Allows dynamic indexing of the sampler array</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-instanced-array-dsa-gtc</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1095" />
      <source-element type="Link" href="http://blogs.amd.com/developer/2011/08/10/amd-releases-catalyst-beta-drivers-for-opengl-4-2/" title="AMD OpenGL 4.2 drivers page"/>
      <source-element type="Link" href="http://developer.nvidia.com/opengl-driver" title="NVIDIA OpenGL 4.2 drivers page"/>
    </source-list>
  </post>

  <post index="0423" date="03/09/2011" std-date="2011-06-08T00:30:00.00Z" title="GLM 0.9.2.5 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      This update fixes some major core issues including the implementation of round, floatBitToXint, pack and unpack functions.
    </paragraph>

    <source-list>
      <source-download index="1097" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.2.pdf" title="GLM 0.9.2 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.2/index.html" title="GLM 0.9.2 API doc" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0422" date="07/09/2011" std-date="2011-09-07T23:30:00.00Z" title="OpenGL 4.2 and GLSL 4.20 specifications updated">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
      <tag>gtc-tech-project-openglreviews</tag>
    </meta>

    <paragraph>
      The Khornos Group has updated the OpenGL 4.2 and GLSL 4.20 specifications. I think it worth to notice the large clarification of the 'shader interface matching'.
      I think there is still some dodge coner cases but this is such a great improvement I was looking for!
    </paragraph>

    <source-list>
      <source-download index="1090" />
      <source-element type="Download" href="http://www.opengl.org/registry/doc/glspec42.core.20110822.withchanges.pdf" title="OpenGL 4.2 core specification" />
      <source-element type="Download" href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf" title="GLSL 4.2 specification" />
    </source-list>
  </post>

  <post index="0421" date="05/09/2011" std-date="2011-09-05T00:30:00.00Z" title="René Magritte: The Pleasure Principle at the Liverpool Tate">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      I am typically not a fan of the Surealist movement which, with its obscure symboles, I find particularly hard to approach.
      It is fair to say that René Magritte was a surealist artist. However, instead of depicting the world of the dreams
      following a strong trend amount the Surealists inspired by Freud's "The Interpretation of Dreams" book,
      I believe he mainly depicted the none sense of the real world and its representation in art.
    </paragraph>

    <quote author="René Magritte" href="http://en.wikipedia.org/wiki/Ren%C3%A9_Magritte">
      Art evokes the mystery without which the would would not exist.
    </quote>

    <paragraph>
      The exhibition René Magritte: The Pleasure Principle is named after his famous painting with the same name.
      It presents a very exhaustive selection of its works organized in topics of interests and inspirations: The Surreal;
      Artifice, pattern and the staged image; the treachery of images; the flavour of tears; pictured pictures; fractured nudes; the man in the bowler hat; the dominion of light.
      Two sections of this exhibition also display is involvement in commercial art and also his interest for photographs and films in a style surprisingly close to his paintings.
    </paragraph>

    <image title="The Pleasure Principle, René Magritte, 1937, a portrait of Edward James"
      color="white"
      img="./post/0421-1.jpg"
      href="./post/0421-1.jpg" />

    <paragraph>
      We all know the famous "Ceci n'est pas une pipe" ("This is not a pipe") paintings representing a pipe. The interpretation of this painting is pretty interesting but I discover that it is just a tiny subset of
      a larger interest by Magritte for the threesome relationship between the object, its representation and the word with use to identify this object.
      Maggrite questioned how each of the these three forms can be exchange by another but also the arbitrary in the naming and the representations of objects.
    </paragraph>

    <image title="The Treachery of Images, René Magritte, 1928-29"
      color="white"
      img="./post/0421-2.jpg"
      href="./post/0421-2.jpg" />

    <quote author="René Magritte" href="http://en.wikipedia.org/wiki/Ren%C3%A9_Magritte">
      An object is never so closely attached ti its name that another cannot be found which suits it better.
    </quote>

    <paragraph>
      I generally like better art which is visually appealling but most of René Magritte's work is not that impressive on that regard.
      However, over the years he significantly improved his skill which leads in absolutely beautiful painting of clouds in his late career, including The Great Familly (1963) or The Kiss (1951)
    </paragraph>

    <image title="The Great Family, René Magritte, 1963"
      color="white"
      img="./post/0421-4.jpg"
      href="./post/0421-4.jpg" />

    <image title="The Kiss, René Magritte, 1951"
      color="white"
      img="./post/0421-3.jpg"
      href="./post/0421-3.jpg" />

    <paragraph>
      This is an exhibition I have been waiting for a long time to go and it was absolutely worth it.
      I also would like to acknowlegde the great work the Liverpool Tate has done.
      Yes, the topic is outstanding but the Liverpool Tate perfectly designed this exhibition. Everything combined, this is the best exhibition I have seen in 2011.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.tate.org.uk/liverpool/exhibitions/renemagritte/default.shtm" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0420" date="03/09/2011" std-date="2011-06-08T00:30:00.00Z" title="GLM 0.9.2.4 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      GLM 0.9.2.4 is the result of user reports and includes bug and warning fixes.
    </paragraph>

    <source-list>
      <source-download index="1096" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.2.pdf" title="GLM 0.9.2 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.2/index.html" title="GLM 0.9.2 API doc" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0419" date="28/08/2011" std-date="2011-08-28T23:30:00.00Z" title="August 2011 OpenGL drivers status: OpenGL 4.2 introduced">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <title>The too early OpenGL 4.2 drivers status</title>
    <paragraph>
      No only the Khronos Group has announced OpenGL 4.2 but
      <link href="http://blogs.amd.com/developer/2011/08/10/amd-releases-catalyst-beta-drivers-for-opengl-4-2">AMD</link> and
      <link href="http://developer.nvidia.com/opengl-driver">NVIDIA</link> have released their OpenGL 4.2 beta drivers at the same time.
      I didn't expect too much for them as usually OpenGL drivers released at the same time of specifications have they share of issues.
    </paragraph>
    <paragraph>
      Both AMD and NVIDIA had time to update their OpenGL 4.2 drivers and has already fixed quite some issues, NVIDIA being incredibly fast once again with only two updates instead of three for AMD.
    </paragraph>
    <paragraph>
      In the first AMD drivers, the OpenGL 4.2 context wasn't exposed so that we had to use extensions but some was missing. Their were just missing because as I could run a sample using the unexposed atomic counter.
      This is enough evidence for me to conclude that AMD is working with a version control system like SVN or Perforce and enable and disable features using <codeword>#define</codeword>
      to compensate for weak branching capabilities.
      That the kind of example which makes me love <link href="http://git-scm.com">Git</link> (or Mercurial but I use Git) even more where these issues can't happened!
      It's the 21th centuary, everyone should use a version control system that works unfortunately development and ecosystem legacy is a pain.
    </paragraph>
    <paragraph>
      Actually, the best of these drivers update is that AMD has fixed a lot of bugs including the horrible crashes of the GLSL compiler when some errors occurred.
      We can finally take advantage of the great AMD debug output implementation!
    </paragraph>

    <title>AMD debug output goodness</title>
    <paragraph>
      It is fair to say that I am always developing on both AMD and NVIDIA platform as I have both a Radeon HD 5850 and a GeForce GTX 470 on my main machine and I hardly understand how we could work otherwise.
      However, there is obviously a "main display" where the application will be launch by default.
      This "main display" change all the time for me, there are periods where it's my AMD card and there are periods my NVIDIA card and there are some where "Ah, it's running on that card".
      What condition my choice could be a feature that I am exploring or a bug that annoyed me for example. This time I am back on AMD thanks to the amazing job that has been done by AMD to provide meaningful debug output log.
    </paragraph>
    <paragraph>
      On NVIDIA implementation of the debug output, the log will only report the equivalent of <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glGetError.xml">glGetError</codeword>
      and we will catch it in the debug output function using a break point.
      The benefit from <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glGetError.xml">glGetError</codeword> is that all the errors are reported
      with no need to search it using a dycotomic method based on loads of <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glGetError.xml">glGetError</codeword> everywhere...! (yes yes, we all did it as some point!)
      However this is still way too limited compare to the potential of this extension!
      AMD implementation of debug output is much more advanced and will return very often some relevant and detailled feedback. Here is two examples I ran into rescently and saved for this post:

    </paragraph>

    <quote author="AMD debug output">
      1008: <codeword>glBindVertexArray</codeword> parameter 'array' has an invalid value '5': must be a valid vertex array object name (<codeword>GL_INVALID_OPERATION</codeword>)
    </quote>
    <quote author="AMD debug output">
      2163: <codeword>glNamedFramebufferTextureEXT</codeword> failed because the image can not be attached to the referenced attachment point through the called function (<codeword>GL_INVALID_OPERATION</codeword>)
    </quote>
    <paragraph>
      Isn't it great? Ok ok, it's not great it's freaking awesome and an OpenGL programmer's dream coming true!!!
    </paragraph>

    <paragraph>
      In any case, if you are using OpenGL, I don't want to know any excuse but the first thing you must do is checking if
      <codeword href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">GL_ARB_debug_output</codeword> is available and initialing it.
      It's going to take you 15 minutes but save you hours!
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <paragraph>
      For this report, I have indicated, as comments, the error fixed from the first OpenGL 4.2 drivers released by AMD and NVIDIA using "Beta 1" and "280.28" respectively.
      AMD OpenGL 4.2 driver beta 3 didn't fix any issue from this drivers status compare to Beta 2.
      These tests have been done on Seven 64 with the <link href="post-0417.html">OpenGL Samples Pack 4.2.1.1</link> just released.
    </paragraph>

    <paragraph>
      Notice that there are still issues on the shader interface matching which affect NVIDIA in the samples <codeword>420-sampler-fetch</codeword>,
      <codeword>420-sampler-load</codeword> and <codeword>420-image-unpack</codeword> and AMD in the samples <codeword>410-primitive-tessellation-5</codeword> and <codeword>420-transform-feedback-instanced</codeword>.
      I bet that if I was looking for it, I would break the drivers in many more ways as it only continues to expose the specification problem.
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.1.1, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 11.8 preview (26/07/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.8 OpenGL 4.2 beta 3 (30/08/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 280.19 (27/07/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 280.36 (24/08/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-transform-feedback-instanced</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Can't readback built-in variables. max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-storage</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green">280.28: No trilinear filtering</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-pixel-store</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green">Beta 1: Loading not correct</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-texture-compressed</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Texture storage with BPTC generates invalid operation errors</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-test-depth-conservative</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-sampler-fetch</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Bug on the shader interface matching</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-memory-barrier</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-unpack</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Unpack isn't correct?</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">280.36: Bug on the shader interface matching. 280.28: Parsing error of the binding layout qualifier</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-image-load</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">280.36: Flat color. 280.28: Parsing error of the binding layout qualifier</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-draw-base-instance</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-direct-state-access-ext</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green">280.28: Invalid operation</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-buffer-uniform</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>420-atomic-counter</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">glMapBufferRange on atomic counter fails</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">The buffer must be initialized to be allocated</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">280.28: Invalid operation</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="orange">Bug on the shader interface matching: Block member not active with linked separated program</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="orange">layout(location = 0) flat out vec4 Color; generates a parsing error.</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">280.28: Invalid operation</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="red">layout(location = 0, stream = 0) result in error: layout location can only set once. Only half of the geometry rendered</table-entry-element>
        <table-entry-element color="orange">max_vertices affects the alignment in the transform feedback buffer</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-separated</table-entry-element>
        <table-entry-element color="orange">GetTransformFeedbackVarying returns the wrong value for the size parameter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-interleaved</table-entry-element>
        <table-entry-element color="orange">GetTransformFeedbackVarying returns the wrong value for the size parameter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite</table-entry-element>
        <table-entry-element color="red">glPointParameteri (GL_POINT_SPRITE_COORD_ORIGIN, ...) ignored</table-entry-element>
        <table-entry-element color="red">glPointParameteri (GL_POINT_SPRITE_COORD_ORIGIN, ...) ignored</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="red">A scissor test optimizations introduce a rendering bug</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-sampler-offset</table-entry-element>
        <table-entry-element color="red">GLSL compiler crash</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-without-data</table-entry-element>
        <table-entry-element color="red">Location 0 must be bound</table-entry-element>
        <table-entry-element color="red">Location 0 must be bound</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-type</table-entry-element>
        <table-entry-element color="red">i32 vertex input data not supported</table-entry-element>
        <table-entry-element color="red">i32 vertex input data not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.1.1, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 11.8 preview (26/07/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.8 OpenGL 4.2 beta 3 (30/08/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 280.19 (27/07/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 280.36 (24/08/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-texture-copy-nv</table-entry-element>
        <table-entry-element color="white">NV_copy_image not supported</table-entry-element>
        <table-entry-element color="white">NV_copy_image not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green">280.28: Invalid operation</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-draw-indirect-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.2.1.1, specification bugs workaround</table-title-element>
        <table-title-element>AMD Catalyst 11.8 preview (26/07/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.8 OpenGL 4.2 beta 3 (30/08/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 280.19 (27/07/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 280.36 (24/08/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>420-glsl-interface-matching-array-gtc</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
        <table-entry-element color="white">Can write a valid vertex shader output with no valid geometry shader input possible</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array-gtc</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="blue">Allows dynamic indexing of the sampler array</table-entry-element>
        <table-entry-element color="blue">Allows dynamic indexing of the sampler array</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-instanced-array-dsa-gtc</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1095" />
      <source-element type="Link" href="http://blogs.amd.com/developer/2011/08/10/amd-releases-catalyst-beta-drivers-for-opengl-4-2/" title="AMD OpenGL 4.2 drivers page"/>
      <source-element type="Link" href="http://developer.nvidia.com/opengl-driver" title="NVIDIA OpenGL 4.2 drivers page"/>
    </source-list>
  </post>

  <post index="0418" date="28/08/2011" std-date="2011-08-28T00:30:00.00Z" title="Frozen Flow">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Raining Season">
      <summary>London 2011</summary>
      <fullscreen>https://picasaweb.google.com/114694605168097165427/RainingSeason#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.com&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2Fchristophe.riccio%2Falbumid%2F5645330495143967121%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="https://lh4.googleusercontent.com/-x555O1cDJTk/Tlg-M9qQ7_I/AAAAAAAABhU/8opuiA3Bedk/s144/_MG_3774.jpg"
        pic288="https://lh4.googleusercontent.com/-x555O1cDJTk/Tlg-M9qQ7_I/AAAAAAAABhU/8opuiA3Bedk/s288/_MG_3774.jpg"
        pic400="https://lh4.googleusercontent.com/-x555O1cDJTk/Tlg-M9qQ7_I/AAAAAAAABhU/8opuiA3Bedk/s400/_MG_3774.jpg"
        pic800="https://lh4.googleusercontent.com/-x555O1cDJTk/Tlg-M9qQ7_I/AAAAAAAABhU/8opuiA3Bedk/s800/_MG_3774.jpg" />
    </album>
    <image
      img="https://lh3.googleusercontent.com/-xoEYDLzJR-U/Tlg-O6nboOI/AAAAAAAABhk/GVNtlz9Yyfc/s800/_MG_3793.jpg"
      href="https://lh3.googleusercontent.com/-xoEYDLzJR-U/Tlg-O6nboOI/AAAAAAAABhk/GVNtlz9Yyfc/s800/_MG_3793.jpg" />
    <image
      img="https://lh3.googleusercontent.com/-aO1ZksTPay0/Tlg-LwMHKUI/AAAAAAAABhQ/lRJeatd78CQ/s800/_MG_3770.jpg"
      href="https://lh3.googleusercontent.com/-aO1ZksTPay0/Tlg-LwMHKUI/AAAAAAAABhQ/lRJeatd78CQ/s800/_MG_3770.jpg" />
    <image
      img="https://lh3.googleusercontent.com/-Afs54u6UeZU/Tlg-ReNpOHI/AAAAAAAABh4/rjDV2W_UWF8/s800/_MG_3835.jpg"
      href="https://lh3.googleusercontent.com/-Afs54u6UeZU/Tlg-ReNpOHI/AAAAAAAABh4/rjDV2W_UWF8/s800/_MG_3835.jpg" />
    <image
      img="https://lh3.googleusercontent.com/-aO1ZksTPay0/Tlg-LwMHKUI/AAAAAAAABhQ/lRJeatd78CQ/s800/_MG_3770.jpg"
      href="https://lh3.googleusercontent.com/-aO1ZksTPay0/Tlg-LwMHKUI/AAAAAAAABhQ/lRJeatd78CQ/s800/_MG_3770.jpg" />
    <source-list>
      <source-element type="Link" href="https://picasaweb.google.com/114694605168097165427/RainingSeason/FrozenFlow" title="Raining Season" />
    </source-list>
  </post>

  <post index="0417" date="26/08/2011" std-date="2011-08-26T00:30:00.00Z" title="OpenGL Samples Pack 4.2.1.1 released (updated)">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      This new version of the <link href="project-0026.html#menu">OpenGL Samples Pack</link> provides 12 OpenGL 4.2 samples. All of them have been largely updated and work on both Windows (Visual C++) and Linux (G++).
    </paragraph>
    <paragraph>
      I have added the support of <link href="http://www.vtk.org/Wiki/CTest:FAQ">CTest</link> to use the samples as a very basic unit test suite for the OpenGL drivers.
      It includes an <link href="http://www.cmake.org">CMake</link> option named "OGL_SAMPLES_STATUS" to automatically run all the samples and get a report, in the console or Visual C++ debug output, of the success or not of the executions of all the samples one by one.
      This option makes each sample running for 10 frames and then automatically close it to execute the next one until the entire set of samples has been executed. To launch this sequence, just build the project "RUN_TESTS" in the solution.
    </paragraph>
    <paragraph>
      This unit tests can only spot unsupported extensions, crashes, OpenGL errors and GLSL compiler errors.
      However, if the rendering is just wrong, it will returns 'success'... In the future,
      I would like to add a rendering result analysis against a reference image to automaticcally spot rendering errors but this is not happening before the end of the year.
    </paragraph>
    <paragraph>
      I put quite some efforts on this new version, reporting as much bugs as I could to AMD and NVIDIA and to hopefully leave it behind for a while and focus on others things.
    </paragraph>
    <paragraph>
      This version will be used for August 2011 OpenGL drivers status to be released soon.
    </paragraph>
    <paragraph>
      UPDATE 26/08/2011: Version 4.2.1.1 changed the default CTest mode.
    </paragraph>

    <source-list>
      <source-download index="1095" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
      <source-element type="Link" href="post-0414.html" title="OpenGL 4.2 review"/>
    </source-list>
  </post>

  <post index="0416" date="25/08/2011" std-date="2011-08-25T19:00:00.00Z" title="OpenGL Insights reached submission deadline">
    <meta>
      <tag>gtc-tech-project-openglinsights</tag>
    </meta>
    <paragraph>
      Finally, we are reaching OpenGL Insights deadline!
    </paragraph>
    <paragraph>
      We will look at the last submissions during the week-end and we planned a phone call on Monday to start deliberating.
    </paragraph>
    <paragraph>
      If you want to contribute to this community book, now is the time!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.openglinsights.com" title="OpenGL Insights website"/>
    </source-list>
  </post>

  <post index="0415" date="09/08/2011" std-date="2011-08-09T00:30:00.00Z" title="OpenGL Samples Pack 4.2.0.2 released (updated)">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack 4.2.0.0 is the first version covering OpenGL 4.2 features with 10 samples.
    </paragraph>
    <paragraph>
      Most of all the extensions introduced at <link href="http://www.khronos.org/news/press/khronos-enriches-cross-platform-3d-graphics-with-release-of-opengl-4.2-spec">Siggraph 2011</link> are covered by these samples.
    </paragraph>
    <paragraph>
      The OpenGL Samples Pack 4.2.0.0 is available on Windows for Visual C++ 2008 - 2010 using <link href="http://www.cmake.org/">CMake</link>. Linux supports will follow soon.
    </paragraph>

    <paragraph>
      UPDATED 1 - 10/08/2011: The OpenGL Samples Pack 4.2.0.1 is a quick fix release. Thanks to Piers Daniell for his help!
    </paragraph>
    <paragraph>
      UPDATED 2 - 11/08/2011: The OpenGL Samples Pack 4.2.0.2 is an update to take into account
      <link href="http://blogs.amd.com/developer/2011/08/10/amd-releases-catalyst-beta-drivers-for-opengl-4-2/">AMD OpenGL 4.2 beta drivers</link>
      which doesn't expose an OpenGL 4.2 context but extensions.
      AMD OpenGL 4.2 beta drivers fix a lot of issues previously reported.
    </paragraph>

    <source-list>
      <source-download index="1093" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0414" date="08/08/2011" std-date="2011-08-08T12:00:00.00Z" title="OpenGL 4.2 review">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
      <tag>gtc-tech-project-openglreviews</tag>
    </meta>

    <paragraph>
      The <link href="http://www.khronos.org">Khronos Group</link> has released the OpenGL 4.2 at <link href="http://www.siggraph.org/s2011/">Siggraph 2011</link>.
    </paragraph>

    <list name="OpenGL 4.2 feature set:">
      <list-element href="http://www.opengl.org/registry/specs/ARB/shader_atomic_counters.txt">GL_ARB_shader_atomic_counters</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/shader_image_load_store.txt">GL_ARB_shader_image_load_store</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/shading_language_packing.txt">GL_ARB_shading_language_packing</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/shading_language_420pack.txt">GL_ARB_shading_language_420pack</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/texture_storage.txt">GL_ARB_texture_storage</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/texture_compression_bptc.txt">GL_ARB_texture_compression_bptc</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/internalformat_query.txt">GL_ARB_internalformat_query</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/base_instance.txt">GL_ARB_base_instance</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/transform_feedback_instanced.txt">GL_ARB_transform_feedback_instanced</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/conservative_depth.txt">GL_ARB_conservative_depth</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/map_buffer_alignment.txt">GL_ARB_map_buffer_alignment</list-element>
    </list>

    <paragraph>
      To celebrate this event I wrote an <link href="https://docs.google.com/document/d/1kFzd9eZikZoAIKdDTkPo2i3OVeq4u8JZkmmIkdXDRNM/edit?hl=en_US">OpenGL 4.2 review</link>
      which hopefully will help to get started quickly with all the goodness of OpenGL 4.2.
    </paragraph>

    <paragraph>
      NVIDIA has already announced their <link href="http://developer.nvidia.com/opengl-driver">OpenGL 4.2 drivers</link>, I am curious to see what my samples have to say about that.
    </paragraph>

    <paragraph>
      More information and joy to come at the <link href="http://www.khronos.org/news/events/siggraph-vancouver-2011">OpenGL BOF</link>.
    </paragraph>

    <image
      color="white"
      img="./post/0414.png"
      href="./post/0414.png" />

    <source-list>
      <source-download index="1090" />
      <source-download index="1089" />
      <source-download index="1088" />
      <source-download index="1087" />
      <source-element type="Download" href="http://www.opengl.org/registry/doc/glspec42.core.20110808.withchanges.pdf" title="OpenGL 4.2 core specification" />
      <source-element type="Download" href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.6.pdf" title="GLSL 4.2 specification" />
      <source-element type="Link" href="./post-0282.html" title="My OpenGL 4.2+ wish-list"/>
    </source-list>
  </post>

  <post index="0413" date="04/08/2011" std-date="2011-08-04T23:30:00.00Z" title="OpenGL Samples Pack 4.1.7.2 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack 4.1.7.2 brings few fixes and two new samples: ogl-330-primitive-point-sprite and ogl-410-glsl-interface-matching.
    </paragraph>

    <source-list>
      <source-download index="1086" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0412" date="30/07/2011" std-date="2011-07-30T23:30:00.00Z" title="July 2011 OpenGL drivers status: OpenGL 4.1 for NVIDIA">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      Congratulation to NVIDIA which new drivers 280.19 run all the OpenGL 4.1 samples successfully.
      The last bug on the shader interface matching has been fix to archive this result.
    </paragraph>
    <image
      color="white"
      img="./post/opengl4.1-g-truc-conformance-280.19.png"
      href="./post/opengl4.1-g-truc-conformance-280.19.png" />
    <paragraph>
      I am not going to say that everything is perfect, it would be the duty of a conformance test suite but as far as this one hundred samples goes,
      NVIDIA OpenGL 4.1 drivers works and I believe ready for production.
    </paragraph>
    <paragraph>
      There is maybe one hiccup regarding the way NVIDIA drivers clip point sprites.
      According to the specification the point pritimitive must be clipped at vertex position but this approach leads to disturbing popping artefact when the size of the point is higher than one pixel.
      An easy workaround is to take into account the derived size of the point for the clipping using the value output in
      <codeword href="http://www.opengl.org/sdk/docs/manglsl/xhtml/gl_PointSize.xml">gl_PointSize</codeword>.
      I don't if it'a what NVIDIA does but their rendering is pop free which is a feature to me. It might be useful to have a
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glPointParameter.xml">glPointParameter*</codeword><codeword>(GL_CLIPPING, value="")</codeword>
      where values could be either <codeword>GL_VERTEX_POSITION</codeword> or <codeword>GL_POINT_SIZE</codeword> or something like that.
    </paragraph>
    <paragraph>
      On AMD OpenGL drivers side, no change this month beside a new bug detected on point sprite rendering.
      A lot of improvements are to be released but until then this is all we got.
    </paragraph>

    <image title="OpenGL Samples Pack 4.1.7.2: ogl-330-primitive-point-sprite rendering on Forceware 280.19. No scissor test enabled for the points clipping. An embodiment of perfection!"
      color="white"
      img="./post/0412.png"
      href="./post/0412.png" />

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <paragraph>
      These tests built in 64 bits and ran on Windows Seven 64 using the OpenGL Samples Pack 4.1.7.2, minor update to be release soon.
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.1.7.2, OpenGL specification tests</table-title-element>
        <table-title-element>AMD Catalyst 11.7 preview (29/06/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.8 preview (26/07/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 275.50 (21/06/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 280.19 (27/07/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-texture-image-ext</table-entry-element>
        <table-entry-element color="red">Black screen</table-entry-element>
        <table-entry-element color="red">Black screen</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-sampler-fetch-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="orange">Block member not active with linked sperated program</table-entry-element>
        <table-entry-element color="orange">Block member not active with linked sperated program</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Rendezvous by location not supported on structures</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="orange">layout(location = 0) flat out vec4 Color; generates a parsing error.</table-entry-element>
        <table-entry-element color="orange">layout(location = 0) flat out vec4 Color; generates a parsing error.</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-rtt-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-debug-output-arb</table-entry-element>
        <table-entry-element color="green">Provide a nice and explicit error message</table-entry-element>
        <table-entry-element color="green">Provide a nice and explicit error message</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="red">layout(location = 0, stream = 0) result in error: layout location can only set once. Only half of the geometry rendered</table-entry-element>
        <table-entry-element color="red">layout(location = 0, stream = 0) result in error: layout location can only set once. Only half of the geometry rendered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-compression-arb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-pixel-store</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-separated</table-entry-element>
        <table-entry-element color="orange">GetTransformFeedbackVarying returns the wrong value for the size parameter</table-entry-element>
        <table-entry-element color="orange">GetTransformFeedbackVarying returns the wrong value for the size parameter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-interleaved</table-entry-element>
        <table-entry-element color="orange">GetTransformFeedbackVarying returns the wrong value for the size parameter</table-entry-element>
        <table-entry-element color="orange">GetTransformFeedbackVarying returns the wrong value for the size parameter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="red">A scissor test optimizations introduce a rendering bug</table-entry-element>
        <table-entry-element color="red">A scissor test optimizations introduce a rendering bug</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-sampler-offset</table-entry-element>
        <table-entry-element color="red">GLSL compiler crash</table-entry-element>
        <table-entry-element color="red">GLSL compiler crash</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-empty</table-entry-element>
        <table-entry-element color="red">Location 0 must be bound</table-entry-element>
        <table-entry-element color="red">Location 0 must be bound</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.1.7.2, proprietary features</table-title-element>
        <table-title-element>AMD Catalyst 11.7 preview (29/06/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.8 preview (26/07/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 275.50 (21/06/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 280.19 (27/07/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-texture-copy-nv</table-entry-element>
        <table-entry-element color="white">NV_copy_image not supported</table-entry-element>
        <table-entry-element color="white">NV_copy_image not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-texture-barrier-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="white">NV_shader_buffer_load not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-amd</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
        <table-entry-element color="white">AMD_sample_positions not supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-nv</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="white">NV_texture_multisample not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-draw-instanced-amd</table-entry-element>
        <table-entry-element color="red">Render only 1 primitive over 2</table-entry-element>
        <table-entry-element color="red">Render only 1 primitive over 2</table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
        <table-entry-element color="white">AMD_multi_draw_indirect not supported</table-entry-element>
      </table-entry>
    </table>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.1.7.2, specification bugs workaround</table-title-element>
        <table-title-element>AMD Catalyst 11.7 preview (29/06/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.8 preview (26/07/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 275.50 (21/06/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 280.19 (27/07/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>400-sampler-array-gtc</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="blue">Allows dynamic indexing of the sampler array</table-entry-element>
        <table-entry-element color="blue">Allows dynamic indexing of the sampler array</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform-shared-gtc</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="blue">Provide a workaround for this specification bug</table-entry-element>
        <table-entry-element color="blue">Provide a workaround for this specification bug</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-point-sprite-gtc</table-entry-element>
        <table-entry-element color="red">glPointParameteri (GL_POINT_SPRITE_COORD_ORIGIN, ...) ignored</table-entry-element>
        <table-entry-element color="red">glPointParameteri (GL_POINT_SPRITE_COORD_ORIGIN, ...) ignored</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
        <table-entry-element color="blue">Pop free clipping</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-instanced-array-dsa-gtc</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
        <table-entry-element color="white">No workaround for this specification bug</table-entry-element>
      </table-entry>
    </table>

    <source-list>
      <source-download index="1085" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0411" date="22/07/2011" std-date="2011-07-22T02:00:00.00Z" title="MacOS X 10.7 released with OpenGL 3.2 support">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      Like many people who owns a MacBook Pro (or any Mac) I upgraded my system with a brand new OS: MacOS X Lion...
      then I wondered if anything actually happen. No, I am not disappointed because this £21 brought me OpenGL 3.2 core support on my good old MacBook 13" I carry everywhere.
    </paragraph>

    <paragraph>
      It seems that Apple decided to make a clean cut on legacy providing two OpenGL implementations.
      One is the old OpenGL 2.1 for compatibility with legacy software and one which is the OpenGL 3.2 core profile but the OpenGL 3.2 compatibility profile isn't supported.
    </paragraph>

    <paragraph>
      UPDATE: I previously wrote that AMD OpenGL drivers didn't support the compatibility profile which is a mistake.
      When creating a default contect, this context will be an OpenGL 4.1 compability profile implementation.
    </paragraph>

    <paragraph>
      The cut is clean because the legacy features are not only removed from the core profile, there are also removed from the set of extensions exposed by the drivers.
    </paragraph>

    <list name="List of extensions supported by OpenGL 3.2 core profile Apple implementation:">
      <list-element href="http://www.opengl.org/registry/specs/ARB/instanced_arrays.txt">ARB_instanced_arrays</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/occlusion_query2.txt">ARB_occlusion_query2"</list-element>
      <list-element href="http://www.opengl.org/registry/specs/ARB/timer_query.txt">ARB_timer_query</list-element>
      <list-element href="http://www.opengl.org/registry/specs/EXT/depth_bounds_test.txt">EXT_depth_bounds_test</list-element>
      <list-element href="http://www.opengl.org/registry/specs/EXT/texture_compression_s3tc.txt">EXT_texture_compression_s3tc</list-element>
      <list-element href="http://www.opengl.org/registry/specs/EXT/texture_filter_anisotropic.txt">EXT_texture_filter_anisotropic</list-element>
      <list-element href="http://www.opengl.org/registry/specs/EXT/texture_mirror_clamp.txt">EXT_texture_mirror_clamp</list-element>
      <list-element href="http://www.opengl.org/registry/specs/EXT/texture_sRGB_decode.txt">EXT_texture_sRGB_decode</list-element>
      <list-element href="http://www.opengl.org/registry/specs/APPLE/client_storage.txt">APPLE_client_storage</list-element>
      <list-element>APPLE_container_object_shareable</list-element>
      <list-element href="http://www.opengl.org/registry/specs/APPLE/object_purgeable.txt">APPLE_object_purgeable</list-element>
      <list-element href="http://www.opengl.org/registry/specs/APPLE/rgb_422.txt">APPLE_rgb_422</list-element>
      <list-element href="http://www.opengl.org/registry/specs/APPLE/row_bytes.txt">APPLE_row_bytes</list-element>
      <list-element href="http://www.opengl.org/registry/specs/APPLE/texture_range.txt">APPLE_texture_range</list-element>
    </list>

    <paragraph>
      This is really few extensions so we could wonder if the cut isn't a bit too clean. Looking at it maybe some extensions dependency haven't been considered.
      For example, <link href="http://www.opengl.org/registry/specs/EXT/texture_sRGB.txt">EXT_texture_sRGB</link> is an extension part of OpenGL 2.1 core specification
      but only partially because this extension has a dependency on <link href="http://www.opengl.org/registry/specs/EXT/texture_compression_s3tc.txt">EXT_texture_compression_s3tc</link>.
      Because of the S3 patent issue here, <link href="http://www.opengl.org/registry/specs/EXT/texture_compression_s3tc.txt">EXT_texture_compression_s3tc</link> is not part of the OpenGL code specification neither can be dependent features.
      If <link href="http://www.opengl.org/registry/specs/EXT/texture_sRGB.txt">EXT_texture_sRGB</link> is not available then we might not have sRGB support for S3TC texture formats.
      However, I have no doubt that in fact sRGB on S3TC texture formats is actually supported.
    </paragraph>

    <paragraph>
      I don't know yet about the actual support of the feature set but this is what the drivers expose. Why not OpenGL 3.3 support?
      My guess is just development time and there are probably working on it so the right questions are more:
      Is this OpenGL 3.2 implementation solid enough? I will need to explore deeper the implementation by actually using it to figure this out.
      The other one is how far from OpenGL 3.3 support is it?
      <link href="http://www.opengl.org/registry/specs/ARB/instanced_arrays.txt">ARB_instanced_arrays</link>,
      <link href="http://www.opengl.org/registry/specs/ARB/occlusion_query2.txt">ARB_occlusion_query2</link> and
      <link href="http://www.opengl.org/registry/specs/ARB/timer_query.txt">ARB_timer_query</link>
      are OpenGL 3.3 core features which is a good start but we still miss two major extensions
      ARB_sampler_objects and
      ARB_texture_swizzle
      but also some maybe more minor extensions
      <link href="http://www.opengl.org/registry/specs/ARB/explicit_attrib_location.txt">ARB_explicit_attrib_location</link>,
      <link href="http://www.opengl.org/registry/specs/ARB/blend_func_extended.txt">ARB_blend_func_extended</link>,
      <link href="http://www.opengl.org/registry/specs/ARB/texture_rgb10_a2ui.txt">ARB_texture_rgb10_a2ui</link> and
      <link href="http://www.opengl.org/registry/specs/ARB/vertex_type_2_10_10_10_rev.txt">ARB_vertex_type_2_10_10_10_rev</link>.
    </paragraph>

    <paragraph>
      Finally, for people who were surprized that Apple brought back Intel Chips in their hardware: You were right!
      As the <link href="http://developer.apple.com/graphicsimaging/opengl/capabilities/GLInfo_1070_Core.html">OpenGL Capability Matrix</link> shows,
      the OpenGL 3.2 implementation is not supported on Intel HD 3000 platform like the brand new MacBook Air and MacBook Pro 13".
    </paragraph>

    <paragraph>
      UPDATE: The <link href="http://developer.apple.com/library/mac/#documentation/GraphicsImaging/Conceptual/OpenGL-MacProgGuide/opengl_intro/opengl_intro.html">OpenGL Programming Guide for MacOS X</link> is updated.
    </paragraph>

    <paragraph>
      I love my old MacBook Pro 13" with a GeForce 8400M even more now!
      Time for the <link href="project-0026.html">OpenGL Samples Pack</link> to support a new platform?
    </paragraph>
  </post>

  <post index="0410" date="10/07/2011" std-date="2011-07-10T16:30:00.00Z" title="OpenGL Samples Pack 4.1.7.1 released with Linux support">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      For the <link href="project-0026.html">OpenGL Samples Pack</link> 4.1.7.0 release, almost all the sampels has been updated removing all the workaround added here and there to ensure maximum maximum compatibility with OpenGL drivers.
      This choice is expected to result in even simpler samples and less awkward approaches sometime when it is actually unnecessary.
    </paragraph>
    <paragraph>
      Furthermore, more samples about transform feedback have been added and also a sample showing how to load the subset of an image to an OpenGL texture object.
    </paragraph>
    <paragraph>
      Indeed, this new release will be used for July <link href="post-opengl-status.html">OpenGL drivers status</link> to be published at the end of the month.
    </paragraph>
    <paragraph>
      UPDATE: The OpenGL Samples Pack 4.1.7.1 brings Linux support for all the samples!
    </paragraph>
    <paragraph>
      Enjoy!
    </paragraph>

    <source-list>
      <source-download index="1085" />
      <source-download index="1084" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0409" date="27/06/2011" std-date="2011-06-27T02:00:00.00Z" title="June 2011 OpenGL drivers status (updated)">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      Thanks to the development in progress of the OpenGL Samples Pack 4.1.7.0, June 2011 OpenGL status has new information to provide in drivers implementation even if the
      improvements in June drivers are rather limited. The last available version of the OpenGL Samples Pack is the version 4.1.6.1.
    </paragraph>
    <paragraph>
      The OpenGL 4.1 drivers getting more and more mature, one aspect for the OpenGL Samples Pack 4.1.7.0 is to track down all the work-around I have introduced to ensure the maximum compatibility across implementations.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <table>
      <table-title>
        <table-title-element class="sample-name">OpenGL Samples Pack 4.1.7.A</table-title-element>
        <table-title-element>AMD Catalyst 11.5a hotfix (26/05/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.7 preview (28/07/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 275.27 (17/05/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 275.50 (21/06/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-texture-image-ext</table-entry-element>
        <table-entry-element color="red">Black screen</table-entry-element>
        <table-entry-element color="red">Black screen</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-texture-barrier-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-sampler-fetch-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-varying</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">Location 0 must be assigned otherwise black screen.</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Rendezvous by location not supported on structures</table-entry-element>
        <table-entry-element color="orange">Rendezvous by location not supported on structures</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="orange">Rendezvous by location not supported on structures</table-entry-element>
        <table-entry-element color="orange">Rendezvous by location not supported on structures</table-entry-element>
        <table-entry-element color="orange">Rendezvous by location not supported on structures</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-flat-shading</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">layout(location = 0) flat out vec4 Color; generates a parsing error.</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-rtt-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-amd</table-entry-element>
        <table-entry-element color="red">Crash</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-debug-output-arb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-draw-indirect-amd</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-stream</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">layout(location = 0, stream = 0) result in error: layout location can only set once.</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-compression-arb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-separated</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">glGetTransformFeedbackVarying returns null</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback-interleaved</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">glGetTransformFeedbackVarying returns null</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="red">An scissor test optimizations introduce a rendering bug</table-entry-element>
        <table-entry-element color="red">An scissor test optimizations introduce a rendering bug</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-sampler-offset</table-entry-element>
        <table-entry-element color="red">GLSL compiler crash</table-entry-element>
        <table-entry-element color="red">GLSL compiler crash</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>
    <paragraph>
      UPDATED: With the late release of some AMD Catalyst 11.7 preview drivers, I decided to update the results.
      AMD point me to a potential problem on the way GLEW defines GLAPIENTRY. It doesn't seem to change anything on my platform but it could/should.
      At least with AMD Catalyst 11.7 I don't have anymore crash on the tests
      410-fbo-multisample-amd (using <link href="http://www.opengl.org/registry/specs/AMD/sample_positions.txt">GL_AMD_multisample_positions</link>) and 410-draw-indirect-amd (<link href="http://www.opengl.org/registry/specs/AMD/multi_draw_indirect.txt">GL_AMD_multi_draw_indirect</link>).
    </paragraph>

    <source-list>
      <source-download index="1083" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0408" date="24/06/2011" std-date="2011-06-24T00:30:00.00Z" title="Curvature to the Limbo">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Curvature to the Limbo">
      <summary>London 2011</summary>
      <fullscreen>https://picasaweb.google.com/christophe.riccio/CurvatureToTheLimbo#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2Fchristophe.riccio%2Falbumid%2F5622658486132095809%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>

      <preview
        pic144="https://lh4.googleusercontent.com/-OMaFgeEfJiI/TgeyRl6uBuI/AAAAAAAAA0M/sNrEyalyh88/s144/_MG_2279.jpg"
        pic288="https://lh4.googleusercontent.com/-OMaFgeEfJiI/TgeyRl6uBuI/AAAAAAAAA0M/sNrEyalyh88/s288/_MG_2279.jpg"
        pic400="https://lh4.googleusercontent.com/-OMaFgeEfJiI/TgeyRl6uBuI/AAAAAAAAA0M/sNrEyalyh88/s400/_MG_2279.jpg"
        pic800="https://lh4.googleusercontent.com/-OMaFgeEfJiI/TgeyRl6uBuI/AAAAAAAAA0M/sNrEyalyh88/s800/_MG_2279.jpg" />
    </album>
    <image
      color="black"
      img="https://lh4.googleusercontent.com/-OMaFgeEfJiI/TgeyRl6uBuI/AAAAAAAAA0M/sNrEyalyh88/s800/_MG_2279.jpg"
      href="https://lh4.googleusercontent.com/-OMaFgeEfJiI/TgeyRl6uBuI/AAAAAAAAA0M/sNrEyalyh88/s800/_MG_2279.jpg" />
    <image
      color="black"
      img="https://lh6.googleusercontent.com/-hUYJpRM4K9M/TgeyLP_ahBI/AAAAAAAAAzo/xqXydR1fQGY/s800/_MG_1896.jpg"
      href="https://lh6.googleusercontent.com/-hUYJpRM4K9M/TgeyLP_ahBI/AAAAAAAAAzo/xqXydR1fQGY/s800/_MG_1896.jpg" />
    <image
       color="black"
       img="https://lh5.googleusercontent.com/-L9JAbATiEqk/TgeyT4ieBHI/AAAAAAAAA0Y/7sj4_uBJhcw/s800/_MG_2447.jpg"
       href="https://lh5.googleusercontent.com/-L9JAbATiEqk/TgeyT4ieBHI/AAAAAAAAA0Y/7sj4_uBJhcw/s800/_MG_2447.jpg" />
    <image
      color="black"
      img="https://lh6.googleusercontent.com/-M9TtLIMbJzk/TgeyYah5KTI/AAAAAAAAA0s/LNYodlR7c5I/s800/_MG_2457.jpg"
      href="https://lh6.googleusercontent.com/-M9TtLIMbJzk/TgeyYah5KTI/AAAAAAAAA0s/LNYodlR7c5I/s800/_MG_2457.jpg" />

    <source-list>
      <source-element type="Link" href="https://picasaweb.google.com/christophe.riccio/CurvatureToTheLimbo" title="Album page" />
    </source-list>
  </post>

  <post index="0407" date="22/06/2011" std-date="2011-06-22T23:30:00.00Z" title="OpenGL Samples Pack 4.1.6.1 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      <link href="project-0026.html">OpenGL Samples Pack</link> 4.1.6.1 only fixed few bugs.
    </paragraph>

    <source-list>
      <source-download index="1083" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0406" date="08/06/2011" std-date="2011-06-08T00:30:00.00Z" title="GLM 0.9.2.3 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      This version only fixes a couple a major bugs introduced in GLM 0.9.2.2.
    </paragraph>

    <source-list>
      <source-download index="1082" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.2.pdf" title="GLM 0.9.2 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.2/index.html" title="GLM 0.9.2 API doc" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0405" date="03/06/2011" std-date="2011-06-03T23:30:00.00Z" title="OpenGL 3.3, 4.0 and 4.1 review available in PDF">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>
    <paragraph>
      I am becoming more and more a fan of Google Documents as it provides enough feature for my text editing and provides me a reliable storage I can access from anywhere and on any for my device.
      Actually what really missing for me it's a possibility to do offline reading and editing of these files.
    </paragraph>
    <paragraph>
      The reviews for OpenGL 3.3, 4.0 and 4.1 are now publically available in Google Documents and in PDFs thanks to the dedicated exporter.
    </paragraph>

    <source-list>
      <source-element type="Link" href="./doc/OpenGL4.1review.pdf" title="OpenGL 4.1 review as a PDF" />
      <source-element type="Link" href="https://docs.google.com/document/d/1XQZ91G_Cxpq6H3a1dwCg1G0jUR6KMHIihCded7HFLpQ/edit?hl=en_US" title="OpenGL 4.1 review in Google Docs" />
      <source-element type="Link" href="./doc/OpenGL4.1review.pdf" title="OpenGL 4.1 review post" />
      <source-element type="Link" href="./doc/OpenGL4.0review.pdf" title="OpenGL 4.0 review as a PDF" />
      <source-element type="Link" href="https://docs.google.com/document/d/14wg28sEhrnl3QNMJymlHzZ7qoySiTTnre-KJu74cMn4/edit?hl=en_US" title="OpenGL 4.0 review in Google Docs" />
      <source-element type="Link" href="./doc/OpenGL4.0review.pdf" title="OpenGL 4.0 review post" />
      <source-element type="Link" href="./doc/OpenGL3.3review.pdf" title="OpenGL 3.3 review as a PDF" />
      <source-element type="Link" href="https://docs.google.com/document/d/15Y166rexHlbKuhK-dtp_8rUxdk-m99wQa28nAEgEbqs/edit?hl=en_US" title="OpenGL 3.3 review in Google Docs" />
      <source-element type="Link" href="./doc/OpenGL3.3review.pdf" title="OpenGL 3.3 review post" />
    </source-list>
  </post>

  <post index="0404" date="01/06/2011" std-date="2011-06-01T23:59:00.00Z" title="GLM 0.9.2.2 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      The main improvement of this version comes from the extended number of matrix constructors so that a programmer can used different scalar types for each parameter.
    </paragraph>
    <code>
      <line>
        <keyword>#include </keyword>
        <string>&lt;glm/glm.hpp&gt;</string>
      </line>
      <line>

      </line>
      <line>
        <comment>// Create an identity matrix</comment>
      </line>
      <line>
        glm::mat3 m(
      </line>
      <line align="32px">
        1, 0.0, 0,
      </line>
      <line align="32px">
        0.0, 1.0, 0.0f,
      </line>
      <line align="32px">
        0, 0.0, 1.0f);
      </line>
    </code>
    <paragraph>
      The quaternion implementation has been updated as well, fixing the various slerp implementation flavours (mix, shortMix and fastMix) and providing more completeness: Added interaction with GLM_GTX_epsilon and missing lowp_quat, mediump_quat and highp_quat but also none square matrix equivalents.
    </paragraph>
    <paragraph>
      Finally, some efforts have been put to remove warnings across all supported compilers.
    </paragraph>

    <source-list>
      <source-download index="1081" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.2.pdf" title="GLM 0.9.2 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.2/index.html" title="GLM 0.9.2 API doc" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0403" date="30/05/2011" std-date="2011-05-30T20:00:00.00Z" title="Watercolor at the Tate Britain">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      The more I am going to the Tate Britain the more I like it: I rescently went twice, for the very original Susan Hiller exhibition which I like but
      without really connecting with it and also the watercolor exhibition which turns out so interesting and beautiful: An entire exhibition dedicated to the medium accross art history!
    </paragraph>
    <paragraph>
      This exhibition is a display of the whole of watercotor media across uses, techniques and history: an exploration of a media from 16 centuary to the present days.
    </paragraph>

    <image title="The Blue Rigi: Lake of Lucerne, Sunrise; Joseph Turner; 1842"
      color="white"
      img="./post/0403_01.jpg"
      href="./post/0403_01.jpg" />

    <image title="January 9: 1983: II; Patrick Heron; 1983"
      color="white"
      img="./post/0403_02.jpg"
      href="./post/0403_02.jpg" />

    <paragraph>
      The exhibition is running until the 21 August 2011 and has been from my favorite this week, so it can't be missed!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.centrepompidou.fr/Pompidou/Manifs.nsf/0/BCC6CE781B245AA7C125777D0054F13D?OpenDocument" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0402" date="27/05/2011" std-date="2011-03-27T22:00:00.00Z" title="May 2011 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      Last month, I didn't bother writing an OpenGL drivers status as both AMD and NVIDIA drivers reports were exactly the same as March.
      This month is completely different music as both AMD and NVIDIA has make good progress in their drivers, Catalyst 11.5b hotfix and Forceware 275.27.
      Both drivers have been tested against a version of the <link href="project-0026.html">OpenGL Samples Pack</link> still in development and to be released.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <table>
      <table-title>
        <table-title-element class="sample-name">Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 11.4 preview 2 (23/03/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.5a hotfix (26/05/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 270.51 (30/03/2011)</table-title-element>
        <table-title-element>NVIDIA Forceware 275.27 (17/05/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-texture-image-ext</table-entry-element>
        <table-entry-element color="black">No even nearly working</table-entry-element>
        <table-entry-element color="red">Black screen</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-texture-barrier-nv</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-sampler-fetch-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-varying</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Lot of error C5041: cannot locate suitable resource to bind paramter "null atom"</table-entry-element>
        <table-entry-element color="orange">Rendezvous by location not supported on blocks</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="orange">Rendezvous by location not supported on blocks</table-entry-element>
        <table-entry-element color="orange">Rendezvous by location not supported on blocks</table-entry-element>
        <table-entry-element color="red">Lot of error C5041: cannot locate suitable resource to bind paramter "null atom"</table-entry-element>
        <table-entry-element color="orange">Rendezvous by location not supported on blocks</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-rtt-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-debug-output-arb</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-compression-arb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning / gl_in.length() not fully supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-array</table-entry-element>
        <table-entry-element color="red">Required glTexParameteri to setup filtering, sampler unsupported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-sampler-object</table-entry-element>
        <table-entry-element color="red">Doesn't handle more than one slot</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="red">An scissor test optimizations introduce a rendering bug</table-entry-element>
        <table-entry-element color="red">An scissor test optimizations introduce a rendering bug</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample-custom-resolve</table-entry-element>
        <table-entry-element color="red">Drivers high on drugs with "optimizations"</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-mipmaps</table-entry-element>
        <table-entry-element color="red">An scissor test optimizations introduce a rendering bug</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <subtitle>
      AMD: Sampler object fixed, clear buffer in progress
    </subtitle>
    <paragraph>
      On AMD side the great news is that the sampler object is finally 100% functional!
      The clear buffer + scissor test issues has been fixed for one part but when it comes to rendering to a sRGB framebuffer rendering bugs appears showing some block of 8 by 8 pixels whose conversions to the linear space haven't been performed.
      Uniform block array remains a problem but even if these tests doesn't show it, some problems as been fixed.
    </paragraph>

    <subtitle>
      GL_ARB_debug_output available on AMD as well!
    </subtitle>
    <paragraph>
      With the sampler object being fixed, the best news with this release comes from the support support of
      <link href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">ARB_debug_output</link> extension.
      It behaves exactly the NVIDIA implementation so there is no surprise here: The extension is only available when a debug OpenGL context is created.
      The asynchrone mode isn't actually supported so that when we call
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glEnable.xml">glEnable</codeword><codeword>(GL_ARB_DEBUG_OUTPUT_SYNCHRONIZE)</codeword> the output stream is returned like it was before, synchronized.
      However enabliing the debug context involves many GLSL compiler crashes
      and working with <link href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">ARB_debug_output</link> will imply a serie of ping-pong between debug mode or not.
    </paragraph>

    <subtitle>
      Rendezvous by location in seperate program in progress
    </subtitle>
    <paragraph>
      On NVIDIA side the support of OpenGL 4.1 is nearly completed or actually maybe complete already but I am being peaky.
      Effectively the OpenGL 4.1 specification is really inacurate when it comes to shader matching rules, that is to say how the output of a program stage match with the input of the program stage.
      This is actually true especially for separate programs and matching by location introduced in OpenGL 4.1.
      On the current release, so far the only remaining issues are matching by location on in/out block and structures. If we match by name it works and we can expect this to be fixed shortly.
      <link href="http://www.opengl.org/registry/specs/ARB/separate_shader_objects.txt">Separate programs</link> are in many ways left unspecify and just like I was expecting in the conclusion of <link href="post-0320.html#menu">my OpenGL 4.1 review</link>,
      we can expect many divergences from implementation to implementation and it might be what happen for AMD and NVIDIA but this is also something that would required to be checked carefully in aother future implementations.
    </paragraph>

    <source-list>
      <source-download index="1079" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0401" date="24/05/2011" std-date="2011-05-24T00:30:00.00Z" title="GLM 0.9.2.1 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      GLM 0.9.2.1 significantly improves compiler detection which allows CUDA to be automatically recognized when GLM is used inside a CUDA kernel.
      By conscequence, <codeword>GLM_FORCE_CUDA</codeword> is no longer required to be declared.
    </paragraph>
    <paragraph>
      It fixed a couple of bugs, including Visual C++ supprot when Visual C++ extensions are disabled and fixed implementations of GLM_GTX_vector_angle and GLM_GTX_rotate_vector extensions.
    </paragraph>

    <source-list>
      <source-download index="1080" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.2.pdf" title="GLM 0.9.2 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.2/index.html" title="GLM 0.9.2 API doc" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0400" date="22/05/2011" std-date="2011-05-22T20:00:00.00Z" title="OpenGL Insights: Call for Authors">
    <meta>
      <tag>gtc-tech-project-openglinsights</tag>
    </meta>

    <paragraph>
      Few months ago I recieved an email from <link href="http://www.seas.upenn.edu/~pcozzi/">Patrick Cozzi</link> explaining his new idea and he ask me to become co-editor of this project, an honour I could not refused.
    </paragraph>
    <paragraph>
      Today, this project has a name, "<link href="http://www.openglinsights.com">OpenGL Insights</link>"; has a publisher, "<link href="http://www.akpeters.com/">A K Peters</link>"; but it still needs more authors from the community and this is where you have an opportunity to contribute!
    </paragraph>
    <paragraph>
      Adding these ingredients together, in about a year, this project will take the shape of something we will hold, a book with articles written by the community including all of us.
    </paragraph>
    <paragraph>
      Do you fell like contributing? Send us an email at <link href="mailto:editors@openglinsights.com">editors@openglinsights.com</link>.
      For more information, start to <link href="http://www.blogger.com/follow-blog.g?blogID=4393404350222713723">follow </link>the <link href="http://www.openglinsights.com">OpenGL Insights blog</link>!
    </paragraph>
    <paragraph>
      We are looking forward to hear from you, we are looking for your insights!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.openglinsights.com" title="OpenGL Insights blog" />
    </source-list>
  </post>

  <post index="0399" date="21/05/2011" std-date="2011-05-21T23:00:00.00Z" title="Sculpture at the Tate Liverpool">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      I rescently went to Liverpool and head to the Tate especially because I was curious by the on going exhibition about <link href="">perspective</link>.
      However, and despite some interesing piece in this exhibition, from this visit what will remain in my memory is
      the current exhibition about British sculpture: A set of comptempory sculpture place within a very 70s context
      with flasing lights, funk music and a disco dance floor for us.
    </paragraph>

    <paragraph>
      I am not especially an amator of body sculptures but I am forced to admit that I enjoy this exhibition not only for its outraguous context
      which only emphasise the overall twist of the whole exhibitions. Pictures without flash where allowed so I let you enjoy the nature of this installation.
    </paragraph>

    <paragraph>
      A perfect day light head-phone party in the middle of a museum, England never fails to surprise me!
    </paragraph>

    <video title="DLA Piper Series: This is Sculpture at Tate Liverpool" href="http://www.youtube.com/v/mUJ02LY7j9k?fs=1&amp;hl=en_GB" width="800" height="500" />

    <image
      color="white"
      img="./post/399_06_small.jpg"
      href="./post/399_06.jpg" />

    <image
      color="white"
      img="./post/399_05_small.jpg"
      href="./post/399_05.jpg" />

    <image
      color="white"
      img="./post/399_07_small.jpg"
      href="./post/399_07.jpg" />

    <image
      color="white"
      img="./post/399_04_small.jpg"
      href="./post/399_04.jpg" />

    <source-list>
      <source-element type="Link" href="http://www.tate.org.uk/liverpool/exhibitions/thisissculpture/default.shtm" title="The exhibition page" />
      <source-element type="Link" href="https://picasaweb.google.com/114694605168097165427/SculptureAtTheTateLiverpool?authkey=Gv1sRgCJKPopuR8OyIVQ&amp;feat=directlink#" title="More pictures from this exhibition" />
    </source-list>
  </post>

  <post index="0398" date="17/05/2011" std-date="2011-05-17T23:30:00.00Z" title="OpenGL Samples Pack 4.1.6.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      <link href="project-0026.html">OpenGL Samples Pack</link> 4.1.6.0 reaches a total of 100 OpenGL 2.1 to 4.1 samples.
      Beyond few new samples, the major change is the used of ARB extensions released with OpenGL 4.1 but that works on OpenGL 3 hardware.
    </paragraph>
    <paragraph>
      Many samples have been updated including <codeword>ogl-410-debug-output</codeword>
      which features <codeword href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">GL_ARB_debug_output</codeword>.
      This extension provides (finally!) a great mechanisium to debug an OpenGL software.
      The new samples include one featuring the <codeword href="http://www.opengl.org/registry/specs/ARB/sync.txt">sync object</codeword>,
      one featuring OpenGL 3.0 alpha test (deprecated in OpenGL 3.1) and one featuring the GLSL discard command for alpha test.
    </paragraph>
    <paragraph>
      Like usual, the <link href="project-0026.html">OpenGL Samples Pack</link> supports Visual Studio 2008 and 2010,
      32 bits and 64 bits builds through <link href="http://www.cmake.org/">CMake</link>.
    </paragraph>

    <source-list>
      <source-download index="1079" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0397" date="09/05/2011" std-date="2011-05-09T00:30:00.00Z" title="GLM 0.9.2.0 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      GLM 0.9.2.0 provides many exciting features which first of all is the CUDA copiler support so that GLM can be used within a CUDA kernel. This is possible only by defining GLM_FORCE_CUDA before including glm/glm.hpp in the CUDA Kernel source code.
    </paragraph>
    <paragraph>
      New experimental extensions are also available. GLM_GTX_noise is based on the work by Stefan Gustavson and Ashima Arts on <link href="https://github.com/ashima/webgl-noise">WebGL-noise</link> which adds perlin and simplex noise functions in a pure computational way.
      If everything goes well, this extension will be promoted to GLM core as implementation of the GLSL noise functions.
    </paragraph>
    <paragraph>
      GLM_GTX_ulp provides functions to evaluate the number of ULPs between two floating-point values which gives a way to mesure the accuracy of a function compare to a reference function.
      In the future, this extension could be used to update the documentation of function and gives the level of accuracy they provide.
    </paragraph>
    <paragraph>
      Finally, GLM_GTX_matrix_interpolation is an extension developed by Ghenadii Ursachi to extract axis and angle of a 4 by 4 matrix but also directly interpolate between two matrices.
      This extension works only on linear transformed matrices.
    </paragraph>
    <paragraph>
      Last but not least: with the version 0.9.2, GLM supports <link href="http://www.cmake.org/cmake/help/ctest-2-8-docs.html">CTest</link> to manage GLM test suite which makes tests much easier to maintain.
      The number of tests have significantly increase, even if a lot more tests are necessary.
    </paragraph>
    <paragraph>
      GLM 0.9.2 is not backward compatible with GLM 0.9.1 with only one point: Quaternion SLERP interpolation!
      In GLM 0.9.1 the function 'mix' always interpolate using the short rotation path but it's no longer the case.
      The function 'shortMix' has to be called for short path interpolation.
      'fastMix' will interpolate two quaternions using a normalized linear quaternion interpolation with non-constant rotation speed.
    </paragraph>

    <source-list>
      <source-download index="1078" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.2.pdf" title="GLM 0.9.2 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.2/index.html" title="GLM 0.9.2 API doc" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0396" date="07/05/2011" std-date="2011-05-07T11:30:00.00Z" title="GLM 0.9.1.3 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      Various bugs fixed with GLM 0.9.1.3.
    </paragraph>

    <source-list>
      <source-download index="1077" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.1.pdf" title="GLM 0.9.1 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.1/index.html" title="GLM 0.9.1 API doc" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0395" date="05/05/2011" std-date="2010-07-18T22:30:00.00Z" title="London WebGL meetup on 24 May">
    <meta>
      <tag>gtc-tech-event</tag>
    </meta>
    <paragraph>
      This is an initiative by Giles Thomas from <link href="http://learningwebgl.com">Learning WebGL</link> hosted by Google in their London Office.
      The place is limited to 50 persons so that we need to sign up to get a free ticket.
    </paragraph>
    <paragraph>
      I am going and looking forward for this event!
    </paragraph>
    <source-list>
      <source-element type="Link" href="http://learningwebgl.com/blog/?p=3687" title="Event page" />
    </source-list>
  </post>

  <post index="0394" date="20/04/2011" std-date="2011-04-20T23:30:00.00Z" title="OpenGL Samples Pack 4.1.5.3 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The <link href="project-0026.html">OpenGL Samples Pack</link> 4.1.5.3 updates many OpenGL 4.1 samples to generalize the use of the program pipeline objects.
      It also fixes some issues on direct state access (DSA) extensions and many varius problems.
    </paragraph>
    <paragraph>
      Like usual, the <link href="project-0026.html">OpenGL Samples Pack</link> supports Visual Studio 2008 and 2010, 32 bits and 64 bits builds through <link href="http://www.cmake.org/">CMake</link>.
    </paragraph>

    <source-list>
      <source-download index="1076" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0393" date="16/04/2011" std-date="2011-04-16T14:30:00.00Z" title="Ai Weiwei's Sunflower seeds at Tate Modern">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      The Sunflower seeds is an extraordinary art installation designed by the Chinese artist <link href="http://en.wikipedia.org/wiki/Ai_Weiwei">Ai Weiwei</link> (1957 - ).
      It is composed of 100 million porcelain seeds sculpted and painted by 1600 people from the Chinese city of
      <link href="http://maps.google.co.uk/maps?f=q&amp;source=s_q&amp;hl=en&amp;geocode=&amp;q=Jingdezhen,+China&amp;aq=&amp;sll=53.800651,-4.064941&amp;sspn=25.410451,67.631836&amp;ie=UTF8&amp;hq=&amp;hnear=Jingdezhen,+Jiangxi,+China&amp;ll=34.524661,104.326172&amp;spn=67.89986,135.263672&amp;z=4">Jingdezhen</link>
      which makes every single seed unique.
    </paragraph>

    <paragraph>
      For readers all over the world,
      the <link href="http://www.tate.org.uk/modern/exhibitions/unileverseries2010/room3.shtm">presentation video of this installation</link> is available on the <link href="http://www.tate.org.uk/modern/">Tate Modern website</link>.
      For the lucky readers living in London or passing by London before the 2th May, you have my highest recommendations to pass by the Tate Modern and have a look at Ai Weiwei' masterpiece.
    </paragraph>

    <image title="Ai Weiwei Sunflower Seeds 2010, Photocredit: Tate Photography"
      color="white"
      img="./post/0393.jpg"
      href="./post/0393.jpg" />

    <paragraph>
      Of course, I can't write about this installation without mentioning the arbitrarily arrest of Ai Weiwei and some of his staff members by the Chinese police in a context of fear of the Jasmine revolution.
      Ai Weiwei's assistant Wen Tao has remained missing while Chinese officials have yet to notify Ai Weiwei's family of his whereabouts as Chinese law requires them to do.
    </paragraph>

    <paragraph>
      Ai Weiwei is the chinese artist who has done the most for China influence though Chinese culture and I can only hope for a fair trial for him, if there are legitimate reasons for it, or his release.
      <link href="http://magazine.saatchionline.com/magazine-articles/artnews/guggenheim-launches-ai-weiwei-petition-and-hilary-clinton-speaks-out-against-his-detention">An online petition is available</link>,
      every single voice matter when it comes to freedom!
    </paragraph>

    <quote author="Ai Weiwei" href="http://en.wikipedia.org/wiki/Ai_Weiwei">
      I didn’t care about jasmine at first, but people who are scared by jasmine sent out information about how harmful jasmine is often, which makes me realize that jasmine is what scares them the most. What a jasmine!
    </quote>

    <source-list>
      <source-element type="Link" href="http://www.tate.org.uk/modern/exhibitions/unileverseries2010/default.shtm" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0392" date="15/04/2011" std-date="2011-04-15T23:30:00.00Z" title="GLM 0.9.1.2 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      Bug fixes only for GLM 0.9.1.2.
    </paragraph>

    <source-list>
      <source-download index="1075" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.1.pdf" title="GLM 0.9.1 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.1/index.html" title="GLM 0.9.1 API doc" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0391" date="05/04/2011" std-date="2011-04-05T23:30:00.00Z" title="GLI 0.3.0.3 released">
    <meta>
      <tag>gtc-tech-project-gli</tag>
    </meta>

    <paragraph>
      This update of <a href="project-0024.html">GLI</a> fixed a couple of issues from the extension allowing to automatically create an OpenGL object from a DDS texture file.
    </paragraph>

    <source-list>
      <source-download type="Download" index="1074" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-image/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0390" date="30/03/2011" std-date="2011-03-30T23:30:00.00Z" title="March 2011 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      We are reaching the end of the month and it's at that point that both AMD and nVidia decided to release new drivers.
      On the AMD side, I have tested the Catalyst 11.3 and Catalyst 11.4 preview 2 but the results were exactly the same.
      On the nVidia side, I have initially tested the Forceware 267.91 which had actually the same results than last month Forceware 266.77 but the
      Forceware 270.51 released today force me to do a last minute update.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported or untested.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <table>
      <table-title>
        <table-title-element class="sample-name">Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 11.2 (15/02/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.4 preview 2 (23/03/2011)</table-title-element>
        <table-title-element>nVidia Forceware 266.77 (17/02/2011)</table-title-element>
        <table-title-element>nVidia Forceware 270.51 (30/03/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-texture-image-ext</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="black">No even nearly working</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-texture-barrier-nv</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-sampler-fetch-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-varying</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="red">Will crash after enough load and save instead of returning GL_FALSE.</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Geometry explosion</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Lot of error C5041: cannot locate suitable resource to bind paramter "null atom"</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Geometry explosion</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Lot of error C5041: cannot locate suitable resource to bind paramter "null atom"</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-bindless-nv</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-rtt-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-debug-output-arb</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-compression-arb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning / gl_in.length() not fully supported</table-entry-element>
        <table-entry-element color="orange">Unexpected warning / gl_in.length() not fully supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-array</table-entry-element>
        <table-entry-element color="red">Required glTexParameteri to setup filtering, sampler unsupported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-sampler-object</table-entry-element>
        <table-entry-element color="red">Sampler object doesn't always oversede texture parameters</table-entry-element>
        <table-entry-element color="red">Doesn't handle more than one slot</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Drivers high on drugs with "optimizations"</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample</table-entry-element>
        <table-entry-element color="orange">Require to set the filtering to the texture object instead of the sampler object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample-custom-resolve</table-entry-element>
        <table-entry-element color="red">Scissor test not disable when requested</table-entry-element>
        <table-entry-element color="red">Drivers high on drugs with "optimizations"</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-mipmaps</table-entry-element>
        <table-entry-element color="red">Scissor test ignored by glClearBuffer</table-entry-element>
        <table-entry-element color="red">Scissor test ignored by glClearBuffer</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <paragraph>
      AMD implementation has been messing around for months on sampler object and scissor test and March drivers are not an exception.
      Some issues on the sampler object has been fixed but it remains basically unusable because only the slot 0 is available.
      More than a year after the official release of OpenGL 3.3 specification and AMD drivers suposed to support it...
      On the regard of the scissor test, the situation got worse with this release.
      Finally, even these samples doesn't show it, AMD GLSL compiler is a field of crashes
      I experience many time and there is nothing more annoying than having the feeling that we must do the compiler job.
    </paragraph>
    <paragraph>
      On nVidia side the new drivers show an evolution on the implementation fixed pipeline variable when using a program pipeline object.
      However 2 samples return some errors... It's possible that my implementations are not correct and I would not be suprized to recieve nVidia feedback on that topic.
    </paragraph>
    <paragraph>
      In a conclusion, these days we can't expect using OpenGL 3.3 - 4.1 with either sampler object, program pipeline object, scissor tests...
      and even <link href="http://www.g-truc.net/post-0363.html#menu">direct state access (DSA)</link>
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 11.2 (15/02/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.4 preview 2 (23/03/2011)</table-title-element>
        <table-title-element>nVidia Forceware 266.77 (17/02/2011)</table-title-element>
        <table-title-element>nVidia Forceware 270.51 (30/03/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>400-error-sampler-fetch</table-entry-element>
        <table-entry-element color="red">AMD doesn't support the GLSL extension mechanisum</table-entry-element>
        <table-entry-element color="red">AMD doesn't support the GLSL extension mechanisum</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-vao</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">A VAO isn't required by nVidia implementation</table-entry-element>
        <table-entry-element color="red">A VAO isn't required by nVidia implementation</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-sampler-offset</table-entry-element>
        <table-entry-element color="red">GLSL compiler crash</table-entry-element>
        <table-entry-element color="red">GLSL compiler crash</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-sampler-gather</table-entry-element>
        <table-entry-element color="red">AMD doesn't support the GLSL version mechanisum</table-entry-element>
        <table-entry-element color="red">AMD doesn't support the GLSL version mechanisum</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>
    <paragraph>
      No changes this month on error related samples.
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 11.2 (15/02/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.4 preview 2 (23/03/2011)</table-title-element>
        <table-title-element>nVidia Forceware 266.77 (17/02/2011)</table-title-element>
        <table-title-element>nVidia Forceware 270.51 (30/03/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-program-varying-gtc</table-entry-element>
        <table-entry-element color="blue">A specification fix would be great</table-entry-element>
        <table-entry-element color="blue">A specification fix would be great</table-entry-element>
        <table-entry-element color="blue">A specification fix would be great</table-entry-element>
        <table-entry-element color="white">error: unknown buildin varying parameter (named gl_PerVertex.gl_Position) encountered</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate-dsa-gtc</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-gtc</table-entry-element>
        <table-entry-element color="white">glTextureImage2DMultisample not available as specify by OpenGL...</table-entry-element>
        <table-entry-element color="white">glTextureImage2DMultisample not available as specify by OpenGL...</table-entry-element>
        <table-entry-element color="blue">
          Supported through <link href="http://developer.download.nvidia.com/opengl/specs/GL_NV_texture_multisample.txt">GL_NV_texture_multisample</link>
        </table-entry-element>
        <table-entry-element color="blue">
          Supported through <link href="http://developer.download.nvidia.com/opengl/specs/GL_NV_texture_multisample.txt">GL_NV_texture_multisample</link>
        </table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform-shared-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-instanced-array-dsa-gtc</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
      </table-entry>
    </table>
    <paragraph>
      I received an email from Piers Daniell last month about the <codeword>410-fbo-multisample-dsa-gtc</codeword>
      sample to inform me that the DSA version of glTexImage2DMultisample is supported by nVidia through the extension
      <codeword href="http://developer.download.nvidia.com/opengl/specs/GL_NV_texture_multisample.txt">GL_NV_texture_multisample</codeword>.
      This is a great think, an edge for sure on DSA but many more problematic cases remains as listed in a <link href="http://www.g-truc.net/post-0363.html#menu">previous post about DSA</link>.
    </paragraph>

    <paragraph>
      The new fixed function varying variable implementation of nVidia drivers involve a regression here as seperated GLSL programs and uniformed GLSL programs can't be implemented the same way anymore...
    </paragraph>

    <source-list>
      <source-download index="1072" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0389" date="24/03/2011" std-date="2011-03-24T23:30:00.00Z" title="OpenGL Samples Pack 4.1.5.1 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The <link href="project-0026.html">OpenGL Samples Pack</link> 4.1.5.1 is a revision which updates the external libraries used,
      fixes few bugs and add a couple of new samples.
    </paragraph>
    <paragraph>
      One of the main problems fixed is that a lot of OpenGL 3.3 samples were using some functions that are not OpenGL 3.3 but OpenGL 4.0 or 4.1.
      I didn't notice any used and as the extension are exposed the functionalities can be used but no extension checking were either done...
      This is in a way just a change for the sake of pedanticity.
    </paragraph>
    <paragraph>
      I have also added a really simple sample showing the use of
      <codeword href="http://www.opengl.org/registry/specs/EXT/shader_image_load_store.txt">GL_EXT_shader_image_load_store</codeword> to texture a quad.
      This is as simple as it can get but AMD drivers doesn't handle it properly.
      I figured out a way to make it works on AMD but this solution didn't seem to follow the spirit of this extension.
      It's very possible that this extension specification totally lack of accuracy to be implemented correctly.
      I personnally had quite some difficulties to figure out how to do right this sample...
    </paragraph>

    <source-list>
      <source-download index="1071" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0388" date="21/03/2011" std-date="2011-03-21T23:30:00.00Z" title="Mondrian / De Stijl at Centre Pompidou">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <quote author="Piet Mondrian" href="http://en.wikipedia.org/wiki/Piet_Mondrian">
      We need courage and strength to weather this period of dissonance.
      It is becuase we are afraid of that dissonance and wanting to adapt to the past that we are not moving forward.
      The goal is not to adapt: It is to create.
    </quote>

    <paragraph>
      The Centre Pompidou is hosting once again an unmissable exhibition about <link href="http://en.wikipedia.org/wiki/De_Stijl">De Stijl</link>,
      a magazine and art movement whose main names are
      <link href="http://en.wikipedia.org/wiki/Piet_Mondrian">Piet Mondrian</link> (1872 - 1944) and
      <link href="http://en.wikipedia.org/wiki/Theo_van_Doesburg">Theo van Doesburg</link> (1883 - 1931).
    </paragraph>

    <image title="Gray Tree, Piet Mondrian, 1911"
      color="white"
      img="./post/0388-0.jpg"
      href="./post/0388-0.jpg" />

    <quote author="Piet Mondrian" href="http://en.wikipedia.org/wiki/Piet_Mondrian">
      Seul l'aspect pur des éléments, dans des proportions équilibrées, peut atténuer le tragique dans la vie et dans l'art.
    </quote>

    <image title="Tableau 2, Piet Mondrian, 1922"
      color="white"
      img="./post/0388-1.jpg"
      href="./post/0388-1.jpg" />

    <image title="Simultaneous Counter-Composition, Theo van Doesburg, 1929-30"
      color="white"
      img="./post/0388-2.jpg"
      href="./post/0388-2.jpg" />

    <paragraph>
      This exhibition is following the evolution of De Stijl mainly through Piet Mondrian's work, showing from where the "new plastic" araised to its influence after Mondrian's time
      and focusing on the evolution of Mondrian's art inspired by nature. He started to purify it, study balance and proportions of lines and colors and finally introduced rhythm...
      Lines and squares only? Not at all but pure creation of fascination.
    </paragraph>

    <paragraph>
      The Centre Pompidou has the great idea to sell a copy of "Réalité naturelle et réalité abstraite",
      the essay by Piet Mondrian published in De Stijl between 1919 and 1920 to explain the language of "new plastic".
      This book is written as a dialogue between a painting amator, a naturalist painter and an abstract realist painter
      and demonstrate the believe in a "new man" and a "new society" by Piet Mondrian.
      I absolute enjoy this book which made me understand the vision of Piet Mondrian for what he calls "general beauty".
    </paragraph>

    <quote author="Piet Mondrian" href="http://en.wikipedia.org/wiki/Piet_Mondrian">
      I construct lines and colors combinations on a flat surface in order to express general beauty with the ulmost awareness.
    </quote>

    <source-list>
      <source-element type="Link" href="http://www.centrepompidou.fr/Pompidou/Manifs.nsf/0/BCC6CE781B245AA7C125777D0054F13D?OpenDocument" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0387" date="20/03/2011" std-date="2011-03-20T23:30:00.00Z" title="See you at Eurographics 2011">
    <meta>
      <tag>gtc-tech-event</tag>
    </meta>
    <paragraph>
      I am going again this year at <link href="http://eg2011.bangor.ac.uk/">Eurographics</link>,
      a conference that I really appreciate and which will be held from the 11th to 15th April.
      Certainly, less famous than Siggraph but probably more specialized.
      It's going to be intense once more and eventually very educative especially because I will also attend the
      <link href="http://www.vis.uni-stuttgart.de/egpgv/egpgv2011/">"Eurographics Symposium on Parallel Graphics and Visualization 2011"</link>
    </paragraph>
    <paragraph>
      Are you going to Eurographics as well? I'll be please to meet some of my readers so drop me an email and join us for a community drink!
    </paragraph>
    <source-list>
      <source-element type="Link" href="http://eg2011.bangor.ac.uk" title="Eurographics 2011" />
      <source-element type="Link" href="http://www.vis.uni-stuttgart.de/egpgv/egpgv2011/" title="EGPGV 2011" />
    </source-list>
  </post>

  <post index="0386" date="17/03/2011" std-date="2011-03-17T23:30:00.00Z" title="GLM 0.9.1.1 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      GLM 0.9.1.1 fixes some bugs, warnings on <link href="http://clang.llvm.org/">Clang</link> and clean up a bit the code.
    </paragraph>
    <paragraph>
      If you have uncounter any issue with GLM 0.9.1.0, please download this revision.
    </paragraph>
    <paragraph>
      Finally, the work has started for GLM 0.9.2 so if you have requests don't forget to <link href="https://sourceforge.net/apps/trac/ogl-math/newticket">submit them!</link>
    </paragraph>

    <source-list>
      <source-download index="1070" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.1.pdf" title="GLM 0.9.1 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.1/index.html" title="GLM 0.9.1 API doc" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0385" date="08/03/2011" std-date="2011-03-08T00:30:00.00Z" title="Dimanche en Hiver, waking up in White city">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="WhiteCity">
      <summary>London 2010</summary>
      <fullscreen>https://picasaweb.google.com/groovounet/DimancheEnHiver#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.com&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5575927674514699985%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="https://lh4.googleusercontent.com/_bpz9rGNwhX4/TWGsv1GrYGI/AAAAAAAAJ6c/79FulGoyWZs/s144/056.jpg"
        pic288="https://lh4.googleusercontent.com/_bpz9rGNwhX4/TWGsv1GrYGI/AAAAAAAAJ6c/79FulGoyWZs/s288/056.jpg"
        pic400="https://lh4.googleusercontent.com/_bpz9rGNwhX4/TWGsv1GrYGI/AAAAAAAAJ6c/79FulGoyWZs/s400/056.jpg"
        pic800="https://lh4.googleusercontent.com/_bpz9rGNwhX4/TWGsv1GrYGI/AAAAAAAAJ6c/79FulGoyWZs/s800/056.jpg" />
    </album>
    <paragraph>
      There is nothing like waking up with our surounding cover with snow to bring a new perpective to our environment.
    </paragraph>
    <paragraph>
      London, like most of Europe, has reach its yearly ratio of snow pretty soon and before winter actually began.
      It has been pretty enjoyable but nowdays it feels that we will have to wait until next year for more.
      Considering the amount we had this year on one hand and the transportation issues that came too, erm...
      that's ok, I'll wait until next year for my next trip in White city.
    </paragraph>
    <paragraph>
      The title of this album is inspired by a song called <link href="http://www.youtube.com/watch?v=aTRgxsZnW98">Dimance en Hiver</link>
      by <link href="http://en.wikipedia.org/wiki/Keren_Ann">Keren Ann</link> an allegory built over winter.
    </paragraph>
    <image
      color="black"
      img="https://lh3.googleusercontent.com/_bpz9rGNwhX4/TWGs0r0nlgI/AAAAAAAAJ6c/UucJPVFZDVk/s800/138.jpg"
      href="https://lh3.googleusercontent.com/_bpz9rGNwhX4/TWGs0r0nlgI/AAAAAAAAJ6c/UucJPVFZDVk/s800/138.jpg" />
    <image
      color="black"
      img="https://lh4.googleusercontent.com/_bpz9rGNwhX4/TWGs3tb49zI/AAAAAAAAJ6c/lBUK0YMRxGs/s800/229.jpg"
      href="https://lh4.googleusercontent.com/_bpz9rGNwhX4/TWGs3tb49zI/AAAAAAAAJ6c/lBUK0YMRxGs/s800/229.jpg" />
    <image
       color="black"
       img="https://lh4.googleusercontent.com/_bpz9rGNwhX4/TWGsv1GrYGI/AAAAAAAAJ6c/79FulGoyWZs/s800/056.jpg"
       href="https://lh4.googleusercontent.com/_bpz9rGNwhX4/TWGsv1GrYGI/AAAAAAAAJ6c/79FulGoyWZs/s800/056.jpg" />
    <image
      color="black"
      img="https://lh4.googleusercontent.com/_bpz9rGNwhX4/TWGs6uG0_4I/AAAAAAAAJ6c/o61RyFGjmCM/s800/286.jpg"
      href="https://lh4.googleusercontent.com/_bpz9rGNwhX4/TWGs6uG0_4I/AAAAAAAAJ6c/o61RyFGjmCM/s800/286.jpg" />

    <source-list>
      <source-element type="Link" href="https://picasaweb.google.com/groovounet/DimancheEnHiver" title="Album page" />
    </source-list>
  </post>

  <post index="0384" date="03/03/2011" std-date="2011-03-03T23:30:00.00Z" title="GLM 0.9.1.0 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      GLM 0.9.1 branch is finally reaching the status of stable with GLM 0.9.1.0.
    </paragraph>
    <paragraph>
      From GLM 0.9.1 beta, mainly bugs has been fixed. GLM has evolved on many sides since GLM 0.9.0:
      Improved documentation (manual and doxygen), better test framework, simplified setup/options/configration of GLM and new experimental SIMD API.
    </paragraph>
    <paragraph>
      GLM 0.9.1.0 is not 100% backward compatile with GLM 0.9.0.8 but mainly advanced usages should be affected by the differencies.
      Have a look at the GLM manual for more information on how to use GLM 0.9.1.
    </paragraph>

    <source-list>
      <source-download index="1069" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.1.pdf" title="GLM 0.9.1 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.1/index.html" title="GLM 0.9.1 API doc" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0383" date="23/02/2011" std-date="2011-01-23T23:30:00.00Z" title="February 2011 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      Few evolutions since January on OpenGL drivers support beside actually some new bugs detected
      thanks to the <link href="http://www.g-truc.net/project-0026.html">last OpenGL Samples Pack 4.1.5.0</link> released few days ago.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <table>
      <table-title>
        <table-title-element class="sample-name">Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 11.1a (26/01/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.2 (15/02/2011)</table-title-element>
        <table-title-element>nVidia Forceware 266.58 (18/01/2011)</table-title-element>
        <table-title-element>nVidia Forceware 266.77 (17/02/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-sampler-fetch-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-varying</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="red">Will crash after enough load and save instead of returning GL_FALSE.</table-entry-element>
        <table-entry-element color="red">Will crash after enough load and save instead of returning GL_FALSE.</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-rtt-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-debug-output-arb</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-compression-arb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">With some uses of max or clamp, the result is not correct!</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning / gl_in.length() not fully supported</table-entry-element>
        <table-entry-element color="orange">Unexpected warning / gl_in.length() not fully supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-array</table-entry-element>
        <table-entry-element color="red">Required glTexParameteri to setup filtering, sampler unsupported</table-entry-element>
        <table-entry-element color="red">Required glTexParameteri to setup filtering, sampler unsupported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-sampler-object</table-entry-element>
        <table-entry-element color="red">Sampler object doesn't always oversede texture parameters</table-entry-element>
        <table-entry-element color="red">Sampler object doesn't always oversede texture parameters</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="orange">Require to set the filtering to the texture object instead of the sampler object</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample-custom-resolve</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Scissor test not disable when requested</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-mipmaps</table-entry-element>
        <table-entry-element color="red">Scissor test ignored by glClearBuffer</table-entry-element>
        <table-entry-element color="red">Scissor test ignored by glClearBuffer</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <paragraph>
      The sampler object remains a mess on AMD which is especially unfortunate as AMD proposed this functionnality.
      The results of these tests reflect the lack of evolution of OpenGL drivers (since November)
      which is unlikely considering the number of issues raised by these very simple tests.
    </paragraph>

    <table>
      <table-title>
        <table-title-element class="sample-name">Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 11.1a (26/01/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.2 (15/02/2011)</table-title-element>
        <table-title-element>nVidia Forceware 266.58 (18/01/2011)</table-title-element>
        <table-title-element>nVidia Forceware 266.77 (17/02/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>400-error-sampler-fetch</table-entry-element>
        <table-entry-element color="red">AMD doesn't support the GLSL extension mechanisum</table-entry-element>
        <table-entry-element color="red">AMD doesn't support the GLSL extension mechanisum</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-vao</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">A VAO isn't required by nVidia implementation</table-entry-element>
        <table-entry-element color="red">A VAO isn't required by nVidia implementation</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-sampler-offset</table-entry-element>
        <table-entry-element color="red">GLSL compiler crash</table-entry-element>
        <table-entry-element color="red">GLSL compiler crash</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-sampler-gather</table-entry-element>
        <table-entry-element color="red">AMD doesn't support the GLSL version mechanisum</table-entry-element>
        <table-entry-element color="red">AMD doesn't support the GLSL version mechanisum</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-error-conv</table-entry-element>
        <table-entry-element color="red">Use GLSL 4.10 implicit conventions</table-entry-element>
        <table-entry-element color="red">Use GLSL 4.10 implicit conventions</table-entry-element>
        <table-entry-element color="red">Use GLSL 4.10 implicit conventions</table-entry-element>
        <table-entry-element color="red">Use GLSL 4.10 implicit conventions</table-entry-element>
      </table-entry>
    </table>

    <paragraph>
      For OpenGL to reach another level in the interest of programmers it will take at least this step: better handling of errors.
      It is not enough for a code to work, it should not work and through the approciate error, when it is not expected to work.
      There is still a lot to do for both AMD and nVidia.
    </paragraph>
    <paragraph>
      When we create an OpenGL context, AMD drivers return many OpenGL context versions however in practice AMD doesn't actually support
      the GLSL extension or the GLSL version mechanisiums so that effectively I believe that all these versions are exactely same code path.
      On nVidia, it might be similar but it always report version and extension requirements which is a huge plus for cross-version (eg: 3.3 and 4.1) development.
    </paragraph>
    <paragraph>
      OpenGL requires many things in its environment, including documentation and tools but what remains the first priority, it's speak and span drivers
      so that OpenGL doesn't stick to a bunch of OpenGL fans (including me!:)) or remains under-used by the programmer masses where
      3Dsmax is a perfect example of a good Direct3D renderer next to an old fashion and ways behind OpenGL renderer.
      (It might have changed since 3Dsmax 2010 but I have some doubts).
    </paragraph>
    <table>
      <table-title>
        <table-title-element class="sample-name">Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 11.1a (26/01/2011)</table-title-element>
        <table-title-element>AMD Catalyst 11.2 (15/02/2011)</table-title-element>
        <table-title-element>nVidia Forceware 266.58 (18/01/2011)</table-title-element>
        <table-title-element>nVidia Forceware 266.77 (17/02/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-program-varying-gtc</table-entry-element>
        <table-entry-element color="blue">A specification fix would be great</table-entry-element>
        <table-entry-element color="blue">A specification fix would be great</table-entry-element>
        <table-entry-element color="blue">A specification fix would be great</table-entry-element>
        <table-entry-element color="blue">A specification fix would be great</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate-dsa-gtc</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-gtc</table-entry-element>
        <table-entry-element color="white">glTextureImage2DMultisample not available as specify by OpenGL...</table-entry-element>
        <table-entry-element color="white">glTextureImage2DMultisample not available as specify by OpenGL...</table-entry-element>
        <table-entry-element color="white">glTextureImage2DMultisample not available as specify by OpenGL...</table-entry-element>
        <table-entry-element color="white">glTextureImage2DMultisample not available as specify by OpenGL...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform-shared-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
      </table-entry>
    </table>
    <paragraph>
      On the regard of these feature requests/specification bugs, the result hasn't changed since last month.
      I have added a sample that test the presence of glTextureImage2DMultisample which remains missing and undefined in both implementations as expected.
    </paragraph>
    <paragraph>
      Both AMD and nVidia like to make implementation decision of their own and sometime it's pretty tricky no to do it or it requires a large amount of efforts.
      I personnally think that this not a bad thing as far as we can ensure, in some ways, maximum OpenGL conformance and what OpenGL is meant for: cross-platform development.
      I said it in the past either on these pages or on OpenGL.org forums but I think that a way to go is to create propriatary profile where AMD and nVidia could do whatever they want.
      There is a lot of cases where programmers only develop on nVidia because all the company computer run on nVidia and sometime they even run with the exact same GPU.
      Using all nVidia can get on such system, sounds like a good choice on such dedicated scenario.
      I am taking nVidia example because I have an example in mind for this but I guess it could be AMD as well if the drivers keep making progress.
      Proprietary profile would be another way to promote innovations but the core profile would remain the common aggrement and thus the heart of OpenGL.
    </paragraph>

    <source-list>
      <source-download index="1068" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0382" date="20/02/2011" std-date="2011-02-20T23:30:00.00Z" title="OpenGL Samples Pack 4.1.5.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      This new version of the <link href="project-0026.html">OpenGL Samples Pack</link> includes new samples for a total of 94.
    </paragraph>
    <paragraph>
      It mainly integrates a new type of samples that test OpenGL errors, or error that should happen
      but that are not necessary happening the way it is expected or not happening at all.
      Problems which are time-consuming for OpenGL programmers but not necessary well handle by OpenGL implementations.
    </paragraph>
    <paragraph>
      This version will be the base of the next <link href="post-0373.html#menu">OpenGL drivers status post</link>.
    </paragraph>
    <paragraph>
      The OpenGL Samples Pack 4.1.5.0 is available for Visual Studio 2008 and 2010, 32 or 64 bits through <link href="http://www.cmake.org">CMake</link>.
    </paragraph>

    <source-list>
      <source-download index="1068" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0381" date="15/02/2011" std-date="2011-02-15T23:30:00.00Z" title="The lost of the object">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="The lost of the object">
      <summary>London 2011</summary>
      <fullscreen>http://picasaweb.google.com/groovounet/KuekenInTheSnowValley#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.com&amp;noautoplay=1&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5574046712458485729%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="https://lh6.googleusercontent.com/_bpz9rGNwhX4/TVr-AY9W75I/AAAAAAAAJ34/UvW3iO2TT9k/s144/_MG_7302.jpg"
        pic288="https://lh6.googleusercontent.com/_bpz9rGNwhX4/TVr-AY9W75I/AAAAAAAAJ34/UvW3iO2TT9k/s288/_MG_7302.jpg"
        pic400="https://lh6.googleusercontent.com/_bpz9rGNwhX4/TVr-AY9W75I/AAAAAAAAJ34/UvW3iO2TT9k/s400/_MG_7302.jpg"
        pic800="https://lh6.googleusercontent.com/_bpz9rGNwhX4/TVr-AY9W75I/AAAAAAAAJ34/UvW3iO2TT9k/s800/_MG_7302.jpg" />
    </album>
    <paragraph>
      Last week-end, I lived a radical life changed thanks to <link href="http://alizemorand.com/">my personal stylist</link>.
      This is a post-traumatic album.
    </paragraph>
    <image
      color="black"
      img="https://lh6.googleusercontent.com/_bpz9rGNwhX4/TVr-AY9W75I/AAAAAAAAJ34/UvW3iO2TT9k/s800/_MG_7302.jpg"
      href="https://lh6.googleusercontent.com/_bpz9rGNwhX4/TVr-AY9W75I/AAAAAAAAJ34/UvW3iO2TT9k/s800/_MG_7302.jpg" />
    <image
      color="black"
      img="https://lh4.googleusercontent.com/_bpz9rGNwhX4/TVr9-KOhNCI/AAAAAAAAJ4A/UsT2Gj7bPPA/s800/_MG_7277.jpg"
      href="https://lh4.googleusercontent.com/_bpz9rGNwhX4/TVr9-KOhNCI/AAAAAAAAJ4A/UsT2Gj7bPPA/s800/_MG_7277.jpg" />
    <image
      color="black"
      img="https://lh5.googleusercontent.com/_bpz9rGNwhX4/TVr-G2wDQ8I/AAAAAAAAJ34/v1X1kV5nhiY/s800/_MG_7449.jpg"
      href="https://lh5.googleusercontent.com/_bpz9rGNwhX4/TVr-G2wDQ8I/AAAAAAAAJ34/v1X1kV5nhiY/s800/_MG_7449.jpg" />
    <image
       color="black"
       img="https://lh6.googleusercontent.com/_bpz9rGNwhX4/TVr-EwjY__I/AAAAAAAAJ34/ZyS1nOtjZ6Q/s800/_MG_7360.jpg"
       href="https://lh6.googleusercontent.com/_bpz9rGNwhX4/TVr-EwjY__I/AAAAAAAAJ34/ZyS1nOtjZ6Q/s800/_MG_7360.jpg" />

    <source-list>
      <source-element type="Link" href="https://picasaweb.google.com/groovounet/TheLostOfTheObject" title="Album page" />
    </source-list>
  </post>

  <post index="0380" date="13/02/2011" std-date="2011-02-13T23:30:00.00Z" title="GLM 0.9.0.8 and GLM 0.9.1 beta released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      The stable version, GLM 0.9.0.8, adds the operator * for quaternion products and deprecated the cross function previously used for the same purpose.
      Also, it clarifies that GLM is a header only library when a user try to build it. Once more, there is nothing to build.
    </paragraph>
    <paragraph>
      The development version, GLM 0.9.1 beta, provides an improved <link href="http://glm.g-truc.net/html-0.9.1/index.html">API documentation</link> by
      <link href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showprofile&amp;User=23530">Alfonse Reinheart</link>,
      author of <link href="http://www.arcsynthesis.org/gltut/">a great OpenGL tutorial</link> which uses GLM.
      This version also improves the SIMD extensions and it fixes many bugs.
    </paragraph>
    <paragraph>
      The SIMD extensions add severals functions based on fast SQRT calculations as described by
      <link href="http://assemblyrequired.crashworks.org/2009/10/16/timing-square-root/">Elan Ruskin</link>.
      The function <codeword>fastSqrt</codeword> is based on
      <link href="http://msdn.microsoft.com/en-us/library/22hfsh53.aspx">_mm_rsqrt_ps</link> instruction and rule <codeword>x / sqrt(x) = sqrt(x)</codeword>.
      This instruction is an approximation and remains quite innacurate but it is really fast.
      However, as Elan demonstrated it, with one step of Newton-Raphson iteration the precision becomes much higher and the performance remains high.
      This is the base of the <codeword>sqrt</codeword> implementation for <codeword>simdVec4</codeword>
      as the precision is almost indistinguishable from the one of <link href="http://msdn.microsoft.com/en-us/library/8z67bwwk.aspx">_mm_sqrt_ps</link> used in
      <codeword>niceSqrt</codeword>.
    </paragraph>

    <code>
      <line>
        glm::<userword>simdVec4 </userword> fastSqrt(glm::<userword>simdVec4 </userword><keyword>const </keyword>&amp; x);
      </line>
      <line>
        glm::<userword>simdVec4 </userword> sqrt(glm::<userword>simdVec4 </userword><keyword>const </keyword>&amp; x);
      </line>
      <line>
        glm::<userword>simdVec4 </userword> niceSqrt(glm::<userword>simdVec4 </userword><keyword>const </keyword>&amp; x);
      </line>
    </code>

    <source-list>
      <source-download index="1067" />
      <source-download index="1066" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.1.pdf" title="GLM 0.9.1 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.1/index.html" title="GLM 0.9.1 API doc" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.0.pdf" title="GLM 0.9.0 Manual" />
      <source-element type="Link" href="http://glm.g-truc.net/api-0.9.0/index.html" title="GLM 0.9.0 API doc" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0379" date="11/02/2011" std-date="2011-02-11T23:30:00.00Z" title="Impact of 32 bits vs 64 bits and link time optimizations">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
      <tag>gtc-tech-project-ovtsa</tag>
    </meta>

    <paragraph>
      With my <link href="post-0372.html#menu">previous post</link> dedicated to compilers, I recieved a lot of interesting comments.
      First, I would like to make everyone remember that my test is one scenario and the conclusions doesn't extend the scenarios illustrated in the post
      and I don't attempt to generalize these bound results as a universal truth about compilers.
    </paragraph>
    <paragraph>
      Thanks to feedbacks, I also learn that GCC 4.5 now support some link time optimizations with the -lto and -whole_program flags.
      In this new post, I would like to show the performances benefit that such options provide in GCC but also in Visual C++.
    </paragraph>
    <paragraph>
      Finally, I ran the test using 32 bits programs and I think it is about time to switch to 64 bits build
      that why we are also comparing 32 bits and 64 bits performances.
    </paragraph>

    <paragraph>
      The test have been done with SSE2 optimizations enabled, fast math (/fp:fast, -fast-math), Ox or O3 and link time optimization as specified.
      With these settings, we are looking for maximum performance and we are willing to lose some accuracy.
      Mesurements have been done on a Phenom II X6 1055T and a Core 2 Q6600 running Windows 7 64.
    </paragraph>

    <paragraph>
      The tests are based on <link href="project-0018.html">Ovt'sa</link>, a pure C++ program, not especially effective for what it does or optimized for anything.
      It uses <link href="project-0016.html">GLM</link> and <link href="project-0024.html">GLI</link> but no other dependency.
      Despite using SSE optimizations, the program isn't especially design to take advantage of them and only run on a single thread.
      No disk access is included in the mesurements.
    </paragraph>

    <image
      color="white"
      img="./post/0379-1.png"
      href="./post/0379-1.png" />
    <image
      color="white"
      img="./post/0379-3.png"
      href="./post/0379-3.png" />

    <paragraph>
      Like we could see in my previous post, Visual C++ 2005 and 2008
      were pretty inneficient at generating SSE2 code in 32 bits leaving them behide GCC 4.5 in term of performances.
      Visual C++ 2010 fixed this issue and provide the same level of performance between the 32 and 64 bits build on the Phenom II
      but better on the Core 2, the 64 bits build is more efficient.
      GCC remains behide Visual C++ 2010 in both cases, but GCC 4.5 provides more performance in 64 bits.
    </paragraph>

    <image
      color="white"
      img="./post/0379-2.png"
      href="./post/0379-2.png" />
    <image
      color="white"
      img="./post/0379-4.png"
      href="./post/0379-4.png" />

    <paragraph>
      The Phenom II is giving a nice looking graph to the compiler results where Visual C++ with LTO is making progress for each version.
      However, GCC provides the same level of performance with or without LTO. When LTO is disabled, Visual C++ is losing the lead on GCC.
      I don't think it means that GCC would become more efficient with proper LTO optimizations,
      it's probably more that optimizations are placed at different places between GCC and Visual C++.
      The results on the Core 2 are surprizingly quite fuzzy with the best performance for Visual C++ 2005 and Visual C++ 2008 finishing last.
    </paragraph>

    <paragraph>
      Optimizing a code for a platform is somewhat ok proper mesurements but generalizing optimizing for all platforms is pretty challenging.
      Accoring to this test, building in 64 bits mode only provide performance benefits.
      Link time optimizations are pretty mature in Visual C++ but seems to be disabled on GCC 4.5 with such scenario.
      I am looking forward GCC 4.6 where I expect more benefits for them.
    </paragraph>
  </post>

  <post index="0378" date="10/02/2011" std-date="2011-02-10T23:30:00.00Z" title="Perspectives with John Wilson">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      I like to give a flavour for each year.
      It is some sort of a theme to think about through the year,
      to give it enough time, to hopefully discover some interesting thoughts in the process.
      2010 has been a brilliant and pushing boundaries year with the flavour "obsession and exploration".
      It leaded me to my 2011 theme "Perspectives" which gave me a special echo to John Wilson work.
    </paragraph>
    <paragraph>
      Last summer, I discovered John Wilson work in an art gallery in San Fransisco.
      Few weeks ago, I saw another piece at a preivew of the <a href="http://www.londonartfair.co.uk">London Art Fair</a>
      which gives me the privilege to share with friends the unique exoerience of Paul Wilson work.
      Few evenings ago, I was walking in near cover garden when I came across once again with a Paul Wilson painting,
      this time in a <a href="http://www.articagalleries.co.uk/news/galleryNews.asp">Artica gallery</a>.
    </paragraph>
    <paragraph>
      John Wilson is one of this artist who brought interactivity to his art from his interest for perspective and maybe more generally space.
      After, a really interesting serie of painting about kids in the world of art,
      Paul Wilson has continu his exploration of space bringing new shapes for his painting so that the viewer reach a real perception of perpective,
      like if the painting was continuing 5 meters inside the walk while moving around it thanks to clever perspective tricks.
      It is just like 3D in the cinemas but without headhache and with a feeling of freedom of exploration,
      for me John Wilson painting's demonstrate how immatute this stereoscopic movie technologies remains.
    </paragraph>
    <paragraph>
      With its interactivity and its desire for exploration, John Wilson's work is, for me,
      another step toward the use of interactive rendering as a new media for proper art.
    </paragraph>

    <image title="Another Dimension, John Wilson"
      color="white"
      img="./post/0378-1.jpg"
      href="./post/0378-1.jpg" />

    <image title="Mind Games, John Wilson"
      color="white"
      img="./post/0378-2.jpg"
      href="./post/0378-2.jpg" />

    <image title="Very Van Gogh, John Wilson"
      color="white"
      img="./post/0378-3.jpg"
      href="./post/0378-3.jpg" />

    <image title="The Magnificent Seven, John Wilson"
      color="white"
      img="./post/0378-4.jpg"
      href="./post/0378-4.jpg" />

    <source-list>
      <source-element type="Link" href="http://www.buy-fineart.com/biography.asp?a=3143" title="A short biography with plenty of picture of his art." />
    </source-list>
  </post>

  <post index="0377" date="08/02/2011" std-date="2011-02-08T23:30:00.00Z" title="GLI 0.3.0.2 released">
    <meta>
      <tag>gtc-tech-project-gli</tag>
    </meta>

    <paragraph>
      Many major bugs have been fixed, including Linux incompatibilities and export crashes.
    </paragraph>

    <source-list>
      <source-download type="Download" index="1065" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-image/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0376" date="03/02/2011" std-date="2011-02-03T23:30:00.00Z" title="OpenGL Samples and GLM now part of the OpenGL SDK">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
      <tag>gtc-tech-project-glm</tag>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      A while ago, I received an email from Daniel Koch on the behalf of OpenGL ARB working group because
      they thought that my <link href="http://www.g-truc.net/project-0026.html">OpenGL samples</link> would be a good fit for the official <link href="http://www.opengl.org/sdk/">OpenGL SDK</link>.
      This is now done and <link href="project-0016.html">GLM</link> has followed in this process.
    </paragraph>

    <paragraph>
      The current pages are temporaries. I would like to integrate them into my website framework to keep them automatically updated without extra effort.
      In this scenario, the current <link href="http://glm.g-truc.net">glm.g-truc.net</link> would become a rediction to the <link href="http://www.opengl.org/sdk/libs/GLM">GLM OpenGL SDK page</link>
      and I would probably create an address for the <link href="http://www.g-truc.net/project-0026.html">OpenGL Samples Pack</link> (ogl-samples.g-truc.net?)
      redirecting to its <link href="http://www.opengl.org/sdk/docs/tutorials/OGLSamples/">OpenGL SDK page</link> as well.
      I still think the OpenGL Samples Pack need a bit more of perspective to become a step more interesting. Let's see how things goes.
    </paragraph>

    <paragraph>
      Based on the statistics provided by <link href="http://www.sourceforge.net">SourceForge.net</link>,
      the OpenGL Samples Pack has been downloaded on average 1530 times per month over the last 6 months of 2010,
      and GLM has been downloaded on average 621 times per months which sounds quite good to me for a more or less confidential website.
      I am curious to see how the interest for these projects will evolve but I am pretty sure it would be in the right direction thanks to the feedback of programmers who use GLM and the OpenGL Samples Pack.
    </paragraph>

    <paragraph>
      Next? I think that <link href="project-0024.html">GLI</link>, my texture loader library could become a good fit too but it is not mature yet.
      The DDS loader is pretty good with formats support up to the new <link href="http://www.g-truc.net/post-0340.html#menu">BC6H and BC7</link>, which is really mandatory,
      but I still want to make major internal changes and a <link href="http://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/">KTX</link> loader
      would be great too despite maybe some design drawbacks.
      How long it is going to take? Being realistic, I'll say maybe a year or two but that's part of G-Truc Creation process, looking forward and long terms in a little bit per little bit base.
    </paragraph>

    <paragraph>
      I find this news pretty exciting but I think more exciting news remains to come in 2011.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.opengl.org/sdk/docs/tutorials/OGLSamples/" title="The OpenGL Samples Pack in the OpenGL SDK" />
      <source-element type="Link" href="http://www.opengl.org/sdk/libs/GLM" title="GLM page in the OpenGL SDK" />
      <source-download index="1062" />
      <source-download index="1064" />
      <source-download index="1063" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
    </source-list>
  </post>

  <post index="0375" date="31/01/2011" std-date="2011-01-31T23:30:00.00Z" title="GLM 0.9.1 alpha released (updated)">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      This new version of GLM is bringing a lot of improvements and maybe too many considering the development time it has required:
      API exposing SIMD implementation but also some new, safe and feature complet swizzling functions and a new setup API.
      All this is described in the largely updated <link href="http://glm.g-truc.net/glm-0.9.1.pdf">GLM manual</link>.
    </paragraph>
    <paragraph>
      With the new setup system, GLM detects automatically the compiler settings to adapt its implementation to the flag set at build time.
      It will automatically enable C++0x features, SSE optimizations and the display configuration informations at build-time.
      The automatic setup can be overdrive by the GLM user.
    </paragraph>
    <paragraph>
      The SIMD API maintly focus on vec4 and mat4 implementations that are embodied by the types <codeword>simdVec4</codeword> and <codeword>simdMat4</codeword>.
      The implemention cover most of the common functions, the geometry functions and the matrix functions as described in the GLSL specifications.
      Because it is hight inefficient to access individual components of a SIMD register, the simdVec4 doesn't allow it.
      To reflect this constraint, the <codeword>simdVec4</codeword> has to be converted to <codeword>vec4</codeword> first which would be effectively handle
      by the compiler thank to the function <codeword>simdCast</codeword>.
      Furthermore, GLM provides some specials functions like simdDot4 that returns a <codeword>simdVec4</codeword> instead of a float
      with the duplicated dot product value in each components
      and ensure that no unnecessary component manipulations are performed (typically <codeword>__m128</codeword> to <codeword>float</codeword>
      and <codeword>float</codeword> to <codeword>__m128</codeword>).
      This implementation can probably be improve in many ways so don't hesitate to send me some feedbacks.
    </paragraph>

    <code>
      <line>
        <comment>// GLM pure C++ implementation</comment>
      </line>
      <line>
        <keyword>#include </keyword>
        <string>&lt;glm/glm.hpp&gt;</string>
      </line>
      <line> </line>
      <line>
        glm::<userword>vec3 </userword> computeNormal
      </line>
      <line>(</line>
      <line align="32px">
        glm::<userword>vec3 </userword> <keyword>const</keyword> &amp; a,
      </line>
      <line align="32px">
        glm::<userword>vec3 </userword> <keyword>const</keyword> &amp; b,
      </line>
      <line align="32px">
        glm::<userword>vec3 </userword> <keyword>const</keyword> &amp; c
      </line>
      <line>)</line>
      <line>{</line>
      <line align="32px">
        <keyword>return</keyword>
        glm::normalize(glm::cross(c - a, b - a));
      </line>
      <line>}</line>
    </code>

    <code>
      <line>
        <comment>// GLM SIMD implementation</comment>
      </line>
      <line>
        <keyword>#include </keyword>
        <string>&lt;glm/glm.hpp&gt;</string>
      </line>
      <line>
        <keyword>#include </keyword>
        <string>&lt;glm/gtx/simd_vec4.hpp&gt;</string>
      </line>
      <line> </line>
      <line>
        glm::<userword>simdVec4 </userword> computeNormal
      </line>
      <line>(</line>
      <line align="32px">
        glm::<userword>simdVec4 </userword> <keyword>const</keyword> &amp; a,
      </line>
      <line align="32px">
        glm::<userword>simdVec4 </userword> <keyword>const</keyword> &amp; b,
      </line>
      <line align="32px">
        glm::<userword>simdVec4 </userword> <keyword>const</keyword> &amp; c
      </line>
      <line>)</line>
      <line>{</line>
      <line align="32px">
        <keyword>return</keyword>
        glm::simdNormalize(glm::simdCross(c - a, b - a));
      </line>
      <line>}</line>
    </code>
    <paragraph>
      GLM 0.9.1 is not 100% backward compatible with GLM 0.9.0 but mostly advanced usages should be concerned by this compatibility issues.
    </paragraph>

    <paragraph>
      UPDATED: The SF.net mirrors are back.
    </paragraph>

    <source-list>
      <source-download index="1064" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-0.9.1.pdf" title="GLM Manual" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0374" date="30/01/2011" std-date="2011-01-30T18:30:00.00Z" title="GLM 0.9.0.7 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      There are some days where we can find ourself really stupid...
      I mean really! This is what happen to me when I recieve a mail from <link href="http://www.hartmut-schirmacher.de">Hartmut Schirmacher</link>,
      demonstrating with a GLSL specification quote that both operators == and != are supported in GLSL for all data types.
    </paragraph>
    <paragraph>
      I recieved many times requests for these operators in GLM and I always replied that it isn't supported by default in GLM
      as it isn't supported either by GLSL so we should instead use all(equal(v1, v2)) or an available GLM extension.
      This is clearly not true now and I am now living the rest of my life with an unforgiving shame...
    </paragraph>
    <paragraph>
      This mistake is now fixed in GLM 0.9.0.7.
    </paragraph>

    <source-list>
      <source-download index="1063" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0373" date="27/01/2011" std-date="2011-01-27T23:30:00.00Z" title="January 2011 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      Few evolutions since last month on drivers OpenGL support beside actually a couple a new bug detected
      thanks to the <link href="http://www.g-truc.net/project-0026.html">OpenGL Samples 4.1.4.2</link> newly released.
    </paragraph>

    <paragraph>
      It seems that some corner cases on buffer clears with
      <link href="http://www.opengl.org/sdk/docs/man4/xhtml/glClearBuffer.xml">glClearBuffer</link> are not handle correctly by AMD.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <table>
      <table-title>
        <table-title-element class="sample-name">Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 10.12 ccc (13/12/2010)</table-title-element>
        <table-title-element>AMD Catalyst 11.1a (26/01/2011)</table-title-element>
        <table-title-element>nVidia Forceware 265.90 (01/12/2010)</table-title-element>
        <table-title-element>nVidia Forceware 266.58 (18/01/2011)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-sampler-fetch-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-varying</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="red">Will crash after enough load and save instead of returning GL_FALSE.</table-entry-element>
        <table-entry-element color="red">Will crash after enough load and save instead of returning GL_FALSE.</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-rtt-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-multisample-dsa-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-debug-output-arb</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-compression-arb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning / gl_in.length() not fully supported</table-entry-element>
        <table-entry-element color="orange">Unexpected warning / gl_in.length() not fully supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-array</table-entry-element>
        <table-entry-element color="red">Required glTexParameteri to setup filtering, sampler unsupported</table-entry-element>
        <table-entry-element color="red">Required glTexParameteri to setup filtering, sampler unsupported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-sampler-object</table-entry-element>
        <table-entry-element color="red">Sampler object doesn't always oversede texture parameters</table-entry-element>
        <table-entry-element color="red">Sampler object doesn't always oversede texture parameters</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-mipmaps</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Scissor test ignored by glClearBuffer</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <paragraph>
      On the regard of non standard capabilities,
      AMD is now supporting varying location matching for all program types (unified and separated)
      which is really a good thing for homogenious conventions across GLSL code and flexibility as
      this allows switching from unified and separated program without changing the GLSL code.
    </paragraph>
    <table>
      <table-title>
        <table-title-element>Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 10.12 ccc (13/12/2010)</table-title-element>
        <table-title-element>AMD Catalyst 11.1a (26/01/2011)</table-title-element>
        <table-title-element>nVidia Forceware 265.90 (01/12/2010)</table-title-element>
        <table-title-element>nVidia Forceware 266.58 (18/01/2010)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-program-varying-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate-dsa-gtc</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform-shared-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
      </table-entry>
    </table>

    <paragraph>
      I hope Febrary will be a better month!
    </paragraph>

    <source-list>
      <source-download index="1062" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0372" date="25/01/2011" std-date="2011-01-25T23:30:00.00Z" title="Compilers status: Visual C++, GCC and LLVM (updated)">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
      <tag>gtc-tech-devel-cpp</tag>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      For this follow up of my previous post,
      I decided to use my project <link href="http://www.g-truc.net/project-0018.html">Ovt'sa</link>,
      a simple CPU raytracer, including
      <link href="http://www.microsoft.com/visualstudio/en-us">Visual C++</link>,
      <link href="http://gcc.gnu.org/">GCC</link> but also
      <link href="http://llvm.org/">LLVM</link>, using GCC 4.2 front-end.
    </paragraph>

    <paragraph>
      <link href="project-0018.html">Ovt'sa</link> is a pure C++ program but not especially effective for what it does.
      It uses <link href="project-0016.html">GLM</link> and <link href="project-0024.html">GLI</link> but no other dependency.
      Despite using SSE optimizations, the program isn't especially design to take advantage of them and only run on a single thread.
      No disk access is included in the mesurements.
      The tests have been done on Windows 7 64 and a Phenom II X6 1055T.
      On Visual C++, I used /Ox, /fp:fast and link time build optimizations.
      On GCC and LLVM, I used -O3 and -fast-math but without -lto which is only available on GCC 4.5
      but only provides from 0.0% to 2.5% of performance benefice. More information on link-time optimizations on a future post.
    </paragraph>

    <image
      color="white"
      img="./post/0372-1.png"
      href="./post/0372-1.png" />
    <image
      color="white"
      img="./post/0372-2.png"
      href="./post/0372-2.png" />
    <image
      color="white"
      img="./post/0372-3.png"
      href="./post/0372-3.png" />
    <image
      color="white"
      img="./post/0372-4.png"
      href="./post/0372-4.png" />
    <image
      color="white"
      img="./post/0372-5.png"
      href="./post/0372-5.png" />

    <paragraph>
      LLVM is becoming more and more mature and it has build itself a reputation, I was curious to how it actually behaves.
      LLVM turns out to be slower to build the code than GCC but has reached GCC level of performances.
      However, they both stay slower than Visual Studio which has made good performance improvements in its 2010 release.
      Since LLVM 2.3, the performance has evolved with some sort of performance unstability across versions even if
      in the end the performance level has just slightly progress in LLVM 2.8.
      LLVM 2.3 is the first version able to build Ovt'sa succesfully.
    </paragraph>
    <paragraph>
      It's really interesting to compare the behaviours of Intel CPUs against AMD CPUs.
      The Phenom II X6 seams less sensitive to the compiler version and optimization flags than Intel CPUs.
      On the AMD CPU, using the x87 instruction set is just slightly slower. On Intel CPUs, it can double the performance!
    </paragraph>
    <paragraph>
      Despite huge performance gains, GCC remains a step behind Visual Studio
      and its progress has only prevent LLVM to be a relevant replacement.
    </paragraph>
  </post>

  <post index="0371" date="19/01/2011" std-date="2011-01-19T23:30:00.00Z" title="William Kentridge at Vienna's Albertina">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <quote author="William Kentridge" href="http://en.wikipedia.org/wiki">
      A first image phrase, or idea would justify itseft in the unfolding of images, phrases and ideas sparoned by the work as it progressed.
      The imperfect erasures of the succeessive stages of each drawing become a record of the progress of an idea and a record of the passage of time.
    </quote>

    <paragraph>
      Some artists of our time are so stunning that we know that we will eventually came accross them anytime soon.
      That's what happen to me with William Kentridge.
    </paragraph>
    <paragraph>
      I saw an exhibition of his work earlier this year at Paris' Jeu de Paume
      and it was already amazing but this was one of the many exhibitions I saw I just lacked of time to write a report and save it in my life time memory§.
      This time is was the turn of Vienna's Albertina to display a compete retrospective of William Kentridge.
    </paragraph>
    <paragraph>
      Between "stone edge" cinema (as he like to call it) and some form of innovations, William Kentridge appears to me as a 'revolutionnar-traditionalist'.
      Despite being based on old form of art, the way he reuse them involve the creation of new medias, new ways to experience.
    </paragraph>
    <paragraph>
      This exhibition is running until the 30 of January 2011 at Vienna's Altertina.
      It should not be missed for anyone who likes to awake his sense of wonder and creativity.
    </paragraph>

    <quote author="William Kentridge" href="http://en.wikipedia.org/wiki">
      The studio is an enclosed space not just physically but also psychically, like an enlarged head ;
      the pacing in the studio is the equivalent of ideas spinning round in one's head, as if the brain is a muscle and can be exercised into fitness, into clarity.
    </quote>

    <image
      color="black"
      img="./post/0371-0.jpg"
      href="./post/0371-0.jpg" />

    <image
      color="black"
      img="./post/0371-1.jpg"
      href="./post/0371-1.jpg" />

    <source-list>
      <source-element type="Link" href="http://www.albertina.at/jart/prj3/albertina/main.jart?rel=en&amp;reserve-mode=reserve&amp;content-id=1202307119260&amp;ausstellungen_id=1253865734414" title="Exhibition at Vienna's Albertina" />
      <source-element type="Link" href="http://moma.org/interactives/exhibitions/2010/williamkentridge/" title="The excellent website from this exhibition of the New York's MOMA" />
    </source-list>
  </post>

  <post index="0370" date="18/01/2011" std-date="2011-01-18T00:30:00.00Z" title="GLM manual available on Google Docs">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      For GLM manual I have been using multiple text processing programs and versions of <link href="http://www.libreoffice.org/">LibreOffice</link> and Word.
      I can't say it has been without issues especially on the regard of the formatting.
    </paragraph>
    <paragraph>
      I have been using <link href="https://docs.google.com">Google Docs</link> for a while, it's quite simple but it basically all I need.
      That's why I decide to put the GLM manual on <link href="https://docs.google.com">Google Docs</link> and I thought it would make easier for GLM users to add some contents or to fixe some issues.
      Editing is allowed to anyone as far as we have a Google account.
    </paragraph>

    <source-list>
      <source-element
        type="Link"
        href="https://docs.google.com/document/d/1R4H08fWX6MeGJ0N7LqQRLKkQ7Tn2S9yTrXOMYCEEZLI/edit?hl=en"
        title="GLM Manual 0.9.1 draft on Google Document" />
      <source-element
        type="Link"
        href="https://docs.google.com/document/d/1PhRUZcjiQ4GwmrNBCp609BelqthDICGkqmuAPx5oFIA/edit?hl=en"
        title="GLM Manual 0.9.0 on Google Document" />
      <source-download index="1059" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0369" date="13/01/2011" std-date="2011-01-13T23:30:00.00Z" title="Compilers performance on SSE code">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
      <tag>gtc-tech-devel-cpp</tag>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      It has been a while since my <link href="post-0128.html">last compiler performance comparison</link>!
      Based on my raytracer, which isn't designed to use SSE instructions,
      I previously highlight that Visual C++ compiler performances were more of less stable, or are even decreasing, since Visual C++ 6
      but on the contrary, GCC performances were continuously getting better.
    </paragraph>

    <paragraph>
      For this new review I decided to take advantages of my work (still in progress) on <link href="project-0016.html">GLM</link> 0.9.1 regarding SSE optimizations.
      Just after "Is my optimizations keep this code working?",
      one of the questions that should always remains while wrtting optimized code is "Is the compiler capable to do a better job than me?"
      This is not an easy question to answer and ultimately the performance of the optimized code need to be tested against the compiler optimizations.
      Nevertheless, there are some scenarios where chances are that our optimizations might be really effective:
      When the optimizations required a specific level of cleverness, equation simplifications, specific data ordering or mathematical rules.
    </paragraph>

    <paragraph>
      This test is based on various implementations of the computation of a matrix multiplication, a matrix inverse and a matrix determinant.
      Large arrays of input data are generated and them entirely processed for each operations using prefetches on SSE implementations.
      On GCC, I used the -O3, -msse2 and -mfpmath=sse optimizations and on Visual C++ /fp:fast, /Ox and /arch:SSE2.
      -mfpmath=sse and /arch:SSE2 are only used on SSE tests. The compilers tested are Visual C++ 2005 SP1, Visual C++ 2008 SP1, Visual C++ 2010 SP1 Beta and GCC 4.5.1.
      I did a couple of test with GCC 4.4.0 and the results were pretty much the same as GCC 4.5.1 so that it didn't felt relevant to include these results.
      3 different platforms have been used using 3 differents CPU architechture, Core 2 Q6600, Core i5 660 and Phenom II X6 1055T.
      Without waiting any longer, here is my results:
    </paragraph>

    <image title="GLM optimizations efficiency, relative level of performance with generated FPU code. (higher is better)"
      color="white"
      img="./post/0369-1.png"
      href="./post/0369-1.png" />

    <paragraph>
      With the proper level of compiler optimizations, the compilers manage to increase the program performances when using SSE instructions.
      What this chart doesn't show, is that with the default 'release' optimization settings, all Visual C++ versions actually slow down the performances.
    </paragraph>
    <paragraph>
      Second point, the level of performance reached by the hand written optimizations is really relevant expect on the determinant case... I can go review my copy!
      Interestingly, Visual C++ seems to make more progresses on optimizations of hand written optimizations with intrinsics than raw C++ code.
      Visual C++ 2005 seems to have some issues to include hand written optimizations with the rest of the code.
      However, Visual C++ efficiency to generate SSE code is fairly stable across versions.
    </paragraph>
    <paragraph>
      It's interesting to see that the behaviour of between the Core 2 and Phenom II processors.
      I had a look on a Core i5 and the variations are of the same level.
    </paragraph>

    <image title="Relative level of performance to Visual C++ 2005 and a Core 2 Q6600 (higher is better)"
      color="white"
      img="./post/0369-3.png"
      href="./post/0369-3.png" />

    <image title="Relative level of performance to Visual C++ 2005 (higher is better)"
      color="white"
      img="./post/0369-2.png"
      href="./post/0369-2.png" />

    <paragraph>
      First thing to notice: GCC is astonishingly efficient on FPU optimizations, 50% more efficient than Visual C++ 2010.
      On hand written optimizations, GCC is on par with Visual C++ 2010 on the Core2 CPU but behind Visual C++ 2008 on the Phenom II CPU.
      On the regard of generated SSE code, the situation is reversed!
    </paragraph>
    <paragraph>
      GCC is now a perfectly competitive compiler on term of performances.
      The performance of Visual C++ are still progressing on SSE code but stable on FPU code.
    </paragraph>
  </post>

  <post index="0368" date="07/01/2011" std-date="2011-01-07T23:30:00.00Z" title="OpenGL Samples Pack 4.1.4.1 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      This update of the <link href="project-0026.html">OpenGL Samples Pack</link> comes to fix multiple issues from <link href="post-0367.html">the previous release</link> :
      CMake build, improved DSA use, fixed extensions check, simplified OpenGL versions detection.
    </paragraph>
    <paragraph>
      The OpenGL Samples Pack 4.1.4.1 is available for Visual Studio 2008 and 2010, 32 or 64 bits through <link href="http://www.cmake.org">CMake</link>.
    </paragraph>

    <source-list>
      <source-download index="1061" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0367" date="04/01/2011" std-date="2010-01-04T23:30:00.00Z" title="Renoir at Paris Grand Palais">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <image
      color="black"
      img="./post/0367-2.jpg"
      href="./post/0367-2.jpg" />

    <quote author="Henri Matisse" href="http://en.wikipedia.org/wiki/Henri_Matisse">
      Le grand bénéfice que j'ai tiré de mes visites chez Renoir fut de constater qu'apres une longue vie de travail,
      la curiosite d'un artiste pouvait ne pas etre épuisée.
    </quote>

    <paragraph>
      Until the 4th of Junuary 2010, just a year from today, le Grand Palais displayed a great exibition about the late work of
      <link href="http://en.wikipedia.org/wiki/Pierre-Auguste_Renoir">Jean Ausguste Renoir</link> the famious French impressionnist painter who decided to change the orientation of his work
      following others inspirations from Raphael to Velasquez.
    </paragraph>

    <paragraph>
      This fabulous exhibition pictures all the subject of interest of Renoir during this period:
      The woman body as a monument, the integration of the subject with the background and a come back to more traditional techniques.
    </paragraph>

    <paragraph>
      I have been especially impression by the way Renoir saw and paint the skin, the flesh.
      He found beauty to see the woman body as massive and to paint them actually fatter that they were which I find
      interesting considering the current standard for women beauty.
      I see Renoir as a master of material, cloth, hair or flesh through Renoir paintings we just see the softness, the density, the thiness.
      The multi-layer technique to pain the skin stunned me and is actually similar to some implementation of a 3D rendering technique called subsurface scattering.
    </paragraph>

    <image
      color="black"
      img="./post/0367-1.jpg"
      href="./post/0367-1.jpg" />

    <source-list>
      <source-element type="Link" href="http://www.rmn.fr/Renoir-in-the-20th-Century" title="Exhibition page" />
    </source-list>
  </post>

  <post index="0366" date="30/12/2010" std-date="2010-12-30T23:00:00.00Z" title="Paul Cézanne's card players at the Courthaud Gallery">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <paragraph>
      It has been a while since last time I went in the Courthaud Gallery which is quite unfortunate as it's one of my favorite museum.
      Fortunately, the Courthaud Gallery is curently featuring a one room exhibition about Paul Cézanne's card players
      which was enough to light on my desire to go back.
    </paragraph>
    <quote author="Paul Cézanne" href="http://en.wikipedia.org/wiki/Paul_C%C3%A9zanne">
      I love above all else the apperance of people who have grown old without breaking with old customs
    </quote>
    <paragraph>
      The approach taking by the curators is to explore a single topic and observe Cézanne interest for the card players topic and explore his creation process.
    </paragraph>
    <paragraph>
      One room it not much but the Courthaud Gallery contains one of the richest collection of paintings and drawing in the world,
      Camille Pissarro, Pierre Auguste Renoir, Claude Monet, Van Gogh and of course more Paul Cézanne
      which makes a visit of the Courthaud Gallery always unmissable.
    </paragraph>
    <image
      color="black"
      img="./post/0366-1.jpg"
      href="./post/0366-1.jpg" />
    <source-list>
      <source-element type="Link" href="http://mam.paris.fr/en/expositions/larry-clark" title="Exhibition page" />
    </source-list>
  </post>

  <post index="0365" date="26/12/2010" std-date="2010-12-26T23:30:00.00Z" title="Hyper Real at Vienna's MUMOK">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <quote author="Michel Foucault" href="http://en.wikipedia.org/wiki/Michel_Foucault">
      Pop art and hyper-realism have restaured our love of pictures.
    </quote>

    <image title="Airstream, 1970, Ralph Goings"
      color="black"
      img="./post/0365-1-small.jpg"
      href="./post/0365-1.jpg" />

    <quote author="Ralph Goings" href="http://en.wikipedia.org/wiki/Ralph_Goings">
      I generally do not care much for reality, only for the painted illusion and its accompanoying problems.
      For this reason certain subjects are more attractive than others.
      In my opinion, realism's stength lies cool and objective manner of rendition. It is a copy, not reality. It is meant to be illusory, not deceptive.
      The only aspect of the relationship between reality and painted illusion that interests me is the fact that reality offers up subjects for paintings.
    </quote>

    <paragraph>
      I am often thinking about the direction painting is taking and I have notice a growing trend for hyper-realism paintings,
      so real that at first we believe it's a photograph. This desire for a photorealistic approach is nothing new,
      looking backward in art history, I can't forget the American landscape artists in the late 19 centuary
      which made me smile when I thought that at the same time in Europe we were filled with impressionnarism.
    </paragraph>
    <paragraph>
      This interest raised my attention to the exhibition "Hyper Real" at the MUMOK in Vienna,
      an exhibition illustrated by a photorealistic painting by Ralph Goings that shows Photo Realism in the contex of Pop art,
      which I think illustrated to come back of realism in the 70s. Organised in multiple themes this exhibition is commented by the words of artists of
      this period which allows the visitors a reach a depth understand of the motivations behind it.
    </paragraph>
    <paragraph>
      As taking pictures were allowed and astonished by the qualities of this exhibition, I took some pictures of my favorite pieces displayed bellow.
    </paragraph>

    <image title="Bowery Derelicts, 1969-1970, Duane Hanson"
      color="black"
      img="./post/0365-2-small.jpg"
      href="./post/0365-2.jpg" />

    <image title="Footbah Vignette, 1969, Duane Hanson"
      color="black"
      img="./post/0365-3-small.jpg"
      href="./post/0365-3.jpg" />

    <quote author="Duane Hanson" href="http://en.wikipedia.org/wiki/Duane_Hanson">
      New Realist painting reflects everyday life or chat we are thinking about, whatever it is, you recognize, imaginary you are confronted with.
      But it's not like Pop art, it's more reserved; it's just taking it with no comment.
      To me that wan't enough. I wanted to comment and was critized that I was doing it for shock.
      For me I feel that I have to identify with those lost causes, revolutions and so forth.
      I am not satisfied with the world. Not that I think you can change it but I just want to express my feelings of dissatisfaction.
    </quote>

    <image title="Woman in a restaurant booth, 1961, George Segal"
      color="black"
      img="./post/0365-4-small.jpg"
      href="./post/0365-4.jpg" />

    <image title="Doantown, 1978, Richard Estes"
      color="black"
      img="./post/0365-5-small.jpg"
      href="./post/0365-5.jpg" />

    <quote author="Richard Estes" href="http://en.wikipedia.org/wiki/Richard_Estes">
      I'm not trying to reproduce the photograph. I'm trying to use the photograph to do the painting [...]
      Taking the photograph is the first step. The idea occurs and is involved with the photograph.
      That's the creation of it almost, and the painting is just the technique of transmitting, or finishing it up so to speak.
    </quote>

    <image title="Fenstergitter, 1968, Gerhard Richter"
      color="black"
      img="./post/0365-6-small.jpg"
      href="./post/0365-6.jpg" />

    <quote author="Gerhard Richter" href="http://en.wikipedia.org/wiki/Gerhard_Richter">
      The detour by way of painting gives me photographs that can not be maybe by the normal technique of direct enlargements ;
      and these photographs can be pictures. Pictures - How an I explain it ? Stella, Ryman, Morley, Palerno, where it gets exciting for me ;
      where the absence of language begins.
    </quote>

    <image title="Portrait Kenneth Kock, 1967, Alex Kofz"
      color="black"
      img="./post/0365-7-small.jpg"
      href="./post/0365-7.jpg" />

    <quote author="Alex Kofz">
      My paintings and prints are taken fron real life. If they tell stories? They are just images without much depth. Everything is visual ; They are no stories.
      If it is possible to interpret stories into them, it depends on your own values.
    </quote>

    <paragraph>
      This exhibition turns out to be incredibly interesting and has been the once I spend the most time to explore (4 hours!),
      an exhibition not to miss and running until the 13th of Febrary for 9€ (full admission) plus an optional 3€ for the audioguide
      which is not really necessary in my option.
    </paragraph>

    <image title="Soft Pink Landscape, 1971-1972, Richard Hamilton"
        color="black"
        img="./post/0365-8-small.jpg"
        href="./post/0365-8.jpg" />

    <image title="The red horseman, 1974, Roy Lichtenstein"
      color="black"
      img="./post/0365-9-small.jpg"
      href="./post/0365-9.jpg" />

    <source-list>
      <source-element type="Link" href="http://www.mumok.at/programm/ausstellungen/hyper-real/" title="Exhibition page" />
      <source-element type="Link" href="http://picasaweb.google.com/groovounet/HyperReal#slideshow" title="More pictures from this exhibition" />
    </source-list>
  </post>

  <post index="0364" date="24/12/2010" std-date="2010-12-24T23:59:00.00Z" title="A Küken Christmas tell in the snowy valley">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Down">
      <summary>London 2010</summary>
      <fullscreen>http://picasaweb.google.com/groovounet/KuekenInTheSnowValley#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.com&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5552081197753351329%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="http://lh6.ggpht.com/_bpz9rGNwhX4/TQz02ZdoH2I/AAAAAAAAJy8/1pebPQeCrMo/s144/022.jpg"
        pic288="http://lh6.ggpht.com/_bpz9rGNwhX4/TQz02ZdoH2I/AAAAAAAAJy8/1pebPQeCrMo/s288/022.jpg"
        pic400="http://lh6.ggpht.com/_bpz9rGNwhX4/TQz02ZdoH2I/AAAAAAAAJy8/1pebPQeCrMo/s400/022.jpg"
        pic800="http://lh6.ggpht.com/_bpz9rGNwhX4/TQz02ZdoH2I/AAAAAAAAJy8/1pebPQeCrMo/s800/022.jpg" />
    </album>
    <paragraph>
      We are officially in winter since the 21th of December but in London, it fells like winter has started a month ago. A lot of adventures opportunities for Küken!
    </paragraph>
    <paragraph>
      Merry Christmas and happy new year!
    </paragraph>
    <source-list>
      <source-element type="Link" href="http://picasaweb.google.com/groovounet/KuekenInTheSnowValley" title="Album page" />
    </source-list>
  </post>

  <post index="0363" date="23/12/2010" std-date="2010-12-23T23:30:00.00Z" title="OpenGL Samples Pack 4.1.4.0 released, focus on DSA">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack 4.1.4.0 is released.
      The main change for this release is the new samples featuring the Direct State Access (DSA) API provided
      by <codeword href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">GL_EXT_direct_state_access</codeword> extension.
    </paragraph>
    <paragraph>
      It is now available in both AMD (since catalyst 10.7)
      and nVidia (since more than 2 years) drivers with an excellent support as I haven't found any OpenGL drivers bug yet even with more sophisticated projects than these samples.
      As it remains an EXT extension, all the samples using this feature use the post-fix 'ext'.
    </paragraph>
    <paragraph>
      A lot of OpenGL programmers are looking forward for this extension to reach OpenGL core and sooner or later it will happen as the previous OpenGL specifications have shown that the ARB believe it as well.
      However, this extension is not free of design issues as I have explained in <link href="post-0279.html">an old OpenGL wishlist</link>.
      Another area of problems with DSA is actually the lack of compleness that I would like to detail in this post.
    </paragraph>

    <title>
      GL_EXT_direct_state_access is written against OpenGL 3.0 specification
    </title>
    <paragraph>
      Originally, the direct state access extension has been written against the OpenGL 2.1 specification and
      published slightly after the OpenGL 3.0 specification and seen as the only light of hope for OpenGL after
      <link href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=243193#Post243193">the big OpenGL 3.0 controversy</link>.
      In January 2009, the extension has been updated against OpenGL 3.0
      which has been a huge improvement but OpenGL 3.2 was already release and some gaps remained and still remain.
    </paragraph>

    <title>1. DSA issues in OpenGL 4.1 specification</title>
    <subtitle>
      1.1. <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glBindProgramPipeline.xml">glBindProgramPipeline</codeword> doesn't follow the DSA principes
    </subtitle>
    <paragraph>
      Since OpenGL 3.1 the ARB is considering the DSA approach when creating new entry point but unfortunatly some issues have appeared like the
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glBindProgramPipeline.xml">glBindProgramPipeline </codeword><link href="post-0348.html">example I demonstrated</link>.
      Basically, to create the real program pipeline object, the object name generated with
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glGenProgramPipelines.xml">glGenProgramPipelines</codeword> need to be binded according to the specification.
      In practice both AMD and nVidia don't follow the specification and rely on the DSA principles for this case but still, the specification is a issue.
    </paragraph>

    <subtitle>1.2. Subroutines have a awkward behaviours mechanisium.</subtitle>
    <paragraph>
      When I first tried the subroutine API, the least I can say is that I struggle.
      First, the all 'index' and 'location' is really confusing but also the API is not actually following the DSA principles.
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glUniformSubroutines.xml">glUniformSubroutinesuiv</codeword> has actually a odd behaviour as it's a context state but
      each time a program is binded this state value is invalided... which makes me feel it should be a program state using DSA.
      The (odd) explaination for this behaviours is to provide the possibility to switch context without resetting subroutines...
      None of the rest of the API behave like that which makes it not consistent.
      My workaround is to set the subroutines each time the corresponding program is binded...
    </paragraph>

    <subtitle>1.3. Multisample textures don't support DSA.</subtitle>
    <paragraph>
      Multisample texture is a new feature of OpenGL 3.2 that creates an entry point
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glTexImage2DMultisample.xml">glTexImage2DMultisample</codeword>.
      The new functionnalities provided by the multisampled textures are a superset of what the multisampled renderbuffer provides
      so that in a way we can consider deprecated the renderbuffer functionnality.
      The only issue with that: No entry point is available in <codeword href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">GL_EXT_direct_state_access</codeword>,
      the ARB pretty much forgot to add a dependency to this extension in <codeword href="http://www.opengl.org/registry/specs/ARB/texture_multisample.txt">GL_ARB_texture_multisample</codeword>
      so that a DSA entry point (<codeword>glTextureImage2DMultisampleEXT</codeword>) for <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glTexImage2DMultisample.xml">glTexImage2DMultisample</codeword>
      would be available if direct state access extension is supported.
    </paragraph>

    <subtitle>1.4. The VAO API is conceptually an issue for DSA</subtitle>
    <paragraph>
      I am really evil with VAO but is it really my fault? The VAO keeps demonstrating how wrongly designed it has been
      and when I noticed that OpenGL ES has now a KHR VAO extension... well, it doesn't really made me happy to let this none sense survive in OpenGL.
      When I think about the VAO, my brain ends up like double locked threads.
    </paragraph>
    <paragraph>
      The first issue is the <codeword>GL_ELEMENT_ARRAY_BUFFER</codeword> binding point which is a VAO state.
      There is not precedent for <codeword>glBind*</codeword> functions being DSA function as all glBind* functions are context state expect this (stupid) case.
      My work around is to consider the <codeword>GL_ELEMENT_ARRAY_BUFFER</codeword> state like a context state that I need to bind after the VAO object... like subroutines actually.
    </paragraph>

    <subtitle>1.5. glVertexAttribDivisor has no DSA version</subtitle>
    <paragraph>
      OpenGL 3.0 was released with a serie of extensions that wasn't part of OpenGL 3.0 specification which includes
      <codeword href="http://www.opengl.org/registry/specs/ARB/instanced_arrays.txt">GL_ARB_instanced_arrays</codeword>,
      the promoted version of <codeword>GL_NVX_instanced_arrays</codeword>, an extension which provides almost the fastest way to do geometry instancing and written against OpenGL 2.1.
      Unfortunately, this extension reached OpenGL spefication only in OpenGL 3.3 but has been integrated 'as it is' which implies no
      <codeword href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">GL_EXT_direct_state_access</codeword> dependency
      and DSA support which in practice makes the use of DSA with VAO no possible.
    </paragraph>

    <subtitle>1.6. Transform feedback buffer</subtitle>
    <paragraph>
      OpenGL 4.0 has brought significant improvements to transform feedback functionnalities even if I still think we need more.
      OpenGL 4.0 integrates <codeword href="http://www.opengl.org/registry/specs/ARB/transform_feedback2.txt">GL_ARB_transform_feedback2</codeword>
      which add a transform feedback object moving some context states to this new object.
      OpenGL handles these states using <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glBindBufferBase.xml">glBindBufferBase</codeword> a function that doesn't have DSA version,
      like other <codeword>glBind*</codeword> functions...
    </paragraph>

    <title>2. A bit of perspective on DSA</title>
    <subtitle>2.1. The ideal</subtitle>
    <paragraph>
      An interesting point with the DSA approach is the hability of designing a graphics engine without the constraint of handeling the update
      and the draw phases together but instead seeing them as 2 separated use cases so that the update phase doesn't have conscequences on the draw phase stage.
      This design philosophy makes the graphics engine design much simpler, remove the CPU overhead for this necessary management
      but also avoid the question of rebinding or resetting states. Finally and maybe most importantly, DSA is really less error prone !
    </paragraph>

    <subtitle>2.2. The practice.</subtitle>
    <paragraph>
      Unfortunately, in practice a full DSA design approach isn't fully possible simply because the OpenGL DSA support isn't completed yet as demonstrate in section 1.
      However, there are already some good parts which will singnificantly improve designs.
    </paragraph>
    <paragraph>
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glProgramUniform.xml">glProgramUniform</codeword> allows to set the uniform values without having to bind a program or 'play'
      with the selector <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glActiveShaderProgram.xml">glActiveShaderProgram</codeword> introduced with OpenGL 4.1 for separate programs.
      This is such a great improvement which makes possible to avoid using <link href="http://virtualglobeandterrainrendering.blogspot.com/2010/10/game-engine-gems-volume-2.html">delayed calls</link>
      to set uniform variables without constantly binding programs.
    </paragraph>
    <paragraph>
      The other really interesting point is the hability to update buffer and texture objects without affecting the binded buffers for a draw call.
      This is a great opportunity for data streaming/vitual texture and actually any scenario where the programmer wants to build an advanced and customized buffer and/or texture manager.
    </paragraph>

    <subtitle>2.3. Let's have a quick look at DSA!</subtitle>
    <code title="Update an uniform:">
      <line>
        <comment>//Without DSA</comment>
      </line>
      <line>
        glUseProgram(ProgramName);
      </line>
      <line>
        glUniformMatrix4fv(UniformMVP, 1, GL_FALSE, &lt;MVP[0][0]);
      </line>
      <line>

      </line>

      <line>
        <comment>//With DSA</comment>
      </line>
      <line>
        glProgramUniformMatrix4fv(ProgramName, UniformMVP, 1, GL_FALSE, &lt;MVP[0][0]); <comment>//OpenGL 4.1 function</comment>
      </line>
    </code>

    <code title="Creating a texture with DSA:">
      <line>glGenTextures(1, &amp;TextureName);</line>
      <line> </line>
      <line>glTextureParameteriEXT(TextureName, GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, 0);</line>
      <line>glTextureParameteriEXT(TextureName, GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, 1000);</line>
      <line>glTextureParameteriEXT(TextureName, GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_R, GL_RED);</line>
      <line>glTextureParameteriEXT(TextureName, GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_G, GL_GREEN);</line>
      <line>glTextureParameteriEXT(TextureName, GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_B, GL_BLUE);</line>
      <line>glTextureParameteriEXT(TextureName, GL_TEXTURE_2D, GL_TEXTURE_SWIZZLE_A, GL_ALPHA);</line>
      <line> </line>
      <line>gli::texture2D Texture = gli::load(TEXTURE_DIFFUSE_DXT5);</line>
      <line>for(gli::texture2D::level_type Level = 0; Level &lt; Texture.levels(); ++Level)</line>
      <line>{</line>
      <line align="16px">glCompressedTextureImage2DEXT(</line>
      <line align="32px">TextureName,</line>
      <line align="32px">GL_TEXTURE_2D,</line>
      <line align="32px">GLint(Level),</line>
      <line align="32px">GL_COMPRESSED_RGBA_S3TC_DXT5_EXT,</line>
      <line align="32px">GLsizei(Texture[Level].dimensions().x),</line>
      <line align="32px">GLsizei(Texture[Level].dimensions().y),</line>
      <line align="32px">0, </line>
      <line align="32px">GLsizei(Texture[Level].capacity()), </line>
      <line align="32px">Texture[Level].data());</line>
      <line>}</line>
    </code>

    <code title="Framebuffer object example:">
      <line>
        <comment>//Without DSA</comment>
      </line>
      <line>glGenTextures(1, &amp;ColorTextureName);</line>
      <line>glBindTexture(GL_TEXTURE_2D, ColorTextureName);</line>
      <line> </line>
      <line>glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, Width, Height, 0, GL_RGBA, GL_UNSIGNED_BYTE, 0);</line>
      <line>glBindTexture(GL_TEXTURE_2D, 0);</line>
      <line> </line>
      <line>glGenFramebuffers(1, &amp;FramebufferResolveName);</line>
      <line>glBindFramebuffer(GL_FRAMEBUFFER, FramebufferResolveName);</line>
      <line>glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, ColorTextureName, 0);</line>
      <line>if(glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)</line>
      <line align="32px">
        <keyword>return false;</keyword>
      </line>
      <line>glBindFramebuffer(GL_FRAMEBUFFER, 0);</line>
      <line>

      </line>

      <line>
        <comment>//With DSA</comment>
      </line>
      <line>glGenTextures(1, &amp;ColorTextureName);</line>
      <line>glTextureImage2DEXT(ColorTextureName, GL_TEXTURE_2D, 0, GL_RGBA8, Width, Height, 0, GL_RGBA, GL_UNSIGNED_BYTE, 0);</line>
      <line> </line>
      <line>glGenFramebuffers(1, &amp;FramebufferResolveName);</line>
      <line>glNamedFramebufferTexture2DEXT(FramebufferResolveName, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, ColorTextureName, 0);</line>
      <line>if(glCheckNamedFramebufferStatusEXT(FramebufferResolveName, GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)</line>
      <line align="32px">
        <keyword>return false</keyword>;
      </line>
    </code>

    <source-list>
      <source-download index="1060" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0362" date="21/12/2010" std-date="2010-12-21T00:30:00.00Z" title="GLM 0.9.0.6 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      GLM 0.9.0.6 is a new update of GLM built over GLM's user bug reports.
      It mainly fixes issues regarding non-squared matrices and provides multiple extensions fixes as well.
    </paragraph>
    <paragraph>
      I expect to release GLM 0.9.1.0 in Junuary but I might continue to update GLM 0.9.0.X as there are minor incompatibilities.
    </paragraph>

    <source-list>
      <source-download index="1059" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0361" date="20/12/2010" std-date="2010-12-20T02:30:00.00Z" title="André Kertész at Jeu de Paume">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <quote author="André Kertész" href="http://en.wikipedia.org/wiki/Andr%C3%A9_Kert%C3%A9sz">
      I regard myself as an amateur today, and I hope that's what I will stay until the end of my life.
      Because I'm forverer a beginner who discovers the world again and again
    </quote>
    <image title="Underwater Swimmer, André Kertész, 1917"
      color="black"
      img="./post/0362-1.jpg"
      href="./post/0362-1.jpg" />
    <paragraph>
      I discovered <link href="http://en.wikipedia.org/wiki/Andr%C3%A9_Kert%C3%A9sz">André Kertész</link> (1894 - 1985)
      last year at the <link href="http://www.pumphousegallery.org.uk/">Pump House Gallery</link> through the exhibition
      <link href="http://www.pumphousegallery.org.uk/exhibitions/allexhibitions/shake-it-instant-history-polaroid">Shake It: An Instant History of the Polaroid</link>
      commemorating the last Polaroid films set to expire in October 2009.
    </paragraph>
    <paragraph>
      Beside his iconic <link href="http://en.wikipedia.org/wiki/Polaroid_SX-70">SX-70 Polaroid</link> pictures,
      André Kertész had a long career before as a photographer entierely displayed by the Jeu de Paume in an usual outstanding installation.
    </paragraph>
    <paragraph>
      Across his life, André Kertész has lived in Hungaria, France and United State.
      Born in Budapest, he got his first camera at 18, he made a lot of pictures during the first world war but defined his style after the war while experimenting with his brother.
      He moved in Paris in 1925 and soon met Pet Mondrian. This is really something that stroke me during this exhibition.
      In term of compositions, I felt the work of Kertesz highly impired by Mondrian all along his life even after he moved in New York in 1936.
      After a difficult period in the US where he was depress and his work misunderstood, he finally reach recognition from the 60s with a serie of exhibitions and publications.
    </paragraph>
    <paragraph>
      André Kertész is an history of 70 years of photography where is build a style of no style as he has, all along his life,
      experient with everything he came across allowing himself any subject and any technic, making him unique in his genre.
    </paragraph>

    <quote author="André Kertész" href="http://en.wikipedia.org/wiki/Andr%C3%A9_Kert%C3%A9sz">
      I never document, I always interpret with my pictures. This is the great difference between me and the many others.[...]
      I interpret what I feel in a given moment. Not what I see, but what I feel.
    </quote>

    <paragraph>
      This exhibition is running until the 6 Febrary 2011 for 8.50€ and is a high recommantion like every exhibition I have seen at Le Jeu de Paume so far.
    </paragraph>

    <image
      title="Distortion #40, André Kertész, 1933"
      color="black"
      img="./post/0362-2.jpg"
      href="./post/0362-2.jpg" />
    <image
      title="Broken Plate, André Kertész, 1929"
      color="black"
      img="./post/0362-3.jpg"
      href="./post/0362-3.jpg" />
    <image
      title="Mondrian’s Glasses and Pipe, André Kertész, 1926"
      color="black"
      img="./post/0362-4.jpg"
      href="./post/0362-4.jpg" />
    <image
      title="May 24 1979, André Kertész, 1979"
      color="black"
      img="./post/0362-5.jpg"
      href="./post/0362-5.jpg" />
    <image
      title="August 16 1979, André Kertész, 1979"
      color="black"
      img="./post/0362-6.jpg"
      href="./post/0362-6.jpg" />

    <quote author="André Kertész" href="http://en.wikipedia.org/wiki/Andr%C3%A9_Kert%C3%A9sz">
      My photography is really a visual diary [...] it is very much a tool, to express and describe my life, the same way poets or writters describe their life experiences.
      It was a way to project the things I found.
    </quote>

    <source-list>
      <source-element type="Link" href="http://www.jeudepaume.org/index.php?idArt=1187&amp;lieu=1&amp;page=article" title="Exhibition page" />
    </source-list>
  </post>

  <post index="0360" date="19/12/2010" std-date="2010-12-19T02:30:00.00Z" title="Larry Clark kiss the past hello at Paris' MAM">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <image
      color="black"
      img="./post/0360-1.jpg"
      href="./post/0360-1.jpg" />
    <paragraph>
      <link href="http://en.wikipedia.org/wiki/Larry_Clark">Larry Clark</link> (1943 - ) is a famous movie director, Kids (1995), Bully (2001) and photographer who is mainly interested in the subject of youth who are part of a specific subculture.
    </paragraph>
    <paragraph>
      At its launch, this exhibition has recieved a lot of attention thanks to a ban of minors. For an exhibition speaking of minors, that's quite a statement!
    </paragraph>
    <paragraph>
      Obviously, I had a attent to such exhibition and I must admit that regarding only the content, it quite something but under 18 ban has always being used for porn in France and this is nothing like it. I would have prefer this exhibition to be ban under 16, like movies of this type would be restricted in France. I have in mind for example "Salò, or the 120 Days of Sodom" (http://en.wikipedia.org/wiki/Sal%C3%B2,_or_the_120_Days_of_Sodom) based on a novel of the Marquis de Sade (http://en.wikipedia.org/wiki/Marquis_de_Sade) which is really a crazy thing compare to this exhibition but only ban for under 16. Making the presence of an adult necessary would have been better, it's quite an experience to see but nothing that shocking either.
    </paragraph>
    <paragraph>
      I enjoyed these photographs beyond moral values and ideology but I kept a mix felling about them and about the creation process involves. The recorded moment haven't been lived when the photographs have been taken, I think these moments have being designed which results at kids showing what they want to show not really who they are.
    </paragraph>
    <paragraph>
      All in all, it's an interesting exhibition running until the 2rd of January for only 5€.
    </paragraph>
    <image
      color="black"
      img="./post/0360-2.jpg"
      href="./post/0360-2.jpg" />
    <image
      color="black"
      img="./post/0360-3.jpg"
      href="./post/0360-3.jpg" />
    <image
      color="black"
      img="./post/0360-4.jpg"
      href="./post/0360-4.jpg" />
    <image
      color="black"
      img="./post/0360-5.jpg"
      href="./post/0360-5.jpg" />
    <source-list>
      <source-element type="Link" href="http://mam.paris.fr/en/expositions/larry-clark" title="Exhibition page" />
    </source-list>
  </post>

  <post index="0359" date="18/12/2010" std-date="2010-12-18T20:00:00.00Z" title="x86 instruction sets">
    <meta>
      <tag>gtc-tech-devel-cpp</tag>
    </meta>

    <paragraph>
      I have been working on SIMD optimizations for GLM for a while so that most of the GLSL functions implemented
      by GLM have some equivalent based on SIMD instructions... since 2008.
      Unfortunately, in GLM 0.9.0 none of these optimizations are available as I strugle to find a good API to expose these optimizations...
    </paragraph>
    <paragraph>
      Finally, few weeks ago I merged, the SIMD branch to the GLM 0.9.1 branch as I defined some sort of API based on experimental extension so that
      I can experience this solution, see how it goes and move it to the right direction.
    </paragraph>
    <paragraph>
      One topic was to let the user select the instruction sets they what to use to that they can define which platform will be supported by this build.
    </paragraph>
    <paragraph>
      Unfortunately the world of x86 processors is quite complex on that matter.
      These days both AMD processors (Ahtlon 64 San Diego) and Intel processors (Pentium 4 Prescot) support SSE3 instructions
      but behond that it's more complex. SSSE3(Core 2) SSE4.1 and SSE4.2 instruction sets are only supported by Intel(i7)
      and SSE4A is only supported by AMD (Phenom)... A subset of instructions are actually shared between AMD and Intel CPUs...
      Fortunately with the future realise of AMD Bulldozer and Intel Sandy Bridge,
      the situation should get better thanks to the <link href="http://software.intel.com/en-us/avx/">AVX instruction</link> set even if
      <link href="http://en.wikipedia.org/wiki/XOP_instruction_set#Compatibility_issues">few imcompatibilities</link> might remains.
    </paragraph>
    <paragraph>
      With the rescent released of Visual Studio 2010 SP1 beta, Microsoft has catched up with GCC in term of AVX support.
      Support for SSSE3 SSE4A, SSE4.1 and SSE4.2 is available in Visual Studio 2008 and SSE, SSE2 and SSE3 in Visual Studio 2005.
      GCC 4.4 already support AVX and AES instruction sets, GCC 4.3 brought support for popcnt, SSSE3 SSE4A SSE4.1 and SSE4.2 instruction sets
      and GCC 4.0 supports SSE, SSE2 and SSE3 instruction sets,
    </paragraph>
    <paragraph>
      Finally, I made a list of all the instruction sets headers that need to be included
      to use intrinsect functions with GCC and Visual Studio (and Intel compiler for supported instruction set).
    </paragraph>

    <list name="Instruction sets intrinsic per headers:">
      <list-element>x86intrin.h: x86 instructions</list-element>
      <list-element>mmintrin.h: MMX (Pentium MMX!)</list-element>
      <list-element>mm3dnow.h: 3dnow! (K6-2) (deprecated)</list-element>
      <list-element>xmmintrin.h: SSE + MMX (Pentium 3, Athlon XP)</list-element>
      <list-element>emmintrin.h: SSE2 + SSE + MMX (Pentiuem 4, Ahtlon 64)</list-element>
      <list-element>pmmintrin.h: SSE3 + SSE2 + SSE + MMX (Pentium 4 Prescott, Ahtlon 64 San Diego)</list-element>
      <list-element>tmmintrin.h: SSSE3 + SSE3 + SSE2 + SSE + MMX (Core 2, Bulldozer)</list-element>
      <list-element>popcntintrin.h: POPCNT (Core i7, Phenom subset of SSE4.2 and SSE4A)</list-element>
      <list-element>ammintrin.h: SSE4A + SSE3 + SSE2 + SSE + MMX (Phenom)</list-element>
      <list-element>smmintrin.h: SSE4_1 + SSSE3 + SSE3 + SSE2 + SSE + MMX (Core i7, Bulldozer)</list-element>
      <list-element>nmmintrin.h: SSE4_2 + SSE4_1 + SSSE3 + SSE3 + SSE2 + SSE + MMX (Core i7, Bulldozer)</list-element>
      <list-element>wmmintrin.h: AES (Core i7 Westmere, Bulldozer)</list-element>
      <list-element>immintrin.h: AVX, SSE4_2 + SSE4_1 + SSSE3 + SSE3 + SSE2 + SSE + MMX (Core i7 Sandy Bridge, Bulldozer)</list-element>
    </list>
    <paragraph>
      Such a mess... but beside OpenGL what can bring that much fun?
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.devmaster.net/forums/showthread.php?t=14569" title="A SSE2 mat4 inverse I wrote: 162 cycles against 918 cycles" />
      <source-element type="Link" href="http://msdn.microsoft.com/en-us/library/26td21ds.aspx" title="Microsoft (awesome) Compiler Intrinsics documentation" />
      <source-element type="Link" href="http://developer.amd.com/documentation/guides/pages/default.aspx" title="AMD64 Architecture Programmer's Manuals" />
      <source-element type="Link" href="http://www.intel.com/products/processor/manuals/" title="Intel® 64 and IA-32 Architectures Software Developer's Manuals" />
      <source-element type="Link" href="http://support.amd.com/us/Processor_TechDocs/25481.pdf" title="AMD CPUID specification" />
      <source-element type="Link" href="http://www.intel.com/assets/pdf/appnote/241618.pdf" title="Intel Processor Identification and the CPUID Instruction" />
    </source-list>
  </post>

  <post index="0358" date="13/12/2010" std-date="2010-12-13T23:30:00.00Z" title="December 2010 OpenGL drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      With the unexpected interest for the OpenGL drivers status, I thought it could be a good idea to make it a monthly thing to reach some visibility over OpenGL drivers development.
    </paragraph>
    <paragraph>
      There are multiple issues to make this visibility relevant:
      First, this status is based on an always too limited number of samples but also my knowledge of specification details and drivers implementations.
      Usually, with my samples if it's reasonable to update them to make them work on either AMD or nVidia drivers,
      I don't hesitate to make these changes so that a maximum of samples actually work.
      If I reach a point of dilemma between AMD and nVidia, I always choose a solution as close as the specification says because in the end
      the specification is nothing else than the bible for OpenGL programmers.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <table>
      <table-title>
        <table-title-element class="sample-name">Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 10.10c (26/10/2010)</table-title-element>
        <table-title-element>AMD Catalyst 10.12 ccc (13/12/2010)</table-title-element>
        <table-title-element>nVidia Forceware 260.93 (17/10/2010)</table-title-element>
        <table-title-element>nVidia Forceware 265.90 (01/12/2010)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-debug-output-arb</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-varying</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="red">Will crash after enough load and save instead of returning GL_FALSE.</table-entry-element>
        <table-entry-element color="red">Will crash after enough load and save instead of returning GL_FALSE.</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="orange">glVertexAttribLPointer is null but glVertexAttribLPointerARB available</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="orange">Using explicit location silently ignore throw a parsing error.</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-compression-arb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="black">Doesn't support varying struct and offensive error message</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning / gl_in.length() not fully supported</table-entry-element>
        <table-entry-element color="orange">Unexpected warning / gl_in.length() not fully supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-array</table-entry-element>
        <table-entry-element color="red">Required glTexParameteri to setup filtering, sampler unsupported</table-entry-element>
        <table-entry-element color="red">Required glTexParameteri to setup filtering, sampler unsupported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-sampler-object</table-entry-element>
        <table-entry-element color="red">Sampler object doesn't always oversede texture parameters</table-entry-element>
        <table-entry-element color="red">Sampler object doesn't always oversede texture parameters</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <paragraph>
      Following some samples that illustrates some <link href="http://www.g-truc.net/post-0330.html">OpenGL 4.2+ feature requests</link>
      I made and taking the "gtc" post-fix.
      I wrote these samples as I think they show either specification bugs, design mistakes, lack of arrucacy or perspectives.
    </paragraph>
    <table>
      <table-title>
        <table-title-element>Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 10.10c (26/10/2010)</table-title-element>
        <table-title-element>AMD Catalyst 10.12 ccc (13/12/2010)</table-title-element>
        <table-title-element>nVidia Forceware 260.93 (17/10/2010)</table-title-element>
        <table-title-element>nVidia Forceware 265.90 (01/12/2010)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-program-varying-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate-dsa-gtc</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform-shared-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
      </table-entry>
    </table>

    <title>Since last OpenGL drivers status</title>
    <paragraph>
      On the nVidia side the only change I notice is on the regard of the support of varying structures.
      I have been told my some developers that the support is still not perfect but my OpenGL sample is working correctly.
      The drivers are still fully of "'variable' might be used before being initialized" but I have no idea how to fix this or the nature of the problem.
    </paragraph>
    <paragraph>
      On the AMD side it's very surprising that the sampler objects problems still remains.
      The sampler object implementation seems to have been rushed at the beginning but not AMD seems to struggle to fix it.
      Not shown in the <link href="file:///G:/git/g-truc/project-0026.html#menu">OpenGL Samples Pack 4.1.3.3</link>, the AMD drivers also have multiple issues on the regard of
      <codeword href="http://www.opengl.org/sdk/docs/man3/xhtml/glClearBuffer.xml">glClear*</codeword> functions.
      On the OpenGL 4 side, some trivial issues have been fixed but the support of uniform arrays is still lacking.
    </paragraph>
    <paragraph>
      At that date, I would say that nVidia drivers are OpenGL 4.0 'production ready' while AMD implementation is barely OpenGL 3.2 'production ready'.
      It's quite unfortunate to see on one hand AMD much more involve toward specification conformance but in other hand still suffering of a bad OpenGL implementation legacy.
      At nVidia's, the attitude is more pragmatic and I don't think that we can really rely on nVidia implementation as an OpenGL reference implementation
      but the team is so fast to fix the reported issues that nVidia approach remains incredibly effective.
    </paragraph>

    <source-list>
      <source-download index="1056" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0357" date="10/12/2010" std-date="2010-12-10T06:00:00.00Z" title="Color scatter">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Down">
      <summary>London 2010</summary>
      <fullscreen>http://picasaweb.google.com/groovounet/ColorScatter#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.com&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5548472318604394481%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="http://lh5.ggpht.com/_bpz9rGNwhX4/TQAiQfGXa1I/AAAAAAAAJmg/6ZZ4UGlscIk/s144/109.jpg"
        pic288="http://lh5.ggpht.com/_bpz9rGNwhX4/TQAiQfGXa1I/AAAAAAAAJmg/6ZZ4UGlscIk/s288/109.jpg"
        pic400="http://lh5.ggpht.com/_bpz9rGNwhX4/TQAiQfGXa1I/AAAAAAAAJmg/6ZZ4UGlscIk/s400/109.jpg"
        pic800="http://lh5.ggpht.com/_bpz9rGNwhX4/TQAiQfGXa1I/AAAAAAAAJmg/6ZZ4UGlscIk/s800/109.jpg" />
    </album>
    <paragraph>
      My appetite for 'floating colors' remains a strong value to me that autumn allows to fully enjoy.
    </paragraph>
    <paragraph>
      Beside the large amount of strong colors displayed in autumn, what strikes me is the environment color tone. Others seasons environment lighting are mainly influenced by the sky, the cloud, the sun light tone but autumn have also stunning property of bringing a colorful environment lighting in natural environment which can be pretty sparse.
    </paragraph>
    <paragraph>
      I really like graphics engine that features smooth day and night transitions more recently smooth weather transitions that physically based lighting allows. My guess is that the next step will be smooth season transitions... That would be nice isn't it?
    </paragraph>
    <image
      img="http://lh5.ggpht.com/_bpz9rGNwhX4/TQAiQfGXa1I/AAAAAAAAJmg/6ZZ4UGlscIk/s800/109.jpg"
      href="http://lh5.ggpht.com/_bpz9rGNwhX4/TQAiQfGXa1I/AAAAAAAAJmg/6ZZ4UGlscIk/s800/109.jpg" />
    <image
      img="http://lh5.ggpht.com/_bpz9rGNwhX4/TQAiPrAqi9I/AAAAAAAAJmg/Ci6BxuLKLTc/s800/099.jpg"
      href="http://lh5.ggpht.com/_bpz9rGNwhX4/TQAiPrAqi9I/AAAAAAAAJmg/Ci6BxuLKLTc/s800/099.jpg" />
    <image
      img="http://lh3.ggpht.com/_bpz9rGNwhX4/TQAiSRhp_PI/AAAAAAAAJmg/xN4sPhExC9o/s800/117.jpg"
      href="http://lh3.ggpht.com/_bpz9rGNwhX4/TQAiSRhp_PI/AAAAAAAAJmg/xN4sPhExC9o/s800/117.jpg" />
    <image
       img="http://lh6.ggpht.com/_bpz9rGNwhX4/TQAiOkGno-I/AAAAAAAAJmg/xTZ7SpPHWq8/s800/093.jpg"
       href="http://lh6.ggpht.com/_bpz9rGNwhX4/TQAiOkGno-I/AAAAAAAAJmg/xTZ7SpPHWq8/s800/093.jpg" />
    <source-list>
      <source-element type="Link" href="http://picasaweb.google.com/groovounet/ColorScatter" title="Color scatter" />
    </source-list>
  </post>

  <post index="0356" date="09/12/2010" std-date="2010-12-09T04:00:00.00Z" title="G-Truc Creation 7.0.1.0 released">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      I wasn't really happy with some things of the first shoot of G-Truc Creation version 7.
      Thanks to great feedbacks I made some not that minor changes which will make the navigation easier and, hopefully,
      visiting G-Truc Creation generally more pleasant.
    </paragraph>
  </post>

  <post index="0355" date="07/12/2010" std-date="2010-12-07T23:00:00.00Z" title="gDEBugger is now available for free">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
      <tag>gtc-tech-opengl</tag>
    </meta>
    <paragraph>
      Last summer at Siggraph 2010, I won 2 licenses for gDEBugger (one GL and one CL...) answering Trivia questions at OpenGL and OpenCL BOFs.
      A while after, I got my license but gDEBugger licenses are attached to a specific platform and I was on an ongoing process to upgrade my computer with a new CPU and motherboard.
      About a month ago, I contacted Graphic Remedy to get my license updated for my new platform as I made sure with them I could do earlier.
      No answer and actually still none… Actually, gDEBugger wasn’t on sale anymore. It’s finally today that I discovered why: gDEBugger is now free of use!
      This raise the question on how Graphic Remedy is going to finance itself in the future and I expect an official statement anytime soon and hopefully good news.
    </paragraph>
    <paragraph>
      gDEBugger is an OpenGL and OpenCL debugging and profiling program.
      It is the Open*L counter part of Direct3D's <link href="http://msdn.microsoft.com/en-us/library/ee417062(VS.85).aspx">Pix</link>
      but probably much more confidential as it was extremely expensive so that many people actually prefered
      <link href="http://www.vis.uni-stuttgart.de/glsldevil/">glslDevil</link>,
      a free alternative not without advantages especially on the regard of GLSL step by step debugging.
      gDEBugger allows breaking an OpenGL program execution, visualisation of the framebuffer, the textures, the buffers values but also realtime editing and rebuild of GLSL programs.
      To tune the performances, gDEBugger makes easier finding bottlenecks by interactively enable and disable draw calls, raster operations, textures fetches or GLSL program stages.
    </paragraph>
    <paragraph>
      It is available on Windows, Linux and MacOS X but it only supports OpenGL 3.2, OpenGL ES 1.1 and OpenCL is still in beta.
    </paragraph>
    <paragraph>
      Next move for OpenGL? Obviously, gDEBugger has to catch up with the lastest OpenGL 4.1, OpenGL ES 2.0
      and finalizes OpenCL support but this is just a piece (a master piece) in the developer environment.
      More OpenGL specification improvements, more OpenGL drivers improvements, more documentation and
      more and better tools are still required.
    </paragraph>
    <paragraph>
      A perfectly elaborated Chess game strategy, moving toward modern OpenGL programming for OpenGL everywhere for everyone.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.gremedy.com/purchase.php" title="Free license page" />
      <source-element type="Link" href="http://www.gremedy.com/download.php" title="Download page" />
    </source-list>
  </post>

  <post index="0354" date="29/11/2010" std-date="2010-11-29T23:30:00.00Z" title="Dior Illustrated: René Gruau and the Line of Beauty">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <image
      color="white"
      img="./post/0354-1.jpg"
      href="./post/0354-1.jpg" />
    <paragraph>
      “The line of beauty”... with such a subtitle, this is an exhibition I could not miss!
    </paragraph>
    <paragraph>
      Once again, the Somerset House is hosting an original fashion exhibition:
      Dior Illustrated, René Gruau &amp; The Line of Beauty.
      This exhibition is the result of a collaboration with the Somerset House, SARL René Gruau and Christian Dior Perfumes
      who first suggested the exhibition to the Somerset House.
    </paragraph>
    <paragraph>
      Rene Gruau (1909 – 2004) met Christian Dior (1905 - 1957) in 1936 while working for the French newspaper Le Figaro,
      both as illustrators where they built their friendship.
    </paragraph>
    <paragraph>
      Afterwards, He became an illustrator for Christian Dior and gave an image to Christian Dior's house,
      especially the perfumes, through his illustrations and the symbols he created:
      Swans, flowers, fans, hands and an obsessions for women legs.
    </paragraph>
    <paragraph>
      This exhibition is built over 5 themes: “flower woman”, “gesture &amp; attitude”, “l'homme gruau”, “a shared vision” and “line &amp; silhouette”.
      Cherry on the cake, 5 artists have been invited to create pieces inspired by each exhibition theme.
    </paragraph>
    <paragraph>
      All in all, this exhibition succeed in sharing the vision of Rene Gruau which results in a very inspiring time.
    </paragraph>
    <paragraph>
      This exhibition is running until 09/11/2011 for £6.
    </paragraph>

    <image-list>
      <image-element title="Screenshot" small="./post/0354-2.jpg" normal="./post/0354-2.jpg" />
      <image-element title="Screenshot" small="./post/0354-3.jpg" normal="./post/0354-3.jpg" />
    </image-list>

    <source-list>
      <source-element type="Link" href="http://www.somersethouse.org.uk/fashion/dior/" title="Exhibition page" />
    </source-list>
  </post>

  <post index="0353" date="28/11/2010" std-date="2010-11-28T22:00:00.00Z" title="G-Truc Creation 7.0.0.0 released">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      Finally! G-Truc Creation version 7 is released, a new version actually only a bit more than 1 year since version 6.0.
      In its lifetime, G-Truc Creation 6 has many updated and I believe it will be the same for G-Truc Creation 7, especially on the regard of WebGL.
      G-Truc Creation requires Chrome 7, Firefox 4 Beta 7, Safari 5 or Internet Explorer 9 to work perfectly.
    </paragraph>
    <paragraph>
      For this version, I try to break the usual (and casual) way to browse at blog posts, proposing a different experience to the visitors.
      I have also looked for a simpler way to browse the website instead of multiple useless possibilities.
      I don't like all this website with so many things everywhere. I find them quite distracting.
      I wish my website to be about the content so that the visitors could learn as much as possible so I want them to be able conscentrate.
      Please toggle to fullscreen mode to explore my website, it would make me very happy!
    </paragraph>
    <paragraph>
      All in all this new version is I guess slightly more daring that the previous one.
      In November 2010, it reached a new record of the number of visits and I hope that
      the new version will continue to raise interests for the website and OpenGL.
    </paragraph>
    <paragraph>
      G-Truc Creation 7 will probably be updated soon to fix some issues so don't hesitate to
      <link href="info.html">contact me</link> so report any problem you encounter.
    </paragraph>
  </post>

  <post index="0352" date="25/11/2010" std-date="2010-11-25T23:30:00.00Z" title="Küken 0.2.0.0 released">
    <meta>
      <tag>gtc-tech-project-kueken</tag>
    </meta>

    <paragraph>
      Did you notice that everyone is releasing his own little and useless OpenGL renderer/engine?
      This is a great sign, another example of the growing interest for OpenGL.
    </paragraph>
    <paragraph>
      Well, its my turn to release my useless OpenGL renderer!
    </paragraph>
    <paragraph>
      I have been look forward for a second release of my own little renderer for more than a year
      and I even had a release 0.1.1.0 ready but for some reasons (I don't really know them...) I didn't released it.
    </paragraph>
    <paragraph>
      So today, I am releasing Küken 0.2.0.0 which remember a very Alpha release and a lot of things
      will changes from the current design. Actually I even think that Küken 0.2.0.0 is less advanced than Küken 0.1.0.0.
      So far, there are only 6 tests.
    </paragraph>
    <paragraph>
      I hope the next release will be sooner!
    </paragraph>

    <source-list>
      <source-download index="1058" />
    </source-list>
  </post>

  <post index="0351" date="21/11/2010" std-date="2010-11-21T23:00:00.00Z" title="OpenGL Samples Pack 4.1.3.3 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      A last small about of the OpenGL Samples Pack 4.1.3.X before 4.1.4.0 and significative changes.
      This update is mainly about code cleaning, a couple of bug fixes and libraries updated but also a major update of the CMake project.
    </paragraph>

    <source-list>
      <source-download index="1057" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
    </source-list>
  </post>

  <post index="0350" date="16/11/2010" std-date="2010-08-16T23:30:00.00Z" title="Intel releases OpenCL 1.1 alpha SDK for CPUs">
    <meta>
      <tag>gtc-tech-opencl</tag>
    </meta>
    <paragraph>
      Intel announced at <link href="http://www.khronos.org/library/detail/2010-siggraph-opencl-bof/">Siggraph 2010 OpenCL BOF</link>,
      they will release an Alpha SDK by the end of the year: done!
    </paragraph>
    <paragraph>
      This SDK is tagged as an <link href="http://software.intel.com/en-us/articles/intel-opencl-sdk/">'Alpha' SDK</link>
      and it only provides a CPU implementation of OpenCL.
      Is Intel going to provide a GPU implementation?
      Are Intel GPUs actually capable to efficiently accelerate OpenCL?
    </paragraph>
    <paragraph>
      It's good to see some interest by Intel for OpenCL but let's remember that
      <link href="http://www.khronos.org/news/press/releases/the_khronos_group_releases_opencl_1.0_specification/">OpenCL 1.0 as been release on 8th December 2008</link>
      and Intel only provides an CPU implementation almost 2 years later... On AMD side this step has been reach on 5th August 2009 (CPU implementation) and
      nVidia has released a GPU implementation on 28th September 2009 for public... a long time ahead of Intel!
    </paragraph>
    <paragraph>
      At that time nVidia doesn't have a CPU implementation of OpenCL but for a GPU only company it makes sense.
      However, this could change as <link href="http://arstechnica.com/business/news/2010/09/nvidia-ports-its-cuda-gpu-programming-architecture-to-x86.ars">
        nVidia has announced at the GPU Technology Conference CUDA x86
      </link> which is a x86 implementation of CUDA.
      As OpenCL is built on top of CUDA at nVidia, chances are that nVidia will sooner or later provide an implementation of OpenCL for CPUs.
    </paragraph>
    <paragraph>
      Currently, AMD CPU implementation of OpenCL runs as well on Intel CPUs which makes me wonders how Intel and AMD implementations compete against each other.
    </paragraph>
    <paragraph>
      nVidia is far ahead on the topic of GPU computing on the regard of performance and the long experience with CUDA might paying of
      even if is seams that nVidia OpenCL implementation is significantly slower than CUDA.
      I thought that AMD could reach at least the same level of performance
      thanks to <link href="http://www.beyond3d.com/content/reviews/55">impressive theorical performance</link> but as time goes,
      it becomes less likely to see it happening with Radeon 4000, 5000 and 6000 series or maybe AMD implementation is still not mature enough.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://software.intel.com/en-us/articles/intel-opencl-sdk/" title="Intel OpenCL SDK" />
      <source-element type="Link" href="http://developer.amd.com/gpu/atistreamsdk/pages/default.aspx" title="ATI Stream SDK 2.2 for OpenCL 1.1" />
      <source-element type="Link" href="http://developer.nvidia.com/object/gpucomputing.html" title="nVidia GPU Computing SDK" />
    </source-list>
  </post>

  <post index="0349" date="11/11/2010" std-date="2010-11-11T23:30:00.00Z" title="Turner Prize 2010 at the Tate Britain">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <paragraph>
      The Turner Prize is a prestiguous award for contemporary art for British artists for the 26th year in 2010.
    </paragraph>
    <paragraph>
      Every year, a shortlist of 4 artists is displayed at the Tate Britain and this year this list is feature the work of
      <link href="http://www.tate.org.uk/britain/turnerprize/turnerprize2010/artists/dalwood.shtm">Dexter Dalwood</link>,
      <link href="http://www.tate.org.uk/britain/turnerprize/turnerprize2010/artists/delacruz.shtm">Angela de la Cruz</link>,
      <link href="http://www.tate.org.uk/britain/turnerprize/turnerprize2010/artists/philipsz.shtm">Susan Philipsz</link> and
      <link href="http://www.tate.org.uk/britain/turnerprize/turnerprize2010/artists/otolith.shtm">The Otolith Group</link>,
      works based on various media: paintings, sound installation and videos.
    </paragraph>
    <paragraph>
      I really enjoyed the exhibition concluded by a presentation by the artists within films of their works and their visions.
    </paragraph>
    <paragraph>
      The exhibition is running until the 3 January 2011 and the winner will be announced on the 6 Decembre 2010.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.tate.org.uk/britain/turnerprize/turnerprize2010/artists/default.shtm" title="Exhibition page" />
    </source-list>
  </post>

  <post index="0348" date="05/11/2010" std-date="2010-11-05T23:30:00.00Z" title="A bit of perspective on OpenGL 4.1 separate programs">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      After my post dedicated to the <link href="post-0345.html">OpenGL 4.1 drivers status</link>, I receive quite some feedbacks from AMD.
      My tests are based on my <link href="project-0026.html">OpenGL Samples Pack 4.1</link> developed over
      <link href="http://developer.nvidia.com/object/opengl_driver.html">nVidia OpenGL 4.1 drivers</link>
      as it has been released since the OpenGL BOF end of July.
      A conscequence is that my OpenGL 4.1 samples are build upon nVidia implementation which has implied some quite bad results while running on AMD
      because of implementation philosophy differences.
    </paragraph>
    <paragraph>
      Obviously, before publishing my post, I had a look at the samples trying to figure out what went wrong
      but when you are facing "unexpected error" messages, it's pretty hard to make progress.
      This is how it begins with early drivers either from AMD or nVidia and probably anyone.
      Hence, Graham Sellers from AMD point me to the direction of understanding AMD implementation throught specification quotes
      so that I could make my sample work on AMD...
      and this is where the separate programs drama began.
    </paragraph>
    <title>Drivers implementation philosophy</title>
    <paragraph>
      This is something I figure out across the year.
      I believe that AMD and nVidia has 2 differents approach regarding OpenGL.
      AMD tries to follow the specification by the letter in a quite pedantic maner even if the specification doesn't make sense.
      For nVidia the approach is quite different. Some developers speak about "nVidia's OpenGL" regarding nVidia's implementation.
      nVidia approaches is less strict and more pragmatics with an implementation that doesn't hesitate to relax
      some restrictions and even provides more features not only through extensions.
      Explicit varying location are implemented since nVidia OpenGL 3.3 beta drivers for example.
    </paragraph>
    <title>Separate programs issues</title>
    <paragraph>
      Regarding <codeword href="http://www.opengl.org/registry/specs/ARB/separate_shader_objects.txt">GL_ARB_separate_shader_objects</codeword>,
      I assumed some specification details that are actually not valid according to the specification.
      These assumptions came from good sense, OpenGL uses but also a long interest on nVidia's separate programs.
    </paragraph>
    <paragraph>
      <codeword href="http://www.opengl.org/registry/specs/ARB/separate_shader_objects.txt">GL_ARB_separate_shader_objects</codeword>
      is the promoted extension to core for
      <codeword href="http://www.opengl.org/registry/specs/EXT/separate_shader_objects.txt">GL_EXT_separate_shader_objects</codeword>
      a pretty badly designed extension relying on deprecated mecanisms and fixed functions legacy.
      It became quite interesting once promoted to ARB despite a name which is a total non-sense following the OpenGL tokens dictionary.
      "Separate shader objects"? What does it mean? Shader objects are already per-shader stage since the beginning...
      GL_ARB_separate_program_objects or GL_ARB_program_pipeline_object would have been better to me but well.
    </paragraph>
    <paragraph>
      <codeword href="http://www.opengl.org/registry/specs/ARB/separate_shader_objects.txt">GL_ARB_separate_shader_objects</codeword>
      allows using multiple different program objects to setup all the GPU stages.
    </paragraph>
    <list name="For examples:">
      <list-element>One program for the vertex stage, one for the fragment stage.</list-element>
      <list-element>One for all stage before rasterisation and one for the fragment stage.</list-element>
      <list-element>One program per-stage, up to 5 with OpenGL 4 hardware class.</list-element>
      <list-element>Etc.</list-element>
    </list>

    <title>Separated programs issues</title>
    <subtitle>1. Differents matching rules being separate and non-separate programs</subtitle>
    <paragraph>
      So far with OpenGL, the GLSL linker ensures that the communication between stages was going well and
      even performs some interesting optimisations removing across stages unused varying variables for example.
    </paragraph>

    <paragraph>
      With separate programs, the compiler has to make some assumptions about inputs provided by the previous stage whatever this stage actually is.
      For this purpose, a new section called "shader interface matching" has be written in the specification.
      Unfortunatly, following this section by the letter implies differents shader matching rules for separate
      and non-separate programs regarding explicit varying locations,
      which can lead to force OpenGL programmer to write different shaders for both program types... for no good technical reasons.
      Let's take a problematic example:
    </paragraph>
    <code title="Vertex shader:">
      <line>
        <keyword>layout</keyword>(<keyword>location</keyword> = 1) <keyword>in vec2</keyword> Texcoord0
      </line>
      <line>
        <keyword>layout</keyword>(<keyword>location</keyword> = 0) <keyword>in vec2</keyword> Texcoord1
      </line>
    </code>
    <code title="Fragment shader:">
      <line>
        <keyword>layout</keyword>(<keyword>location</keyword> = 0) <keyword>in vec2</keyword> Texcoord0
      </line>
      <line>
        <keyword>layout</keyword>(<keyword>location</keyword> = 1) <keyword>in vec2</keyword> Texcoord1
      </line>
    </code>
    <paragraph>
      With separate programs, the location is going to be used for the shader interface matching.
      However with non-separate programs, the matching is performed per names which implies that the location qualifier is ignored.
      That doesn't make any sense to do this, but this is what the specification says...
    </paragraph>

    <paragraph>
      Concretly, explicit varying locations override name matching with separate programs but are silently ignored with non separable programs.
    </paragraph>

    <subtitle>2. Required verbose separate programs</subtitle>
    <paragraph>
      Finally, separate programs require to redeclare <codeword>gl_PerVertex</codeword> blocks... hum... why?
    </paragraph>

    <paragraph>
      Separate programs and non-separate programs evolves with different set of rules which leaves them apart
      while technically they are connected. There are good reasons to use non-separate programs for compiler optimizations purposes
      but there are also good reasons to use seperate programs for software design optimization purposes
      putting OpenGL programmers in this middle ground.
    </paragraph>

    <subtitle>3. Not 100% direct state access</subtitle>
    <paragraph>
      Since <link href="http://www.opengl.org/registry/doc/glspec31.20090528.pdf">OpenGL 3.1</link>
      but especially <link href="http://www.opengl.org/registry/doc/glspec33.core.20100311.pdf">OpenGL 3.3</link>,
      the specifications has made a move to
      <link href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">direct state access</link> (DSA)
      and the new OpenGL program pipeline object is no exception with a pretty DSA API... with one exception!
      The specification clearly says that a program pipeline object is actually created by binding the object...
    </paragraph>
    <quote author="OpenGL 4.1 core specification, section 2.11.4">
      A program pipeline object is created by binding a name returned by
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glGenProgramPipelines.xml">
        GenProgramPipelines
      </codeword> with the command
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glBindProgramPipeline.xml">void BindProgramPipeline(uint pipeline);</codeword>
    </quote>

    <paragraph>
      Adding verbose declarations, using different matching rules from separate programs
      and non-separate programs and having to use
      <keyword href="http://www.opengl.org/sdk/docs/man4/xhtml/glBindProgramPipeline.xml">glBindProgramPipeline</keyword>
      to create the effective pipeline object don't make sense
      but this is what is written in the specification, what the ARB has agreed on.
      AMD and nVidia has implemented logically OpenGL 4.1 following their own philosophies:
      AMD has interpretted the OpenGL specification by the letter implementing some fairly stupid ideas
      and nVidia has interpretted the OpenGL specification in its own way, a clever way but a non-conformed way...
      Well, all in all we are pretty doomed to use the full capabilities of the separate programs.
    </paragraph>
    <paragraph>
      How everything could have been better? I quite believe that if the ARB has put more attention hen reviewing the specification,
      which means probably taking more time, these issues would have been fixed as these problems are maybe "details" but quite obvious.
    </paragraph>

    <title>My separate program use recommandations</title>
    <paragraph>
      Let's start with the DSA issue.
      As my OpenGL 4.1 samples demonstrated, this grose specification mistake has been implemented by both AMD and nVidia in a way
      that the program pipeline object can be used as a pure DSA object.
      AMD and nVidia OpenGL teams are particularly talented, it makes sense to have the implementation writted this way as it doesn't make any difference
      when the implementations are used following strictly the specifications.
      Could we really rely on this work-around? What is going to happen when Intel and Apple will provides implementations for OpenGL 4.1? (within 10 years from now...)
      This could be a software bug so I think the specification as to be followed to the letter.
      Anyway, OpenGL 4.1 is far from being completly DSA which makes it impossible to design a fully DSA renderer.
    </paragraph>
    <paragraph>
      On the regard of the verbose and useless <codeword>gl_PerVertex</codeword> redeclarations,
      it implies a compilation error on nVidia but this is something that will eventually be fixed,
      so that unfortunatly it has to be use following the specification.
    </paragraph>
    <paragraph>
      Finally, the shader mathing rules: I much as I love the explicit varying location,
      as it isn't supported with non separate programs, I think it should not be used.
      Fortunately, the name matching is working the same way between separate programs and non-separate programs.
      Using varying structures allows de define a clear protocol between stages.
      It's less flexible than explicit varying location but really robust.
    </paragraph>

    <title>Updated OpenGL 4.1 samples</title>
    <paragraph>
      Following this discussion, I updated the OpenGL 4.1 samples pack to report the drivers status.
      I really wish that nVidia implementation was what OpenGL specifies but it's not.
      The goal of specification is to follow them and weihter of not the specification is good or not is another problem.
      Hence, for my samples I decided to follow the specification by the letter. However, I decide to add some sort of extented samples
      using the postfix "gtc" to illustrate the changes I would enjoy for OpenGL 4.2 and wish some are already supported.
    </paragraph>

    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>

    <table>
      <table-title>
        <table-title-element class="sample-name">Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 10.10c (beta)</table-title-element>
        <table-title-element>nVidia Forceware 260.93 (beta)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-debug-output-arb</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-varying</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="orange">GL_PROGRAM_BINARY_RETRIEVABLE_HINT must be set to GL_TRUE or can't be retrived on fsome platform</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="red">glVertexAttribLPointer is null</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-5</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation-2</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">gl_PerVertex redeclaration involves compiler errors...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="orange">Using explicit location silently ignore throw a parsing error.</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-compression-arb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="black">Doesn't support varying struct and offensive error message</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning / gl_in.length() not fully supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported uniform block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-array</table-entry-element>
        <table-entry-element color="red">Required glTexParameteri to setup filtering, sampler unsupported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-sampler-object</table-entry-element>
        <table-entry-element color="red">Sampler object doesn't always oversede texture parameters</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>

    <paragraph>

    </paragraph>

    <paragraph>
      Following some samples that illustrates some <link href="http://www.g-truc.net/post-0330.html">OpenGL 4.2+ feature requests</link> I made
      and taking the "gtc" post-fix.
      I wrote the following samples as it shows I think either specification bugs, design mistakes, lack of arrucacy or lack of perspectives like the issue
      discussed in this post.
    </paragraph>
    <table>
      <table-title>
        <table-title-element>Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 10.10c (beta)</table-title-element>
        <table-title-element>nVidia Forceware 260.93 (beta)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-program-varying-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate-dsa-gtc</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
        <table-entry-element color="blue">A debug output warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform-shared-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify...</table-entry-element>
        <table-entry-element color="blue">A GLSL compiler warning would be nice</table-entry-element>
      </table-entry>
    </table>

    <paragraph>

    </paragraph>
    <source-download index="1056" />
    <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
  </post>

  <post index="0347" date="01/11/2010" std-date="2010-11-01T11:30:00.00Z" title="GLM 0.9.0.5 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      GLM 0.9.0.5 fixes few bugs which allows a better Clang support
      and prepares the <link href="post-0331.html">explicit instantiations work </link>
    </paragraph>
    <source-list>
      <source-download index="1055" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0346" date="29/10/2010" std-date="2010-10-29T01:00:00.00Z" title="Les Mécaniques poétiques d’EZ3kiel">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <paragraph>
      EZ3kiel is a French electroacoustic band and nothing but one of my favorite band thanks to very high quality albums where each one has its own flavor.
    </paragraph>
    <paragraph>
      The band has a culture in music but also images which concerts reveal this taste with wonderful <link href="http://en.wikipedia.org/wiki/VJing">VJing</link> performances.
      EZekiel has built a visual univers, emphasised by the Naphtaline project.
    </paragraph>
    <image
      img="./post/0346-1.jpg"
      href="./post/0346-1.jpg" />
    <image
      img="./post/0346-2.jpg"
      href="./post/0346-2.jpg" />
    <paragraph>
      Les Mécaniques poétiques d’EZ3kiel takes place in an initiative of the <link href="http://www.ircam.fr/">IRCAM</link> which aims merge of science and art.
      Hence, EZ3kiel has collaborate with CEA-LETI engineers from Grenoble to build new music instruments which blend the beauty of classic objects and the genius of modern techniques.
    </paragraph>
    <paragraph>
      The result of this collaboration is wonderful and visually appealing objects which provides new experiences to play music that,
      along the exhibition, visitors are invited to discover by playing with these instruments.
    </paragraph>
    <paragraph>
      This exhibition has been one of the most stunning I have ever been.
      Most of the time, I find art pieces great but for someone else living room but this time, I would have love to leave with a couple of instruments!
    </paragraph>
    <paragraph>
      An exhibition that should not be missed, one of my favorite this year!
    </paragraph>

    <video title="A propos des Mécaniques poétiques d'EZ3kiel" href="http://www.youtube.com/v/UnxaOPE5-Go&amp;hl=en_US&amp;feature=player_embedded&amp;version=3" width="800" height="500" />

    <list name="Les Mecaniques Poetiques tour:">
      <list-element>28/10/2010 - 07/11/2010, Palais de la découverte, Paris</list-element>
      <list-element>09/11/2010 - 26/11/2010, Conservatoire, Tremblay.</list-element>
      <list-element>30/11/2010 - 09/12/2010, Maison de Métallos, Paris</list-element>
      <list-element>14/02/2011 - 27/02/2011, Carré Ste Anne, Montpellier</list-element>
      <list-element>21/03/2011 - 09/04/2011, Pôle culturel Evasion, Ambares</list-element>
      <list-element>03/05/2011 - 21/05/2011, Théâtre de l'Agora, Evry</list-element>
      <list-element>27/05/2011 - 03/07/2011, Château de Tours, Tours</list-element>
    </list>
    <image
      img="./post/0346-3.jpg"
      href="./post/0346-3.jpg" />
    <image
      img="./post/0346-4.jpg"
      href="./post/0346-4.jpg" />

    <video title="Naphtaline video by EZ3kiel" href="http://www.youtube.com/v/uS-pubsqJpY?fs=1&amp;hl=en_US" width="800" height="500" />

    <source-list>
      <source-element type="Link" href="http://www.palais-decouverte.fr/index.php?id=1976" title="Exhibition at Palais de la Découverte" />
      <source-element type="Link" href="http://www.myspace.com/lesmecaniquespoetiques" title="MySpace page of the touring exhibition" />
    </source-list>
  </post>

  <post index="0345" date="28/10/2010" std-date="2010-10-28T02:30:00.00Z" title="OpenGL 4.1 drivers status: A step up! (updated)">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      AMD and nVidia have released some fresh drivers which has significantly raise the OpenGL support.
    </paragraph>
    <paragraph>
      On nVidia side, the OpenGL 4.1 implementation has reach the stable drivers as it fixes a lot of issues and seems to work pretty well.
    </paragraph>
    <paragraph>
      On AMD side, the Catalyst 10.10c provides an OpenGL 4.1 drivers for the first time but I believe it happens as accident:
      First Catalyst 10.10a were released with the OpenGL 4.1 drivers but without any information then the Catalyst 10.10c has been release with OpenGL 4.1 beta support in the release note.
      Unfortunately, nothing seems to work yet... It probably only means that AMD has just started working on the OpenGL 4.1 drivers.
    </paragraph>
    <paragraph>
      nVidia drivers still doesn't support varying structures but worse the drivers report
      an error that claims through an error message that varying structures are not supported in OpenGL...
      but they should support varying structure according to the spec.
      That's why I called these warnings "offensive" and following some proofs:
    </paragraph>
    <quote author="OpenGL Shading Language 4.10 specification section 4.3.4 Inputs">
      Fragment inputs can only be signed and unsigned integers and integer vectors, floating
      point scalars, floating-point vectors, matrices, or arrays or structures of these
    </quote>
    <quote author="OpenGL Shading Language 4.10 specification section 4.3.6 Outputs">
      Vertex, tessellation evaluation, and geometry output variables output per-vertex data and are declared
      using the out, centroid out, or sample out storage qualifiers, or the deprecated varying storage qualifier.
      It is an error to use patch out in a vertex, tessellation evaluation, or geometry shader. Output variables
      can only be floating-point scalars, floating-point vectors, matrices, signed or unsigned integers or integer
      vectors, or arrays or structures of any these.
    </quote>
    <quote author="OpenGL Shading Language 4.10 specification section 4.3.6 Outputs">
      Tessellation control shader output variables are may be used to output per-vertex and per-patch data. Pervertex
      output variables are arrayed (see arrayed under 4.3.4 Inputs) and declared using out or centroid
      out storage qualifiers. Per-patch output variables are declared using the patch out storage qualifier. Pervertex
      and per-patch output variables can only be floating-point scalars, floating-point vectors, matrices,
      signed or unsigned integers or integer vectors, or arrays or structures of any these.
    </quote>
    <paragraph>
      Varying structures have only limitations on input of the vertex shader and output of the fragment shader.
    </paragraph>
    <quote author="OpenGL Shading Language 4.10 specification section 4.3.4 Inputs">
      Vertex shader inputs can also form arrays of these types, but not structures.
    </quote>
    <quote author="OpenGL Shading Language 4.10 specification section 4.3.6 Outputs">
      Fragment outputs output per-fragment data and are declared using the out storage qualifier. It is an error
      to use centroid out, sample out, or patch out in a fragment shader. Fragment outputs can only be float,
      floating-point vectors, signed or unsigned integers or integer vectors, or arrays of any these. Matrices and
      structures cannot be output.
    </quote>
    <paragraph>
      Varying structure is a great GLSL feature that should be supported as
      it provides a way to define and garanty how to communicate between stages!
    </paragraph>
    <paragraph>
      This drivers status has been made under Seven 64 with a GeForce GTX 470 and a Radeon HD 5850 using the <link href="project-0026.html">OpenGL Samples Pack 4.1.3.1</link>.
    </paragraph>
    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported.</list-element>
      <list-element>Blue: The sample works but it doesn't follow the OpenGL specification.</list-element>
      <list-element>Green: The sample works following the OpenGL specification.</list-element>
      <list-element>Orange: The sample doesn't work correctly but a workaround is possible.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>
    <table>
      <table-title>
        <table-title-element>Drivers: </table-title-element>
        <table-title-element>nVidia Forceware 259.31 (beta)</table-title-element>
        <table-title-element>nVidia Forceware 260.99 (stable)</table-title-element>
        <table-title-element>nVidia Forceware 260.93 (beta)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="red">Crash</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation</table-entry-element>
        <table-entry-element color="red">Doesn't support varying struct and offensive error message</table-entry-element>
        <table-entry-element color="red">Doesn't support varying struct and offensive error message</table-entry-element>
        <table-entry-element color="red">Doesn't support varying struct and offensive error message</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="red">Exception during compilation</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="red">gl_ViewportIndex unsupported</table-entry-element>
        <table-entry-element color="red">gl_ViewportIndex unsupported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-debug-output</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array-gtc</table-entry-element>
        <table-entry-element color="blue">A warning would be wellcome as it's a great but non standard behaviours</table-entry-element>
        <table-entry-element color="blue">A warning would be wellcome as it's a great but non standard behaviours</table-entry-element>
        <table-entry-element color="blue">A warning would be wellcome as it's a great but non standard behaviours</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform-shared-gtc</table-entry-element>
        <table-entry-element color="blue">A warning would be wellcome as it's a great but non standard behaviours</table-entry-element>
        <table-entry-element color="blue">A warning would be wellcome as it's a great but non standard behaviours</table-entry-element>
        <table-entry-element color="blue">A warning would be wellcome as it's a great but non standard behaviours</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-compression-arb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="red">Doesn't support varying struct and offensive error message</table-entry-element>
        <table-entry-element color="red">Doesn't support varying struct and offensive error message</table-entry-element>
        <table-entry-element color="red">Doesn't support varying struct and offensive error message</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="red">Build error with misleading messages</table-entry-element>
        <table-entry-element color="orange">Unexpected warning / gl_in.length() not fully supported</table-entry-element>
        <table-entry-element color="orange">Unexpected warning / gl_in.length() not fully supported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="white">Not tested</table-entry-element>
        <table-entry-element color="white">Not tested</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-array</table-entry-element>
        <table-entry-element color="white">Not tested</table-entry-element>
        <table-entry-element color="white">Not tested</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>
    <paragraph>

    </paragraph>
    <paragraph>
      Despite its number Forceware 260.99 seems older than Forceware 260.93 as Forceware 260.93 brings even more fixes.
      I stringly recommand Forceware 260.93 for OpenGL developers who wants to work on OpenGL 4.X software.
    </paragraph>
    <paragraph>
      <bold>UPDATE ON 28/10/2010:</bold> Thanks to some feedbacks from nVidia, I fixed the sample <codeword>400-fbo-rtt</codeword> where I made a mistake.
      Also the varying structure bug should be fixed for next stable release of nVidia drivers.
    </paragraph>
    <table>
      <table-title>
        <table-title-element>Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 10.9 (stable)</table-title-element>
        <table-title-element>AMD Catalyst 10.10 (stable)</table-title-element>
        <table-title-element>AMD Catalyst 10.10c (beta)</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-debug-output-arb</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Doesn't support explicit varying locations with unified program</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Doesn't support explicit varying locations with unified program</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">glVertexAttribLPointer is null</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Doesn't support explicit varying locations with unified program</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Doesn't support explicit varying locations with unified program</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Parsing error on flat qualifier and gl_ViewportIndex remains 0</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform-shared-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array-gtc</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify</table-entry-element>
        <table-entry-element color="white">Not supported as OpenGL specify</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-compression-arb</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="red">RGB32 TBO fetch not correct</table-entry-element>
        <table-entry-element color="red">RGB32 TBO fetch not correct</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="orange">ARB GLSL function instead of core GLSL function</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="red">Draw calls ignored, double not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-smooth-shading</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="white">Not tested</table-entry-element>
        <table-entry-element color="white">Not tested</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="orange">
          Min/mag tex param and glMinSampleShading<bold>ARB</bold> required
        </table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported block array/freeze the program</table-entry-element>
        <table-entry-element color="red">Unsupported block array/freeze the program</table-entry-element>
        <table-entry-element color="red">Unsupported block array</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-texture-array</table-entry-element>
        <table-entry-element color="white">Not tested</table-entry-element>
        <table-entry-element color="white">Not tested</table-entry-element>
        <table-entry-element color="orange">Required glTexParameteri to setup filtering</table-entry-element>
      </table-entry>
    </table>
    <paragraph>

    </paragraph>
    <paragraph>
      AMD has released it's first OpenGL 4.1 drivers but unfortunately the implementation is quite limited as no OpenGL sample run correctly...
      However, Catalyst 10.10c remains a great improvement on the regard of the OpenGL 4.0 implementation which fixes a lot of issues since Catalyst 10.9.
    </paragraph>
    <paragraph>
      <bold>UPDATE ON 29/10/2010:</bold>
      I have updated the result on AMD to be more accurate on my report and the problems I have encountered.
      According to AMD, it's debattable to know if explicit varying locations in unified program is part of OpenGL 4.1...
      I would say that according to the specification it must be supported but you can make your own opinion by reading section 2.11.4
      which specifies the shader interface matching. Using exact match does fix several samples.
    </paragraph>
    <quote author="OpenGL 4.10 specification section 2.11.4">
      The inputs and outputs on an interface between programs need not match exactly
      when input and output location qualifiers (sections 4.3.8.1 and 4.3.8.2 of the
      OpenGL Shading Language Specification) are used.
    </quote>
    <paragraph>
      Also I would like to make clear that 400-buffer-uniform-shared-gtc and 400-sampler-array-gtc are not suposed to be suported
      and they are <link href="post-0330.html">OpenGL 4.2 feature requests</link> which is why they have the post-fix 'gtc'.
    </paragraph>
    <source-download index="1054" />
    <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
  </post>

  <post index="0344" date="20/10/2010" std-date="2010-10-20T20:10:00.00Z" title="OpenGL Samples Pack 4.1.2.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack 4.1.2.0 raise the number of sample to 76 samples from OpenGL 2.1 to OpenGL 4.1.
      It also fixes various samples especially for OpenGL 4.1 thanks to nVidia drivers 260.93 which fixes most of the problems I reported.
      I will update my OpenGL drivers status as soon as AMD release the Catalyst 10.10 which should be soon.
    </paragraph>
    <source-download index="1052" />
    <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
  </post>

  <post index="0343" date="19/10/2010" std-date="2010-10-19T20:00:00.00Z" title="Safe indirection table in C++">
    <meta>
      <tag>gtc-tech-devel-cpp</tag>
    </meta>

    <quote author="John Carmack">
      I prefer static language typing for many of the same reasons I prefer static linking -- find as many things as possible before execution.
    </quote>

    <paragraph>
      It's always a pleasure to quote our heroes expecially when it's so true!
      Across the years, I became an addict of asserts and static asserts because
      it allows to find as many bugs as possible as early as possible which is particularly time saving.
    </paragraph>
    <paragraph>
      I use a lot of indirection tables for a lot of different cases where from a value A, I want a value B.
      An indirection table is almost as fast as it can get and I think it should be considered before any other strategy.
    </paragraph>
    <paragraph>
      A code is alive and one of the main problem with indirection table is to be sure that the size of the table match the number of input values along
      its life. If the input number of input value changes, the table size must match!
    </paragraph>
    <paragraph>
      Unfortunatly, when with create an array, C++ doesn't require that the number of initialisation values matches the array size.
    </paragraph>
    <paragraph>
      A convenient wait to handle this problem is to make sure that when the number of input value changes, we get an error message when we build the code:
      "find as many things as possible before execution".
    </paragraph>
    <paragraph>
      My solution is to use a static assert and an array of the size of element is countains.
      The static assert compare the number of element of the input format and the actual count of elements of the array.
    </paragraph>
    <paragraph>
      Following, a code sample that illustrates my solution.
    </paragraph>

    <code title="'Cast' GLI compressed format values to OpenGL compressed format values:">
      <line align="0px">
        ...
      </line>
      <line align="0px">
        <keyword>enum</keyword> format
      </line>
      <line align="0px">{</line>
      <line align="32px">FORMAT_NONE,</line>
      <line align="32px">DXT1,</line>
      <line align="32px">DXT3,</line>
      <line align="32px">DXT5,</line>
      <line align="32px">ATI1N_UNORM,</line>
      <line align="32px">ATI1N_SNORM,</line>
      <line align="32px">ATI2N_UNORM,</line>
      <line align="32px">ATI2N_SNORM,</line>
      <line align="32px">BP_UF16,</line>
      <line align="32px">BP_SF16,</line>
      <line align="32px">BP</line>
      <line align="32px">FORMAT_MAX</line>
      <line align="0px">};</line>
      <line align="0px">

      </line>
      <line align="0px">
        <keyword>inline</keyword> GLenum oglCast(format <keyword>const</keyword> &amp; Format)
      </line>
      <line align="0px">
        {
      </line>
      <line align="32px">
        <keyword>static</keyword> GLenum <keyword>const</keyword> Cast[] = <comment>/!\ Do NOT create with the size of FORMAT_MAX, no size is perfect.</comment>
      </line>
      <line align="32px">
        {
      </line>
      <line align="64px">
        GL_NONE,
      </line>
      <line align="64px">
        GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
      </line>
      <line align="64px">
        GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
      </line>
      <line align="64px">
        GL_COMPRESSED_RGBA_S3TC_DXT5_EXT,
      </line>
      <line align="64px">
        GL_COMPRESSED_RED_RGTC1
      </line>
      <line align="64px">
        GL_COMPRESSED_SIGNED_RED_RGTC1
      </line>
      <line align="64px">
        GL_COMPRESSED_RG_RGTC2
      </line>
      <line align="64px">
        GL_COMPRESSED_SIGNED_RG_RGTC2
      </line>
      <line align="64px">
        GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
      </line>
      <line align="64px">
        GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
      </line>
      <line align="64px">
        GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
      </line>
      <line align="32px">
        };
      </line>
      <line align="0px">

      </line>
      <line align="32px">
        BOOST_STATIC_ASSERT(
      </line>
      <line align="64px">
        <keyword>sizeof</keyword>(Cast) / <keyword>sizeof</keyword>(GLenum) == FORMAT_MAX);
      </line>
      <line align="0px">

      </line>
      <line align="32px">
        <keyword>return</keyword> Cast[Format];
      </line>
      <line align="0px">
        }
      </line>
    </code>

    <paragraph>
      With the upcoming C++0x, static_assert are nativement supported within the language and allows to customize the error message.
    </paragraph>

    <code title="static_assert with C++0x:">
      <line align="32px">
        <keyword>static_assert</keyword>(
      </line>
      <line align="64px">
        <keyword>sizeof</keyword>(Cast) / <keyword>sizeof</keyword>(GLenum) == FORMAT_MAX,
      </line>
      <line align="64px">
        "Indirection table and enum size mismatch");
      </line>
    </code>

    <paragraph>
      One could ask: Why not a direct mapping, giving for example the value
      <codeword>GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</codeword> to DXT1?
      A direct mapping it even more efficient but I think that an indirection table provides a way to index something else directly with the format value.
      For example, I want to know about the block size of the DXT1 format.
      It also allows to be API independant because actually I might simply want to get the Direct3D value of these formats too.
    </paragraph>

  </post>

  <post index="0342" date="17/10/2010" std-date="2010-10-17T16:00:00.00Z" title="Terry O'Neill at the Little Black Gallery">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <image
      img="./post/0342-1.jpg"
      href="./post/0342-1.jpg" />
    <paragraph>
      The Little Black Gallery is currently exhibiting Terry O'Neill through a series of photographs showing his career works
      dedicated to fashion style and celebrities of the 1960s.
    </paragraph>
    <paragraph>
      This exhibition is running until the 30th of october. Admission is free.
    </paragraph>
    <image
      img="./post/0342-2.jpg"
      href="./post/0342-2.jpg" />
    <image
      img="./post/0342-3.jpg"
      href="./post/0342-3.jpg" />
    <source-list>
      <source-element type="Link" href="http://thelittleblackgallery.com/shows/terry-o-neil-guys-and-dolls" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0341" date="15/10/2010" std-date="2010-10-15T23:30:00.00Z" title="GLI 0.3.0.1 released">
    <meta>
      <tag>gtc-tech-project-gli</tag>
    </meta>

    <paragraph>
      This update of GLI only fixes few bugs.
    </paragraph>

    <source-list>
      <source-download type="Download" index="1051" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-image/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0340" date="10/10/2010" std-date="2010-10-10T10:10:10.10Z" title="First look at BPTC (BC7) texture compression format">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      Few days ago, I finally had a look at my first BPTC/BC7 texture and I must say I have been really impressed by the visual quality.
    </paragraph>

    <paragraph>
      Like DXT5, BPTC is a 8 bit per pixel format but it doesn't contain an alpha channel.
      Effectively, half of the bits of DXT5 are dedicated to the alpha channel only so that it fells fair to compare BPTC with
      DXT1 which is a RGB 4 bits per pixel format with an option for 1 alpha bit.
      To get a better quality, it's possible to use the alpha channel of DXT5 to store another channel which provides 4 bit per pixel for each channel.
      This format is usually called DXT5 RXBG and it provides a significantly higher quality alternative to DXT1 despite a feeling of red and blue noise.
    </paragraph>

    <paragraph>
      For the following captures, I used the RGB mode of DXT1 and generated it with
      <link href="http://developer.amd.com/gpu/compressonator/Pages/default.aspx">The Compressonator</link> from AMD.
      I generated the RGTC1 texture with the same tool, taking the red channel.
      From previous tests I made 2 years ago, The Compressonator appears to be the tool which provides the best visual quality.
      The BPTC texture has been generated with the <link href="http://msdn.microsoft.com/en-us/library/ee416559(VS.85).aspx">Direct3D 11 SDK encoder</link>
      with the CPU version of the encoder.
    </paragraph>

    <paragraph>
      I find the result provided by BPTC absolutely stunning.
      This picture is actually particullary challenging which explains the ugly result provided by DXT1:
      It's blocky, smooth parts becomes stairs and noisy parts become fat pixels.
      On its side, BPTC remains very close to the uncompressed texture.
      BPTC even manage to provide more details than RGTC1 in many cases.
    </paragraph>

    <paragraph>
      BPTC is a great texture format for visual quality so that for this property
      I expect to see it used in place of DXT1 and DXT5 in many cases in the future.
      However, the BPTC format has a main draw back: It's slow, very slow to generate!
      Chances are that all the realtime compression use cases of DXT5 will stick to this format for a while.
    </paragraph>

    <list>
      <list-element>
        BPTC is a 3:1 compression format, RGB, 8BPP
      </list-element>
      <list-element>
        DXT1 is a 6:1 compression format, RGB, 4BPP
      </list-element>
      <list-element>
        DXT5 is a 4:1 compression format, RGBA, 8BPP
      </list-element>
      <list-element>
        RGTC1 is a 2:1 compression format, 1 channel only, 4BPP
      </list-element>
    </list>

    <image
      img="./post/0339-1.png"
      href="./post/0339-1.png" />
    <image title="Küken in BPTC! Long to generate but such a good quality"
      img="./post/0339-2.png"
      href="./post/0339-2.png" />

    <paragraph>

    </paragraph>
    <source-element type="Link" href="http://www.opengl.org/registry/specs/ARB/texture_compression_rgtc.txt" title="GL_ARB_texture_compression_rgtc"/>
    <source-element type="Link" href="http://www.opengl.org/registry/specs/ARB/texture_compression_bptc.txt" title="GL_ARB_texture_compression_bptc"/>
  </post>

  <post index="0339" date="04/10/2010" std-date="2010-10-04T20:00:00.00Z" title="GLM 0.9.0.4 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      GLM 0.9.0.4 revision mainly fixes bugs.
      It also contains a contribution by Arnaud Masserann, a autoexp.dat file to make GLM looks nicer in Visual Studio debugger.
      To take advantage of this file, edit ${VISUALSTUDIO_DIRECTORY}/common7/packages/debugger/autoexp.dat file and add the content of the file util/autoexp.txt
      included in GLM 0.9.0.4.
    </paragraph>
    <source-list>
      <source-download index="1050" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0338" date="01/10/2010" std-date="2010-10-01T12:30:00.00Z" title="GLI 0.3.0.0 released">
    <meta>
      <tag>gtc-tech-project-gli</tag>
    </meta>

    <paragraph>
      With GLI 0.3.0.0, the library adds support to DDS 10 files (loading and saving) including all Direct3D 11 compression formats:
      BC1, BC2, BC3, BC4, BC5, BC6H and BC7.
      The library still contains DDS 9 and TGA loaders.
      The support of BC6H and BC7 should be considered experimental as
      I haven't been able to double check with neither AMD nor nVidia drivers.
      AMD drivers doesn't report support for
      <codeword href="http://www.opengl.org/registry/specs/ARB/texture_compression_bptc.txt">GL_ARB_texture_compression_bptc</codeword>
      and nVidia drivers seem buggy and display a black screen.
    </paragraph>

    <paragraph>
      The API has changed so that GLI 0.3.X is not backward compatible with GLI 0.2.X branch.
      The API better follows OpenGL convensions and
      introduces some sort of extension system (like <link href="project-0016.html">GLM</link>).
      Its reduces the number of headers included because
      <link href="project-0024.html">GLI</link> is still a header only library which, despite being very convenient, can significantly slow down the compilation.
    </paragraph>

    <paragraph>
      GLI requires <link href="project-0016.html">GLM</link> 0.9 to build.
    </paragraph>

    <code title="Creating an OpenGL texture object with GLI manually:">
      <line>
        <keyword>#include </keyword>
        <string>&lt;gli/gli.hpp&gt;</string>
      </line>
      <line>
        <keyword>#include </keyword>
        <string>&lt;gli/gtx/loader.hpp&gt;</string>
      </line>
      <line>

      </line>
      <line align="0px">
        ...
      </line>
      <line align="0px">
        glGenTextures(1, &amp;TextureName);
      </line>
      <line align="0px">
        glBindTexture(GL_TEXTURE_2D, TextureName);
      </line>
      <line align="0px">

      </line>
      <line align="0px">
        gli::texture2D Texture = gli::load("texture-bc3.dds");
      </line>
      <line align="0px">
        <keyword>for</keyword>(gli::texture2D::level_type Level = 0; Level &lt; Texture.levels(); ++Level)
      </line>
      <line align="0px">
        {
      </line>
      <line align="32px">
        glCompressedTexImage2D(
      </line>
      <line align="32px">
        GL_TEXTURE_2D,
      </line>
      <line align="32px">
        GLint(Level),
      </line>
      <line align="32px">
        GL_COMPRESSED_RGBA_S3TC_DXT5_EXT,
      </line>
      <line align="32px">
        GLsizei(Texture[Level].dimensions().x),
      </line>
      <line align="32px">
        GLsizei(Texture[Level].dimensions().y),
      </line>
      <line align="32px">
        0,
      </line>
      <line align="32px">
        GLsizei(Texture[Level].capacity()),
      </line>
      <line align="32px">
        Texture[Level].data());
      </line>
      <line align="0px">
        }
      </line>
      <line align="0px">
        ...
      </line>
    </code>

    <paragraph>
      GLI gives a complete control on the way a texture file used to create an OpenGL texture object.
      GLI also provides an even simpler way to create an OpenGL texture object using an unique call.
    </paragraph>

    <code title="Creating an OpenGL texture object with GLI automatically:">
      <line>
        <keyword>#include </keyword>
        <string>&lt;gli/gli.hpp&gt;</string>
      </line>
      <line>
        <keyword>#include </keyword>
        <string>&lt;gli/gtx/gl_texture2d.hpp&gt;</string>
        <comment>// Requires OpenGL >= 1.1 to be included before this include</comment>
      </line>
      <line>

      </line>
      <line align="0px">
        ...
      </line>
      <line align="0px">
        GLuint TextureName = gli::createTexture2D("texture-bc3.dds");
      </line>
      <line align="0px">
        ...
      </line>
    </code>

    <paragraph>
      This way, the texture object is created accordingly to the texture file content.
    </paragraph>

    <list name="What next for GLI?">
      <list-element>
        There are still some main DDS features: image array, cube maps, texture 3d.
      </list-element>
      <list-element>
        Creation of a file format to better map the texture supported my this library and OpenGL with command line tools to convert from DDS10 files.
      </list-element>
      <list-element>
        Loading from memory.
      </list-element>
      <list-element>
        Improvement of the OpenGL interopability: Loading and saving of a whole framebuffer object in 1 call?
      </list-element>
      <list-element>
        Cross format support, eg: loading from one file format, saving in another format.
      </list-element>
      <list-element>
        And probably more things, don't hesitate to send me some feedbacks!
      </list-element>
    </list>

    <paragraph>
      I aim to build a simple image library as useful and used than GLM for math
      so please send me some feedbacks to help the development taking the right direction.
    </paragraph>

    <source-list>
      <source-download type="Download" index="1049" />
      <source-download type="Download" index="1041" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-image/newticket" title="Submit a bug report" />
      <source-element type="Link" href="post-0335.html" title="Texture compression formats: lost in translation" />
    </source-list>
  </post>

  <post index="0337" date="29/09/2010" std-date="2010-09-29T08:30:00.00Z" title="G-Truc Creation 6.5.1.0 source released">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>
    <paragraph>
      Despite that it really not a priority, I have slowly started to work on the new version/update of G-Truc Creation website.
      Consequently, I decided to publish the source on the current version which have been stable for a while now.
    </paragraph>
    <source-list>
      <source-download index="1048" />
    </source-list>
  </post>

  <post index="0336" date="26/09/2010" std-date="2010-09-26T12:00:00.00Z" title="Git FAQ">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>
    <paragraph>
      I started using Git about 6 months ago in an every day bases and this remains one of the best decision I ever took on the regard of development.
    </paragraph>
    <paragraph>
      However, like my friend Guillaume Chevallereau said to me when I started: When you start using Git you must "unlearn" everything you learn before.
      This is true! So true that I would advice beginners to start with Git (or Mercurial)
      but absolutely not with CVS or SVN because those version control systems are simply build upon wrong concepts.
    </paragraph>
    <paragraph>
      I think that using Git wisely allows much more efficient developments than SVN, especially over time.
      All projects that live long enough take more and more time to develop because of project complexity.
      This rule implies that a project must be build with small modules to ensure that the development time isn't going to grow expentionally.
      Moreover, I think that rewritting a project is completely stupid and a waste of time.
      On the contrary, rewriting a part of a project, even an entire module, is ok with good reasons.
    </paragraph>
    <paragraph>
      Git is a layer on top which ensures that the development strategy is going to be apply nicely, without poluting the code,
      allowing developers to work together in parallel to build over time a great code.
      I'm glade to see that I am not the only one to care about the development process and
      <link href="http://c0de517e.blogspot.com/2010/09/international-movement-for-code-rights.html">the key values of great code</link>.
      Git is a key element for such archivement.
    </paragraph>
    <paragraph>
      In this post I would like to start some sort of a FAQ for Git.
    </paragraph>

    <code title="1 - How to access to a git repository and branches?">
      <line>
        git clone $REPOSITORY_URL
      </line>
      <line>
        git checkout 0.9.1
      </line>
      <line>
        git checkout master
      </line>
    </code>
    <paragraph>
      With Git, we don't only 'checkout' a repository, we 'clone' it that is to say that each copy of the repository is a fully functional and working repository
      totally independent from the 'origin' repository. 'checkout' with Git only means changing branch.
      In the previous command line, the 'origin' repository is the one located at $REPOSITORY_URL.
    </paragraph>

    <code title="2 - How to commit with Git?">
      <line>
        <comment>Display the list of changes to commit, changes but not added for commit and the untracked files and directories.</comment>
      </line>
      <line>
        git status
      </line>
      <line>
        git add $CHANGED_FILE_OR_DIRECTORY
      </line>
      <line>
        git commit -m "My comment for my changes"
      </line>
    </code>
    <paragraph>
      'status' gives a complet report on the state of the repository directory.
      Git is based on 'changes' not 'file versions'. We don't add files to the repository we add changes.
      For every changes we must add them before commiting them.
      If a file changes and this change is added to be commited.
      Further changes won't be commited with the first change if they are not added as well before the commit.
    </paragraph>

    <code title="3 - How to get changes from others repositories?">
      <line>
        git pull origin master
      </line>
      <line>
        git pull $BOB_URL bob_ultimate_feature
      </line>
    </code>
    <paragraph>
      'git pull origin master' is the closer command to 'svn update' on the trunk.
      This command line fetch the changes of the master branch from the repository we cloned and 'merge' them on our current branch.
      We can also get changes from any remote repository and any branch.
    </paragraph>

    <code title="4 - How to send changes to other the origin repository?">
      <line>
        git push origin master
      </line>
    </code>
    <paragraph>
      Even if I am not a fan of it, it's the only way to share changes between developer through the SourceForge.net server.
      Instead I'll rather ask the server to pull my changes or directly another developer if he is on the same network than I.
    </paragraph>

    <code title="5 - How to branch and merge?">
      <line>
        <comment>Display our repository branches</comment>
      </line>
      <line>
        git branch
      </line>
      <line>
        <comment>Display the remote branches</comment>
      </line>
      <line>
        git branch -r
      </line>
      <line>
        <comment>Checkout my_branch from our repository or a remote repository</comment>
      </line>
      <line>
        git checkout my_branch
      </line>
      <line>
        <comment>Create a branch call my_feature and checkout it out</comment>
      </line>
      <line>
        git checkout -b my_feature
      </line>
      <line>
        git checkout my_branch
      </line>
      <line>
        <comment>Merge my_feature branch to the current branch</comment>
      </line>
      <line>
        git checkout merge my_feature
      </line>
      <line>
        <comment>Delete the branch my_feature</comment>
      </line>
      <line>
        git branch -d my_feature
      </line>
    </code>
    <paragraph>
      Thanks to its "changes oriented design", Git provides a powerfull branching mecanisum
      that can and should be use without restriction.
      When a branch is created or deleted on the local repository, it isn't created or deleted on the remote repository.
      To create a branch on a remote directory it has to be push or pull explicitly.
    </paragraph>
    <paragraph>
      To be continued...
    </paragraph>
  </post>

  <post index="0335" date="24/09/2010" std-date="2010-09-24T08:30:00.00Z" title="Texture compression formats: lost in translation">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      I spend my time to say it: "It's all about bandwidth!"
      A renderer can't be efficient without taking good care of the bandwidth and probably the first step is to use compressed textures.
    </paragraph>
    <paragraph>
      Direct3D and OpenGL provide a lot of texture formats to make the best use of the bandwidth.
      However, it’s a bit difficult to follow what format name correspond to what kind of data.
      Direct3D 9 and Direct3D 10 use different and
      OpenGL is based on an inconsistent naming convention following more or less Direct3D conventions but not really.
    </paragraph>
    <paragraph>
      All the GPU compressed texture formats work on 4 by 4 pixel blocks and
      are saved in memory as fixed size compressed blocks which make possible to arbitrary access any block of a texture.
      Each block has to be fetch as 1 continue memory block but each pixel can be decoded on fly.
      Because of the proximity of block pixels, each block makes the best usage of the GPU caches.
      These basic characteristics make compressed texture very convenient to implement on the hardware and
      they are in practice faster than uncompressed textures.
    </paragraph>
    <paragraph>
      First note: I don't really know how BC7 and BC6H format work but this is something I will explore later on.
      It's quite a shame than Direct3D 11 documentation doesn't describe them properly.
      As far as I have understood, these formats use block shape patterns to decode the block instead of interpolated values to reduce the block artefacts.
      BC7 is 8 bits like BC3… what are the use cases for BC7 over BC3?
    </paragraph>
    <paragraph>
      On the regard of BC1 to BC5, every formats use 2 pixels that are interpolated to generate each pixel of the block.
      These 2 pixels are saved as 16 bits colors (R5G6B5) and the number of interpolated values can change depending on the order of the 2 pixels in the block.
      Typically, if pixel 0 is bigger than pixel 1 then we use the set of interpolation values with more interpolation values.
    </paragraph>
    <paragraph>
      In the following table, the compressed formats for OpenGL textures and the equivalent format for different versions of Direct3D.
    </paragraph>
    <table>
      <table-title>
        <table-title-element>Description</table-title-element>
        <table-title-element>OpenGL</table-title-element>
        <table-title-element>Direct3D 9</table-title-element>
        <table-title-element>Direct3D 10</table-title-element>
        <table-title-element>Direct3D 11</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>4 bpp, RGB, 2 interpolanted value or 1 interpolated value + alpha bit</table-entry-element>
        <table-entry-element>RGB_S3TC_DXT1_EXT, RGBA_S3TC_DXT1_EXT, SRGB_S3TC_DXT1_EXT, SRGB_ALPHA_S3TC_DXT1_EXT</table-entry-element>
        <table-entry-element>D3DFMT_DXT1</table-entry-element>
        <table-entry-element>BC1_UNORM, BC1_UNORM_SRGB</table-entry-element>
        <table-entry-element>BC1_UNORM, BC1_UNORM_SRGB</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>8 bpp, RGBA, 16 stored alpha values</table-entry-element>
        <table-entry-element>RGBA_S3TC_DXT3_EXT, SRGB_ALPHA_S3TC_DXT1_EXT</table-entry-element>
        <table-entry-element>D3DFMT_DXT2, D3DFMT_DXT3</table-entry-element>
        <table-entry-element>BC2_UNORM, BC2_UNORM_SRGB</table-entry-element>
        <table-entry-element>BC2_UNORM, BC2_UNORM_SRGB</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>8 bpp, RGBA, 4 or 6 interpolated alpha</table-entry-element>
        <table-entry-element>RGBA_S3TC_DXT5_EXT, SRGB_ALPHA_S3TC_DXT5_EXT</table-entry-element>
        <table-entry-element>D3DFMT_DXT4, D3DFMT_DXT5</table-entry-element>
        <table-entry-element>BC3_UNORM, BC3_UNORM_SRGB</table-entry-element>
        <table-entry-element>BC3_UNORM, BC3_UNORM_SRGB</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>4 bpp, Red only, single component images</table-entry-element>
        <table-entry-element>RED_RGTC1, SIGNED_RED_RGTC1</table-entry-element>
        <table-entry-element>N/A</table-entry-element>
        <table-entry-element>BC4_SNORM, BC4_UNORM</table-entry-element>
        <table-entry-element>BC4_SNORM, BC4_UNORM</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>8 bpp, Red and green, normal images</table-entry-element>
        <table-entry-element>RG_RGTC2, SIGNED_RG_RGTC2</table-entry-element>
        <table-entry-element>N/A</table-entry-element>
        <table-entry-element>BC5_SNORM, BC5_UNORM</table-entry-element>
        <table-entry-element>BC5_SNORM, BC5_UNORM</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>8 bpp, HDR RGB images</table-entry-element>
        <table-entry-element>RGB_BPTC_SIGNED_FLOAT_ARB, RGB_BPTC_UNSIGNED_FLOAT_ARB</table-entry-element>
        <table-entry-element>N/A</table-entry-element>
        <table-entry-element>N/A</table-entry-element>
        <table-entry-element>BC6H_SF16, BC6H_UF16</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>8 bpp, suposed to be "high quality"</table-entry-element>
        <table-entry-element>RGBA_BPTC_UNORM_ARB, SRGB_ALPHA_BPTC_UNORM_ARB</table-entry-element>
        <table-entry-element>N/A</table-entry-element>
        <table-entry-element>N/A</table-entry-element>
        <table-entry-element>BC7_UNORM, BC7_UNORM_SRGB</table-entry-element>
      </table-entry>
    </table>
    <paragraph>

    </paragraph>
    <paragraph>
      On the side of tools, BC6H and BC7 formats are still pretty unsupported.
      <link href="project-0024.html">GLI</link> still only support Direct3D 9 DDS files and formats.
      Obviously, the support for all the formats are really high in my development list for GLI!
      My favorite texture tool, <link href="http://developer.amd.com/gpu/compressonator/Pages/default.aspx">AMD The Compressonator</link>,
      haven't been updated and neither the <link href="http://developer.nvidia.com/object/texture_tools.html">nVidia Texture Tools</link>.
      The only thing I found to generate BC6H and BC7 is a code sample in the Direct3D SDK and
      2 independant exporters in the <link href="http://code.google.com/p/nvidia-texture-tools/downloads/list">nVidia Texture Tools repository</link> for
      <link href="http://code.google.com/p/nvidia-texture-tools/downloads/detail?name=bc6h_export.zip&amp;can=2&amp;q=">BC6H</link> and
      <link href="http://code.google.com/p/nvidia-texture-tools/downloads/detail?name=bc7_export.zip&amp;can=2&amp;q=">BC7</link>
    </paragraph>
    <source-element type="Link" href="http://www.opengl.org/registry/specs/EXT/texture_compression_s3tc.txt" title="GL_EXT_texture_compression_s3tc"/>
    <source-element type="Link" href="http://www.opengl.org/registry/specs/ARB/texture_compression_rgtc.txt" title="GL_ARB_texture_compression_rgtc"/>
    <source-element type="Link" href="http://www.opengl.org/registry/specs/ARB/texture_compression_bptc.txt" title="GL_ARB_texture_compression_bptc"/>
    <source-element type="Link" href="http://www.opengl.org/registry/specs/ARB/texture_compression.txt" title="GL_ARB_texture_compression"/>
    <source-element type="Link" href="http://www.opengl.org/registry/specs/EXT/texture_sRGB.txt" title="GL_EXR_texture_sRGB"/>
  </post>

  <post index="0334" date="23/09/2010" std-date="2010-09-23T00:30:00.00Z" title="7734 by the Jasmin Vardimon Company">
    <meta>
      <tag>gtc-crea-performance</tag>
    </meta>
    <paragraph>
      <link href="post-0226.html">About a year ago</link>, I discovered the <link href="http://www.jasminvardimon.com">Jasmin Vardimon Company</link> through a performance of
      <link href="http://www.jasminvardimon.com/yesterday.html">Yesturday</link> at
      <link href="http://www.theplace.org.uk/416/about-the-theatre/about-the-theatre.html">the Robin Howard Dance Theatre</link>
    </paragraph>
    <paragraph>
      Yesturday is a proper contemporary dance performance that, beyond the talent of the dancers,
      involves the best use of computer graphics I saw for the sake of art.
    </paragraph>

    <paragraph>
      It's with a lot of excitement that I discover that the Jasmin Vardimon Company is about to tour
      for a new performance called 7734 and it's premiere tonight in Brighton's Dome.
    </paragraph>
    <paragraph>
      This is the one performance I would not miss!
    </paragraph>

    <video title="Jasmin Vardimon Company: 7734 trailer" href="http://www.youtube.com/v/T6LCxglzJmY?fs=1&amp;hl=en_GB" width="800" height="500" />

    <list name="Calendar:">
      <list-element>
        23 Thu September 2010 at Dome, Brighton
      </list-element>
      <list-element>
        28 Fri September 2010 at Playhouse, Oxford
      </list-element>
      <list-element>
        30 - 01 Thu - Fri September 2010 at Theatre Royal, Winchester
      </list-element>
      <list-element>
        05 Tue October 2010 at Riverfront, Newport
      </list-element>
      <list-element>
        07 Thu October 2010 at LPAC, Lincoln
      </list-element>
      <list-element>
        12 Tue October 2010 at Hall for Cornwall, Truro
      </list-element>
      <list-element>
        15 Fri October 2010 at South HIll Park, Bracknell
      </list-element>
      <list-element>
        29 - 30 Fri - Sat October 2010 at Lighthouse, Poole
      </list-element>
      <list-element>
        02 - 03 Tue - Wed November 2010 at Exeter Northcott, Exeter
      </list-element>
      <list-element>
        06 Sat November 2010 at Aberystwyth Arts, Aberystwyth
      </list-element>
      <list-element>
        16 Tue November 2010 at Espace Jean legendre, Compiegne
      </list-element>
      <list-element>
        18 Thu November 2010 at La Comete, Chalons en Champagne
      </list-element>
      <list-element>
        25 - 26 Thu - Fri November 2010 at Sadler's Wells, London
      </list-element>
    </list>
    <video title="Jasmin Vardimon Company: Yesterday trailer" href="http://www.youtube.com/v/f5AGwNDkRX4?fs=1&amp;hl=en_GB" width="800" height="500" />
  </post>

  <post index="0333" date="22/09/2010" std-date="2010-09-22T08:30:00.00Z" title="OpenGL Samples Pack 4.1.1.3 released (updated)">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      The OpenGL Samples Pack 4.1.1.3 is a minor update that fixes some problems in my use of OpenGL 4.1.
      It brings some changes on the respect of OpenGL conformance and I did a little bit of project cleaning.
    </paragraph>
    <paragraph>
      The OpenGL Samples Pack currently cover a good part of OpenGL 4.1 core profile even if a lot is still missing.
      I must say that I am a bit bored with this project at the moment
      and I think it's not going to evolve as fast as it use to the past months.
    </paragraph>
    <paragraph>
      Following, an update of the drivers status based on this update.
      First, it's surprizing that nVidia hasn't updated its OpenGL 4.1 for about a month.
      Since <link href="post-0321.html">my last drivers status</link>, the only improvement I notice is
      that AMD drivers doesn't seem to have problem on conditional queries anymore.
      This was quite a fuzzy problem so that I am still not 100% sure that the problem is actually fixed.
    </paragraph>
    <paragraph>
      Update: I recieved an email from Piers Daniel (nVidia) to let me know that nVidia drivers 260.63 beta include OpenGL 4.1 beta drivers.
      Mistery solved, nVidia has updated their drivers!
      Unfortunately, running a quick test, I didn't observer progresses of the OpenGL 4.1 implementation.
    </paragraph>
    <table>
      <table-title>
        <table-title-element>Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 10.9</table-title-element>
        <table-title-element>nVidia Forceware 259.31 beta / 260.63 beta</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Build error with misleading messages</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Exception during compilation</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-layered</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">gl_ViewportIndex unsupported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-debug-output</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="green">Only return glGetError</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-texture-buffer-rgb</table-entry-element>
        <table-entry-element color="red">RGB32 TBO fetch not correct</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="orange">ARB GLSL function instead of core GLSL function</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-structs</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Doesn't support varying struct and wrong error message</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Build error with misleading messages</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="red">Draw calls ignored, double not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">Black render targets</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="orange">
          Min/mag tex param and glMinSampleShading<bold>ARB</bold> required
        </table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-layered</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported block array/freeze the program</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-query-conditional</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>
    <paragraph>

    </paragraph>
    <source-download index="1047" />
    <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
  </post>

  <post index="0332" date="19/09/2010" std-date="2010-09-19T19:30:00.00Z" title="Skin at the London's Wellcome Collection">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <image
      title="Examination by Heather Barnett"
      color="white"
      img="./post/0332.jpg"
      href="./post/0332.jpg" />
    <paragraph>
      I like how art is able to push individual boundaries.
      I think I have seen quite a lot and all sort of things. I have been amazed, surprized, stunned by some exhibitions.
      Most of them have contribute to my personal evolution and some have accomplished something further close to 'breaking changes'
      even if I don't believe in changes.
    </paragraph>
    <paragraph>
      However, there is nothing safe about art so that it could be beyond boundaries and completely out reach,
      either for an individual either for its time.
    </paragraph>
    <paragraph>
      With its exhibition Skin, the Wellcome Collection manages to lead me far away from my boundaries.
      It has been quite a disturbing experience for me.
      This exhibition depicts its subject from a middle age medical perception to a contemporary art perception,
      6 centuaries of study of this layer that separate the outside from the inside.
    </paragraph>
    <paragraph>
      The exhibition could seem a bit missy considering that a 16th centuary drawing can end up next to a 21th centuary photogragh
      but I find it a good taste and a desire a put time a part: A statement for the fascination of skin over times.
    </paragraph>
    <paragraph>
      Even if my experience through this exhibition have been quite disturbing,
      I highly advice this exhibition for everyone that can handle the view of écorché people.
      The exhibition is runing until the 29th September 2010 for free.
      Finally, have a look at the exhibition website, one of the most interesting I have seen for an exhibition.
    </paragraph>
    <image
      img="./post/0332-1.jpg"
      href="./post/0332-1.jpg" />
    <source-list>
      <source-element type="Link" href="http://www.wellcomecollection.org/whats-on/exhibitions/skin.aspx" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0331" date="19/09/2010" std-date="2010-09-19T12:00:00.00Z" title="GLM status">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      As it has been a long time since a major GLM release,
      I decide to publish this status update to let you know about the current developments.
    </paragraph>
    <paragraph>
      Few months ago, I reported about some interesting investigations we did with Christoph Schied and
      Joshua Smith about swizzle operators.
      Thanks to great ideas, I expected to release this feature as GLM 0.9.1.
      Unfortunately, even if it worked 95% of the time, we discover multiple issues that prevent the release of this feature.
      At that point in time, I'm not sure there is any way to correctly emulate the GLSL swizzle operators
      using the same syntax and we might have to look at C++0x for further investigations.
    </paragraph>
    <paragraph>
      On other side, Wael El Oraiby is currently working on making GLM a shared library
      with load of explicit instantiations. The goal of this development is to reduce the build time of projects
      that use GLM. In any case, it will only remain an option and GLM will remain a headers
      only library for everyone who prefers to use it this way.
    </paragraph>
    <paragraph>
      On my side, I decide to extend the test bench of GLM. A lot of the GLM core features already have tests.
      However, the test bench requires some improvements of its development process and
      the features coverage need to be extend to all the extensions.
      Bringing this level of reliability to GLM is for me an essential step before a stable release GLM 1.0.0.0.
    </paragraph>
    <paragraph>
      Finally, I have continued my design researches to integrate all the SIMD code I have written in GLM.
      There are still some issues as I want the API to be as simple as possible and
      I want to provide something flexible enough to let the developers choosing between various optimization
      and ULP methods across the code for the same operation.
      To start this integration, I decide to create experimental extensions
      which will provide explicit SIMD classes and functions.
    </paragraph>
    <paragraph>
      On a different regard, Patrick Cozzi has forwarded to me a link
      for a new project called <link href="http://www.opentk.com/node/1999">OpenTK Mathematics (TKM)</link>
      which has been inspired by GLM philosophy. Looks pretty interesting for C# developers!
    </paragraph>
    <source-list>
      <source-download index="1041" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a feature request or a bug report" />
    </source-list>
  </post>

  <post index="0330" date="16/09/2010" std-date="2010-09-16T08:30:00.00Z" title="My OpenGL 4.2+ wish-list">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
    </meta>

    <paragraph>
      For this wish-list, I thought that instead of just having a view for OpenGL 4.2,
      I could have a look at OpenGL for OpenGL 4 hardware class (I might have been borderline on what's possible for some features...).
    </paragraph>
    <paragraph>
      I call it 'my OpenGL 4.2+ wish-list' as I don't think all the following ideas could be part of OpenGL 4.2.
      You can see this wish-list as a statement against the 'close to completed OpenGL idea I read to often after OpenGL 4.1 specifications release.
    </paragraph>
    <paragraph>
      Don't give me wrong, I think that OpenGL is already great but real-time graphics is still at its youth
      so that I don't accept the idea of we are done when plenty of opportunies for new ideas are awaiting for us and I even see
      a lot of hardware evolutions for OpenGL 5 hardware and beyond even if it's quite far ahead of us. :)
    </paragraph>
    <paragraph>
      This article is mainly based on some tests performed with my
      <link href="project-0026.html">OpenGL Samples</link>,
      <link href="project-0029.html">experiments of engine design</link>
      and my understanding of GeForce 400 series and Radeon 5000 series.
    </paragraph>

    <title>1. Direct state access</title>
    <paragraph>
      <link href="./post-0279.html">I have requested direct state access</link> for as long as
      <codeword href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">GL_EXT_direct_state_access</codeword> extension has been released
      and it is absolutely nice to see that both AMD and nVidia have implemented it now.
      However, once again I would like to repeat that in its form,
      this extension is far from perfect and I really don't want it included in any OpenGL specification.
    </paragraph>
    <paragraph>
      The ARB has added parts of the direct state access through new API features:
      Sampler objects with OpenGL 3.3, separate program objects with OpenGL 4.1 and if we are picky even uniform blocks with OpenGL 3.1.
      I like this approach because it avoids to include a lot of already deprecated functions in core:
      OpenGL is already a big and fat mammouth, especially the compatibility profile, there is no need to make it heavier for no reason,
      it's complicated enough to learn! Old softwares that uses deprecated features are probably using mechanisms which are probably not perfect,
      but which works and rewrite those to only use DSA functions of deprecated features is just a waste of time.
      For new code path, it's also a waste of time to use deprecated features so that there is still no need for deprecated features with DSA.
    </paragraph>
    <paragraph>
      There is still a lot of DSA functions missing and I guess that if we want an improved multithreaded rendering we will need it
      as I assume that it removes the need of queries which would need to be thread safe and hence potential slow.
      Reading extensions I find out about a <codeword>GL_EXT_direct_state_access_memory</codeword> extension
      which could be a subset of <codeword href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">GL_EXT_direct_state_access</codeword> for
      buffers and textures. It could cover most of the remaining missing DSA functions.
    </paragraph>

    <title>2. Multithreaded rendering using command lists</title>
    <paragraph>
      Now days, every CPUs sold has multiple cores.
      Unfortunatly, OpenGL doesn't gives a lot of help to program an efficient multithreading renderer unlike Direct3D 11.
    </paragraph>
    <paragraph>
      On the regard of multithreading, I think that Direct3D 11 gets it right. Thus, for OpenGL I would like the possibility
      to build command lists with multiple threads, at list one per threads.
    </paragraph>
    <paragraph>
      Let's admit that compiling a GLSL program is long.
      I don't see any good reason to compile a program within the thread that executes the OpenGL command list.
      Using multiple threads to build command lists could even give to the drivers more opportunities to optimize the final command list used for rendering
      without slowing down the rendering because the optimization would be hidden in a seperate thread,
      optimizations that we usually have to take care of ourself using delayed OpenGL calls for examples.
    </paragraph>

    <title>3. New 'complex' data access and structures</title>

    <title>3.1. Image and buffer load and store</title>
    <paragraph>
      Direct3D 11 mainly sold itself with 3 features: Tessellation, multithreading and compute shaders.
      This is all good but I really think that one of the most interesting part of Direct3D 11 is the RWBuffer and RWTexture*,
      what we call image and buffer load and store in OpenGL.
    </paragraph>
    <paragraph>
      When we think about it, image and buffer load and store is one of the most crazy feature integrated in OpenGL 4 hardware...
      With this feature it's possible to read and write to any buffer and any image wherever we want and even perform atomic operations.
    </paragraph>
    <paragraph>
      It's a wonderful source for new ideas and an other step toward a programmable blending stage after the texture barrier
      even if I don't think it could be as efficient or leading to as many hardware optimizations than a proper programmable blend stage could do.
      The performance is not so good apararently with the current hardware generation but the possibilities are here.
      These capabilities are embodied by as set of extensions including
      <codeword href="http://www.opengl.org/registry/specs/EXT/shader_image_load_store.txt">GL_EXT_shader_image_load_store</codeword>,
      <codeword href="http://www.opengl.org/registry/specs/NV/shader_buffer_load.txt">GL_NV_shader_buffer_load</codeword> and
      <codeword href="http://www.opengl.org/registry/specs/NV/shader_buffer_store.txt">GL_NV_shader_buffer_store</codeword>.
    </paragraph>
    <paragraph>
      Unfortunatly, the lack of coherence between these extensions show me that there isn't an aggrement
      on the way it should be designed between AMD and nVidia or at least not in time for OpenGL 4.1 release.
    </paragraph>

    <title>3.2. UAV buffer / Linked list</title>
    <paragraph>
      The image and buffer load and store is a great feature but actually I think it will only reach its best only if we also have an API for
      what D3D11 calls UAV buffer and which allows to build and browse linked lists on the GPUs for very complex data struture and access...
      A step toward hybrid rendering with raytracing or at least raycasting? Sparse voxel octrees?
    </paragraph>

    <title>3.3. Custom structure (POD) fetches</title>
    <paragraph>
      One good think with the uniform blocks is that it gives an efficient data access as it is based on AoS (Array of Structure) which provides a
      contiguous memory access between structure elements.
      When buffer data are accessed on a per-framebuffer, per-program, per-draw call, per-instance, per-primitive, per-vertices and maybe even per-fragment, etc.
      it reduces the waste of memory bandwidth.
      This is due to unused data fetched because of memory alignment and because GPUs (and CPUs too) can't fetch less that a certain amount of data.
      The GPU is <link href="http://bps10.idav.ucdavis.edu/talks/09-raganKelley_SchedulingRenderingPipeline_BPS_SIGGRAPH2010.pdf">a processor that works per-task</link>
      so that all the data fetched beyond the current tasks might reach the GPU cache and never be used before being invalidated and
      fetch again later when the task is actually scheduled.
    </paragraph>
    <paragraph>
      I think that used in a proper way, uniform block can have significant performance benefices as it naturally fetch continious data.
      Obviously, it's possible to use arrays inside blocks which might japodize some performance benefices of blocks if the data is not use within the task...
    </paragraph>
    <paragraph>
      OpenGL 3.1 has introduced texture buffer objects which allow to access to a large amount of data either with a SoA or a AoS model
      but which also make possible some quite advanced data structures in GPU memory.
      I believe that in many cases the AoS model is more efficient with texture buffer too.
      Unfortunately, it doesn't feel really natural to use because GLSL only provides the function <codeword>texelFetch</codeword> which only provide up to 4 components vertors.
      Using multiple calls we can actually fetch a continious memory structure and build it back in the shader... How fastidious?
    </paragraph>
    <paragraph>
      My request here is a <codeword>structFetch</codeword> which allows to directly fetch a data structure from a buffer as it is (no normalization, no cast).
      There are probably some type limitations for the structure elements in some OpenGL 4 hardware (in Radeon 5000 series but maybe not in GeForce 400 series)
      but as part of the making complex data structures idea, it would be very convenient and hopefully a good guide for best practices of buffer accesses.
    </paragraph>

    <title>3.4. On GPU image copy (GL_NV_copy_image)</title>
    <paragraph>
      OpenGL 3.1 includes the extension <codeword href="http://www.opengl.org/registry/specs/ARB/copy_buffer.txt">GL_ARB_copy_buffer</codeword>
      which allows to copy some data from one buffer to another without going through the global memory.
      As part of creating complex data structures, I think it would be very convenient to be able to do the same between images.
      <codeword href="http://www.opengl.org/registry/specs/NV/copy_image.txt">GL_NV_copy_image</codeword>
      already provides such feature in a very powerful way, allowing cross target,
      cross dimention and even cross context copy of texture and renderbuffer sub-data.
      I'm not sure about the idea to be able to read or write from a renderbuffer...
      Since OpenGL 3.2 we can assume that renderbuffer are deprecated if we want to however I quite believe that in the future (OpenGL 5 hardware?)
      renderbuffer might become interesting againt if we consider renderbuffers like surfaces we can't explicitly reused
      which could bring some hardware optimizations.
    </paragraph>

    <title>3.5. Improved transform feedback storage types</title>
    <paragraph>
      After a test of the GeForce 470 on <codeword href="http://www.icare3d.org/blog_techno/gpu/the_froggy_fragsniffer.html">The Froggy FragSniffer</codeword>,
      it quickly appears that the Fermi architechture works per tile of 16 by 16 fragments
      where each 'GPC' is working separately.
    </paragraph>
    <paragraph>
      In some ways, I would like to call the Fermi architechture a hybrid tile renderer GPU because I
      don't think that on the vertex side it actually works like a tile renderer,
      this tiling probably exist only to have big enough 'wraps'/'work groups'.
    </paragraph>
    <paragraph>
      Thanks to transform feedbacks, we can simulate a tile renderer behaviours even if is would be quite slow.
      One issue is that we can't control the output format so that everything is saved as floats, ints or uints,
      an issue that I wish to be able to laverage by being able to setup a different external format thanks to a vertex layout object...
      See section 6.1. for more details on this vertex layout object.
    </paragraph>

    <title>4. Remove some specification limitations</title>
    <paragraph>
      In this part I would like to deal with wishes close to the specification
      which would simply removed some specification limitations,
      simple mistakes or subtle feature refinements.
    </paragraph>

    <title>4.1. Shared uniform buffer across uniform block array for per-instance data</title>
    <paragraph>
      With OpenGL 4.1 we can use uniform buffers with uniform block array, one buffer per array entry.
      However, I would rather use only a single buffer for all the per-instance data for example.
      On top of this, it would be great to have a function to be able to setup this only buffer for the whole uniform block array.
    </paragraph>
    <paragraph>
      I think that using a uniform block array element for per-instance data is a good thing as
      it reduces memory bandwidth by forcing the developer to work AoS instead of SoA.
    </paragraph>
    <paragraph>
      Finally, this feature request removed the small buffer allocations overload and reduces the risk of GPU memory fragmentation.
    </paragraph>

    <title>4.2. Layered rendering on mipmap chain or layers of different sizes</title>
    <paragraph>
      With the release of OpenGL 4.1, I had a lot of expectations for more efficient cascaded shadow mapping rendering
      thanks to the new <codeword href="http://www.opengl.org/registry/specs/ARB/viewport_array.txt">GL_ARB_viewport_array</codeword> extension
      and core feature which allows to setup multiple viewports.
    </paragraph>
    <paragraph>
      One big difference between Direct3D and OpenGL is that OpenGL doesn't require that all the colorbuffers have the same size.
      However, when a colorbuffer has a smaller size, it clips some pixels.
      With OpenGL 4.1, I was expecting to use 1 viewport per layer so that I could rasterize some triangles at lower resolution than others
      which would be usefull for cascaded shadow maps generation in a single pass as we usually want
      to use higher resolution maps for the maps close to the camera position and lower resolution for maps far from the camera position.
      Unfortunatlly, layered rendering has a limitation: all the layer must have the same size...
      I don't really know if it is a hardware limitation (in this case, let's remove it for OpenGL 5 hardware!) or just a specification detail.
    </paragraph>

    <title>4.3. Removed sampler array limitation</title>
    <paragraph>
      OpenGL 4.0 brings a proper support for sampler arrays however some limitations remains.
      It's not possible to freely access any element of the sampler array, we are restricted to constants and uniform variable indexes.
      After some tests, I feature out that this limitation doesn't apply on nVidia drivers.
      On AMD drivers these are some lookup issues but it might be possible to fix it.
    </paragraph>
    <paragraph>
      I think that removing this limitation could provide some great benefits for instancing and if there are actually some hardare limitations
      maybe it could be even less restricted to allow, at least, per-shader invocation indices.
    </paragraph>

    <title>4.4. Input vertex shader and output fragment shader blocks</title>
    <paragraph>
      Since OpenGL 3.2, it's possible to use blocks to communicate between shader stages and
      I especially like this feature to define communication protocoles between stages.
      With OpenGL 4.1, there is almost no more constraint except that vertex shader inputs and fragment shader outputs can't be blocks.
      I remember doing some tests on nVidia OpenGL 3.3 beta drivers to see if it was possible and for some reasons it results with linking errors...
      It would be nice to have this limitation removed for a fully consistent approach to program shaders with blocks.
    </paragraph>

    <title>4.5. Program pipeline object for DSA</title>
    <paragraph>
      There is a choice I really don't undestand about the program pipeline object design:
      Why the pipeline object have to be created by a
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glBindProgramPipeline.xml">glBindProgramPipeline</codeword>?
      On the regard of DSA, this makes impossible to consider this object like a DSA object just because of this limitation and even if the rest of the API is perfectly DSA oriented.
      At draw time, we need to check if the program pipeline is still correct or if, meanwhile, a program pipeline has been created.
    </paragraph>
    <paragraph>
      With the sampler object, the ARB got it right because the object is actually created
      by the first <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glSamplerParameter.xml">glSamplerParameter*</codeword> call.
      Often with new OpenGL features, the previous specifications already provide solutions.
      For the program pipeline object it should be the same.
    </paragraph>

    <title>5. Software design scalability</title>

    <title>5.1. Compiler options and preprocessor definisions</title>
    <paragraph>
      I find quite crazy the few possibilities we have on the regard of compiler and preprocessor options.
      One side of writting an OpenGL 'engine' is to simulate behaviours that Visual Studio or GCC would provide for us...
    </paragraph>
    <paragraph>
      From the beginning of <link href="http://developer.nvidia.com/page/cg_main.html">Cg</link>,
      it includes the possibilities to build a shader for a specific 'SM' version.
      There is #version preprocessor option to set in the shader but if we want to manage the version from the C++ program... it's just hand work.
    </paragraph>
    <paragraph>
      Another very convenient tool is the GCC -D parameter which allows to define a value at build time.
      More do it yourself with GLSL and it's the same for the extension list...
    </paragraph>
    <paragraph>
      OpenGL 4.1 allows to get the binary of a GLSL program and to reuse it latter on.
      This also allows to create an offline compiler tool which would allows more optimized GLSL program...
      It would be nice to be able to set the optimizations of-source with a finer granularity.
    </paragraph>
    <paragraph>
      To significantly decrease the compilation time of shaders, a good idea is to do the all the queries query after all the builds
      because querying the logs introduces a delay. We have to wait for the result of the query.
      Also, we certainly need logs... but maybe only when the use case is software development!
      An option as GCC '-quiet' might be really useful to speed up once more the build.
    </paragraph>
    <paragraph>
      Finally, compilers are far from perfect on the regard of following the GLSL specifications and at least for nVidia case,
      I don't even think they really want to follow it on a strict manner.
      My believe is that for nVidia, their compiler should be the GLSL specification and a set of extra-features.
      Is this bad? On the regard of cross platform development, yes and on this regard I prefer to develop on AMD platform.
      On the regard of inovation, no. For the best of these two worlds a simple compiler option like GCC '-pedantic'
      would simply around these two worlds to co-exist on every platforms.
    </paragraph>

    <title>5.2. Typedef in GLSL for qualifiers and more</title>
    <paragraph>
      Through its multiple versions, GLSL has significantly increased the number of qualifiers.
      All of them have a purpose but the syntax is complex and just so ugly.
      Why some qualifiers are part of the 'layout' and why some are outside? All this seems a bit messy.
    </paragraph>
    <code title="Possible declaration of a variable with various qualifiers in OpenGL 4.1...">
      <line>
        <keyword>layout</keyword>(<keyword>location</keyword> = FRONT_COLOR) <keyword>invariant centroid out highp vec3</keyword> Color;
      </line>
    </code>
    <paragraph>
      In C and C++ for that kind of scenarios (and actually for even simpler scenarios) we would use typedefs which is part of my wish.
      Also, GLSL defines an arbitrary order for the qualifiers...
      This is a really annoying choice because this order doesn't rely on anything logical beside hitorical reasons so I would like this
      arbitrary order limitation removed.
    </paragraph>
    <paragraph>
      Actually, I am not sure which way would be better: typedef or a qualifier keyword to declare variable qualifier.
      I see positive and negative conscequences for both.
    </paragraph>
    <code title="A qualifier for OpenGL 4.2?">
      <line>
        <keyword>qualifier layout</keyword>(<keyword>location</keyword> = FRONT_COLOR) <keyword>invariant centroid out highp </keyword> front_color;
      </line>
      <line>

      </line>
      <line>
        front_color <keyword>vec3 </keyword>Color;
      </line>
    </code>
    <code title="Typedef for OpenGL 4.2?">
      <line>
        <keyword>typedef layout</keyword>(<keyword>location</keyword> = FRONT_COLOR) <keyword>invariant centroid out highp vec3</keyword> front_color;
      </line>
      <line>

      </line>
      <line>
        front_color Color;
      </line>
    </code>

    <title>5.3. A 'common' shader target</title>
    <paragraph>
      With OpenGL and GLSL it's possible to create a program using multiple shaders.
      This is particulary nice to reuse functions, structures, defines and typedefs for different programs associates to the same program stages.
      Unfortunatly, it's still impossible with OpenGL 4.1 to use a single shader object for multiple stage:
      we need to duplicate shader libraries for each stage... even it the code is word for word identical! Not great.
      For example, I typically would like to reuse the same structure between input and output blocks between program stages.
    </paragraph>
    <code title="OpenGL 4.1, Vertex shader:">
      <line>
        <keyword>struct</keyword> vert
      </line>
      <line>
        {
      </line>
      <line align="32px">
        <keyword>vec3</keyword> Position;
      </line>
      <line align="32px">
        <keyword>vec3</keyword> Normal;
      </line>
      <line align="32px">
        <keyword>vec2</keyword> Texcoord;
      </line>
      <line align="32px">
        <keyword>vec4</keyword> Color;
      </line>
      <line>
        };
      </line>
      <line>

      </line>
      <line>
        <keyword>out</keyword> vert Vert;
      </line>
    </code>
    <code title="OpenGL 4.1, Fragment shader:">
      <line>
        <keyword>struct</keyword> vert
      </line>
      <line>
        {
      </line>
      <line align="32px">
        <keyword>vec3</keyword> Position;
      </line>
      <line align="32px">
        <keyword>vec3</keyword> Normal;
      </line>
      <line align="32px">
        <keyword>vec2</keyword> Texcoord;
      </line>
      <line align="32px">
        <keyword>vec4</keyword> Color;
      </line>
      <line>
        };
      </line>
      <line>

      </line>
      <line>
        in vert Vert;
      </line>
    </code>
    <paragraph>
      NOTE: The previous code doesn't build on nVidia drivers yet and I hope this drivers bug will be fixed soon.
    </paragraph>
    <paragraph>
      We can already do it ourself playing with strings but this is compiler/preprocessor/linker work, not us.
      Instead, I propose to create a 'common/library shader target'
      that could not contain a main function or any build-in variable or per-stage specific items but that could be reuse across program stages.
    </paragraph>
    <code title="OpenGL 4.2, Common shader?">
      <line>
        <keyword>struct</keyword> vert
      </line>
      <line>
        {
      </line>
      <line align="32px">
        <keyword>vec3</keyword> Position;
      </line>
      <line align="32px">
        <keyword>vec3</keyword> Normal;
      </line>
      <line align="32px">
        <keyword>vec2</keyword> Texcoord;
      </line>
      <line align="32px">
        <keyword>vec4</keyword> Color;
      </line>
      <line>
        };
      </line>
    </code>
    <code title="OpenGL 4.2, Vertex shader?">
      <line>
        <keyword>out</keyword> vert Vert;
      </line>
    </code>
    <code title="OpenGL 4.2, Fragment shader?">
      <line>
        <keyword>in</keyword> vert Vert;
      </line>
    </code>

    <title>5.4. Generalized 'rendezvous by resource' communication model (over 'by name')</title>
    <paragraph>
      With OpenGL 4.1 and the separate programs, OpenGL had to evolve to replace the old rendezvous by name approach
      that requires a long linking phase to connect the variables between stages checking strings.
      This evolustion has been possible thanks to the explicit location qualifier introduced by
      <codeword href="http://www.opengl.org/registry/specs/ARB/explicit_attrib_location.txt">GL_ARB_explicit_attrib_location</codeword>
      and generalized to varying variables.
    </paragraph>
    <paragraph>
      We are suposed to be able to set the locations of a varying structures since OpenGL 4.1 but it is still not supported by OpenGL drivers.
      I hope it's just a matter of time.
    </paragraph>
    <paragraph>
      I think that the generalization of the location should be extend further to uniform variables and uniform block (explicit index qualifier).
      On one side, it would improve the API consistency and in the other side it will improve software modularity and removing strings based queries.
    </paragraph>
    <paragraph>
      Finally, nVidia already has the funtion
      <codeword href="http://www.opengl.org/registry/specs/NV/transform_feedback.txt">glTransformFeedbackVaryingsNV</codeword>
      based on the 'rendezvous by resource' which is perfect for be promoted in the core specification.
    </paragraph>

    <title>5.5. Objects checks</title>
    <paragraph>
      I find on the OpenGL forum
      <link href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=282003#Post282003">an idea</link>
      that I find quite interesting: What about having the possibility to check if an OpenGL object is created correctly of if it is completed?
      This is something we already have with the framebuffer, shader, program and program pipeline objects by it could be generalized to other objects.
      It possible that this feature could be implemented as a function or maybe through a message of the
      <link href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">debug output extension</link>.
    </paragraph>

    <title>5.6. Drivers queries</title>
    <paragraph>
      Drivers have bugs and will always have some just like any other software and until no one better that humans keep writting them.
      When using OpenGL, we can check features using the OpenGL context version and also the extensions supported but this is not always enough.
      <link href="post-0321.html">It's not because the drivers report that a feature is supported that this feature will entirely work.</link>
      A common practice is to create a database of faulty drivers and to check the drivers version to warn the software users that the drivers have
      a bug that prevent the software to run properly and advice them to update his drivers with a newer version or a version
      we recommand because it has be specifically tested.
    </paragraph>
    <paragraph>
      Querying the drivers version (and release date?) could have all sort of uses and it would be great to have this possibility from the OpenGL API.
    </paragraph>
    <paragraph>
      These queries could be extend to the memory quantity, availability, GPU temperatures or even some indications of the GPU performances
      and a lot more following developer imagination.
      Some of these features are already exposed by the extensions
      <codeword href="http://www.opengl.org/registry/specs/ATI/meminfo.txt">GL_ATI_meminfo</codeword> and
      <codeword href="http://developer.download.nvidia.com/opengl/specs/GL_NVX_gpu_memory_info.txt">GL_NVX_gpu_memory_info</codeword>.
    </paragraph>

    <title>5.7. GL_ARB_gpu_association</title>
    <paragraph>
      I'm not a big fan of Crossfire and SLI technologies but still, using multiple GPUs is possible and
      can have some real use cases for research and very expensive computation scenarios.
      These possibilities are available for years through but the OpenGL support remains limited by vendor extensions:
      <codeword href="http://www.opengl.org/registry/specs/AMD/wgl_gpu_association.txt">WGL_AMD_gpu_association</codeword> and
      <codeword href="http://www.opengl.org/registry/specs/NV/gpu_affinity.txt">GL_NV_gpu_affinity</codeword>.
      It would be great to get an ARB extensions for this support.
    </paragraph>

    <title>6. Ideas for new OpenGL objects</title>

    <title>6.1. Decouple the Vertex Array Object into a Vertex layout object and Draw object</title>
    <paragraph>
      After debates over debates, I remain a VAO hater even if it's maybe not that bad for the performances.
      It's not bad for the performances but not really good either and it's a real pain on the software design side.
      VAOs doesn't make sense so that only a simple and stupid design based on a 1 VAO per draw call work fine... no thank you!
      VAO certainly looks pretty at first look but this might even makes it more awfull
      and in anyway it keeps for me the title of worse idea ever integrated to the OpenGL core specification.
    </paragraph>
    <paragraph>
      To leverage the software constrains of VAO,
      I suggest to update VAO or create an object that works like a vertex layout object, as the OpenGL community as always requested.
      This object would only describ the structure of the vertex to tell the GPU how to gather the vertex attributes but also
      how to output transform feedback varyings. This mean, it could be binded to multiple targets.
    </paragraph>
    <paragraph>
      This way, the API highlights the developers on an area of optimization,
      advice to sort the draw calls by vertex layouts and remains flexible
      as the array buffer would not be attach to this object providing an escential complete freedom for custom vertex data management.
      The nVidia bindless graphics already allows this type of approach but it's possible to design it without GPU pointers too.
    </paragraph>
    <paragraph>
      I am quite up for the GPU pointers but let's face it:
      In case of invalid access the drivers restart on Windows 7 and the computer simply freeze on Windows XP...
      It feels pretty hard to expect the ARB reaching an aggrement on this. What about having both? It would be my favorite option!
    </paragraph>
    <paragraph>
      With a lot of new version of OpenGL we get a new draw call function.
      In a way we could deprecated the previous functions after each new draw call function introduced.
      Considering this and the issues with the VAO object, I think that OpenGL would take advantage of a draw object.
      For each new draw parameter, a new draw object parameter would be created and we could keep the same draw function and expect default parameter values.
      If it sounds more likely to the OpenGL drivers teams, the draw object could work as a container.
    </paragraph>

    <title>6.2. Environment program object</title>
    <paragraph>
      With the pipeline program object I saw some opportunities for an environment program object design in an useful way.
      The environmnt program object is maybe the last promise of Long Peak that we didn't get yet.
    </paragraph>
    <paragraph>
      The idea behind a environment program object is to be able to group all the data that would be use by a program in a single memory location
      where the drivers would be able to setup how to access to those data.
      The environment program object is for the programs what the layout object would be for the 'vertex pulling'.
      For a succesfull environment program object, it is really important to keep it decoupled from the program objects and from the buffers.
      This is the only way to keep the level of flexibility we have today and prevent VAOs type of constrains.
      Uniform variables, would be directly set but uniform block would only hide its level of indirection.
    </paragraph>
    <code title="Concept idea for an environment program object">
      <line>
        glGenProgramEnvironments(1, ProgramEnvironment);
      </line>
      <line>
        glProgramEnvironmentUniform1i(ProgramEnvironment, 0);
      </line>
      <line>
        glProgramEnvironmentUniformMatrix4fv(ProgramEnvironment, UniformMVP, 1, GL_FALSE, &amp;MVP[0][0]);
      </line>
      <line>
        glProgramEnvironmentUniformSubroutine(ProgramEnvironment, UniformLighting, IndexLightingSchlick);
      </line>
      <line>
        glProgramEnvironmentUniformBlock(ProgramEnvironment, UniformMaterial, semantic::MATERIAL);
      </line>
      <line>
        glUseProgramEnvironment(ProgramPipeline, GL_VERTEX_SHADER_BIT | GL_FRAGMENT_SHADER_BIT, ProgramEnvironment);
      </line>
    </code>

    <title>6.3. Imutable Objects</title>
    <paragraph>
      Imutable objects are one of my very old request.
      For a long time, I liked to use the display list to build some static objects and be able to quicky switch from one object to another.
      Back at that time (2-3 years ago?), I mesure some interesting performance gains.
      It was convenient to use and it gave me a software design solution to handle the 'lost global states'.
      Unfortunatly, display list are deprecated since OpenGL 3.0 so that display list are not an option anymore
      even if my code usually still group the global states into C++ objects that matches my software design.
    </paragraph>
    <paragraph>
      Direct3D already has some objects for specific groupa of 'lost global states' but I am not sure if it's the right approach.
      I guess that these groups could be quite dependent of the hardware which would make hard to reach an aggrement,
      expect if OpenGL stricly follows Direct3D.
      Another idea is let the developer group the states the way he wants and let the drivers optimize the states group how they could.
      This is quite flexible but in practice I am not sure it the drivers would be able to perform a lot of optimizations.
      At least we could expect the level of efficiency that display list provides which is already great.
      One draw back is that developers could create imutable objects with a total non-sense and by conscence quite fair.
    </paragraph>
    <paragraph>
      On note: The idea of custom state object could probably come relly well together with the command list designed for multithreading.
    </paragraph>

    <title>7. The open topics</title>
    <paragraph>
      This part is dedicated to ideas that raise my attentions but
      in which I didn't put enough thoughts or just didn't gather enough clues and experiences to let me settle on any idea of where I think we need to go.
    </paragraph>

    <title>7.1. A second deprecation pass</title>
    <paragraph>
      This is maybe too soon but why not thinking to a second deprecation pass in the OpenGL API?
      I'm not saying removing feature yet but at least to mark some features as deprecated.
      For example the texture proxy... who is using this?
      Most of the draw call functions or all if we had a draw object.
      The renderbuffer which is only a subset of what we can do with textures.
      <codeword>glViewport</codeword>, <codeword>glClear</codeword>,
      <codeword>glClearColor</codeword> / <codeword>glClearStencil</codeword> / <codeword>glClearDepth</codeword>,
      all these functions that have alternatives.
      The only purpose of this deprecation pass would to simplify the API, to only keep the useful functions.
      I also think that deprecation should only be seen as an advice for what to use or not.
    </paragraph>

    <title>7.2. More API and specification coherency</title>
    <paragraph>
      API coherency is a long topic that requires much more research and time that what I unfortunately had for this wish-list.
      However, I think that many of my requests try to leverage some issues of consistency
      within OpenGL which today might makes OpenGL much harder to learn than Direct3D 11.
    </paragraph>
    <paragraph>
      For example, the varius rules that handles the ways to set uniform values, subroutines and
      blocks follows 3 totally differents set of rules... which in practice we will probably limite to the GCD of these 3 set of rules,
      something that my idea of the program environment object follows.
    </paragraph>
    <paragraph>
      Other example, when several 'slots' are used for a feature, we have all sort of post-fixes tokens: 'i', 'index', 'array'.
    </paragraph>
    <paragraph>
      The communication between program stages but also between GLSL and C++ programs are build on top of varisous ways that not obvisously works everywhere.
      The GLSL cast rules are quite awful and follows some specific rules where it would have been nicer and that already exist like the C++ rules
      or just keep the OpenGL 3.3 rule (explicit only).
    </paragraph>
    <paragraph>
      Some objects (texture, sampler, program) use parameter functions to setup their settings or
      other create a new functions for each new fonctionnality (draw call functions)...
    </paragraph>
    <paragraph>
      Some features works only on DSA (sampler, uniform blocks) when other rely on multiple targets (Buffer, framebuffer), some even
      provide both ways (program) and other uses multiple units (texture)...
    </paragraph>
    <paragraph>
      Some object names are reserved with <codeword>glGen*</codeword> but some use <codeword>glCreate*</codeword>
      and can only reserve one name instead of multiple with <codeword>glGen*</codeword>...
      and I could easly find more examples!
    </paragraph>
    <paragraph>
      I thing that the lack of consistency makes OpenGL a very complex API to work with especially because
      I believe in OpenGL everywhere for everything, including 'Paint' type of softwares which means that OpenGL must be usable by developers
      that doesn't have a specific skill in OpenGL or graphics rendering in general.
    </paragraph>
    <paragraph>
      The ARB has spoken about streamlining the OpenGL API when they created the core profile and I think even during Long Peak development.
      I don't think that removing features has anything to do with streamlining an API, it has to do with bringing more sense into the API,
      each element with each element but unfortunatly during the past few years we have assisted to the exact opposit of streamlining...
      I believe that a streamlined API is what has made OpenGL a backward comptible API for years and
      what I have affraid is that in the future OpenGL becomes so complex and
      irationalized that it would be too complex to evolve and to work with. What if it's already the case?
    </paragraph>
    <paragraph>
      One thing I am not interest at all is to add some functions that does nothing but being pretty.
      I think that <codeword href="http://www.opengl.org/registry/specs/AMD/name_gen_delete.txt">GL_AMD_name_gen_delete</codeword>
      is one of those extensions that doesn't lead to anything new even if the concept remain interesting.
      Large APIs == More complex API by definition.
      This extension formally defines the concept of named object and concequently it opens doors for others approaches.
      Why not intoducing a pointed object or some sort pointer based object access?
      It has been an old topic within the ARB but I don't see why these 2 conventions shouldn't co-exist if it's generalized to every objects.
    </paragraph>
    <paragraph>
      In this extension or actually in an extended version of this extension,
      I also imagine a way to standardize the way named objects would be binded but also a way to create several objects of different types.
    </paragraph>
    <code title="Unified bind function for named objects:">
      <line>
        <keyword>void</keyword> glBindName(GLenum Identifier, GLenum Slot, GLenum Target, GLuint name);
      </line>
    </code>
    <code title="Macro objects:">
      <line>
        <keyword>void</keyword> glGenNames(GLsizei Size, <keyword>const</keyword> GLenum * Identifier, <keyword>const</keyword> GLuint * name);
      </line>
      <line>
        <keyword>void</keyword> glBindNames(GLsizei Size, <keyword>const</keyword> GLenum * Identifier, <keyword>const</keyword> GLenum * Slot, <keyword>const</keyword> GLenum * Target, <keyword>const</keyword> GLuint * name);
      </line>
    </code>
    <paragraph>
      The purpose of these lasr functions would be for the developer to create some objects that uses severales objects and that are live and are used together.
      It could give a hint to the drivers to hopefully provide some optimizations.
    </paragraph>

    <title>7.3. Object orientation on GPU</title>
    <paragraph>
      With all the possibilities provided by OpenGL 4 hardware, the programming freedom given by this generation of hardware,
      an OpenGL programer could wish to be able to program on the GPU like he would on the CPU: A wish for object orientation.
      So far OpenGL and OpenCL has stay out of it because of design decisions.
      Meanwhile, HLSL11 and Cuda have embrace it at different levels.
    </paragraph>
    <paragraph>
      On one side, Direct3D 11 brings the keyword '<codeword>class</codeword>' to the language.
      On other side, Cuda brings some sort of C++ support as part of its language.
      I don't know the details on how this is actually possible but it is certainly impressive and
      it raises to me a question: do we want object orientation in OpenGL and OpenCL through C++?
    </paragraph>
    <paragraph>
      Some differences from Cuda to OpenCL are that Cuda is based on an offline compiler and Cuda is platform specific.
      Like Walter Bright shows in his <link href="http://www.drdobbs.com/blog/archives/2010/08/c_compilation_s.html">article on speed of C++</link>,
      the language is show to compile by nature.
      I don't know on what is based the Cuda compiler but as the language is build on top of C++,
      I assume that Cuda compilation is really slow even if it based on the very impressive <link href="http://llvm.org/">LLVM</link>.
      However, even if this compiler is slow,
      it's an offine compiler and at the program execution it doesn't need to be build again.
      This is only possible because Cuda is platform specific which means that it is only going to run on nVidia drivers and hardware.
    </paragraph>
    <paragraph>
      With OpenGL 4.1 we finally have the possibility to get the binary of a GLSL program.
      I am quite skepical about this feature as building GLSL programs is really fast (compare to C++ program) and in anyway these binaries can
      only be used for a cache system because there is no standard binary defined.
    </paragraph>
    <paragraph>
      Thus using an offline compiler is complicated which leads to forget about the idea of using C++ instead of GLSL or the OpenCL language,
      unless the ARB decides to sit around the table to define a standard binary... for nothing sooner than OpenGL 5 hardware.
    </paragraph>
    <paragraph>
      This brings us to an alternative, that D3D11 probably uses, a semi-compiled language that
      AMD and nVidia would transcode into their own OpenGL 4 hardware binary codes.
    </paragraph>
    <paragraph>
      A standard binary code even open doors for alternative languages other than C++.
      C++ programers might have fun to programer the GPU with C++ but I can't imagine it would make happy C#, Java, Python programers.
      Furthermore, nothing prevents GLSL programs to be built into this standard GPU binary code.
      Other side effects could be some open source works to bring GPU binary support in GCC and LLVM for example.
      It might become an ongoing topic in the future and I am already impastient to read what people want and think about it!
    </paragraph>

    <title>Summary</title>

    <list>
      <list-element>1. Direct state access</list-element>
      <list-element>2. Multithreaded rendering using command lists</list-element>
      <list-element>3.1. Image and buffer load and store</list-element>
      <list-element>3.2. UAV buffer / Linked list</list-element>
      <list-element>3.3. Custom structure (POD) fetches</list-element>
      <list-element>3.4. On GPU image copy (GL_NV_copy_image)</list-element>
      <list-element>3.5. Improved transform feedback storage types</list-element>
      <list-element>4.1. Shared uniform buffer across uniform block array for per-instance data</list-element>
      <list-element>4.2. Layered rendering on mipmap chain or layers of different sizes</list-element>
      <list-element>4.3. Removed sampler array limitation</list-element>
      <list-element>4.4. Input vertex shader and output fragment shader blocks</list-element>
      <list-element>4.5. Program pipeline object for DSA</list-element>
      <list-element>5.1. Compiler options and preprocessor definisions</list-element>
      <list-element>5.2. Typedef in GLSL for qualifiers and more</list-element>
      <list-element>5.3. A 'common' shader target</list-element>
      <list-element>5.4. Generalized "by resource" communication model (over "by name")</list-element>
      <list-element>5.5. Objects checks</list-element>
      <list-element>5.6. Drivers queries</list-element>
      <list-element>5.7. GL_ARB_gpu_association</list-element>
      <list-element>6.1. Decouple the Vertex Array Object into a Vertex layout object and Draw object</list-element>
      <list-element>6.2. Environment program object</list-element>
      <list-element>6.3. Imutable Objects</list-element>
    </list>
    <paragraph>
      OpenGL is like all these interesting topics, the more we think about it the more we could find ideas and
      I bet that in next months I will find more new ideas or refinements.
      In anyway, with all this, who could still dare to say that OpenGL is 'nearly completed'? :p
      What about all the work required as part of the OpenGL ecosystem?
    </paragraph>
    <paragraph>
      I'm not use to it on this website but I would like to give a special thanks to all the people
      who gives the energy for my endeavor and the ones with whom I shared blossoming OpenGL discussions with
      but also AMD and nVidia OpenGL teams for their supports which allows me to touch the OpenGL state of the art and beyond.
    </paragraph>
  </post>

  <post index="0329" date="14/09/2010" std-date="2010-09-14T20:00:00.00Z" title="Down">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Down">
      <summary>London 2010</summary>
      <fullscreen>http://picasaweb.google.co.uk/groovounet/Down#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5436417043739940337%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="http://lh6.ggpht.com/_bpz9rGNwhX4/S3IIruXthYI/AAAAAAAAGJc/ViS3InXc3ig/s144/261.JPG"
        pic288="http://lh6.ggpht.com/_bpz9rGNwhX4/S3IIruXthYI/AAAAAAAAGJc/ViS3InXc3ig/s288/261.JPG"
        pic400="http://lh6.ggpht.com/_bpz9rGNwhX4/S3IIruXthYI/AAAAAAAAGJc/ViS3InXc3ig/s400/261.JPG"
        pic800="http://lh6.ggpht.com/_bpz9rGNwhX4/S3IIruXthYI/AAAAAAAAGJc/ViS3InXc3ig/s800/261.JPG" />
    </album>
    <paragraph>
      This series comes from this very particular topic I enjoy: Sense of observation.
      I don't expect to raise any intellectual value or any emotional value that most photographers acknowledge.
    </paragraph>
    <paragraph>
      Actually, I tried to avoid those values reaching a level of abstraction to leave the observers with the simple miracle of vision.
    </paragraph>
    <paragraph>
      To be enjoy for nothing but itself: Curves, colors, shades, frequencies, patterns and hopefully a lot of concepts,
      abstracted and personal enough to be relieve of any proper word to be sticked to.
    </paragraph>
    <image
      img="http://lh6.ggpht.com/_bpz9rGNwhX4/S3IIruXthYI/AAAAAAAAGJc/ViS3InXc3ig/s800/261.JPG"
      href="http://lh6.ggpht.com/_bpz9rGNwhX4/S3IIruXthYI/AAAAAAAAGJc/ViS3InXc3ig/s800/261.JPG" />
    <image
      img="http://lh4.ggpht.com/_bpz9rGNwhX4/S3IIhMOhtsI/AAAAAAAAGI8/MECShBaFVBE/s800/224.JPG"
      href="http://lh4.ggpht.com/_bpz9rGNwhX4/S3IIhMOhtsI/AAAAAAAAGI8/MECShBaFVBE/s800/224.JPG" />
    <image
      img="http://lh6.ggpht.com/_bpz9rGNwhX4/S3IItudJlaI/AAAAAAAAGJg/8az2MgbR6Fs/s800/266.JPG"
      href="http://lh6.ggpht.com/_bpz9rGNwhX4/S3IItudJlaI/AAAAAAAAGJg/8az2MgbR6Fs/s800/266.JPG" />
    <image
      img="http://lh5.ggpht.com/_bpz9rGNwhX4/S3IIlB3KI1I/AAAAAAAAGbs/_RadljkO1B0/s800/235.JPG"
      href="http://lh5.ggpht.com/_bpz9rGNwhX4/S3IIlB3KI1I/AAAAAAAAGbs/_RadljkO1B0/s800/235.JPG" />
    <image
       img="http://lh5.ggpht.com/_bpz9rGNwhX4/S3IIoCJq2iI/AAAAAAAAGbg/88Z3C0FbqyY/s800/244.JPG"
       href="http://lh5.ggpht.com/_bpz9rGNwhX4/S3IIoCJq2iI/AAAAAAAAGbg/88Z3C0FbqyY/s800/244.JPG" />
    <source-list>
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/Down#" title="Down" />
    </source-list>
  </post>

  <post index="0328" date="09/09/2010" std-date="2010-09-09T23:30:00.00Z" title="Piranha 0.9.3.0 released">
    <meta>
      <tag>gtc-tech-project-piranha</tag>
    </meta>

    <paragraph>
      Piranha is a little slice of history for me as it is the first project I wrote that used GLSL through the first nVidia beta drivers
      that supported it almost 6 years ago!
    </paragraph>

    <paragraph>
      Back then I use to support a lot of IDE and compilers and even Linux... but after 6 years I don't use any of these softwares anymore.
      Moreover, the GLSL beta drivers were quite a wrapper on top of Cg and not conform at all.
    </paragraph>

    <paragraph>
      Considering the emotional value I have for this project, I built a new Visual Studio 2008 project fixed few C++ and GLSL things and manage to have it running once more time. :)
    </paragraph>

    <image-list>
      <image-element title="Screenshot" small="./post/0328-01-small.jpg" normal="./post/0328-01.jpg" />
      <image-element title="Screenshot" small="./post/0328-02-small.jpg" normal="./post/0328-02.jpg" />
      <image-element title="Screenshot" small="./post/0328-04-small.jpg" normal="./post/0328-04.jpg" />
      <image-element title="Screenshot" small="./post/0328-05-small.jpg" normal="./post/0328-05.jpg" />
      <image-element title="Screenshot" small="./post/0328-06-small.jpg" normal="./post/0328-06.jpg" />
      <image-element title="Screenshot" small="./post/0328-07-small.jpg" normal="./post/0328-07.jpg" />
      <image-element title="Screenshot" small="./post/0328-08-small.jpg" normal="./post/0328-08.jpg" />
      <image-element title="Screenshot" small="./post/0328-10-small.jpg" normal="./post/0328-10.jpg" />
      <image-element title="Screenshot" small="./post/0328-11-small.jpg" normal="./post/0328-11.jpg" />
      <image-element title="Screenshot" small="./post/0328-12-small.jpg" normal="./post/0328-12.jpg" />
    </image-list>

    <source-list>
      <source-download type="Download" index="1046" />
    </source-list>
  </post>

  <post index="0327" date="07/09/2010" std-date="2010-09-07T08:30:00.00Z" title="GLI 0.2.2.1 released">
    <meta>
      <tag>gtc-tech-project-gli</tag>
    </meta>

    <paragraph>
      At the OpenGL BOF at Siggraph 2010, the Khronos Group announced <link href="http://www.khronos.org/opengles/sdk/tools/KTX">KTX</link>,
      an image library to load texture for OpenGL.
      It brought me a lot of expectations followed by my usual scepticism. Unfortunately after a closer look,
      I find it pretty useless and I'll rather stick to my personal image library <link href="project-0024.html">OpenGL Image (GLI)</link>.
      Despite its lack of features, it fills 80% of my needs!
    </paragraph>

    <paragraph>
      I hope <link href="http://www.khronos.org/opengles/sdk/tools/KTX">KTX</link> gets better but until then,
      I have just release <link href="project-0024.html">GLI</link> 0.2.2.1 which trivially adds a DDS exporter.
      So far, it doesn't do any convertions or compressions or decompressions so that an image loaded
      from a DDS RGB8 files can be save as DDS RGB8 but not as a DDS DXT1 for example.
    </paragraph>

    <paragraph>
      As part of my new development process, now GLI has its own
      <link href="https://sourceforge.net/projects/ogl-image">SourceForge.net page</link>, its own
      <link href="http://ogl-image.git.sourceforge.net/git/gitweb.cgi?p=ogl-image/ogl-image;a=summary">Git repository</link> and
      <link href="https://sourceforge.net/apps/trac/ogl-image/newticket">bug tracker</link>.
    </paragraph>

    <paragraph>
      I still have lot of plans for this project, I just need to find some more time to work on it...
    </paragraph>

    <source-list>
      <source-download type="Download" index="1045" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-image/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0326" date="05/09/2010" std-date="2010-09-05T23:30:00.00Z" title="Sally Mann at the Photographers' Gallery of London">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <paragraph>
      During the past 2 years, I think I haven't missed any exhibition as The Photographers' Gallery as
      I always end-up to be around at some point and it is free so that i just get in and see what's on.
    </paragraph>
    <paragraph>
      Unfortunately in this time, I never been blow away by an outstanding exhibition,
      even tough it's going from classic photgraphy to comptemporary art until last Saturday when I saw the last exhibition "The Family and the Land"
      by <link href="http://en.wikipedia.org/wiki/Sally_Mann">Sally Mann</link>, her first exhibition in the UK.
    </paragraph>
    <paragraph>
      Sally Mann is an american photographer who is working is focusing on her family and the landscape.
      Does it sound boring? Maybe. However, her vision of this topic is as this twist that brings the photograph to what I call true beauty,
      I daring vision which stimulated controversy in the late 80s.
    </paragraph>
    <paragraph>
      I enjoyed a lot of element of this exhibition. First of all the photogrqphic series which have been perfectly enhanced by a great display.
      As a big fan of the creation process, I also particulary enjoy the video displyed on a dedicated room which really show how she works,
      how her work has evoled across the years but also from where she comes from as a human being.
    </paragraph>
    <paragraph>
      This amazing exhibition is runing until the 19th September 2010 for free.
    </paragraph>
    <image img="./post/0326-5.jpg" href="./post/0326-5.jpg" title="Virginia 42, Sally Mann, 2004" />
    <image img="./post/0326-3.jpg" href="./post/0326-3.jpg" title="Swamp Bones, Sally Mann, 1996" />
    <image img="./post/0326-6.jpg" href="./post/0326-6.jpg" title="Scarred Tree, Sally Mann, 1996" />
    <image img="./post/0326-1.jpg" href="./post/0326-1.jpg" title="Candy Cigarette, Sally Mann, 1989" />
    <image img="./post/0326-4.jpg" href="./post/0326-4.jpg" title="The rehearsal place, Sally Mann, 1989" />
    <image img="./post/0326-2.jpg" href="./post/0326-2.jpg" title="Damaged Child, Sally Mann, 1984" />
    <source-list>
      <source-element type="Link" href="http://www.photonet.org.uk/index.php?pxid=964" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0325" date="01/09/2010" std-date="2010-09-01T01:30:00.00Z" title="Ovt'sa 1.2.0.0 released">
    <meta>
      <tag>gtc-tech-project-ovtsa</tag>
    </meta>
    <paragraph>
      5 years later... I gave a name to my simple raytracer! This is actually due to the upgrade of the project to my current development process.
      I need a Git repository for it which implies a SF.net project... so let gives it a great name!
    </paragraph>
    <paragraph>
      Ovt'sa is the russian word for 'Sheep'. I guess everyone will appreciate that it is an obvious and perfect name for a raytracer!
    </paragraph>
    <paragraph>
      The project uses CMake and will build on Visual Studio 2005, 2008, 2010 and GCC 4.5.0.
      Over <link href="post-0254.html">version 1.1</link>, this is just a minor update.
    </paragraph>
    <image img="./post/0254-2.jpg" href="./post/0254-2-large.jpg" />
    <source-list>
      <source-download index="1044" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ovtsa/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0324" date="28/08/2010" std-date="2010-08-28T23:30:00.00Z" title="OpenGL Samples Pack 4.1.1.1 released (updated)">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack 4.1.1.0 is released with new samples
      which mainly features several layered rendering samples for OpenGL 3.3, 4.0 and 4.1.
    </paragraph>
    <paragraph>
      I have also added an OpenGL 4.0 sample for dynamic sampler arrays, uniform buffers and renamed some samples for consistency with OpenGL.
    </paragraph>
    <paragraph>
      This release contains 73 samples for Visual Studio 9/10 - 32/64 bits thanks to
      <link href="http://www.cmake.org/cmake/resources/software.html">CMake</link>.
    </paragraph>
    <title>Updated</title>
    <paragraph>
      Version 4.1.1.0 has a build problem with GLEW that has been fixed.
    </paragraph>
    <source-download index="1043" />
    <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
  </post>

  <post index="0323" date="27/08/2010" std-date="2010-08-27T23:30:00.00Z" title="Birth of Impressionism at San Francisco's de Young">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <paragraph>
      After a series of modern and comtemporary museum visits, I felt really inspired by some good old-fashion French art
      through an exhibition at the <link href="http://deyoung.famsf.org">de Young Museum</link>,
      <link href="http://orsay.famsf.org/">Birth of Impressionism: Masterpieces from the Musée d'Orsay</link>.
    </paragraph>
    <paragraph>
      Taking place in a time with strong rules of academic painting, the Impressionists were independent Paris-based artists whose group exhibitions brought them to prominence.
    </paragraph>
    <paragraph>
      A refreshing and informative exhibition discently displayed for the pleasure of the eyes and the soul.
    </paragraph>
    <paragraph>
      The Birth of Impressionism exhibition is running until the September 6, 2010 for $20 and I advice the audio guide.
      As a preview, have a look at the following pictures of some of the masterpieces display in this exhibition.
    </paragraph>
    <image img="./post/0323-1871-small.jpg" href="./post/0323-1871-small.jpg" title="Enigma, Gustave Doré, 1871" />
    <image img="./post/0323-1875-small.jpg" href="./post/0323-1875-small.jpg" title="The Floor Secrapers, Gustave Caillebotte, 1875" />
    <image img="./post/0323-1876-small.jpg" href="./post/0323-1876-small.jpg" title="The Swing, Pierre Auguste Renoir, 1876" />
    <image img="./post/0323-1878-small.jpg" href="./post/0323-1878-small.jpg" title="Rue Montorgueil, Claude Monet, 1878" />
    <image img="./post/0323-1880-small.jpg" href="./post/0323-1880-small.jpg" title="Galatée, Gustave Moreau, 1880" />
    <image img="./post/0323-1881-small.jpg" href="./post/0323-1881-small.jpg" title="Algerian Landscape - The Ravine of the wild women, Pierre Auguste Renoir, 1881" />
    <source-list>
      <source-element type="Link" href="http://orsay.famsf.org/" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0322" date="26/08/2010" std-date="2010-08-26T08:30:00.00Z" title="GLM 0.9.0.3 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      GLM 0.9.0.3 is a revision that fixes various problems on non-squared matrices.
    </paragraph>
    <source-list>
      <source-download index="1041" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0321" date="22/08/2010" std-date="2010-08-22T23:30:00.00Z" title="OpenGL Samples Pack 4.1.0.0 released">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      The OpenGL Samples Pack 4.1.0.0 is available. As the version indicated it, this release includes some OpenGL 4.1 samples for a total of 68 OpenGL samples.
    </paragraph>
    <paragraph>
      The OpenGL 4.1 has been written upon nVidia beta drivers 259.31 and thus they should be considered as beta samples.
    </paragraph>
    <paragraph>
      I have explored the separate programs, the new viewports, the debug output, the extended 64 bits capabilities and the new varying locations. There are also some new samples for OpenGL 4.0 and 3.3.
    </paragraph>
    <paragraph>
      Also nVidia drivers behave very badly with blocks so I decided not to use them most of the time and instead build a dedicated samples to point out the problem.
      On other side, it's quite surprizing that nVidia has already fixed some of the bugs I have reported in thir second OpenGL 4.1 beta drivers released and I guess we are going see soon improvements for their OpenGL 4.1 support.
    </paragraph>
    <table>
      <table-title>
        <table-title-element>Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 10.7 beta</table-title-element>
        <table-title-element>nVidia Forceware 259.31 beta</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-binary</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-tessellation</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Geometry input block unsupported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-primitive-instanced</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Exception during compilation</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-debug-output</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="green">Only return glGetError</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-fbo-viewport</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">gl_ViewportIndex unsupported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="orange">ARB GLSL function instead of core GLSL function</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="red">Draw calls ignored, double not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-varying-blocks</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">No full support for user-defined blocks</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Unexpected warning</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-uniform</table-entry-element>
        <table-entry-element color="red">Unsupported block array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-texture-rgb</table-entry-element>
        <table-entry-element color="red">RGB32 TBO fetch not correct</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-query-conditional</table-entry-element>
        <table-entry-element color="black">Can freeze the system! Oo</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>
    <paragraph>

    </paragraph>
    <source-download index="1040" />
    <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Report a bug or submit a request"/>
  </post>

  <post index="0320" date="18/08/2010" std-date="2010-08-18T23:30:00.00Z" title="OpenGL 4.1 review">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
      <tag>gtc-tech-project-openglreviews</tag>
    </meta>

    <paragraph>
      In this article we are going to have a closer look at OpenGL 4.1 and the new extensions that come along with its release.
    </paragraph>

    <title>The proper OpenGL 4 hardware features: double float vertex attributes and operations precision</title>
    <paragraph>
      OpenGL 4.1 includes the new extension called <codeword href="http://www.opengl.org/registry/specs/ARB/vertex_attrib_64bit.txt">GL_ARB_vertex_attrib_64bit"</codeword>
      which trivially adds support for double precision floating point scalars and vectors for the vertex attributes.
      OpenGL already provides such support but usually the double values are converted to single precision floating point values. This extension ensures that this precision will be kept.
      An important detail is that double attribute can consume more than one location which will have some consequences in the software design.
      This behaviour isn’t new as <codeword href="http://www.opengl.org/registry/specs/ARB/gpu_shader_fp64.txt">GL_ARB_gpu_shader_fp64</codeword> introduced it for double uniforms.
    </paragraph>
    <paragraph>
      OpenGL 4.1 also integrates <codeword href="http://www.opengl.org/registry/specs/ARB/shader_precision.txt">GL_ARB_shader_precision</codeword>
      which is the first extension that defines no value, API functions nor GLSL functions.
      It simply clarifies the accuracy of various GLSL functions.
    </paragraph>

    <list name="List of the precision details where ULP is 'units in the last place':">
      <list-element>a+b, a-b, a*b: correctly rounded</list-element>
      <list-element>&lt;, =&lt;, ==, >, >=: correct result</list-element>
      <list-element>a/b, 1.0/b: &lt;= 2.5 ULP</list-element>
      <list-element>a*b+c: correctly rounded single operation or sequence of two correctly rounded operations</list-element>
      <list-element>fma(): same as a*b+c</list-element>
      <list-element>pow: &lt;= 16 ULP</list-element>
      <list-element>exp, exp2: &lt;= 3 ULP</list-element>
      <list-element>log, log2: &lt;= 3 ULP</list-element>
      <list-element>sqrt: &lt;= 3 ULP</list-element>
      <list-element>inversesqrt: &lt;= 2 ULP</list-element>
      <list-element>conversions: correctly rounded</list-element>
    </list>

    <paragraph>
      All in all the proper OpenGL 4 hardware features are quite minors unlike <link href="./post-0282.html">what I was expecting</link> but
      it provides much more interesting features which would actually work on OpenGL 2.1 and OpenGL 3 hardware.
    </paragraph>

    <title>
      A new development area through OpenGL debugging (<codeword href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">GL_ARB_debug_output</codeword>)
    </title>
    <paragraph>
      OpenGL 4.1 comes along with a new ARB extension which is just so great that I want to speak about it first:
      With <codeword href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">GL_ARB_debug_output</codeword>,
      the ARB has finally shows some mercy for us OpenGL developers by providing a more advanced mechanism based on callbacks than <codeword>glGetError</codeword> for debugging.
      This extension brings a new era for OpenGL!
    </paragraph>
    <paragraph>
      <codeword href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">GL_ARB_debug_output</codeword>
      is an extension only and will probably stay as an extension as the ARB thought it is just good for developers,
      leaving the possibility of user of OpenGL applications to not have such feature.
      This may imply 2 types of OpenGL drivers in the future, one for developers and one for users.
      This is an interesting idea even if I actually see in the debug output capabilities, a way to generate a crash dump.
    </paragraph>
    <paragraph>
      This extension is supported by nVidia drivers and through <codeword href="http://www.opengl.org/registry/specs/AMD/debug_output.txt">GL_AMD_debug_output</codeword> on AMD drivers.
      For this extension "supported" doesn't mean much because it could just return the <codeword>glGetError</codeword>
      but we can also imagine more accurate messages so that it will be the reponsability of AMD and nVidia to make the best of this extension on a long term development process.
    </paragraph>

    <code title="Catch all errors without distinction:">
      <line>
        glDebugMessageControlARB(GL_DONT_CARE, GL_DONT_CARE, GL_DONT_CARE, 0, NULL, GL_TRUE);
      </line>
      <line>
        glDebugMessageCallbackARB(&amp;glf::debugOutput, NULL);
      </line>
    </code>

    <title>
      Separate program object (<codeword href="http://www.opengl.org/registry/specs/ARB/separate_shader_objects.txt">GL_ARB_separate_program_objects</codeword>)
    </title>
    <paragraph>
      As part of OpenGL 4.1 core, <codeword href="http://www.opengl.org/registry/specs/ARB/separate_shader_objects.txt">GL_ARB_separate_program_objects</codeword>
      is another welcome feature expected from a long time and quite successful in it's approach.
    </paragraph>
    <paragraph>
      It allows to independently use shader stages without changing others shader stages.
      I see two mains reasons for it: Direct3D, Cg and even the old OpenGL ARB program does it but more importantly it brings some software design flexibilities allowing to see the graphics pipeline at a lower granularity.
      For example, my best enemy the VAO, is a container object that links buffer data, vertex layout data and GLSL program input data.
      Without a dedicated software design, this means that when I change the material of an object (a new fragment shader), I need different VAO...
      It's fortunately possible to keep the same VAO and only change the program by defining a convention on how to communicate between the C++ program and the GLSL program.
      It works well even if some drawbacks remains.
    </paragraph>
    <paragraph>
      With the separate programs, the fragment shader and vertex shader stages can be independant so that we are free to change the fragment program without touching the VAO. Finally!
      It's incredible all the conscequences of an awfully designed API (VAOs)!
    </paragraph>
    <paragraph>
      So just like Direct3D, OpenGL support separate programs but actually and we should get use to it, OpenGL outperform the Direct3D design.
      We have had a single program for ages for some reasons:
      the resource by name convention that requires a linking step across stages but also because it allows some effective compiler optimizations.
      From those, the one I rank number 1 discards all the unused varying variables...
      This consideration has an impact on the design decision of the extension.
    </paragraph>
    <paragraph>
      <codeword href="http://www.opengl.org/registry/specs/ARB/separate_shader_objects.txt">GL_ARB_separate_program_objects</codeword> is a superset of
      <codeword href="http://www.opengl.org/registry/specs/EXT/separate_shader_objects.txt">GL_EXT_separate_program_objects</codeword> extension including just the right improvements to transform a
      badly design extension to a great extension.
      With the ARB version, a new object called <bold>pipeline program object</bold> is used to attach multiple programs.
      Also, it's possible to communicate between stages using user-defined variables instead of the deprecated varying variables...
      GLSL programs can contained multiple shader stages so that multiple stages can be linked and optimized all together.
      Chances are that vertex, control and evaluation shaders will be design to be use all together and conscenquently we can apply some extra optimizations by linking them.
      Finally, <codeword href="http://www.opengl.org/registry/specs/ARB/separate_shader_objects.txt">GL_ARB_separate_program_objects</codeword>
      defines direct state access functions <codeword>glProgramUniform*</codeword> for all the <codeword>glUniform*</codeword> functions!
    </paragraph>

    <code title="Create and setup a pipeline program object:">
      <line>
        glGenProgramPipelines(1, &amp;PipelineName);
      </line>
      <line>
        glBindProgramPipeline(PipelineName);
      </line>
      <line>
        glUseProgramStages(PipelineName, GL_VERTEX_SHADER_BIT, ProgramName[program::VERTEX]);
      </line>
      <line>
        glUseProgramStages(PipelineName, GL_FRAGMENT_SHADER_BIT, ProgramName[program::FRAGMENT]);
      </line>
    </code>

    <code title="Vertex shader with explicit varying locations:">
      <line>
        <keyword>#version</keyword> 410 core
      </line>
      <line>

      </line>

      <line>
        <comment>// Declare all the semantics</comment>
      </line>
      <line>
        <keyword>#define</keyword> ATTR_POSITION	0
      </line>
      <line>
        <keyword>#define</keyword> ATTR_TEXCOORD	4
      </line>
      <line>
        <keyword>#define</keyword> VERT_TEXCOORD	4
      </line>
      <line>
        <keyword>#define</keyword> FRAG_COLOR		0
      </line>
      <line>

      </line>

      <line>
        <keyword>uniform mat4</keyword> MVP;
      </line>
      <line>

      </line>

      <line>
        <keyword>layout</keyword>(<keyword>location</keyword> = ATTR_POSITION) <keyword>in vec2</keyword> Position;
      </line>
      <line>
        <keyword>layout</keyword>(<keyword>location</keyword> = ATTR_TEXCOORD) <keyword>in vec2</keyword> Texcoord;
      </line>
      <line>
        <keyword>layout</keyword>(<keyword>location</keyword> = VERT_TEXCOORD) <keyword>out vec2</keyword> VertTexcoord;
      </line>
      <line>

      </line>

      <line>
        <keyword>void</keyword> main()
      </line>
      <line>
        {
      </line>
      <line align="32px">
        gl_Position = MVP * <keyword>vec4</keyword>(Position, 0.0, 1.0);
      </line>
      <line align="32px">
        VertTexcoord = Texcoord;
      </line>
      <line>
        }
      </line>
    </code>

    <code title="Fragment shader with explicit varying locations:">
      <line>
        <keyword>#version</keyword> 410 core
      </line>
      <line>

      </line>

      <line>
        <comment>// Declare all the semantics</comment>
      </line>
      <line>
        <keyword>#define</keyword> ATTR_POSITION	0
      </line>
      <line>
        <keyword>#define</keyword> ATTR_TEXCOORD	4
      </line>
      <line>
        <keyword>#define</keyword> VERT_TEXCOORD	4
      </line>
      <line>
        <keyword>#define</keyword> FRAG_COLOR		0
      </line>
      <line>

      </line>

      <line>
        <keyword>uniform sampler2D</keyword> Diffuse;
      </line>

      <line>
        <keyword>layout</keyword>(<keyword>location</keyword> = ATTR_TEXCOORD) <keyword>in vec2</keyword> Texcoord;
      </line>
      <line>
        <keyword>layout</keyword>(<keyword>location</keyword> = FRAG_COLOR, <keyword>index</keyword> = 0) <keyword>out vec4</keyword> FragColor;
      </line>
      <line>

      </line>

      <line>
        <keyword>void</keyword> main()
      </line>
      <line>
        {
      </line>
      <line align="32px">
        FragColor = texture(Diffuse, Texcoord);
      </line>
      <line>
        }
      </line>
    </code>

    <title>
      GLSL program binary (<codeword href="http://www.opengl.org/registry/specs/ARB/get_program_binary.txt">GL_ARB_get_program_binary</codeword>)
    </title>
    <paragraph>
      Another feature we have been waiting for a long time: Program binaries.
      I must say, this is one topic I haven't followed closely nor thought about it but for what I have understood,
      the capabilities of loading and saving GLSL binaries provided by <codeword href="http://www.opengl.org/registry/specs/ARB/get_program_binary.txt">GL_ARB_get_program_binary</codeword>
      and OpenGL 4.1 is just a subset of the wishes out there.
    </paragraph>
    <paragraph>
      I'm not sure about how useful this is. This extension comes from the OpenGL ES extensions
      <codeword href="http://www.khronos.org/registry/gles/extensions/OES/OES_get_program_binary.txt">GL_OES_get_program_binary</codeword>
      with a subtle change which favour the retrivable of the program binary after being used or at the end of the program... and here is my problem.
      A GLSL program is sometime rebuild considering the states context so that there are effectively several different binaries per program.
      What actually involves a linking of the program? This is fairly undocumented so far but I have high expectation from
      <codeword href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">GL_ARB_debug_output</codeword> for that regard.

    </paragraph>
    <paragraph>
      The goal is not to be able to release a software without the GLSL source.
      A GLSL binary is platform dependant and loading a GLSL binary might fail which involves GLSL sources rebuild.
      We might see some standard binary formats in the future but so far there is nothing in the OpenGL world.
      However, binary formats has been present on the OpenGL ES world for a while and many propritary extensions have been released:
      <codeword href="http://www.khronos.org/registry/gles/extensions/AMD/AMD_program_binary_Z400.txt">GL_AMD_program_binary_Z400</codeword>,
      <codeword href="http://www.khronos.org/registry/gles/extensions/IMG/IMG_program_binary.txt">GL_IMG_program_binary</codeword>,
      <codeword href="http://www.khronos.org/registry/gles/extensions/ARM/ARM_mali_shader_binary.txt">GL_ARM_mali_shader_binary</codeword>.
    </paragraph>
    <paragraph>
      Conscequently, the program binary is just a cache system for GLSL binaries...
      It is really going to make the loading significantly faster? I have some doubt about it.
    </paragraph>

    <title>
      Multiple viewport (<codeword href="http://www.opengl.org/registry/specs/ARB/viewport_array.txt">GL_ARB_viewport_array</codeword>)
    </title>
    <paragraph>
      One difference from Direct3D and OpenGL is that OpenGL allows multiple rendertarget having different sizes.
      This is actually a contain relaxed from <codeword href="http://www.opengl.org/registry/specs/EXT/framebuffer_object.txt">GL_EXT_framebuffer_object</codeword>
      when is has been promoted to <codeword href="http://www.opengl.org/registry/specs/ARB/framebuffer_object.txt">GL_ARB_framebuffer_object</codeword> and OpenGL 3.0.
      Interestingly, this capability seems to me pretty useless without
      <codeword href="http://www.opengl.org/registry/specs/ARB/viewport_array.txt">GL_ARB_viewport_array</codeword>.
      This allows to render G-Buffers at various resolutions (and hence saving some memory bandwidth) in a single pass before the final G-Buffer compositing for example.
      I also imagine some interesting use for cascade shadows using layering rendering.
      It might look like a small feature at first look but for the rendering technique side,
      it's actually a key feature from which I expect a lot of performance benefits in lot of cases.
    </paragraph>

    <paragraph>
      To use the extra viewports, GLSL includes a new variable called <codeword>gl_ViewportIndex</codeword> that can be written in the geometry shader.
    </paragraph>

    <code title="Setup 2 viewports for 2 render targets:">
      <line>
        glViewportIndexedfv(0, &amp;<keyword>vec4</keyword>(0.0f, 0.0f, Size)[0]);
      </line>
      <line>
        glScissorIndexedv(0, &amp;<keyword>ivec4</keyword>(0, 0, <keyword>ivec2</keyword>(Size)[0]);
      </line>
      <line>
        glDepthRangeIndexed(0, 0.0f, 0.5f);
      </line>
      <line>

      </line>
      <line>
        glViewportIndexedfv(1, &amp;<keyword>vec4</keyword>(0.0f, 0.0f, Size * 0.5f)[0]);
      </line>
      <line>
        glScissorIndexedv(1, &amp;<keyword>ivec4</keyword>(0, 0, <keyword>ivec2</keyword>(Size * 0.5f)[0]);
      </line>
      <line>
        glDepthRangeIndexed(1, 0.5f, 1.0f);
      </line>
    </code>

    <title>
      Compatibility with OpenGL ES 2.0 (<codeword href="http://www.opengl.org/registry/specs/ARB/ES2_compatibility.txt">GL_ARB_ES2_compatibility</codeword>)
    </title>
    <paragraph>
      It could be hard to believe but <codeword href="http://www.khronos.org/registry/gles/">OpenGL ES 2.0</codeword> has features that OpenGL 4 didn't had until OpenGL 4.1.
      <codeword href="http://www.opengl.org/registry/specs/ARB/ES2_compatibility.txt">GL_ARB_ES2_compatibility</codeword> is the last extension integrated to OpenGL 4.1.
      This extension is fairly a boring one that only aims completeness and to ensure that OpenGL 4.1 is a superset of OpenGL ES 2.0.
      Chances are, I'm never going to use any of the new functions:
      <codeword>glReleaseShaderCompiler</codeword> allows to unload the GLSL compiler to save some memory;
      <codeword>glShaderBinary</codeword>	to load shader binaries... but we have <codeword>glProgramBinary</codeword> now;
      <codeword>glGetShaderPrecisionFormat</codeword> to get GLSL precision of each variable types
      (<codeword>GL_LOW_FLOAT, GL_MEDIUM_FLOAT, GL_HIGH_FLOAT, GL_LOW_INT, GL_MEDIUM_INT, GL_HIGH_INT</codeword>). What if the variable is a uvec*?;
      <codeword>glDepthRangef</codeword> and <codeword>glClearDepthf</codeword> which takes float parameters instead of doubles.
      Finally, <codeword>glVertexAttribPointer</codeword> can take <codeword>GL_FIXED</codeword> for its type parameter, for fixed point data.
    </paragraph>
    <paragraph>
      Features for the sake of... something, why not but I would mark most of them as deprecated.
    </paragraph>

    <title>A bunch of things for WebGL</title>
    <paragraph>
      I quite believe that a lot of things released with OpenGL 4.1 have been done for <link href="http://www.khronos.org/webgl/">WebGL</link>.
      It's incredible the entousiam around this technology, probably higher than <link href="http://www.khronos.org/opencl/">OpenCL</link>.
      WebGL involves a large number of developers and users in a medium term: basically everyone all in all!
      WebGL is based on OpenGL ES 2.0 so that we really need OpenGL ES 2.0 features on desktop.
      OpenGL 4.1 contains all the OpenGL ES 2.0 features hence WebGL implementations can rely on OpenGL 4.1 drivers to implement all the features.
      To reinforce OpenGL ES 2.0 on desktop, an OpenGL ES 2.0 profile have been created through
      <codeword href="http://www.opengl.org/registry/specs/EXT/wgl_create_context_es2_profile.txt">WGL_EXT_create_context_es2_profile</codeword> and
      <codeword href="http://www.opengl.org/registry/specs/EXT/glx_create_context_es2_profile.txt">GLX_EXT_create_context_es2_profile</codeword>.
      I guess, this way it will be easier for low-end OpenGL implementations to support OpenGL ES 2.0
      and it isn't require to load a large amount of function pointers that anyway shouldn't be used in a WebGL environment.
    </paragraph>
    <paragraph>
      Following the WebGL requirements, I think the ARB also build the following extensions:
      <codeword href="http://www.opengl.org/registry/specs/ARB/wgl_create_context_robustness.txt">WGL_ARB_create_context_robustness</codeword>,
      <codeword href="http://www.opengl.org/registry/specs/ARB/glx_create_context_robustness.txt">GLX_ARB_create_context_robustness</codeword> and
      <codeword href="http://www.opengl.org/registry/specs/ARB/robustness.txt">GL_ARB_robustness</codeword>
      which introduces functions which prevent buffer overflows in a similar way that strncpy is for strcpy...
      These extensions will be a great use for Chrome developers, Firefox developers, Opera developers, Safari developers (Internet Explorer developers?)
      and we really want them to do a good use of them, but for the rest of us, I'm not sure.
    </paragraph>

    <title>
      Improved cooperation with OpenCL (<codeword href="http://www.opengl.org/registry/specs/ARB/cl_event.txt">GL_ARB_cl_event</codeword>)
    </title>
    <paragraph>
      <link href="http://www.khronos.org/opencl/">OpenCL</link> has made steps toward OpenGL since its release through extensions but for once
      it's OpenGL which make a step toward OpenCL with the release of the extension <codeword href="http://www.opengl.org/registry/specs/ARB/cl_event.txt">GL_ARB_cl_event</codeword>.
      This extension only allows to create an OpenGL sync object from an OpenCL sync object for more efficient images and buffers sharing between the 2 APIs.
    </paragraph>

    <title>
      Writing into the stencil buffer from a fragment shader (<codeword href="http://www.opengl.org/registry/specs/ARB/shader_stencil_export.txt">GL_ARB_shader_stencil_export</codeword>)
    </title>
    <paragraph>
      Finally, an other extension that might generate some clever ideas based on the stencil buffer.
      <codeword href="http://www.opengl.org/registry/specs/ARB/shader_stencil_export.txt">GL_ARB_shader_stencil_export</codeword>
      allows to write the reference value of the stencil test from a fragment shader which actually means writing into the stencil buffer when
      <codeword>glStencilOp</codeword> is set to <codeword>GL_REPLACE</codeword>.
    </paragraph>

    <title>Conclusions</title>
    <paragraph>
      OpenGL 4.1 has reach Earth in a quite different way I expected it.
      I expected a OpenGL 4 hardware oriented release but it's definetly not the case and actually it comes closer to my wish-list than my expectations.
    </paragraph>
    <paragraph>
      The BIG missing feature is the overload buffer and image load and store embody by
      <codeword href="http://www.opengl.org/registry/specs/NV/shader_buffer_load.txt">GL_NV_shader_buffer_load</codeword>,
      <codeword href="http://www.opengl.org/registry/specs/NV/shader_buffer_store.txt">GL_NV_shader_buffer_store</codeword> and
      <codeword href="http://www.opengl.org/registry/specs/EXT/shader_image_load_store.txt">GL_EXT_shader_image_load_store</codeword> extensions.
      An OpenGL 4.2 release with only these features would already be amazing!
    </paragraph>
    <paragraph>
      Unfortunately, OpenGL 4.1 doesn't include <codeword href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">GL_EXT_direct_state_access</codeword>
      as a lot of people would expect.
      However, AMD as release drivers supporting this extension so that I presume that the ARB has an agreement on the goods of this approach.
      Moreover, OpenGL 4.1 integrates through <codeword href="http://www.opengl.org/registry/specs/ARB/separate_shader_objects.txt">GL_ARB_separate_shader_objects</codeword>
      a subset of the direct state access extension.
      Thus, I think we have here an idea on how the ARB want to bring this approach in core.
      I don't think that the deprecated feature will ever have direct state access in the
      <codeword href="http://www.opengl.org/registry/specs/ARB/wgl_create_context.txt">OpenGL Compatibility profile</codeword>.
      From my point of view, this would be for the best. For the core features, the direct state access will probably reach core through new extensions.
    </paragraph>
    <paragraph>
      Finally an angry word about the lack of conscistency of this new 4.1 specification.
      It's almost unbelievable! Sometimes it's so obvious that I stay stunned. I might be able to find in every extension something which doesn't follow the OpenGL convensions.
      This is a growing concern I have seen the <link href="http://www.opengl.org/registry/doc/glspec30.20080811.withchanges.pdf">OpenGL 3.0 release</link>.
      OpenGL is a specification where every single word and API token mean something and it actually defines in the specification... at least, it uses to be.
      For example, OpenGL 3.0 introduces "geometry shader" while this stage was already cleary defines in the specification by "primitive". What is a "geometry" in OpenGL? Don't ask me I have no idea, it's undefined.
      OpenGL 4.1 is now using the token location and index for about everything, confronted to an API declarations or a specific paragraph it happens very often that the uses of some tokens is misleading.
      OpenGL 4.1 now introduces some new tokens like sub-pixel which comes from nowhere of arrays for a set of while arrays have been clearly defines since OpenGL 1.1.
      I quite believe that the overall "blocks" concept is mostly unspecified leading really different implementations on AMD and nVidia drivers. etc!!!
    </paragraph>
    <paragraph>
      Next step, my OpenGL 4.2 wish-list!
    </paragraph>
    <source-list>
      <source-element type="Download" href="http://www.opengl.org/registry/doc/glspec41.core.20100725.withchanges.pdf" title="OpenGL 4.1 core specification" />
      <source-element type="Download" href="http://www.opengl.org/registry/doc/GLSLangSpec.4.10.6.pdf" title="GLSL 4.1 specification" />
      <source-element type="Link" href="http://www.opengl.org/sdk/docs/man4" title="OpenGL 4.1 man pages"/>
      <source-element type="Link" href="./post-0269.html" title="My OpenGL 4.0 review"/>
      <source-element type="Link" href="./post-0282.html" title="My OpenGL 4.1 wish-list"/>
    </source-list>
  </post>

  <post index="0319" date="16/08/2010" std-date="2010-08-16T23:30:00.00Z" title="AMD OpenCL 1.1 drivers available">
    <meta>
      <tag>gtc-tech-opencl</tag>
    </meta>
    <paragraph>
      AMD has released OpenCL 1.1 drivers with the ATI Stream SDK 2.2; a release 2 months after the specification release.
      nVidia has an OpenCL 1.1 drivers but only available for nVidia registred developers.
    </paragraph>
    <paragraph>
      So far, I haven't seen really good results of OpenCL benchmark on AMD.
      I don't really know if it's a hardware limitation or a lack of optimization of the drivers or maybe both.
      Some people will say that nVidia have a more advanced cache system but this is not true on GeForce 8/9 hardware which remains really efficient.
      One think is sure, nVidia has more experience through CUDA and their OpenCL implementation is built on top of it.
    </paragraph>
    <paragraph>
      With the progress of AMD on OpenCL, I guess it's going to be interesting to observe OpenCL benchmarks in the next months!
    </paragraph>
    <source-list>
      <source-element type="Link" href="http://developer.amd.com/gpu/atistreamsdk/pages/default.aspx" title="ATI Stream SDK 2.2 for OpenCL 1.1" />
      <source-element type="Link" href="http://developer.nvidia.com/object/opencl.html" title="nVidia OpenCL 1.1 for registered developers" />
    </source-list>
  </post>

  <post index="0318" date="05/08/2010" std-date="2010-08-05T23:30:00.00Z" title="The really too early OpenGL 4.1 drivers status">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>
    <paragraph>
      Both AMD and nVidia have released drivers for the OpenGL 4.1 release.
      On AMD side it's titled beta OpenGL ES 2 drivers and on nVidia side it's an beta OpenGL 4.1 drivers.
      More than the OpenGL ES 2 support, the really interesting part is the <link href="http://blogs.amd.com/developer/2010/07/26/opengl-es-2-0-coming-to-a-desktop-near-you/">EGL support on desktop!</link>
      A really old community request and eventually, I expect to switch to <link href="http://www.khronos.org/registry/egl/specs/eglspec.1.4.20100512.pdf">EGL</link> even if I haven't tried it yet.
      I explored if there is some bits of OpenGL 4.1 in AMD drivers but it does what it says: No OpenGL 4.1.
    </paragraph>
    <paragraph>
      I was working on an OpenGL Samples Pack 4.X.0 version featuring extensions but with the release of OpenGL 4.1,
      I have to give another perspective on this version and focus on OpenGL 4.1 features indeed.
    </paragraph>
    <paragraph>
      I am using an OpenGL Samples Pack 4.1.0 development version for this drivers status test.
      The OpenGL Samples Pack contains a lot samples from OpenGL 2.1 to OpenGL 4.1 but I focus only on the OpenGL 4.X samples for these tests.
      The OpenGL 3.3 drivers are now quite mature and I have included only one test which can be quite a problem on AMD platform.
      The tests have been done on a Radeon HD 5850 and a GeForce GTX 470.
    </paragraph>
    <list name="Drivers test results nomenclature:">
      <list-element>White: Unsupported.</list-element>
      <list-element>Green: the sample work just like expected.</list-element>
      <list-element>Orange: The sample doesn't work correctly but with a workaround is works.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>
    <table>
      <table-title>
        <table-title-element>Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 10.7 beta</table-title-element>
        <table-title-element>nVidia Forceware 259.09</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>410-program-separate</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">A lot of things...</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-64</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-program-primitive-block</table-entry-element>
        <table-entry-element color="white"></table-entry-element>
        <table-entry-element color="red">Geometry input block unsupported</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>410-debug-output</table-entry-element>
        <table-entry-element color="white">AMD_debug_output support only</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="orange">ARB GLSL function instead of core GLSL function</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-64</table-entry-element>
        <table-entry-element color="red">Draw calls ignored, double not supported</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">No full support for user-defined blocks</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">No full support for user-defined blocks</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-texture-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-fbo-multisample</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-texture-rgb</table-entry-element>
        <table-entry-element color="red">TBO fetch not correct</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-rtt</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-query-conditional</table-entry-element>
        <table-entry-element color="black">Can freeze the system! Oo</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>
    <paragraph>

    </paragraph>
    <paragraph>
      What to think about those results? First, it's much better than in <link href="./post-0300.html">my previous status</link>
      for the support of OpenGL 4.0 and the OpenGL 3.3 is quite good now.
      nVidia seems to have better drivers according to these results but I quite think that it is more or less true.
      I would say that feature wise, the nVidia drivers is better than AMD's and for this I can give a couple of examples:
      <link href="http://developer.nvidia.com/object/bindless_graphics.html">bindless graphics</link>(I mean, nice!),
      <codeword href="http://www.opengl.org/registry/specs/EXT/shader_image_load_store.txt">EXT_shader_image_load_store</codeword>
      (I mean, super nice!) and some bit of OpenGL 4.1 support.
      However, these tests doesn't show how the GLSL compiler can be annoying and return irrelevant error messages sometime.
    </paragraph>
    <paragraph>
      On the AMD side, the philosophy is maybe a bit different which implies an other repartition of the efforts.
      I quite like the GLSL compiler, I don't think it is perfect but compared to the nVidia GLSL compiler it gives nicer error messages.
      For the development it's great! It's necessary. AMD has been the initiative of the
      <codeword href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">GL_ARB_output_debug</codeword> extension with the
      <codeword href="http://www.opengl.org/registry/specs/AMD/debug_output.txt">GL_AMD_output_debug</codeword> extension
      which is the feature announced at Siggraph 2010 that I am the most existed:
      In everyday life for an OpenGL developer, it will change everything by making OpenGL development much more efficient!
      It's easy to integrate in a software, to actually attached some debug informations for a bug report.
      I just think that it's going to make OpenGL drivers and softwares much more reliable. So far nVidia drivers more or less only returns what glGetError would return in a much more convenient way, however this extension aims much more!
      AMD has updated the man pages for OpenGL 3.3 and 4.1... and cherry on the cake, <link href="http://www.khronos.org/registry/egl/specs/eglspec.1.4.20100512.pdf">EGL</link> support!
      Considering all these, I might say that AMD is currently more development centric than nVidia which is more features centric.
    </paragraph>
    <paragraph>
      Fell free to desagree with me, I often disagree with myself!
      Actually, all in all, what I find really interesting is just the idea that OpenGL immediate future is linked to these 2 sides.
    </paragraph>
    <paragraph>
      Finally, I haven't spoke about (or tested) Intel and Apple implementations...
      <link href="http://developer.apple.com/graphicsimaging/opengl/capabilities/">MacOS X 10.6.4 is stocked to OpenGL 2.1 support</link>
      with all the features of OpenGL 3.0 but GLSL 1.30, through the OpenGL extensions.
      I think that MacOS X is a great platform (happy owner of a MacBook Pro!) and
      <link href="http://store.steampowered.com/news/3569/">the interest for gaming on MacOS X is high</link> so it deserved high-end OpenGL support... not yet the case.
      On its side <link href="http://www.intel.com/support/graphics/sb/cs-010479.htm">Intel OpenGL implementation is technically irrelevant and out-dated</link>.
      When we see that Intel represents half of the graphics chip market and I think it's the biggest limitation for OpenGL grows and real-time graphics everywhere for everything
      (<link href="http://www.khronos.org/webgl/">Like my web browser!</link>).
      In the future, I think OpenGL aims up to high quality games and CAD softwares down to Minesweeper and Paint.
      How to choose to use OpenGL everywhere for everything if we can't rich half of the platforms available?
      I completely dream of AMD and nVidia saling their graphics cards with a "It makes Internet faster!" sticker, NICE!
      I mean, <codeword href="http://www.opengl.org/registry/specs/ARB/robustness.txt">GL_ARB_robustness</codeword>,
      <codeword href="http://www.opengl.org/registry/specs/ARB/ES2_compatibility.txt">GL_ARB_ES2_compatibility</codeword> and WebGL are a statement for that.
    </paragraph>
    <paragraph>
      Some OpenGL community members said that with the OpenGL 4.1 release that OpenGL is almost done.
      In my <link href="./post-0269.html">OpenGL 4.0 review</link>, I was stating I believe that OpenGL was at 2 or 3 iterations to be stable.
      Now, I think we still need 1 or 2 iterations (1 year) for important features and refinements and I will be detail these in my OpenGL 4.1 review and my OpenGL 4.2 with list!
    </paragraph>
    <source-list>
      <source-download index="1038" />
      <source-element type="Link" href="http://developer.nvidia.com/object/opengl_driver.html" title="nVidia OpenGL 4.1 beta drivers" />
      <source-element type="Link" href="http://support.amd.com/us/kbarticles/Pages/GPU74ATICat107PreviewDriver.aspx" title="AMD OpenGL ES 2.0 beta drivers" />
      <source-element type="Download" href="http://www.opengl.org/registry/doc/glspec41.core.20100725.withchanges.pdf" title="OpenGL 4.1 core specification" />
      <source-element type="Download" href="http://www.opengl.org/registry/doc/GLSLangSpec.4.10.6.pdf" title="GLSL 4.1 specification" />
      <source-element type="Link" href="http://www.opengl.org/sdk/docs/man4" title="OpenGL 4.1 man pages"/>
      <source-element type="Link" href="http://www.opengl.org/sdk/docs/man3" title="OpenGL 3.3 man pages"/>
      <source-element type="Link" href="http://www.khronos.org/library/detail/2010-siggraph-opengl-bof/" title="OpenGL BOF 2010 slides" />
      <source-element type="Link" href="http://developer.amd.com/samples/assets/egl_sample.zip" title="AMD EGL code sample" />
    </source-list>
  </post>

  <post index="0317" date="02/08/2010" std-date="2010-08-02T19:00:00.00Z" title="OpenGL 4.1 released at Siggraph 2010">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
    </meta>

    <paragraph>
      My little finger is usually realiable but this time was an exception:
      I was afraid that we will not see <link href="http://www.opengl.org/registry/doc/glspec41.core.20100725.withchanges.pdf">OpenGL 4.1</link> at
      <link href="http://www.siggraph.org/s2010/">Siggraph 2010</link> and I am glade I was wrong.
    </paragraph>
    <paragraph>
      On the nVidia side, the announcement says full <link href="http://developer.nvidia.com/object/opengl_driver.html">OpenGL 4.1 extensions support</link>.
      On AMD side, the announcement state of an
      <link href="http://fireuser.com/blog/amd_releases_desktop_opengl_es_driver_for_accelerated_webgl_plug_in_free_3d/">OpenGL ES 2 support</link>
      with <link href="http://www.khronos.org/registry/egl/specs/eglspec.1.4.20100512.pdf">EGL</link>.
    </paragraph>
    <paragraph>
      An new extension called <codeword href="http://www.opengl.org/registry/specs/ARB/ES2_compatibility.txt">GL_ARB_ES2_compatibility</codeword>
      and part of OpenGL 4.1 has been written to add the missing <link href="http://www.khronos.org/registry/gles/">OpenGL ES 2</link> features in OpenGL 4.
      This is probably meant to improve <link href="http://www.khronos.org/webgl/">WebGL</link> support on desktop.
    </paragraph>
    <paragraph>
      OpenGL 4.1 contains the following extensions: <codeword href="http://www.opengl.org/registry/specs/ARB/seperate_shader_objects.txt">GL_ARB_seperate_shader_objects</codeword>,
      <codeword href="http://www.opengl.org/registry/specs/ARB/viewport_array.txt">GL_ARB_viewport_array</codeword>,
      <codeword href="http://www.opengl.org/registry/specs/ARB/get_program_binary.txt">GL_ARB_get_program_binary</codeword>,
      <codeword href="http://www.opengl.org/registry/specs/ARB/shader_precision.txt">GL_ARB_shader_precision</codeword> and
      <codeword href="http://www.opengl.org/registry/specs/ARB/vertex_attrib_64bit.txt">GL_ARB_vertex_attrib_64bit</codeword>.
      Actually, from these extensions only the 2 last ones are really OpenGL 4 level of hardware (Radeon 5800 and GeForce 400 series).
      So why not an OpenGL 3.4 specification?
      I actually asked the question to <link href="http://www.linkedin.com/in/barthold">Barthold Lichtenbelt</link>
      who gave me his thought: how to deal with the fact that OpenGL 3.4 would be a superset of OpenGL 4.0 and a lowerset of OpenGL 4.0?
      Yes, this is tricky so I think we will be limited to OpenGL 3.3 + a set of extentions which is quite ok actually.
    </paragraph>
    <paragraph>
      The main OpenGL 4.1 feature is definetly the
      <codeword href="http://www.opengl.org/registry/specs/ARB/seperate_shader_objects.txt">GL_ARB_seperate_shader_objects</codeword> extension
      that allows to change program stages independently. A side and amazing feature from this extension is the direct state access for the uniforms.
      Also in <link href="http://support.amd.com/us/kbarticles/Pages/GPU74ATICat107PreviewDriver.aspx">AMD drivers 10.7</link>,
      the <codeword href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">direct state extension</codeword>
      is fully supported and for having testing it, it works perfectly!
      A new age for OpenGL development is here.

    </paragraph>
    <paragraph>
      <codeword href="http://www.opengl.org/registry/specs/ARB/get_program_binary.txt">GL_ARB_get_program_binary</codeword> allows to cache a system the GLSL program binary.
      The binaries are not meant to be distributed with software releases and the loading of binaries can fail for any reason,
      new graphics card in the system, updated drivers could be the most common cases.
      GLSL compilers are so fast that I am not really sure how useful it's really is.
    </paragraph>
    <paragraph>
      The only real OpenGL 4 hardware features are embodied by
      <codeword href="http://www.opengl.org/registry/specs/ARB/shader_precision.txt">GL_ARB_shader_precision</codeword> and
      <codeword href="http://www.opengl.org/registry/specs/ARB/vertex_attrib_64bit.txt">GL_ARB_vertex_attrib_64bit</codeword> extensions
      which are actually minor updates from OpenGL 4.0 features.
    </paragraph>
    <paragraph>
      A set of extensions have also been released and from those my favorite is definetely the
      <codeword href="http://www.opengl.org/registry/specs/ARB/debug_output.txt">GL_ARB_debug_output</codeword>
      which is just an ARBify version of <codeword href="http://www.opengl.org/registry/specs/AMD/debug_output.txt">GL_AMD_debug_output</codeword>.
      Based on the previous AMD extensions this extension FINALLY gives some interesting debugging functionnalities to OpenGL.
    </paragraph>
    <paragraph>
      On the level of the tools and documentations, <link href="http://www.realtech-vr.com/glview/">OpenGL Extensions Viewer</link> already support OpenGL 4.1 within version 3.31.
      The OpenGL man pages have been updated for <link href="http://www.opengl.org/sdk/docs/man3/">OpenGL 3.3</link> and <link href="http://www.opengl.org/sdk/docs/man4/">OpenGL 4.1</link>.
      For the rest, it's pretty limited no support for <link href="http://glew.sourceforge.net/">GLEW</link> yet or even <link href="http://www.opengl.org/registry/api/glext.h">glext.h</link> and
      <link href="http://www.opengl.org/registry/api/gl3.h">gl3.h</link>.
    </paragraph>
    <paragraph>
      Other great announcements during the OpenGL BOF: <link href="http://dri.freedesktop.org/glu3/">GLU3</link>,
      <link href="http://www.khronos.org/opengles/sdk/tools/KTX/">KTX</link>
      and even the up coming support of <link href="http://www.khronos.org/registry/egl/specs/eglspec.1.4.20100512.pdf">EGL</link> on desktop with samples!
      AMD already provides EGL support in their last drivers. Finally, an updated OpenGL conformance test should be available soon.
    </paragraph>
    <paragraph>
      This new OpenGL version is actually more an OpenGL 3.4 that an OpenGL 4.1 from my point of view.
      However, the improvements in every developers days is going to be significant and makes OpenGL a more than ever a great competitor to Direct3D.
      Considering the evolution of the graphics market, the commitment of nVidia and AMD for OpenGL it's really good to be an OpenGL programmer those days and it's going to be better and better!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.khronos.org/library/detail/2010-siggraph-opengl-bof/" title="OpenGL BOF 2010 slides" />
      <source-element type="Download" href="http://www.opengl.org/registry/doc/glspec41.core.20100725.withchanges.pdf" title="OpenGL 4.1 core specification" />
      <source-element type="Download" href="http://www.opengl.org/registry/doc/glspec41.compatibility.20100725.withchanges.pdf" title="OpenGL 4.1 compatibility specification" />
      <source-element type="Download" href="http://www.opengl.org/registry/doc/GLSLangSpec.4.10.6.pdf" title="GLSL 4.1 specification" />
      <source-element type="Link" href="http://developer.nvidia.com/object/opengl_driver.html" title="nVidia OpenGL 4.1 beta drivers" />
      <source-element type="Link" href="http://support.amd.com/us/kbarticles/Pages/GPU74ATICat107PreviewDriver.aspx" title="AMD OpenGL ES 2.0 beta drivers" />
      <source-element type="Link" href="http://www.opengl.org/registry" title="OpenGL registry with everything"/>
      <source-element type="Link" href="http://www.opengl.org/sdk/docs/man4" title="OpenGL 4.1 man pages"/>
      <source-element type="Link" href="http://www.opengl.org/sdk/docs/man3" title="OpenGL 3.3 man pages"/>
      <source-element type="Link" href="http://www.opengl.org/sdk/docs/man" title="OpenGL 2.1 man pages"/>
    </source-list>
  </post>

  <post index="0316" date="23/07/2010" std-date="2010-07-23T23:30:00.00Z" title="Shanghai at San Francisco's Asian Art Museum">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <paragraph>
      The Asian Art Museum is currently showing an exhibition about Shanghai art since the end of the dynasties to nodays.
    </paragraph>
    <paragraph>
      The least I could say it that it seems to me that with the colonization which has bring a hudge western influence and the birth og the "Republic" of China,
      the city has been unlikely to create origin arts...
    </paragraph>
    <paragraph>
      I would have probably avoid to speak about this exhibition if I did see a wonderful film called
      <link href="http://www.spencerart.ku.edu/exhibitions/qiu-anxiong.shtml">The new book of the mountains and seas</link> (2006) by
      <link href="http://www.qiuanxiong.com/en/index.html">Qiu Anxiong</link>. This film is actually made of paintings and it depicts urban development in a very allegorical way.
      Absolutely superbe!
    </paragraph>
    <paragraph>
      Shanghai exhibition is running until September 5, 2010 for $20.
    </paragraph>
    <source-list>
      <source-element type="Link" href="http://www.asianart.org/shanghai/" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0315" date="21/07/2010" std-date="2010-07-21T23:30:00.00Z" title="Alice in Wonderland at Los Angeles FIDM">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <paragraph>
      I can't really say that I enjoyed the last Tim Burton movie: "Alice in Wonderland". I mean on hand Tim Burton, on the other hand Alice in Wonderland...
      That brings quite some expectations that the movie doesn't reach.
    </paragraph>
    <paragraph>
      Anyway. The Los Angeles Fashion Institute of Design and Merchandising is currently showing a small exhibition about the movie and how the world of Alice in Wonderland has inspired fashion designers.
    </paragraph>
    <paragraph>
      The hightlight of the exhibition is actually a large number of costumes used for the movies.
    </paragraph>
    <paragraph>
      This exhibition is running until September 30, 2010 for free.
    </paragraph>
    <image
      img="./post/0315.jpg"
      href="./post/0315.jpg" />
    <source-list>
      <source-element type="Link" href="http://fidm.edu/resources/museum+galleries/current-exhibitions.html" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0314" date="18/07/2010" std-date="2010-07-18T22:30:00.00Z" title="OpenGL community drink at Siggraph 2010">
    <meta>
      <tag>gtc-tech-event</tag>
    </meta>
    <paragraph>
      With <link href="http://www.siggraph.org/s2010/">Siggraph 2010</link> next week I thought it would be the perfect opportunity to meet some people from the community and I launched the idea of the informal community drink.
    </paragraph>
    <paragraph>
      The event will take place on Monday, July 26th, 6pm at the Veranda Bar in the Fugueroa Hotel.
    </paragraph>
    <paragraph>
      Veranda Bar in the Figueroa Hotel -
      939 South Figueroa Street -
      Los Angeles, California 90015
    </paragraph>
    <paragraph>
      For more information, leave a message on the <link href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=279542#Post279542">OpenGL.org thread</link>, <link href="contact.html">send me an email</link> or just show off during the evening!
    </paragraph>
    <paragraph>
      Thanks to <link href="http://virtualglobeandterrainrendering.blogspot.com">Patrick Cozzi</link> for his motivation for this!
      Let's drop a stone for what I would enjoy to see becoming a regular event!
    </paragraph>
    <source-list>
      <source-element type="Link" href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=279542#Post279542" title="Thread on the OpenGL forum" />
    </source-list>
  </post>

  <post index="0313" date="14/07/2010" std-date="2010-07-14T22:30:00.00Z" title="Perspective at Louis Vuitton's Espace Culturelle">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <paragraph>
      L'Espace Culturelle Louis Vuitton became one of my favorite place in Paris for exhibition last year when I discovered it for the first time.
    </paragraph>
    <paragraph>
      Once again it host a really interesting exhibition called "Perspective" which I guess contribute to inspire me for my photography series <link href="post-0311.html">"Counterpoint Perspective"</link>.
    </paragraph>
    <paragraph>
      This proper contemporary art exhibition features the work of <link href="http://www.odbc-paris.com/web">Odile Decq</link> and <link href="http://www.camillehenrot.com/">Camille Henrot</link>
      leading the visitor to a new experience of visual perception.
    </paragraph>
    <paragraph>
      The exhibition is free and running until the 5th of September.
    </paragraph>
    <source-list>
      <source-element type="Link" href="http://www.louisvuitton.com/espaceculturel/index_GB.html" title="Espace Culturel Louis Vuitton website" />
    </source-list>
  </post>

  <post index="0312" date="13/07/2010" std-date="2010-07-13T19:00:00.00Z" title="Git success story in parallel development">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>
    <paragraph>
      The time pass but my enthusiasm for Git continues to glow! Actually, it seams that I am not the only one to enjoy Git as surprisingly
      <link href="post-0296.html">my last article on Git</link>
      became the most read post (if I can rely on my website statistic...) before a lot of OpenGL articles as it can be expected.
    </paragraph>
    <paragraph>
      One great tool with Git is <link href="http://www.kernel.org/pub/software/scm/git/docs/gitk.html">Gitk</link>.
      I was using it on the <link href="project-0026.html">OpenGL Samples Pack</link> and suddenly I was amazed by the graph Gitk gave me:
      A demonstration of the effectiveness of a development process based on Git!
      With Git, it's so easy to work on different things, on different version... in parallel!
    </paragraph>
    <paragraph>
      The yellow labels are tags that I use as releases markers and the green labels are branches. Enjoy the branches communications.
    </paragraph>
    <paragraph>
      With the OpenGL Samples Pack the graph is quite complex relatively to the project size.
      However, it's just what I need and this is where it's a success story.
      <link href="project-0005.html">G-Truc Creation website</link>
      development is also based on Git but the graph is much simpler (quite boring one actually) graph but it's still just what I need.
    </paragraph>
    <paragraph>
      In conclusion, I would like to say that Git allows a flexible way to develop a project where features doesn't need to be locked into
      <keyword>#define</keyword> but are instead manage by the Version Control System... just like it should be!
      Git makes easy and nice the process of building the feature list of a release using a version branch and several feature branches.
      If a feature isn't finish for the release, it's easy to delay it to a future release and if the development of a feature fail or get cancelled,
      it's easy to discard it without polluting the code.
      A whole strategy to build better software but also, I insist on the importance of it, software nicer to work on.
    </paragraph>

    <image
      title="gitk --all on the OpenGL Samples Pack repository"
      img="./post/0311.png"
      href="./post/0311.png"
      color="white" />
  </post>

  <post index="0311" date="11/07/2010" std-date="2010-07-11T05:00:00.00Z" title="Counterpoint perspectives">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Counterpoint perspectives">
      <summary>London 2010 - Somerset House</summary>
      <fullscreen>http://picasaweb.google.co.uk/groovounet/Counterpoint#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5491300408289171217%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
          pic144="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUEzFR1PII/AAAAAAAAIKc/gDhflL3q8Mk/s144/390.JPG"
          pic288="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUEzFR1PII/AAAAAAAAIKc/gDhflL3q8Mk/s288/390.JPG"
          pic400="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUEzFR1PII/AAAAAAAAIKc/gDhflL3q8Mk/s400/390.JPG"
          pic800="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUEzFR1PII/AAAAAAAAIKc/gDhflL3q8Mk/s800/390.JPG" />
    </album>

    <paragraph>
      My quest for true beauty, as defined by <link href="post-0294.html">Irving Penn</link>,
      leads me to this wonderful contemporary dance performance by the
      <link href="http://www.shobanajeyasingh.co.uk">Shobana Jeyasingh Dance Company</link>
      which gave me an exceptional oportunity to study what I dare to call the 5th dimension: Alternatives, here through the embodiment of perceptions.
    </paragraph>
    <paragraph>
      I assist to 4 performances of <link href="http://www.shobanajeyasingh.co.uk/counterpoint">Counterpoint</link>
      in 2 days and for each of them I gave a personal observation perspective presented here through 4 different albums
      that I finally merge in the 5th one to build a seamless parallel.
    </paragraph>
    <slide width="240" height="160" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5492449796975762161%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
    <slide width="240" height="160" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5492449454720334017%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
    <slide width="240" height="160" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5492449196665893489%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
    <slide width="240" height="160" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5492450151975120481%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />

    <image
        img="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUEptzX7II/AAAAAAAAIME/ThTVaTdXjkY/s800/015.JPG"
        href="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUEptzX7II/AAAAAAAAIME/ThTVaTdXjkY/s800/015.JPG" />
    <image
        img="http://lh4.ggpht.com/_bpz9rGNwhX4/TDUE2UkdW_I/AAAAAAAAIK0/JQ8hFyjrXpE/s800/047.JPG"
        href="http://lh4.ggpht.com/_bpz9rGNwhX4/TDUE2UkdW_I/AAAAAAAAIK0/JQ8hFyjrXpE/s800/047.JPG" />
    <image
        img="http://lh6.ggpht.com/_bpz9rGNwhX4/TDUExcyrM0I/AAAAAAAAIKQ/SRNBm3-H5Os/s800/290.JPG"
        href="http://lh6.ggpht.com/_bpz9rGNwhX4/TDUExcyrM0I/AAAAAAAAIKQ/SRNBm3-H5Os/s800/290.JPG" />
    <image
        img="http://lh5.ggpht.com/_bpz9rGNwhX4/TDUFABQ7KMI/AAAAAAAAILY/eT8Rh6jhXGQ/s800/090.JPG"
        href="http://lh5.ggpht.com/_bpz9rGNwhX4/TDUFABQ7KMI/AAAAAAAAILY/eT8Rh6jhXGQ/s800/090.JPG" />
    <image
       img="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUEr9HSkeI/AAAAAAAAIJ8/gZWIDPGEG1c/s800/118.JPG"
       href="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUEr9HSkeI/AAAAAAAAIJ8/gZWIDPGEG1c/s800/118.JPG" />
    <image
       img="http://lh5.ggpht.com/_bpz9rGNwhX4/TDUEtOm3CnI/AAAAAAAAIKE/Go6_71Il_Po/s800/157.JPG"
       href="http://lh5.ggpht.com/_bpz9rGNwhX4/TDUEtOm3CnI/AAAAAAAAIKE/Go6_71Il_Po/s800/157.JPG" />
    <image
       img="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUE8zV-3pI/AAAAAAAAILM/yBYYk8584lY/s800/073.JPG"
       href="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUE8zV-3pI/AAAAAAAAILM/yBYYk8584lY/s800/073.JPG" />
    <image
       img="http://lh5.ggpht.com/_bpz9rGNwhX4/TDUE44Zg35I/AAAAAAAAIKU/akBcMRPs6CQ/s800/361.JPG"
       href="http://lh5.ggpht.com/_bpz9rGNwhX4/TDUE44Zg35I/AAAAAAAAIKU/akBcMRPs6CQ/s800/361.JPG" />
    <image
       img="http://lh6.ggpht.com/_bpz9rGNwhX4/TDUE5525Q8I/AAAAAAAAIKY/HApjSTlGwug/s800/363.JPG"
       href="http://lh6.ggpht.com/_bpz9rGNwhX4/TDUE5525Q8I/AAAAAAAAIKY/HApjSTlGwug/s800/363.JPG" />
    <image
       img="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUFSHitzUI/AAAAAAAAIMg/KzK3YaY86SA/s800/338.JPG"
       href="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUFSHitzUI/AAAAAAAAIMg/KzK3YaY86SA/s800/338.JPG" />
    <image
       img="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUFWKRVa4I/AAAAAAAAIMs/EbtyusF1rpI/s800/370.JPG"
       href="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUFWKRVa4I/AAAAAAAAIMs/EbtyusF1rpI/s800/370.JPG" />
    <image
        img="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUE1cB0ahI/AAAAAAAAIKk/iH0eBJKDZP4/s800/423.JPG"
        href="http://lh3.ggpht.com/_bpz9rGNwhX4/TDUE1cB0ahI/AAAAAAAAIKk/iH0eBJKDZP4/s800/423.JPG" />
    <image
        img="http://lh4.ggpht.com/_bpz9rGNwhX4/TDUFXdp9MxI/AAAAAAAAIMw/HSYx0KONowk/s800/382.JPG"
        href="http://lh4.ggpht.com/_bpz9rGNwhX4/TDUFXdp9MxI/AAAAAAAAIMw/HSYx0KONowk/s800/382.JPG" />
    <image
        img="http://lh6.ggpht.com/_bpz9rGNwhX4/TDUFGUGTDjI/AAAAAAAAIL4/zIassmgb7RQ/s800/162%20Copy.JPG"
        href="http://lh6.ggpht.com/_bpz9rGNwhX4/TDUFGUGTDjI/AAAAAAAAIL4/zIassmgb7RQ/s800/162%20Copy.JPG" />
    <image
        img="http://lh5.ggpht.com/_bpz9rGNwhX4/TDUE7K1n4iI/AAAAAAAAIKo/Zk_YXjaYiMU/s800/451.JPG"
        href="http://lh5.ggpht.com/_bpz9rGNwhX4/TDUE7K1n4iI/AAAAAAAAIKo/Zk_YXjaYiMU/s800/451.JPG" />

    <source-list>
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/Counterpoint#" title="Counterpoint Parallel" />
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/CounterpointPerspective1#" title="Counterpoint Perspective 1" />
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/CounterpointPerspective2#" title="Counterpoint Perspective 2" />
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/CounterpointPerspective3#" title="Counterpoint Perspective 3" />
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/CounterpointPerspective4#" title="Counterpoint Perspective 4" />
    </source-list>
  </post>

  <post index="0310" date="10/07/2010" std-date="2010-07-10T00:30:00.00Z" title="OpenGL Samples Pack 4.0.1.2 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack has been updated. It's a revision that fixes bugs, clean up some code... basically maintenance!
    </paragraph>
    <source-list>
      <source-download index="1038" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Submit a bug report or feature request" />
    </source-list>
  </post>

  <post index="0309" date="09/07/2010" std-date="2010-07-09T00:30:00.00Z" title="Solome by Oscar Wilde at Hampstead Theatre">
    <meta>
      <tag>gtc-crea-performance</tag>
    </meta>

    <quote author="Salome" href="http://en.wikipedia.org/wiki/Salome_(play)">
      Suffer me to kiss that mouth.
    </quote>

    <image title="Oscar Wilde dress as Salome" img="./post/0309.jpg" href="./post/0309.jpg" />

    <paragraph>
      Salome is <link href="http://en.wikipedia.org/wiki/Salome">an antiquity character</link> depicted by Christians as a seductive woman which her erotic dance has been iconised with the name
      <link href="http://en.wikipedia.org/wiki/Dance_of_the_seven_veils">"The dance of the seven veils"</link>.
    </paragraph>

    <paragraph>
      Salome is also a <link href="http://en.wikipedia.org/wiki/Salome_(play)">tragedy</link> based on this antique character written
      by <link href="http://en.wikipedia.org/wiki/Oscar_Wilde">Oscar Wilde</link> in 1891 in French and then translated in English.
      The play's debut in London was halt by a ban in 1892. The play premiered in Paris in 1896.
    </paragraph>

    <paragraph>
      From the 22th of June to the 17th of July, the <link href="http://www.hampsteadtheatre.com">Hampstead Theatre</link> is hosting the play directed
      by <link href="http://en.wikipedia.org/wiki/Jamie_Lloyd_(director)">Jamie Lloyd</link> for the
      <link href="http://www.headlongtheatre.co.uk/productions/production_details.php?Title=Salome_&amp;production_id=3">Headlong Theatre</link> in a post apocalyptic universe.
    </paragraph>

    <paragraph>
      While giving an astonishing statement to the stage, I found the universe a bit disturbing considering the historical references in the script.
      However, a perfect realisation based on this universe, the commitment of the actors and an exhilarating direction lead the play to the edges of what our time socially accept
      for an absolutely daring and literally stunning play which is going to stay in memories.
    </paragraph>

    <paragraph>
      Entry from £10 to £25.
    </paragraph>

    <video href="http://www.youtube.com/v/QISBFQdXScQ&amp;color1=0xb1b1b1&amp;color2=0xd0d0d0&amp;hl=en_US&amp;feature=player_embedded&amp;fs=1" width="800" height="500" />

    <source-list>
      <source-element type="Link" href="http://www.hampsteadtheatre.com/page/3031/Salome/90" title="The play page" />
    </source-list>
  </post>

  <post index="0308" date="08/07/2010" std-date="2010-07-08T08:30:00.00Z" title="GLM 0.9.0.2 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      Second update of GLM 0.9.0 with more bug fixes.
      It also contains a new extension called GLM_GTX_int_10_10_10_2 to use GLM with OpenGL and
      <link href="http://www.opengl.org/registry/specs/ARB/vertex_type_2_10_10_10_rev.txt">GL_ARB_vertex_type_2_10_10_10_rev</link>.
    </paragraph>
    <source-list>
      <source-download index="1037" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0307" date="03/07/2010" std-date="2010-07-03T19:30:00.00Z" title="Shobana Jeyasingh's company at the Somerset House">
    <meta>
      <tag>gtc-crea-performance</tag>
    </meta>
    <image
          img="./post/0307-1-800.jpg"
          href="./post/0307-1.jpg" />
    <paragraph>
      The <link href="http://www.somersethouse.org.uk">Somerset House</link> is one of my favorite place in London and once again it demonstrates why.
    </paragraph>
    <paragraph>
      Until tomorrow, 12 performances of Counterpoint, a contemporary dance designed by the acknowledged artistic director and choreographer <link href="http://www.shobanajeyasingh.co.uk">Shobana Jeyasingh</link>,
      will have been performed at the Somerset House.
    </paragraph>
    <paragraph>
      I love when I am astonished by the lack of random and onces again it hit me: I have been stunned by a dancer during the performance I saw today.
      Surprisingly she is on the picture of performance web page. I am glade to be able to congratulate
      <link href="http://www.shobanajeyasingh.co.uk/counterpoint/alejandra-lucrecia-bano-pelegrin/index.html">Alejandra Baño Pelegrin</link>.
    </paragraph>
    <paragraph>
      By the time I am writing this text, only 4 performances are left for Sunday 4th. If you are in London it should not be missed and it's free!
      One advice though: To really enjoy the show it hightly recommand to sit facing the dancers entrance.
    </paragraph>
    <image
          img="./post/0307-2-800.jpg"
          href="./post/0307-2.jpg" />
    <video title="Preview film of Counterpoint" href="http://www.youtube.com/v/-FZsqYl920E&amp;hl=en_GB&amp;fs=1" width="800" height="500" />
    <source-list>
      <source-element type="Link" href="http://www.somersethouse.org.uk/whats_on/1246.asp" title="The performance page" />
    </source-list>
  </post>

  <post index="0306" date="02/07/2010" std-date="2010-07-02T23:30:00.00Z" title="Morning is the new evening">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Morning is the new evening">
      <summary>London 2010 - Hampstead Heath</summary>
      <fullscreen>http://picasaweb.google.co.uk/groovounet/MorningIsTheNewEvening#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5489400090327063825%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
          pic144="http://lh6.ggpht.com/_bpz9rGNwhX4/TC5ET9nYKNI/AAAAAAAAHmo/_vkJOOc1ZLU/s144/001.JPG"
          pic288="http://lh6.ggpht.com/_bpz9rGNwhX4/TC5ET9nYKNI/AAAAAAAAHmo/_vkJOOc1ZLU/s288/001.JPG"
          pic400="http://lh6.ggpht.com/_bpz9rGNwhX4/TC5ET9nYKNI/AAAAAAAAHmo/_vkJOOc1ZLU/s400/001.JPG"
          pic800="http://lh6.ggpht.com/_bpz9rGNwhX4/TC5ET9nYKNI/AAAAAAAAHmo/_vkJOOc1ZLU/s800/001.JPG" />
    </album>

    <paragraph>
      In life on one side there are all these things we can't explain but on another side, there are all these things we can explain.
    </paragraph>
    <paragraph>
      When for the sake of enjoying we gave up on television, optimized out time to go to work to make it useful, decided to concider midnight to 4am a time frame
      and we still want more to enjoy there is only one solution left: morning is the new evening! Let's wake up at 6am to do something! :D
    </paragraph>

    <image
        img="http://lh6.ggpht.com/_bpz9rGNwhX4/TC5ET9nYKNI/AAAAAAAAHmo/_vkJOOc1ZLU/s800/001.JPG"
        href="http://lh6.ggpht.com/_bpz9rGNwhX4/TC5ET9nYKNI/AAAAAAAAHmo/_vkJOOc1ZLU/s800/001.JPG" />
    <image
        img="http://lh5.ggpht.com/_bpz9rGNwhX4/TC5EVOi2BAI/AAAAAAAAHmw/UlN_qswmv7g/s800/003.JPG"
        href="http://lh5.ggpht.com/_bpz9rGNwhX4/TC5EVOi2BAI/AAAAAAAAHmw/UlN_qswmv7g/s800/003.JPG" />
    <image
        img="http://lh4.ggpht.com/_bpz9rGNwhX4/TC5EaFaVtBI/AAAAAAAAHnE/3lmIHalNjwQ/s800/010.JPG"
        href="http://lh4.ggpht.com/_bpz9rGNwhX4/TC5EaFaVtBI/AAAAAAAAHnE/3lmIHalNjwQ/s800/010.JPG" />
    <image
        img="http://lh4.ggpht.com/_bpz9rGNwhX4/TC5Ebgbf2FI/AAAAAAAAHnM/TI8C92xmwOc/s800/012.JPG"
        href="http://lh4.ggpht.com/_bpz9rGNwhX4/TC5Ebgbf2FI/AAAAAAAAHnM/TI8C92xmwOc/s800/012.JPG" />
    <image
        img="http://lh4.ggpht.com/_bpz9rGNwhX4/TC5EfN_ZUMI/AAAAAAAAHnc/0zX-Nv40GJA/s800/015.JPG"
        href="http://lh4.ggpht.com/_bpz9rGNwhX4/TC5EfN_ZUMI/AAAAAAAAHnc/0zX-Nv40GJA/s800/015.JPG" />

    <source-list>
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/MorningIsTheNewEvening" title="The Picasa album page" />
    </source-list>
  </post>

  <post index="0305" date="01/07/2010" std-date="2010-07-01T23:30:00.00Z" title="OpenGL Samples Pack 4.0.1.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack 4.0.1.0 is an update that brings the number of samples to a total of 58 samples;
      including 13 OpenGL 4 samples, 33 OpenGL 3.3 samples and 12 OpenGL 2 samples for Visual Studio 2008 and 2010 in 32 and 64 bits.
    </paragraph>
    <paragraph>
      This version is the result of a deeper exploration of OpenGL 4.0 but also from feedbacks by AMD and nVidia which help me to fix some mistakes.
      To make it more useful, I used workarounds to increase the number of samples that runs on both AMD and nVidia cards... it doesn't mean they all run!
    </paragraph>
    <paragraph>
      I'll probably publish an updated drivers status when new drivers will be available.
    </paragraph>
    <paragraph>
      The next step for the OpenGL Samples Pack is a version called 4.X.0 which explores OpenGL extensions still not part of the OpenGL 4.0 core specifications.
      In OpenGL 4.1? Hopefully!
    </paragraph>
    <source-list>
      <source-download index="1036" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Submit a bug report or feature request" />
    </source-list>
  </post>

  <post index="0304" date="27/06/2010" std-date="2010-06-27T23:30:00.00Z" title="Let's meet up at Siggraph 2010!">
    <meta>
      <tag>gtc-tech-event</tag>
    </meta>

    <paragraph>
      My thirst for knowledge is again going to be satisfied in about a month... I am going to Siggraph 2010 in Los Angeles!
    </paragraph>
    <paragraph>
      I haven't made my conference schedule yet but for sure there is one event I won't miss: The OpenGL BOF on July 28th from 5:15pm to 7:15pm where I hope OpenGL 4.1 will be presented.
      To attend we need to <link href="http://www.khronos.org/news/events/detail/siggraph-la-2010/">register</link>.
    </paragraph>
    <paragraph>
      Are you going as well? Drop me an email!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.siggraph.org/s2010/" title="Siggraph 2010" />
      <source-element type="Link" href="http://www.khronos.org/news/events/detail/siggraph-la-2010/" title="Register to Khronos Group BOF" />
    </source-list>
  </post>

  <post index="0303" date="26/06/2010" std-date="2010-06-26T00:30:00.00Z" title="The Muffin Quest">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="The Muffin Quest">
      <summary>London 2010 - Hampstead Heath</summary>
      <fullscreen>http://picasaweb.google.co.uk/groovounet/TheMuffinQuest?feat=flashalbum#slideshow/5486760936727761442</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5486760763854947921%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="http://lh4.ggpht.com/_bpz9rGNwhX4/TCTj8JlvC6I/AAAAAAAAHhI/eVDGYCWwtPg/s144/0001.jpg"
        pic288="http://lh4.ggpht.com/_bpz9rGNwhX4/TCTj8JlvC6I/AAAAAAAAHhI/eVDGYCWwtPg/s288/0002.jpg"
        pic400="http://lh4.ggpht.com/_bpz9rGNwhX4/TCTj8JlvC6I/AAAAAAAAHhI/eVDGYCWwtPg/s400/0003.jpg"
        pic800="http://lh4.ggpht.com/_bpz9rGNwhX4/TCTj8JlvC6I/AAAAAAAAHhI/eVDGYCWwtPg/s800/0004.jpg" />
    </album>

    <paragraph>
      A month ago, <link href="http://www.facebook.com/group.php?gid=47438933280">Küken</link> met an incredible character: <link href="http://www.facebook.com/gerard.waymobil">Gerard!</link>
    </paragraph>
    <paragraph>
      It didn't take long for them to decide to enjoy their times together in a quest in Hampstead Heath.
    </paragraph>
    <image
      img="http://lh4.ggpht.com/_bpz9rGNwhX4/TCTj8JlvC6I/AAAAAAAAHhI/eVDGYCWwtPg/s800/0001.jpg"
      href="http://lh4.ggpht.com/_bpz9rGNwhX4/TCTj8JlvC6I/AAAAAAAAHhI/eVDGYCWwtPg/s800/0001.jpg" />
    <image
      img="http://lh5.ggpht.com/_bpz9rGNwhX4/TCTj8u3C8kI/AAAAAAAAHhM/Nuf3XFGkbNA/s800/0002.jpg"
      href="http://lh5.ggpht.com/_bpz9rGNwhX4/TCTj8u3C8kI/AAAAAAAAHhM/Nuf3XFGkbNA/s800/0002.jpg" />
    <image
      img="http://lh6.ggpht.com/_bpz9rGNwhX4/TCTj80t2ydI/AAAAAAAAHhQ/nHRP8K6lxMk/s800/0003.jpg"
      href="http://lh6.ggpht.com/_bpz9rGNwhX4/TCTj80t2ydI/AAAAAAAAHhQ/nHRP8K6lxMk/s800/0003.jpg" />
    <image
      img="http://lh6.ggpht.com/_bpz9rGNwhX4/TCTj8_E-T2I/AAAAAAAAHhU/Bt6gN4U8KPY/s800/0004.jpg"
      href="http://lh6.ggpht.com/_bpz9rGNwhX4/TCTj8_E-T2I/AAAAAAAAHhU/Bt6gN4U8KPY/s800/0004.jpg" />
    <image
      img="http://lh5.ggpht.com/_bpz9rGNwhX4/TCTj9NTITNI/AAAAAAAAHhY/C5X-nDuQock/s800/0005.jpg"
      href="http://lh5.ggpht.com/_bpz9rGNwhX4/TCTj9NTITNI/AAAAAAAAHhY/C5X-nDuQock/s800/0005.jpg" />
    <image
      img="http://lh6.ggpht.com/_bpz9rGNwhX4/TCTkAHkl0iI/AAAAAAAAHhc/SgkYLxiqeH4/s800/0006.jpg"
      href="http://lh6.ggpht.com/_bpz9rGNwhX4/TCTkAHkl0iI/AAAAAAAAHhc/SgkYLxiqeH4/s800/0006.jpg" />

    <source-list>
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/TheMuffinQuest" title="The Picasa album page" />
    </source-list>
  </post>

  <post index="0302" date="25/06/2010" std-date="2010-06-25T19:00:00.00Z" lang="en" title="OpenCL 1.1 specification released">
    <meta>
      <tag>gtc-tech-opencl</tag>
    </meta>

    <paragraph>
      I was expecting the release of OpenCL 1.1 since a long time... and it's after 18 months that the first update it available!
      The funny thing is the industry has already mentioned OpenCL 1.1 for products since 6 months to 1 year,
      something that never happen with OpenGL (at least since OpenGL 2.0, except <link href="http://en.wikipedia.org/wiki/OpenGL#Longs_Peak_and_OpenGL_3.0_controversy">OpenGL Longs Peak</link> actually).
      The <link href="http://www.siggraph.org/s2010/">Siggraph 2010</link> is in a bit more than 1 month and still,
      I haven't found any confirmation for OpenGL 4.1 released during the event.
    </paragraph>
    <paragraph>
      I must admin that I was really excited about OpenCL when it got release however I am not as much. A lot of factors have with that:
      The not so stable, compliant, efficient drivers;
      <link href="http://www.anandtech.com/show/3592">Larrabee</link> collapse (as expected); nVidia GT200 and even more GF100
      (compute oriented but <link href="http://www.geeks3d.com/20100328/geforce-gtx-480-tortured-by-furmark-300w-and-earplugs-required">insane consumption!</link>);
      AMD Radeon 4000 and 5000 series (excellent performance / mm2 / watt ratio).
      A generic GPU is an interesting paradigm but a paradigm where CPU performs better.
      I guess, my point of view is that GPUs are meant to be flexible not generic: 2 completely distinct ideas! CPU and GPU will remain both really important!
    </paragraph>
    <paragraph>
      Nevertheless, OpenCL has a future and it's definitely something I have to explore more.
      <link href="http://www.khronos.org/news/press/releases/khronos-group-releases-opencl-1-1-parallel-computing-standard">OpenCL 1.1 is released</link> and this is great!
      The feature list remains quite short and for most of it, it tastes like refinements.
      The most interesting things for me in this release it the new extension
      <link href="http://www.khronos.org/registry/cl/extensions/khr/cl_khr_d3d10_sharing.txt">CL_KHR_d3d10_sharing</link>
      (not part of OpenCL 1.1 core actually) which allows sharing memory between OpenCL and Direct3D 10.
      Would it be interesting to use Direct3D with OpenCL instead of Direct Compute?
      I don't know yet but this is quite a big statement of the Khronos Group to Microsoft.
      nVidia even has some proprietary extensions to support Direct3D 9 and 11 "interops".
    </paragraph>
    <paragraph>
      In 18 months, that level of evolution? Disappointing?
      Well, I appreciate a lot the updated <link href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/">OpenCL documentation</link>
      but when we see the support (drivers/tools) of OpenCL by both AMD and nVidia - after 18 months -,
      it might be more important to work on that side before any massive new features for OpenCL.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.khronos.org/registry/cl/" title="OpenCL Registry" />
      <source-element type="Link" href="http://www.khronos.org/registry/cl/specs/opencl-1.1.pdf" title="OpenCL 1.1 specification" />
      <source-element type="Link" href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/" title="OpenCL 1.1 documentation" />
      <source-element type="Link" href="http://www.khronos.org/news/press/releases/khronos-group-releases-opencl-1-1-parallel-computing-standard" title="OpenCL 1.1 press release" />
    </source-list>
  </post>

  <post index="0301" date="21/06/2010" std-date="2010-06-21T00:30:00.00Z" title="GLM 0.9.0.1 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      A first update of the GLM 0.9 is available. It fixes few things in the extensions.
    </paragraph>
    <source-list>
      <source-download index="1035" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0300" date="19/06/2010" std-date="2010-06-19T00:30:00.00Z" title="OpenGL 4.0 drivers status (updated)">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>
    <paragraph>
      Both AMD and nVidia have just released 'official' OpenGL 4.0 drivers in their 'stable' drivers.
      The OpenGL Samples Pack is far from exhaustive but explores lot of the new OpenGL 3.3 and 4.0 features which makes it a good start to test the drivers.
      Consequently, I decide to give them a try but I also made my test with the early preview/beta drivers to see the progress of the implementations.
    </paragraph>
    <list>
      <list-element>Green: the sample work just like expected.</list-element>
      <list-element>Orange: The sample doesn't work correctly but with a workaround is works.</list-element>
      <list-element>Red: The sample does't work and I haven't found any workaround.</list-element>
      <list-element>Black: Really distubing problem!</list-element>
    </list>
    <paragraph>
      If it does matter, the tests have been done on a Radeon 5850 and a GeForce GTX 470.
    </paragraph>
    <paragraph>
      The following table gives you the results I got which brings several conclusions.
      The drivers haven't progress at all from the beta to the official version neither on AMD nor nVidia side.
      Currently the state of the nVidia drivers is better than AMD drivers as most nVidia problems have work form solutions.
      Beside few things at the big feature level doesn't work on nVidia drivers.
      On AMD side I quite find it hard to call it OpenGL 4.0 drivers... The AMD OpenGL team have been really willing to fix most of the problems I reported so that I expect the drivers to step up soon.
      Actually the main problem on AMD drivers is the conditional rendering (an OpenGL 3.0 feature!).
      Sometime it works but sometime it just freeze the computer which implies a hard reset...
      My programming experience would say that it looks like a multithreading issue which might be terribly awful to fix. (It might be something else, I don't have any clue!)
      Both AMD and nVidia have some really weird texture parameters behaviors so that if default min mag parameters are used sometime it works sometime is doesn't.
      Actually, it has been a long time problem however we don't need those to set most of texture parameters anymore... as there are part of the sampler object!
    </paragraph>
    <paragraph>
      Do you want to start working with OpenGL 4.0? At least you are warned now. :p
      For the OpenGL Samples Pack 4.0.1.x, I expect to build some more exigent samples.
    </paragraph>
    <table>
      <table-title>
        <table-title-element>Drivers: </table-title-element>
        <table-title-element>AMD Catalyst 10.3 preview</table-title-element>
        <table-title-element>AMD Catalyst 10.6</table-title-element>
        <table-title-element>nVidia Forceware 197.44</table-title-element>
        <table-title-element>nVidia Forceware 257.21</table-title-element>
      </table-title>
      <table-entry>
        <table-entry-element>400-transform-feedback-object</table-entry-element>
        <table-entry-element color="red">glDrawTransformFeedback doesn't work</table-entry-element>
        <table-entry-element color="red">glDrawTransformFeedback doesn't work</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-gather</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-sampler-fetch</table-entry-element>
        <table-entry-element color="orange">
          Require textureQuery<bold>LOD</bold> instead of <bold>Lod</bold>
        </table-entry-element>
        <table-entry-element color="orange">
          Require textureQuery<bold>LOD</bold> instead of <bold>Lod</bold>
        </table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-subroutine</table-entry-element>
        <table-entry-element color="red">Doesn't select subroutine</table-entry-element>
        <table-entry-element color="red">Doesn't select subroutine</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-program-tessellation</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="red">No glPolygonMode</table-entry-element>
        <table-entry-element color="red">No glPolygonMode</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-primitive-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-draw-indirect</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-buffer-texture-rgb</table-entry-element>
        <table-entry-element color="red">TBO fetch not correct</table-entry-element>
        <table-entry-element color="red">TBO fetch not correct</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>400-blend-mrt</table-entry-element>
        <table-entry-element color="orange">ARB functions instead of core</table-entry-element>
        <table-entry-element color="orange">ARB functions instead of core</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-vao</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-transform-feedback</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-test-scissor</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-sampler-wrap</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-sampler-swizzle</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-sampler-object</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-sampler-filter</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-sampler-fetch</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-sampler-anisotropy-ext</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-rasterizer-viewport</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-query-timer</table-entry-element>
        <table-entry-element color="green">Accuracy issue?</table-entry-element>
        <table-entry-element color="green">Accuracy issue?</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-query-occlusion</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-query-conditional</table-entry-element>
        <table-entry-element color="black">Freeze computer!</table-entry-element>
        <table-entry-element color="black">Freeze computer!</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-primitive-shader</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-image-rect</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-image-array</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-image-2d-compressed</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-image-2d</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-texture-multisample</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-srgb</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-multisample</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-mrt</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-mipmaps</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-fbo-blit</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-range</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-multiple</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-instanced-array</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-instanced</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-elements</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-draw-base-vertex</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-update</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-uniform</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-type</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-buffer-texture</table-entry-element>
        <table-entry-element color="orange">Unexpected warnings</table-entry-element>
        <table-entry-element color="orange">Unexpected warnings</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-blend-mrt</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
        <table-entry-element color="orange">Min/mag tex param required</table-entry-element>
      </table-entry>
      <table-entry>
        <table-entry-element>330-blend-index</table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
        <table-entry-element color="green"></table-entry-element>
      </table-entry>
    </table>
    <paragraph>

    </paragraph>
    <paragraph>
      And this was the 300th post on G-Truc Creation!
    </paragraph>
    <paragraph>
      UPDATED: Thanks to some feedbacks by nVidia, I have updated the samples and the results.
    </paragraph>
    <source-list>
      <source-download index="1034" />
    </source-list>
  </post>

  <post index="0299" date="18/06/2010" std-date="2010-06-18T08:30:00.00Z" title="YSL Restropective at Le Petit Palais of Paris">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <image title="1965, Mondrian cocktail dress"
        img="./post/0299-3.jpg"
        href="./post/0299-3.jpg" />
    <paragraph>
      Le Petit Palais is hosting a life time retrospective of the French fashion designer Yves Saint Laurent (01/08/1936 - 01/06/2008).
    </paragraph>
    <paragraph>
      Along this exhibition, we explore how Yves Saint Laurent how he contributes to the social evolution in the 60s
      for woman through his inspirations in the men wardrobe, the inspiration in international culture and even the fine art.
    </paragraph>
    <paragraph>
      The exhibition is running until the 28th of August for 11€ and I advice the audio guide! (4€).
    </paragraph>
    <image
        img="./post/0299-1-small.jpg"
        href="./post/0299-1.jpg" />
    <image
        img="./post/0299-2-small.jpg"
        href="./post/0299-2.jpg" />
    <source-list>
      <source-element type="Link" href="http://www.yslretrospective.com/" title="The exhibition website" />
    </source-list>
  </post>

  <post index="0298" date="15/06/2010" std-date="2010-06-15T23:30:00.00Z" title="OpenGL Samples Pack 4.0.0.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack 4.0.0.0 is available with 57 OpenGL samples: 9 OpenGL 4.0 samples ; 36 OpenGL 3.3 samples ; 12 OpenGL 2.1 samples.
    </paragraph>
    <paragraph>
      One specificity of this release is the generalized used of the sampler object introduced with OpenGL 3.3.
      Texture parameters remain only for swizzling, base and max level as these settings are not part of the sampler.
    </paragraph>
    <paragraph>
      Both AMD and nVidia OpenGL 3.3 and 4.0 drivers (Catalyst 10.5 and Forceware 257.21) fail to run all the samples correctly.
      Consequently, some samples may generate errors, render an unexpected image or crash.
      More information on the drivers support status later on.
    </paragraph>
    <paragraph>
      The samples build on Visual Studio 2008 and 2010. If you want to contribute for further platforms support, don't hesitate to contact me.
    </paragraph>
    <source-list>
      <source-download index="1033" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Submit a bug report or feature request" />
      <source-element type="Link" href="post-0293.html" title="More information on version 4.0.0.0" />
    </source-list>
  </post>

  <post index="0297" date="10/06/2010" std-date="2010-06-10T08:30:00.00Z" title="G-Truc Creation 6.5.0.2 source released">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>
    <paragraph>
      I fixed all the known bugs of G-Truc Creation website. It was time for another source release!
    </paragraph>
    <source-list>
      <source-download index="1032" />
    </source-list>
  </post>

  <post index="0296" date="09/06/2010" std-date="2010-06-09T20:30:00.00Z" title="Releases oriented development model with Git">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <title>Let's define a working process!</title>

    <paragraph>
      In this article, I am going to present the development method I am using for G-Truc Creation projects.
      What's the 'releases oriented development model'? Just a name I came up with, just like the development method I am using.
      Please, this is not about taking things for granted but about giving some thinking material on the working process.
      From as long as I started programming, some friends will remember how I spent my time to repeat the importance of project releasing.
    </paragraph>
    <quote author="ME with my findger up and crazy eyes! :)" href="contact.html">
      The only thing that matter, it's the release! Not only once, we need to release twice because as long as we manage to release twice, we will be able to release more.
    </quote>
    <paragraph>
      This is quite a passionnate idea quite disconnected from any reasons but I quite believe it remains a base idea for how I work and how I want my way of working to evolve.
      One of my assumption is that the way we work ('how') affect the result just like what we actually do.
      The longer the project lives, the higher the working process matter.
      If the project is meant for one release and then being through away then I would say "who cares about the working process?".
    </paragraph>

    <list name="The releases oriented development model goals:">
      <list-element>Allow to release anytime</list-element>
      <list-element>Allow to maintain old versions and sub-versions of a project</list-element>
      <list-element>Allow testing multiple platform simultaneously</list-element>
      <list-element>Allow an easy support of a new platform</list-element>
      <list-element>Keep project dependencies up to date with reliable code</list-element>
      <list-element>Allow an access to the code anytime, anywhere</list-element>
      <list-element>Reduce amount of bugs introduced by accident with maintenance releases.</list-element>
      <list-element>Keep tests and experimental code out of releases.</list-element>
      <list-element>Allow a feature development to fail without poluting the repository.</list-element>
    </list>
    <paragraph>
      To archive all these challenges my main tools are, as you probably know already,
      <link href="http://git-scm.com/">Git</link>, <link href="http://www.cmake.org">CMake</link> and <link href="http://trac.edgewall.org">Trac</link>.
    </paragraph>

    <title>Trac for planning ahead</title>
    <paragraph>
      My use of Trac is fairly limited as I use it mainly as a bug tracker but also to write down ideas and plan ahead for the future development and release.
      I am not really pedentic on which feature will be present for which release.
      It depends on the work progress of the features and Git is quite an ally for that purpose.
      I am not an expert in bug trackers and ci and I could probably use another one.
      Track by itself is great but Track on <link href="http://www.sf.net/">SF.net</link> is really so slow! I guess a better alternative would be nice.
    </paragraph>

    <title>CMake for cross platform / cross compiler development</title>
    <paragraph>
      CMake is a cross platform project generator.
      It's good but if one day another similar tool get released, I would definetely have a look expecting a switch.
      With CMake we define projects and solutions inside script files. Then, CMake generates the project for Visual Studio, GCC/make, XCode, etc.
      Good in principle but the scripts are quite messy, it's taugh to read someone else scripts,
      they contains a lot of 'if' for platform specific things,
      the documentation for build-in functions and variables is ok but for the script language documentation remains limited...
      Well, it's not perfect, far from it, but for cross platform projects it's a good solution!
    </paragraph>
    <paragraph>
      With some efforts, CMake gives a certain level of cross platform capabilities of a project.
      The out of source build feature of CMake allows on a same platform to build multiple project out of the same source code.
      For example, on a unique platform, a project for Visual Studio 2008, one for Visual Studio 2010, one for GCC, etc.
      but also multiple projects for different profiles, debug / release, 32 bits / 64 bits.
      An update of the script and all the projects will be automatically rebuild and updated with the script changes.
      There are good sides to CMake, definetely!
    </paragraph>

    <title>Git for releases oriented development</title>
    <paragraph>
      Git is a distributed version control system.
      It has the reputation to be really complicated to use...
      I would say, it's quite disturbing at the beginning and it requires some thoughts to avoid either a very basic use of it or a complete mess.
      After few months of use, the experience of <link href="http://www.nongnu.org/cvs">CVS</link> and
      <link href="http://subversion.tigris.org/">SVN</link> I can say out loud: I LOVE Git!
    </paragraph>
    <paragraph>
      I like Git for many reasons from which the branch / merge capabilities are on top.
      One big difference from Git and SVN is that Git manages changes while SVN manages versions.
      This behavior becomes abvious while using <bold href="http://www.kernel.org/pub/software/scm/git/docs/gitk.html">gitk</bold>,
      a GUI program provided with Git which displayes the changes and the relashionship between repository branches.
      Merging is so easy and so fast (<bold href="http://www.kernel.org/pub/software/scm/git/docs/git-merge.html">git merge xxx</bold> and done)
      that it is easy to merge several time per working day.
      Actually, merging often is a good practice to reduce merge conflicts and with Git conflicts could become extremely rare.
      I actually think that SVN fails with branching, it's because we can't merge often enough.
    </paragraph>
    <paragraph>
      Git supports repository dependency through a feature call <bold href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html">submodule</bold>
      which allows to keep updated external libraries.
    </paragraph>

    <image title="The repositories clones and dependencies"
        img="./post/0296-0.png"
        href="./post/0296-0.png"
        color="white" />

    <title>Versions conventions</title>

    <paragraph>
      This is where we actually start to discuss about the releases oriented development model through the release name convensions.
      My project releases are named and numbered with the following convension: <bold>project-name-M.N.P.R</bold>.
    </paragraph>

    <list name="The project-name-M.N.P.R convension:">
      <list-element>
        <bold>M</bold> for <bold>major</bold>
      </list-element>
      <list-element>
        <bold>N</bold> for <bold>minor</bold>
      </list-element>
      <list-element>
        <bold>P</bold> for <bold>patch</bold>
      </list-element>
      <list-element>
        <bold>R</bold> for <bold>revision</bold>
      </list-element>
    </list>

    <paragraph>
      I don't really expect to change the <bold>major</bold> number. It might happen for a massive update, a rewrite or a change of direction of the project.
      I actually expect that number to last several years.
      In a way, this number is a statement for stability expect when it is 0 where if could be seen as a beta release or at least some ongoing development.
      The <bold>minor</bold> number is updated for important changes, new main features, possible API changes. I expect this number to change few times a year.
      This is a statement for depth evolution.
      The <bold>patch</bold> number update can involve possible new features but backward compatibility is expected.
      This number is a statement for improvements and could change a lot of time in a year.
      The <bold>revision</bold> number implies mainly bug fixes, compatibility and project maintenance.
      I expect this number to change anytime, as needed, as much as possible. It's a statement for maintenance.
    </paragraph>
    <paragraph>
      For any project I want something like these levels of release management and these levels of works.
      If a critical bug is reported, I need to be able to fix it within a day and release even
      if I was working on a big new feature, a large rewrite of a project component or
      even changes that are never going to be released because of a developement failure (result not good enough, technical limitation, etc).
    </paragraph>
    <paragraph>
      Obviously, this convension has some flexibilities.
      For example, the major and minor numbers of the <link href="./project-0026.html">OpenGL Samples Pack</link>
      follows the <link href="http://www.opengl.org">OpenGL</link> version is supports.
      Actually the more important concept behind it is the hability of working at various levels of release frequency.
    </paragraph>

    <title>Branches conventions</title>

    <paragraph>
      The releases oriented development model is articulated around 3 types of branches:
    </paragraph>

    <list name="The 3 branches types for 3 different roles:">
      <list-element>The master branch</list-element>
      <list-element>The version branches</list-element>
      <list-element>The feature branches</list-element>
    </list>

    <title>The master branch</title>

    <paragraph>
      The master branch is the name given by Git for what SVN call Trunk. It's the first branch we have when we start a repository.
      It is a singleton branch used for releases (with tags of each one) and submodules.
      It's a reliable branch that a user could use if he want to be sure to have the last code revision that works.
    </paragraph>

    <title>The version branches</title>

    <paragraph>
      Version branches is a per-patch branch which life-time is unlimited to ensure that even an old branch could be maintained if needed.
      When the development of a version is completed and ready for release, the version branch is merged on the master branch and it is tagged.
      However, if an old version need to be maintained, the old version branch is updated and tag for release directly.
      Thanks to the amazing merging capabilities of Git and the release oriented developement model,
      a bug fix in an old branch can easly be apply on all more recent branches with a simple merge.
    </paragraph>

    <title>The feature branches</title>

    <paragraph>
      Finally, the feature branch. It can be created from one version branch but merge to a more recent version branch when completed.
      It's life time will end and it brings development failure possibility.
      A feature branch is constantly updated with the older version branch it might be merge to make sure that the code doesn't diverge too much.
    </paragraph>

    <paragraph>
      This sounds quite complicated? Maybe it is, who knows?! Let's have a look on an example based on the <link href="./project-0026.html">OpenGL Samples Pack</link>.
      In the real repository, the number of commits is much more higher but I reduce their proportion to see all the connections between branches.
    </paragraph>

    <image title="Branching mecanisum"
      img="./post/0296-1.png"
      href="./post/0296-1.png"
      color="white" />

    <paragraph>
      This is actually quite the current state of this project.
      The <link href="./project-0026.html">OpenGL Samples Pack</link> 3.3.1 is still maintained and any release could be roughly done tomorrow.
      The development of the OpenGL Samples Pack 4.0.0 is actually finished beside some testings so that the development of the OpenGL Samples Pack 4.0.1 has started.
      Three versions in parallel, no problem! Also, thanks to the Git submodule,
      <link href="./project-0016.html">GLM</link> and <link href="./project-0024.html">GLI</link> remained updated to the last version even
      if I don't actually know with one it's suposed to be.
      For development clarity, the submodule code is in read only. If I discover a bug in a submodule, I need to update directly in the submodule repository.
      I might have some improvements to figure out around here... not sure yet.
    </paragraph>

    <paragraph>
      I am currently quite happy with my working process but still some areas are to investigate.
      The main topics left are related to the development pipeline and <link href="http://en.wikipedia.org/wiki/Automation">automation</link>.
    </paragraph>

    <list title="Tasks for release pipeline automation">
      <list-element>Automatic testing and reports</list-element>
      <list-element>Automatic packing, daily build</list-element>
    </list>

    <paragraph>
      My ultimate goal would be to have a push button, that excutes the tests, provides a reports,
      tag the release, build an archive with the right filenames and the right version number and update the files.
      From that I would be not to far from a daily build system. This remains a lot of work to do...
    </paragraph>

  </post>

  <post index="0295" date="01/06/2010" std-date="2010-06-01T00:30:00.00Z" title="EuroGraphics 2010: A noisy future">
    <meta>
      <tag>gtc-tech-event</tag>
    </meta>
    <paragraph>
      During EuroGraphics 2010, I assist to a really amazing presentation about the
      <link href="http://www.cs.kuleuven.be/groups/graphics/publications/LLCDDELPZ10STARPNF">state of the art in procedural noise</link> by
      <link href="http://www-sop.inria.fr/members/Sylvain.Lefebvre">Sylvain Lefebvre</link> and
      <link href="http://people.cs.kuleuven.be/~ares.lagae">Ares Lagae</link>.
    </paragraph>
    <paragraph>
      Since <link href="http://freespace.virgin.net/hugo.elias/models/m_perlin.htm">Perlin Noise</link>,
      the researches have continued and lead to a better understand of noises in general.
      Perlin Noise may remain a descent solution for some cases where speed is critical but new solutions provide better noise for some other scenarios with less side effects.
      What I really appreciated is the representation of the different methods throught their power spectrums which allows the understand the nature of the noises. As a result of the lastest researches, some scientists manage to extract the noise of some pictures to generate new pictures... This is still really early for practical usage but definitely interesting and impressive as I could not have tall which one was the photograph. <link href="http://www.cs.kuleuven.be/~graphics/publications/LLDD09PNSGC">With sparse gabor convolution</link>, a noise texture can be apply on a mesh without aliasing effects and without multiple sampling per pixel.
    </paragraph>
    <paragraph>
      On a different aspect, I was present for a key note by <link href="http://user.it.uu.se/~eh">Erik Hagersten</link> about 'Super-linear Slowdown with Multicores'.
      Yes, having multi core CPUs can reduce efficiency... at least at equivalent transistor count.
      He defined the issue behind multicore with three words: bandwidth, locality and parallelism.
    </paragraph>
    <paragraph>
      What about noises? Noises are procedural which implies almost no data set, few locality issues beside reuse of generated results
      and easily paralelisable...
    </paragraph>
    <paragraph>
      What this actually means? I guess, noise is a problem that fit into the current multicore environment. Let's through out of nowhere an idea: What about a procedural noise unit in OpenGL 5 hardware? I'm not thinking about something like the GLSL noise functions (still not implemented anyway...), no, I am thinking about something where programmers would have a proper control on the generated noise. I guess, it could be really cool but this is definetly an early thought.
      I'm not sure if the researches are mature enough but I am definetely looking forward for more results on the on going researches.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.cs.kuleuven.be/groups/graphics/publications/LLCDDELPZ10STARPNF" title="State of the Art in Procedural Noise Functions" />
    </source-list>
  </post>

  <post index="0294" date="31/05/2010" std-date="2010-05-31T16:00:00.00Z" title="Irving Penn at the National Portrait Gallery of London">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <quote author="Irving Penn">
      "I invite the subject to the camera. I began to search for an attitude, and then begin to expose film.
      I follow my plan through to hwat may be a dead end or to success...
      I have found that for me it is fatal to change directions radically in the middle of a sitting. I lose the subject."
    </quote>
    <paragraph>
      For some reasons, usual, I don't fell connected with famious photographer's works.
      I can see why it's good or not, it's just that emotionnally, I'm not touched. Irving Penn is one of the few exceptions.
      I like his creation process, I like his view on photography and actually I share these.
    </paragraph>
    <paragraph>
      Irving Penn, 1917 - 2009, was an American photographer acknowledged for his portrait and
      fashion photography who starts his career for Harper's Bazard but works for many years for Vogue Magazine.
    </paragraph>
    <quote author="Irving Penn">
      "In portrait photography there is something more profound we seek inside a person,
      while being painfully aware that a limitation of our medium is that the inside is recordable only in so far as it is apparent on the outside."
    </quote>
    <paragraph>
      The exhibition is on until the 6th of June for £10.
    </paragraph>
    <image title="Salvador Dali, 1947"
      img="./post/0294-1947.jpg"
      href="./post/0294-1947.jpg" />
    <image title="Truman Capote, 1948"
      img="./post/0294-1948.jpg"
      href="./post/0294-1948.jpg" />
    <image title="Pablo Picasso, 1957"
      img="./post/0294-1957.jpg"
      href="./post/0294-1957.jpg" />
    <image title="Jasper Johns, 2006"
      img="./post/0294-2006.jpg"
      href="./post/0294-2006.jpg" />
    <quote author="Irving Penn, 1975">
      "Sensitive people faced with the prospect of a camera portrait put on a face they think is one they would like to show the world.
      ...Very often what lies behind the facade is rare and more wonderful than the subject knows or dares to believe."
    </quote>
    <paragraph>Nice, now I have a great explanation for what I call "True beauty"! :)</paragraph>

    <source-list>
      <source-element type="Link" href="http://www.npg.org.uk:8080/irvingpenn/index.htm" title="The exhibition page" />
    </source-list>
  </post>

  <post index="0293" date="30/05/2010" std-date="2010-05-30T12:00:00.00Z" title="OpenGL Samples Pack 4.0.0.0 work in progress">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      A new release of the OpenGL Samples Pack with OpenGL 4.0 samples is on its way!
    </paragraph>
    <paragraph>
      Currently, the new pack contains 8 OpenGL 4.0 samples including
      tessellation, geometry instancing, texture fetch (trilinear filtering),
      texture gather, transform feedback object, MRT blend state, draw indirect
      and subroutine.
    </paragraph>
    <paragraph>
      Next to these samples I choose to add all the OpenGL 3.3 (including new onces: geometry shaders, texture fetch, blend index and MRT blend) and
      all the OpenGL 2.1 samples for a total of 55 samples so far.
    </paragraph>
    <paragraph>
      The only trouble in the picture... I still didn't manage to get it working on MacOS X with CMake. :/
    </paragraph>
    <source-list>
      <source-download index="1030" />
    </source-list>
  </post>

  <post index="0292" date="25/05/2010" std-date="2010-05-25T08:30:00.00Z" title="GLM 0.9.0.0 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      The final release of GLM 0.9.0 is available and you are invited to update your GLM 0.8.X with this new version.
      However, don't forget that GLM 0.9.0 is not fully backward compatible mainly due to some API simplifications.
      The main change from Beta 2 is the support of Objective-C++.
    </paragraph>
    <paragraph>
      The work on GLM 0.9.1 as already started thanks to the contributions of Christoph Schied and Joshua Smith.
      If everything goes well, it should remove the limitation on half based type component accesses and a much better swizzle operators without name collisions.
    </paragraph>
    <paragraph>
      Enjoy!
    </paragraph>
    <source-list>
      <source-download index="1031" />
      <source-element type="Mailing list" href="https://lists.sourceforge.net/lists/listinfo/ogl-math-users" title="Register to GLM mailing list for users" />
      <source-element type="Mailing list" href="https://lists.sourceforge.net/lists/listinfo/ogl-math-devel" title="Register to GLM mailing list for developers" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0291" date="17/05/2010" std-date="2010-05-17T00:30:00.00Z" title="Hello GeForce GTX 470!">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>
    <paragraph>
      Just like it happened with AMD few months ago, I have been invited by nVidia to some kind of OpenGL program.
      I hope it will lead to a lot of OpenGL fun.
      As you can expect, everything I am learning through these programs is confidential...
    </paragraph>
    <paragraph>
      As a first result, I received a beautiful GeForce GTX 470 which is going to find space next to my Radeon HD 5850 to make a perfect development platform if they dare to work together.
    </paragraph>
    <paragraph>
      Exciting!
    </paragraph>
    <image title="My new GeForce GTX 470, all in black beside this logo!"
      img="./post/0291.jpg"
      href="./post/0291-large.jpg" />
  </post>

  <post index="0290" date="16/05/2010" std-date="2010-05-16T11:30:00.00Z" title="Nathalia Edenmont at Stockholm's Wetterling Gallery">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <image
      img="./post/0290-4.jpg"
      href="./post/0290-4.jpg" />
    <paragraph>
      Nathalia Edenmont is a contreversial Swedish photograph born in <link href="http://en.wikipedia.org/wiki/Yalta">Yalta</link> in Ukraine.
    </paragraph>
    <paragraph>
      The <link href="http://www.wetterlinggallery.com">Wetterling Gallery</link> is displaying her serie title "No feelings" which shows some disturbing pictures of people including children that express no feeling.
      I would say it's some empty feeling pictures. Following the always relevant Newton principle "Action, Reaction", these photographes awake the viewers feelings.
    </paragraph>
    <paragraph>
      I personnaly believe that Nathalia Edenmont display in this series the lack of consideration people could have probably with a focus on the fashion world here.
      I don't think it's a fair view as high street cloths, that we all buy, are actually more subject to a global and massive consideration
      by who makes them and who makes them. Do you realize that the cloths you buy are made in a dictature, maybe made by children or under paid employees?
    </paragraph>
    <paragraph>
      An outstanding display open to public for free until May 22.
    </paragraph>
    <image
      img="./post/0290-1.jpg"
      href="./post/0290-1.jpg" />
    <image
      img="./post/0290-2.jpg"
      href="./post/0290-2.jpg" />
    <image
      img="./post/0290-3.jpg"
      href="./post/0290-3.jpg" />
    <source-list>
      <source-element type="Link" href="http://www.wetterlinggallery.com" title="Wetterling Gallery website with a lot of picture of the series!" />
    </source-list>
  </post>

  <post index="0289" date="14/05/2010" std-date="2010-05-14T8:30:00.00Z" title="OpenGL Samples Pack 3.3.1.2 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      This revision of the OpenGL Samples Pack 3.3 should fix Linux build.
      It also introduces few changes so that I can work in parallel on OpenGL 2.1 samples, OpenGL 3.3 samples and OpenGL 4.0 samples:
      Samples in a pack can run with different OpenGL version and, for example, changes of OpenGL 2.1 samples can be apply on OpenGL 3.3 samples with a simple merge.
    </paragraph>
    <paragraph>
      Thanks <link href="http://git-scm.com">Git</link>!
    </paragraph>
    <source-list>
      <source-download index="1030" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Submit a bug report or feature request" />
    </source-list>
  </post>

  <post index="0288" date="12/05/2010" std-date="2010-05-12T22:30:00.00Z" title="OpenGL Samples Pack 2.1.0.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>
    <paragraph>
      The OpenGL Samples Pack 2.1 is a collection of OpenGL 2.1 samples... So after OpenGL 3.3 samples I do downgrades? Yes!
    </paragraph>
    <paragraph>
      This first version 2.1.0.0 is a Windows (and probably Linux) release but the goal is to bring the samples pack on MacOS X for next release.
      Because of Apple exclusively, MacOS X is way behind Windows and Linux in matter of OpenGL support and remains stock to OpenGL 2.1 + extensions... not cool!
    </paragraph>
    <paragraph>
      I still have trouble to use <link href="http://www.cmake.org">CMake</link> on MacOS X with OpenGL... if anyone has an experience in this area, please send me a mail! Thanks in advance!
    </paragraph>
    <source-list>
      <source-download index="1029" />
      <source-download index="1026" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-samples/newticket" title="Submit a bug report or feature request" />
    </source-list>
  </post>

  <post index="0287" date="07/05/2010" std-date="2010-05-07T20:00:00.00Z" title="The Halmstad Group at Norrköpings' Konstmuseum">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <image title="Nattligt Tema, Sven Jonson, 1938"
      img="./post/0287.jpg"
      href="./post/0287.jpg" />
    <paragraph>
      <link href="http://www.mollbrinks.se/bilder/Titti_Halmstadgruppen.pdf">The Halmstad Group</link> is a Swedish group of surrealism painters founded by
      <link href="http://sv.wikipedia.org/wiki/Erik_Olson">Erik Olson</link> in 1929 and composed by
      <link href="http://sv.wikipedia.org/wiki/Waldemar_Lorentzon">Waldemar Lorentzon</link>,
      <link href="http://sv.wikipedia.org/wiki/Stellan_M%C3%B6rner">Sellan Mörner</link> and
      <link href="http://sv.wikipedia.org/wiki/Sven_Jonson">Sven Jonson</link>.
      Unfortunately quite anonymous outside of Sweden, these artists define the Surrealism Swedish style that I found less disturb and more poetic that the French movement.
    </paragraph>
    <paragraph>
      Norrköpings' Konstmuseum display an exhibition exploring the Swedish interpretation of the dreams and chance universe until the 22th of August for 60 Kronor.
    </paragraph>
    <image title="By Sven Jonson"
      img="./post/0287-2.jpg"
      href="./post/0287-2.jpg" />
    <image title="By Waldemar Lorentzon"
      img="./post/0287-3.jpg"
      href="./post/0287-3.jpg" />
    <image title="Den borgerliga moralen i skriftestol, Erik Olson, 1938"
      img="./post/0287-4.jpg"
      href="./post/0287-4.jpg" />
    <image title="Morgon, Sven Jonson, 1941"
      img="./post/0287-5.jpg"
      href="./post/0287-5.jpg" />
  </post>

  <post index="0286" date="03/05/2010" std-date="2010-05-03T23:30:00.00Z" title="G-Truc Creation 6.5 released">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>
    <paragraph>
      Ok, I must admit that during my transition to Git I made quite some mistakes especially on G-Truc Creation website...
    </paragraph>
    <paragraph>
      G-Truc Creation 6.5 is a large bug fixes release, a subtle design update and finally a new page builder for Xalan C, Xalan J and Saxon.
      Current, I don't have a working Windows based computer and I had to have a page builder working on MacOS X (through Xalan J or Saxon) to keep the website updated.
    </paragraph>
  </post>

  <post index="0285" date="30/04/2010" std-date="2010-04-30T20:00:00.00Z" title="GLM 0.9 Beta 2 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      After a successfull transition to Git, GLM 0.9 Beta 2 is available.
    </paragraph>
    <paragraph>
      Even if GLM 0.8 and 0.9 are quite different, Git allows to maintain GLM 0.8 for as long as I will recieved bug reports.
    </paragraph>
    <paragraph>
      Enjoy!
    </paragraph>
    <source-list>
      <source-download index="1028" />
    </source-list>
  </post>

  <post index="0284" date="29/04/2010" std-date="2010-04-29T08:30:00.00Z" title="G-Truc Creation 6.4 source released">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>
    <paragraph>
      For those who like crazy XSL code, the source code of the current version of the website is available.
    </paragraph>
    <source-list>
      <source-download index="1027" />
    </source-list>
  </post>

  <post index="0283" date="27/04/2010" std-date="2010-04-27T20:00:00.00Z" title="GLM transition to Git">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <paragraph>
      My transition to <link href="http://git-scm.com/">Git</link> has implied a reorganization of my projects at several levels.
      Each project has and will have a different SourceForge project.
      GLM has it own <link href="https://sourceforge.net/projects/ogl-math/">SF.net project</link>
      and its own <link href="https://sourceforge.net/apps/trac/ogl-math">Trac page</link>.
    </paragraph>
    <paragraph>
      I used to log all the changes made in a XML files but from now on,
      the <link href="http://ogl-math.git.sourceforge.net/git/gitweb.cgi?p=ogl-math/ogl-math;a=summary">Git log</link> will be used for this purpose.
    </paragraph>
    <paragraph>
      A Beta 2 of GLM 0.9 should be released soon and should lead to the final release.
    </paragraph>
    <source-list>
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
      <source-element type="Link" href="project-0016.html" title="G-Truc Creation GLM project page" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/ogl-math" title="GLM Trac page, for requests and bug reports" />
      <source-element type="Link" href="https://sourceforge.net/projects/ogl-math/" title="GLM SourceForge.net page" />
      <source-element type="Link" href="http://ogl-math.git.sourceforge.net/git/gitweb.cgi?p=ogl-math/ogl-math;a=snapshot;h=HEAD;sf=tgz" title="GLM HEAD snapshot" />
      <source-element type="Link" href="http://ogl-math.git.sourceforge.net/git/gitweb.cgi?p=ogl-math/ogl-math;a=summary" title="Git log" />
    </source-list>
  </post>

  <post index="0282" date="19/04/2010" std-date="2010-04-19T23:30:00.00Z" title="OpenGL 3.4 / 4.1: Expectations / Wish-list (summary)">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
    </meta>

    <title>What are my expectations for OpenGL 4.1?</title>

    <list name="High probability:">
      <list-element>Image load and store from shaders</list-element>
      <list-element>64 bits float vertex attributes</list-element>
      <list-element>Early Z-test setup</list-element>
    </list>

    <list name="Medium probability:">
      <list-element>Buffer load and store from shaders</list-element>
    </list>

    <title>What are my expectations for OpenGL 3.4?</title>

    <list name="High probability:">
      <list-element>Varying explicit locations</list-element>
      <list-element>GLSL 'precise' and 'fma'</list-element>
    </list>

    <list name="Medium probability:">
      <list-element>Direct State Access</list-element>
      <list-element>Separate shader programs</list-element>
    </list>

    <list name="Low probability:">
      <list-element>OpenGL drivers Feedback</list-element>
      <list-element>Command list</list-element>
      <list-element>GLSL includes</list-element>
      <list-element>GLSL binaries &amp; co</list-element>
      <list-element>Generalized (uniforms and blocks) explicit locations / indexes</list-element>
      <list-element>Debug profile</list-element>
    </list>

    <title>My personal wish-list for OpenGL 3.4 and OpenGL 4.1</title>

    <list name="High priority:">
      <list-element>Direct State Access</list-element>
      <list-element>Separate shader programs</list-element>
      <list-element>Image and buffer load and store through 'bindless graphics'</list-element>
    </list>

    <list name="Medium priority:">
      <list-element>GLSL 3.40 cast convensions following GLSL 4.00 cast convensions</list-element>
      <list-element>Command list</list-element>
      <list-element>Debug profile</list-element>
      <list-element>Generalized (uniforms and blocks) explicit locations / indexes</list-element>
      <list-element>Early Z-test setup</list-element>
    </list>

    <list name="Low priority:">
      <list-element>OpenGL drivers Feedback</list-element>
      <list-element>GLSL 'precise' and 'fma'</list-element>
      <list-element>GLSL includes</list-element>
      <list-element>GLSL binaries &amp; co</list-element>
      <list-element>64 bits float vertex attributes</list-element>
    </list>
  </post>

  <post index="0281" date="19/04/2010" std-date="2010-04-19T23:30:00.00Z" title="OpenGL 3.4 / 4.1: Expectations / Wish-list (others)">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
    </meta>

    <title>Debug profile</title>
    <paragraph>
      One difference between a good API and a great API is from my point of view how it allows us to develop with it which includes debugging.
    </paragraph>
    <paragraph>
      Currently, the main thing we have in the API is <keyword href="http://www.opengl.org/sdk/docs/man/xhtml/glGetError.xml">glGetError</keyword> which feels seriously limited.
      There are some softwares like <link href="http://www.gremedy.com/">gDEBugger</link> or
      <link href="http://www.vis.uni-stuttgart.de/glsldevil/">glslDevil</link> which are going to tell us about the order of function calls,
      about the results of shader computations but does it really reach debugging completness?
    </paragraph>
    <paragraph>
      For example, I recently experience something that I could expect that such software can't see but a debug profile will tell me.
      I was trying on AMD a code sample which generate mipmaps from a framebuffer texture I wrote previously on nVidia.
      At launch, the sample simply crash without any notice (no OpenGL error)... not nice!
      After a while, I understand that AMD drivers want that we want to generate mipmaps before the rendering to texture.
      We need to call once <keyword href="http://www.opengl.org/sdk/docs/man4/xhtml/glGenerateMipmap.xml">glGenerateMipmaps</keyword> to allocate the memory.
      I understand how it sounds like a good practice and that we should do this even on nVidia but it crashs without a word.
      With a debugging profile, we could have had a clear message that even explain what going on and why.
    </paragraph>
    <paragraph>
      I even actually believe that it could be use to give a lot of comment and advice to the developers to just make a better use of OpenGL
      because performance wouldn't be a critical criterion on that profile.
    </paragraph>
    <paragraph>
      Instead of <keyword href="http://www.opengl.org/sdk/docs/man/xhtml/glGetError.xml">glGetError</keyword>,
      we could imagine that each function parameter could be check and would report an error as soon an invalid parameter is given
      or even warnings about anything that should work but isn't standard.
    </paragraph>
    <paragraph>
      When I compare AMD and nVidia OpenGL drivers, I think AMD drivers are really strict and follow really well the specification.
      nVidia has this effect that it always works and this is a bit annoying because if we develop on nVidia and then test the software on AMD,
      we will have problems on AMD when actually the issue is the lack of accuracy of nVidia drivers.
      Recent examples I experience:
    </paragraph>
    <list name="Things that shouldn't work but work on OpenGL 3.3 nVidia drivers:">
      <list-element>Vertex shader inputs can't be blocks</list-element>
      <list-element>Varying explicit locations</list-element>
      <list-element>Use of the default vertex array object</list-element>
    </list>
    <paragraph>
      With a debug profile, nVidia would be free to keep this lack of accuracy and just output a warning "this is not standard but we support it because it's a cool feature".
      If we compare with C++ compilers. Almost all of them have their own freedom. Visual Studio supports since forever ago anonymous union which is a really cool feature
      and even GCC has the 'pedantic' compiler parameter to really be strict (not set by default!) because sometime specifications are a bit too rigid.
    </paragraph>
    <paragraph>
      Better debugging capabilities, better implementation freedom and comments about this freedom and better documentation on good use of the drivers.
      Sound great but even if such profile reach OpenGL one day, it would probably take a long time for both AMD and nVidia to implement it properly...
    </paragraph>

    <title>Early Z-test</title>

    <paragraph>
      On aspect of <link href="http://www.opengl.org/registry/specs/EXT/shader_image_load_store.txt">GL_EXT_shader_image_load_store</link>
      defines how to handle the 'early depth test', an optimization that discards some fragment processing. In his side, AMD
      has released <link href="http://www.opengl.org/registry/specs/AMD/conservative_depth.txt">GL_AMD_conservative_depth</link> which actually implement
      a Direct3D 11 feature allowing to pass enough information to the OpenGL implementation so that when the
      <keyword>gl_FragDepth</keyword> output is modified, the early z-culling can still be performed... nice!
    </paragraph>

    <title>Command lists for multithreading rendering</title>

    <paragraph>
      When Direct3D 11 got released, it felt a bit ironical that Direct3D 11 brings the concept of display list in its API while OpenGL deprecates it.
      I'm still using display lists because I find them still really efficient at a software design level when working with 'macro state object'.
      I check if my macro state object is the one I need, if not, I call the display list of my new macro state object. Very efficient and simple design.
    </paragraph>
    <paragraph>
      Basiccaly, I use display list only for none displayable things... The OpenGL API is quite a nightmare to know what can be place in a display list or not.
      Having display list deprecated seems good to me actually. We need a similar concept but more generic.
    </paragraph>
    <paragraph>
      In Direct3D 11 the command lists are used mainly for multithreading rendering so that each thread can build a list of commands and
      finally the main graphics thread will execute these lists.
    </paragraph>
    <paragraph>
      With OpenGL display list, we can almost do something similar, except that I'm really not sure about
      how an OpenGL developer could take care of untracked commands by display lists...
    </paragraph>
    <paragraph>
      Unfortunately, I haven't actually find any information that could make me think that the ARB is considering improving OpenGL multithreading rendering...
    </paragraph>

    <title>Shader binary / cache / precompiled / blob / -D</title>

    <paragraph>
      When GLSL was created shaders were really simple. Basically,
      a simple vertex shader and fragment shader linked into a program with a single function each (main) and we were done.
      As time goes, they became more and more complex to the point that we speak of ubber shaders, shaders that can handle all cases.
    </paragraph>
    <paragraph>
      The GLSL build system of OpenGL is quite poor because it as been design for the initial needs.
      Coming along with OpenGL 3.3, <link href="http://www.opengl.org/registry/specs/ARB/shading_language_include.txt">GL_ARB_shading_language_include</link>
      (not implemented yet by any drivers) try to bring some improvements of this build system by managing the GLSL sources.
    </paragraph>
    <paragraph>
      Whether or not the GLSL build system is a role of the OpenGL API seems a good debate topic but I don't really have an idea or where we are going on that side.
      It's too soon, still a researsh topic.
    </paragraph>
    <paragraph>
      Some people are requesting shader binaries, I even heard of a 'shader blob' idea but I don't know anything about it.
      From my point of view, 2 simples thing would be a great help: An option like GCC -Dmacro[=defn] to define symboles at build.
      In a way, this is already possible through <keyword href="http://www.opengl.org/sdk/docs/man/xhtml/glShaderSource.xml">glShaderSource</keyword>
      function by using the first string to put all our defines. It works... but how nice is it? (That's a real question actually!)
    </paragraph>
    <paragraph>
      Something else that quite bother me is how to share the structure definitions between shader stage.
      Vertex shader output blocks need to match fragment shader input blocks and this is good and required.
      I would like a way to guaranty that stages match and this will be even more important with separate shader programs
      where programs linking could not tell us about varying variable mismatch.
    </paragraph>
    <paragraph>
      Should we have a proper compiler object, we would load and release it to save memory? (Like on embedded system to save some memory)
      Should we be able to get the binaries?
      Should we be able to configure the GLSL compiler for debugging, optimisations?
      Should we actually get the same (or a closer) level of features to C++ compilers?
    </paragraph>
    <paragraph>
      Well, a lot to do and to study on this area. I'm quite curious to see how it will evolve.
      I'm not sure if we could expect anything on that side for OpenGL 3.4 nor OpenGL 4.1.
    </paragraph>

    <title>OpenGL drivers Feedback</title>

    <paragraph>
      Both AMD and nVidia seems really interest on the topic of giving processing informations from the OpenGL drivers those days.
      The first official example on that topic is obviously <link href="http://www.opengl.org/registry/specs/ARB/timer_query.txt">GL_ARB_timer_query</link>,
      part of OpenGL 3.3 and just so great because it always real-time timing without rendering pipeline stalling.
      Why only now? I don't know.
      Both AMD and nVidia seems to be interested to give developers more feedbacks abd this is confirm by multiple extension releases.
    </paragraph>

    <list>
      <list-element>
        <link href="http://www.opengl.org/registry/specs/AMD/performance_monitor.txt">GL_AMD_performance_monitor</link>
      </list-element>
      <list-element>
        <link href="http://www.opengl.org/registry/specs/ATI/meminfo.txt">GL_ATI_meminfo</link>
      </list-element>
      <list-element>
        <link href="http://developer.download.nvidia.com/opengl/specs/GL_NVX_gpu_memory_info.txt">GL_NVX_gpu_memory_info</link>
      </list-element>
    </list>

    <title>More 64 bits types in OpenGL 4.1</title>

    <paragraph>
      This is something I am 80% sure we will see in OpenGL 4.1.
      With their OpenGL 4.0 drivers, nVidia has released an extension called
      <link href="http://developer.download.nvidia.com/opengl/specs/GL_EXT_vertex_attrib_64bit.txt">GL_EXT_vertex_attrib_64bit</link>
      that defines 64 bits floating-point attributes. AMD is a contributor to this extension and it's quite a trivial changes beside the fact that
      a 3 or 4 components double count for 2 generic vertex attributes.
    </paragraph>
    <paragraph>
      nVidia also release an extension called
      <link href="http://developer.download.nvidia.com/opengl/specs/GL_NV_vertex_attrib_integer_64bit.txt">GL_NV_vertex_attrib_integer_64bit</link>
      which introduces u/int8_t u/int16_t  u/int32_t u/int64_t scalar and vector types in GLSL and an API to send 64bits integers through attributes.
      I don't think AMD Radeon 5000 series have support for such features so that we can expect this to make into OpenGL specifications before OpenGL 5.0.
      Unless AMD choose emulation just like double-float on Radeon HD 5700 series.
    </paragraph>
    <paragraph>
      Anyway, I'm not convinced yet by how usefull 64 bits types are.
    </paragraph>

    <title>OpenGL 4.0 features that could be part of OpenGL 3.4</title>

    <paragraph>
      The most obvious features of <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link>
      that I would see in OpenGL 3.4 are actually from GLSL.
      I find it quite crazy but in <link href="http://www.opengl.org/registry/doc/GLSLangSpec.4.00.8.clean.pdf">GLSL 4.00</link>,
      the old explicit type casting have been replaced by implicit casts.
      There is not reason I can see for not having the same behaviour in GLSL 3.XX.
      Actually, it would increase shader code compatibility which sound good to me even if
      I am more into the old strict type casting of <link href="http://www.opengl.org/registry/doc/GLSLangSpec.3.30.6.clean.pdf">GLSL 3.30</link>.
      In one hand, with implicit cast there is always cases where we can miss a specific behaviour.
      In other hand with explicit casts, the worse we could have is a compiler error...
    </paragraph>

    <paragraph>
      <link href="http://www.opengl.org/registry/doc/GLSLangSpec.4.00.8.clean.pdf">GLSL 4.00</link> also adds a qualifier called
      <keyword>precise</keyword> to make sure that the compiler is not going to do a crazy optimisations
      which can imply cracks during tesselation for example. A 'precise' qualifier in GLSL 3.40 would be welcome too.
      Coming along <keyword>precise</keyword>, the <keyword>fma</keyword> GLSL function allows to compute a MAD (MUL+ADD) operation as if it was a single instruction.
      (Which it is for half of the G80 core for example.)
    </paragraph>
  </post>

  <post index="0280" date="19/04/2010" std-date="2010-04-19T23:30:00.00Z" title="OpenGL 3.4 / 4.1: Expectations / Wish-list (major)">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
    </meta>

    <title>Separate shader programs and generalized explicit locations / indices</title>
    <paragraph>
      When <link href="http://developer.nvidia.com/page/cg_main.html">Cg</link> was introduced in 2002, it was already designed with a concept call 'semantics'.
      Semantics are like a contract signed between the shader programs and the C++ programs defining how attributes should be linked between them.
      The names of these semantics were <keyword>POSITION</keyword>, <keyword>PSIZE</keyword>, <keyword>FOG</keyword>,
      <keyword>COLOR0</keyword>, <keyword>COLOR1</keyword>, <keyword>TEXCOORD0–TEXCOORD7</keyword>.
      A contract signed by the C++ program and the shader programs which details were wrote by nVidia...
      For years a practice was to use texture coordinate entries to pass the tangents because we didn't had the choice... what's the heck? Oo
    </paragraph>
    <paragraph>
      When GLSL was released in 2004 a fairly different approach have been taken.
      Actually, 2 ways were possibles: Either querying the attribute locations with
      <keyword href="http://www.opengl.org/sdk/docs/man/xhtml/glGetAttribLocation.xml">glGetAttribLocation</keyword>
      or setting the location value with <keyword href="http://www.opengl.org/sdk/docs/man/xhtml/glBindAttribLocation.xml">glBindAttribLocation</keyword>,
      a method that took a long time to be reliable on both nVidia and AMD.
    </paragraph>
    <paragraph>
      With <link href="http://www.opengl.org/registry/doc/glspec33.core.20100311.withchanges.pdf">OpenGL 3.3</link> and
      <link href="http://www.opengl.org/registry/specs/ARB/explicit_attrib_location.txt">GL_ARB_explicit_attrib_location</link>,
      a third really nice new way is available: directly setting the attribute locations in the shader.
      The semantics idea finally done right! The developers can define a contract between the C++ programs and the shader programs without any setting or querying step.
      The first Cg implementation defined itself the contract, with <link href="http://www.opengl.org/registry/doc/GLSLangSpec.3.30.6.clean.pdf">GLSL 3.30</link>,
      programmers themself can define this contract which prevents <keyword>TEXCOORD2</keyword> to be used for tangents.
    </paragraph>
    <paragraph>
      The idea with generalized explicit locations and indices is to extend the possibility of defining a contract to uniform variables and
      uniform blocks but also to varying variables so that the contract could define the communication between shaders.
      <link href="http://developer.nvidia.com/object/opengl_driver.html">nVidia OpenGL 3.3 drivers</link> already allows to specify the location of varying variables,
      to define varying 'semantics'.
    </paragraph>
    <paragraph>
      The concept of 'blocks' has been introduce in
      <link href="http://www.opengl.org/registry/doc/GLSLangSpec.Full.1.40.08.pdf">GLSL 1.40</link> with
      <link href="http://www.opengl.org/registry/doc/glspec31.20090528.pdf">OpenGL 3.1</link> and were only available with uniform variables.
      In a way, blocks follow the idea of contract, initially just at uniform variables level.
      With <link href="http://www.opengl.org/registry/doc/GLSLangSpec.1.50.11.pdf">GLSL 1.50</link>
      and <link href="http://www.opengl.org/registry/doc/glspec32.core.20091207.withchanges.pdf">OpenGL 3.2</link>,
      blocks has been generalized to varying variables and by that fact, extend a bit the idea of contract to communicate between shader stages.
      nVidia has made some work to extend this concept to vertex shader inputs and fragment shader outputs.
      I have experimented it and vertex attribute block work well but I had a link error when trying fragment shader output block.
      This interest by nVidia feels like a good hint for where we are going and it is one that really please me!
    </paragraph>

    <code title="OpenGL 3.3 explicit locations:">
      <line>
        <keyword>#version</keyword> 330 core
      </line>
      <line>

      </line>
      <line>
        <comment>// Declare all the semantics</comment>
      </line>
      <line>
        <keyword>#define</keyword> ATTR_POSITION	0
      </line>
      <line>
        <keyword>#define</keyword> ATTR_COLOR		3
      </line>
      <line>
        <keyword>#define</keyword> ATTR_TEXCOORD	4
      </line>
      <line>
        <keyword>#define</keyword> FRAG_COLOR		0
      </line>
      <line>

      </line>
      <line>
        <keyword>uniform</keyword> transform
      </line>
      <line>
        {
      </line>
      <line align="32px">
        <keyword>mat4</keyword> MVP;
      </line>
      <line>
        } Transform;
      </line>
      <line>

      </line>
      <line>
        <keyword>layout</keyword>(<keyword>location</keyword> = ATTR_POSITION) <keyword>in vec2</keyword> Position;
      </line>
      <line>
        <keyword>layout</keyword>(<keyword>location</keyword> = ATTR_TEXCOORD) <keyword>in vec2</keyword> Texcoord;
      </line>
      <line>

      </line>
      <line>
        <keyword>out</keyword> vert
      </line>
      <line>
        {
      </line>
      <line align="32px">
        <keyword>vec2</keyword> Texcoord;
      </line>
      <line>
        } Vert;
      </line>
      <line>

      </line>
      <line>
        <keyword>void</keyword> main()
      </line>
      <line>
        {
      </line>
      <line align="32px">
        Vert.Texcoord = Texcoord;
      </line>
      <line align="32px">
        gl_Position = Transform.MVP * <keyword>vec4</keyword>(Position, 0.0, 1.0);
      </line>
      <line>
        }
      </line>
    </code>

    <code title="OpenGL 3.4 generalized block and explicit locations and indices?">
      <line>
        <keyword>#version</keyword> 340 core
      </line>
      <line>

      </line>
      <line>
        <comment>// Declare all the semantics</comment>
      </line>
      <line>
        <keyword>#define</keyword> UNIF_TRANSFORM	0
      </line>
      <line>
        <keyword>#define</keyword> UNIF_MATERIAL	1
      </line>
      <line>
        <keyword>#define</keyword> ATTR_POSITION	0
      </line>
      <line>
        <keyword>#define</keyword> ATTR_COLOR		3
      </line>
      <line>
        <keyword>#define</keyword> ATTR_TEXCOORD	4
      </line>
      <line>
        <keyword>#define</keyword> VERT_POSITION	0
      </line>
      <line>
        <keyword>#define</keyword> VERT_COLOR	3
      </line>
      <line>
        <keyword>#define</keyword> VERT_TEXCOORD	4
      </line>
      <line>
        <keyword>#define</keyword> VERT_INSTANCE	7
      </line>
      <line>
        <keyword>#define</keyword> FRAG_COLOR		0
      </line>
      <line>

      </line>
      <line>
        <keyword>layout</keyword>(<keyword>index</keyword> = UNIF_TRANSFORM) <keyword>uniform</keyword> transform
      </line>
      <line>
        {
      </line>
      <line align="32px">
        <keyword>mat4</keyword> MVP;
      </line>
      <line>
        } Transform;
      </line>
      <line>

      </line>
      <line>
        <keyword>in</keyword> attrib
      </line>
      <line>
        {
      </line>
      <line align="32px">
        <keyword>layout</keyword>(<keyword>location</keyword> = ATTR_POSITION) <keyword>vec2</keyword> Position;
      </line>
      <line align="32px">
        <keyword>layout</keyword>(<keyword>location</keyword> = ATTR_TEXCOORD) <keyword>vec2</keyword> Texcoord;
      </line>
      <line>
        } Attrib;
      </line>
      <line>

      </line>
      <line>
        <keyword>out</keyword> vert
      </line>
      <line>
        {
      </line>
      <line align="32px">
        <keyword>vec4</keyword> gl_Position;
      </line>
      <line align="32px">
        layout(<keyword>location</keyword> = VERT_TEXCOORD) <keyword>vec2</keyword> Texcoord;
      </line>
      <line>
        } Vert;
      </line>
      <line>

      </line>
      <line>
        <keyword>void</keyword> main()
      </line>
      <line>
        {
      </line>
      <line align="32px">
        Vert.Texcoord = Attrib.Texcoord;
      </line>
      <line align="32px">
        gl_Position = Transform.MVP * <keyword>vec4</keyword>(Attrib.Position, 0.0, 1.0);
      </line>
      <line>
        }
      </line>
    </code>

    <paragraph>
      I would be really surprised if all of the generalized blocks, explicit locations and indexes are actually part of OpenGL 3.4.
      However, the chances to see explicit varying locations is actually high. nVidia already support it in the their OpenGL 3.3 drivers!
      The idea of communication contract between shader might bring a huge benefice: If we know how to communicate then the linking step of a GLSL program might because moot.
    </paragraph>
    <paragraph>
      Currently, at linking the compiler need to link the output variables of the vertex shader to the input variables of the fragment shader using the variable string name.
      With explicit varying location, this task would disapear:
      output vertex shader variable with location 0 would automatically communicate with input fragment shader variable with location 0 automatically.
      We could even imagine a new function to replace <keyword>glTransformFeedbackVarying</keyword> taking location (semantics) arguments.
      Such function actually already exist (<keyword>glTransformFeedbackVaryingsNV</keyword>)
      within nVidia <link href="http://www.opengl.org/registry/specs/NV/transform_feedback.txt">GL_NV_transform_feedback</link> extension.
    </paragraph>
    <paragraph>
      Separate shader programs are a highly asked feature because it will allows to mix and match shaders from different stages.
      Chances are that the same vertex shader could be use for different fragment shaders (for different materials) but so far with GLSL, the vertex shader has to be attached to several GLSL programs.
      Moreover, it will make easier porting Direct3D softwares which design rely on shader stage independence.
    </paragraph>

    <title>VAO evolution through 'bindless graphics'</title>

    <paragraph>
      When VAOs went available with OpenGL 3.0, the community was at first quite enthusiast. However, then we realized that VAOs didn't satisfied the expectations their brought
      in term of performance. Basically, VAOs reduce all the vertex attributes configuration calls to just a single call at draw call.
      All the usual calls are moved at VAOs creation time. Unfortunately, as long as the number of VAOs increase,
      the performance decrease to the points that performance drop lower than a use of VBOs only.
    </paragraph>
    <paragraph>
      The way VAOs are designed, VAO matches one mesh.
      If we don't use a semantis oriented software design it become worse because we need as much VAOs as shaders used by mesh, multiple VAOs per mesh.
      To be efficient, VAO need to store several meshes which is possible but it require a quite complicate software design for actually a small performance increase anyway.
      Doesn't it worse it? On AMD, it's up to +20% for less than 2000 VAOs. On nVidia, it's more performance than up to +20% but up to 200 VAOs...
    </paragraph>
    <paragraph>
      The lazy 'one everything per meshes' approach is actually quite used by developers that can't afford to develop a more sophisticated design.
      In this case VAO API feet easily but it's really inefficient anyway.
      OpenGL becomes efficient when assets are shared and draw calls can be sorted to take advantage of these sharing to reduce state and object changes.
    </paragraph>
    <paragraph>
      A fairly common scenario is that a lot of different meshes (a lot of buffer set) in a single software share the same vertex layout / format.
      A sharing scenario where VAOs don't feet because every different buffer combinations required a new VAO or a VAO update.
    </paragraph>
    <paragraph>
      I have been told and I read that VAO benefits come from the saving of chasing buffer pointers but actually there is a lot of other saving.
      Here is an idea I advocate: What if we could share the vertex layout across several different buffer combinations?
    </paragraph>

    <code title="OpenGL 3.0 VAOs:">
      <line>
        glGenVertexArrays(1, &amp;<keyword>this</keyword>->VertexArrayName);
      </line>
      <line>
        glBindVertexArray(<keyword>this</keyword>->VertexArrayName);
      </line>
      <line>

      </line>
      <line>
        glBindBuffer(GL_ARRAY_BUFFER, <keyword>this</keyword>->DynamicBufferName);
      </line>
      <line>
        glVertexAttribPointer(glf::semantic::attr::POSITION, 3, GL_FLOAT, GL_FALSE, <keyword>sizeof</keyword>(vertex),
      </line>
      <line align="32px">
        GLF_BUFFER_OFFSET(0));
      </line>
      <line>
        glVertexAttribPointer(glf::semantic::attr::NORMAL, 4, GL_INT_2_10_10_10_REV, GL_FALSE, <keyword>sizeof</keyword>(vertex),
      </line>
      <line align="32px">
        GLF_BUFFER_OFFSET(<keyword>sizeof</keyword>(glm::<userword>vec3</userword>)));
      </line>
      <line>
        glVertexAttribPointer(glf::semantic::attr::TANGENT, 4, GL_INT_2_10_10_10_REV, GL_FALSE, <keyword>sizeof</keyword>(vertex),
      </line>
      <line align="32px">
        GLF_BUFFER_OFFSET(<keyword>sizeof</keyword>(glm::<userword>vec3</userword>) + <keyword>sizeof</keyword>(i2i10vec4)));
      </line>
      <line>

      </line>
      <line>
        glBindBuffer(GL_ARRAY_BUFFER, <keyword>this</keyword>->StaticBufferName);
      </line>
      <line>
        glVertexAttribPointer(glf::semantic::attr::ALPHA, 1, GL_FLOAT, GL_FALSE, <keyword>sizeof</keyword>(vertex),
      </line>
      <line align="32px">
        GLF_BUFFER_OFFSET(0));
      </line>
      <line>
        glVertexAttribPointer(glf::semantic::attr::TEXCOORD, 2, GL_FLOAT, GL_FALSE, <keyword>sizeof</keyword>(vertex),
      </line>
      <line align="32px">
        GLF_BUFFER_OFFSET(<keyword>sizeof</keyword>(<keyword>float</keyword>)));
      </line>
      <line>
        glBindBuffer(GL_ARRAY_BUFFER, 0);
      </line>
      <line>

      </line>
      <line>
        glEnableVertexAttribArray(glf::semantic::attr::POSITION);
      </line>
      <line>
        glEnableVertexAttribArray(glf::semantic::attr::NORMAL);
      </line>
      <line>
        glEnableVertexAttribArray(glf::semantic::attr::TANGENT);
      </line>
      <line>
        glEnableVertexAttribArray(glf::semantic::attr::ALPHA);
      </line>
      <line>
        glEnableVertexAttribArray(glf::semantic::attr::TEXCOORD);
      </line>
      <line>

      </line>
      <line>
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, <keyword>this</keyword>->ElementBufferName);
      </line>
      <line>
        glBindVertexArray(0);
      </line>
      <line>
        ...
      </line>
      <line>
        <comment>// Use the VAO and draw</comment>
      </line>
      <line>
        glBindVertexArray(VertexArrayName);
      </line>
      <line>
        glDrawElements(GL_TRIANGLES, ElementCount, IndicesType, 0);
      </line>
      <line>

      </line>
      <line>
        <comment>// Use another VAO and draw, reset the entire vertex format / layout and buffers</comment>
      </line>
      <line>
        glBindVertexArray(VertexArrayName2);
      </line>
      <line>
        glDrawElements(GL_TRIANGLES, ElementCount2, IndicesType, 0);
      </line>
    </code>

    <code title="VAO alternative idea with explicit binding points and layout sharing:">
      <line>
        glGenVertexArrays(1, &amp;<keyword>this</keyword>->VertexArrayName);
      </line>
      <line>
        glBindVertexArray(<keyword>this</keyword>->VertexArrayName);
      </line>
      <line>

      </line>
      <line>
        glVertexAttribFormat(0, glf::semantic::attr::POSITION, 3, GL_FLOAT, GL_FALSE, <keyword>sizeof</keyword>(vertex),
      </line>
      <line align="32px">
        GLF_BUFFER_OFFSET(0));
      </line>
      <line>
        glVertexAttribFormat(0, glf::semantic::attr::NORMAL, 4, GL_INT_2_10_10_10_REV, GL_FALSE, <keyword>sizeof</keyword>(vertex),
      </line>
      <line align="32px">
        GLF_BUFFER_OFFSET(<keyword>sizeof</keyword>(glm::<userword>vec3</userword>)));
      </line>
      <line>
        glVertexAttribFormat(0, glf::semantic::attr::TANGENT, 4, GL_INT_2_10_10_10_REV, GL_FALSE, <keyword>sizeof</keyword>(vertex),
      </line>
      <line align="32px">
        GLF_BUFFER_OFFSET(<keyword>sizeof</keyword>(glm::<userword>vec3</userword>) + <keyword>sizeof</keyword>(i2i10vec4)));
      </line>
      <line>
        glBindBufferBase(GL_ARRAY_BUFFER, 0, <keyword>this</keyword>->DynamicArrayBufferName);
      </line>
      <line>

      </line>
      <line>
        glVertexAttribFormat(1, glf::semantic::attr::ALPHA, 1, GL_FLOAT, GL_FALSE, <keyword>sizeof</keyword>(vertex),
      </line>
      <line align="32px">
        GLF_BUFFER_OFFSET(0));
      </line>
      <line>
        glVertexAttribFormat(1, glf::semantic::attr::TEXCOORD, 2, GL_FLOAT, GL_FALSE, <keyword>sizeof</keyword>(vertex),
      </line>
      <line align="32px">
        GLF_BUFFER_OFFSET(<keyword>sizeof</keyword>(<keyword>float</keyword>)));
      </line>
      <line>
        glBindBufferBase(GL_ARRAY_BUFFER, 1, <keyword>this</keyword>->StaticArrayBufferName);
      </line>
      <line>

      </line>
      <line>
        glEnableVertexAttribArray(glf::semantic::attr::POSITION);
      </line>
      <line>
        glEnableVertexAttribArray(glf::semantic::attr::NORMAL);
      </line>
      <line>
        glEnableVertexAttribArray(glf::semantic::attr::TANGENT);
      </line>
      <line>
        glEnableVertexAttribArray(glf::semantic::attr::ALPHA);
      </line>
      <line>
        glEnableVertexAttribArray(glf::semantic::attr::TEXCOORD);
      </line>
      <line align="32px">

      </line>
      <line>
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, <keyword>this</keyword>->ElementBufferName);
      </line>
      <line>
        glBindVertexArray(0);
      </line>
      <line>
        ...
      </line>
      <line>
        <comment>// Use the VAO and draw</comment>
      </line>
      <line>
        glBindVertexArray(VertexArrayName);
      </line>
      <line>
        glDrawElements(GL_TRIANGLES, ElementCount, IndicesType, 0);
      </line>
      <line>

      </line>
      <line>
        <comment>// Change the buffers but keep the vertex format / layout. Only one buffer could be change if relevant</comment>
      </line>
      <line>
        glBindBufferBase(GL_ARRAY_BUFFER, 0, MewDynamicArrayBufferName);
      </line>
      <line>
        glBindBufferBase(GL_ARRAY_BUFFER, 1, NewStaticArrayBufferName);
      </line>
      <line>
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, NewElementBufferName);
      </line>
      <line>
        glDrawElements(GL_TRIANGLES, ElementCount2, IndicesType, 0);
      </line>
    </code>

    <paragraph>
      Currently with VAOs, when we change a buffer we need to call again all the
      <link href="http://www.opengl.org/sdk/docs/man/xhtml/glVertexAttribPointer.xml">glVertexAttribPointer</link> functions.
      With this proposal, we would just need to change the buffers and I would expect that sorting the draw call per VAO to bring an extra benefit.
      This proposal also allows to still use VAOs as static OpenGL 3.0 VAOs... but nVidia release something following this idea and going beyond!
    </paragraph>

    <paragraph>
      After the early community debate on VAOs, nVidia answer was what they call '<link href="http://developer.nvidia.com/object/bindless_graphics.html">bindless graphics</link>'
      which involves 2 extensions:
      <link href="http://www.opengl.org/registry/specs/NV/shader_buffer_load.txt">GL_NV_shader_buffer_load</link> and
      <link href="http://www.opengl.org/registry/specs/NV/vertex_buffer_unified_memory.txt">GL_NV_vertex_buffer_unified_memory</link>.
      At release, nVidia announce that 'bindless graphics' is 7X faster which no one I know reached but a solid 2X has been measure which
      is actually already absolutely amazing.
      Considering that with VAO we get up to +20% so far and with 'bindless graphics' we get +100%, it's a difference of 5X!
    </paragraph>

    <paragraph>
      With bindless graphics, nVidia follows the principle of separating the vertex format from the buffers thanks to
      <link href="http://www.opengl.org/registry/specs/NV/vertex_buffer_unified_memory.txt">GL_NV_vertex_buffer_unified_memory</link>
      but also handle the problem of chasing buffer pointers by giving access to GPU addresses.
      Moreover, <link href="http://www.opengl.org/registry/specs/NV/shader_buffer_load.txt">GL_NV_shader_buffer_load</link>
      allows to read from as much buffers as we want inside shaders and
      <link href="http://www.opengl.org/registry/specs/NV/shader_buffer_store.txt">GL_NV_shader_buffer_store</link> even allows to write from shaders into buffer with OpenGL 4 hardware.
      A new way to do transform feedback?
      On top of that, this extension provides mecanisums to perform atomic operation on these buffers...
    </paragraph>

    <paragraph>
      'Bindless graphics' in OpenGL 4.1 (maybe OpenGL 3.4?). I think there is good chances even if I have the feeling that AMD is a bit against it.
      One trouble is that we have GPU addresses access and from that we can imagine all the Windows blue screens and hardware resets we want (or not).
      If 'bindless graphics' remains optional, then careful developers that need this performance benefice (2X easily!) and extra features would use it,
      others would ignore it. The ARB need to agree and as I have been told, it was already a confictual topic during OpenGL 3.0 development...
    </paragraph>

    <paragraph>
      'Bindless graphics' is somekind of a Direct3D 11 feature with the concepts of RWBuffer and RWTexture.
      I have the idea that the ARB really want to catch up with all Direct3D 11 features as soon as possible which, I guess, increases the probability of this feature adoption.
    </paragraph>

    <title>From 'texture barrier' to image and buffer 'load and store'</title>

    <paragraph>
      One the the most missed feature from OpenGL 3.3 and OpenGL 4.0 release is nVidia
      <link href="http://www.opengl.org/registry/specs/NV/texture_barrier.txt">GL_NV_texture_barrier</link>.
      Texture barrier allows reading from a texture that we are writing to in a safe manner instead of using a texture ping-pong method.
    </paragraph>

    <paragraph>
      With their OpenGL 4.0 drivers, nVidia has released the specification of extensions called
      <link href="http://www.opengl.org/registry/specs/EXT/shader_image_load_store.txt">GL_EXT_shader_image_load_store</link> and
      <link href="http://www.opengl.org/registry/specs/NV/shader_buffer_store.txt">GL_NV_shader_buffer_store</link>
      which extend both texture barrier and bindless graphics to a more generic kind of RWBuffer and RWTexture
      where as much as needed buffers and textures can be used in shaders to load and write data...amazing feature.
      Actually, I don't know how this is going to be used yet but the possibilities bring by this flexiblity feel huge!
    </paragraph>
    <paragraph>
      <link href="http://www.opengl.org/registry/specs/NV/shader_buffer_store.txt">GL_NV_shader_buffer_store</link> is actually a 'bindless graphics' writes feature
      which allows us to think about wonderfully flexible transform feedback method, writing into buffers from any stages, from as much stages as needed and data types and sizes we want.
    </paragraph>
    <paragraph>
      Is <link href="http://www.opengl.org/registry/specs/EXT/shader_image_load_store.txt">GL_EXT_shader_image_load_store</link>
      actually the famious blend shader (integrated in the fragment shader) that has been advotated by a lot of developers? Probably!
    </paragraph>
    <paragraph>
      Both nVidia and AMD has worked on <link href="http://www.opengl.org/registry/specs/EXT/shader_image_load_store.txt">GL_EXT_shader_image_load_store</link>
      which definitely put it in the feature I think we will see in OpenGL 4.1 specification, probably the OpenGL 4.1 'selling feature'.
    </paragraph>

  </post>

  <post index="0279" date="19/04/2010" std-date="2010-04-19T23:30:00.00Z" title="OpenGL 3.4 / 4.1: Expectations / Wish-list (DSA!)">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
    </meta>
    <paragraph>
      This is my last series post resulting of <link href="http://www.gdconf.com">GDC 2010</link> event:
      <link href="http://www.opengl.org/registry/doc/glspec33.core.20100311.withchanges.pdf">OpenGL 3.3</link> and
      <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link> release!
      This article is so long that I decided to split it into 4 posts.
      I could have actually make it longer as I didn't even spoke about all the features I read or thought about.
      Let's say it's just a quite introduction of OpenGL future!
    </paragraph>
    <list>
      <list-element>1 - OpenGL 3.3 review</list-element>
      <list-element>2 - OpenGL 4.0 review</list-element>
      <list-element>3 - OpenGL 3.4 / 4.1: Expectations / Wish-list (&lt;- here we are!)</list-element>
    </list>

    <title>Direct State Access</title>
    <paragraph>
      Let's start straight to the point: <link href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">Direct State Access (DSA)</link> is
      the most wanted feature for OpenGL 3.4 and OpenGL 4.1 by most OpenGL developers.
      When <link href="http://www.opengl.org/registry/doc/glspec30.20080811.withchanges.pdf">OpenGL 3.0</link> get released
      <link href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=243193#Post243193">in a terrible controversy</link>
      (<link href="http://www.youtube.com/watch?v=sddv3d-w5p4">well diserved!</link>)
      the only ray of light came from the DSA extension.
    </paragraph>
    <paragraph>
      DSA is an alternative to the traditional 'bind and edit' way of OpenGL.
      How someone like me who value traditions could want to get ride of an old concept?
      Because this 'bind and edit' is a pain for software design, could be inefficient especially
      with multithreaded drivers and it makes really hard to port an OpenGL software to Direct3D when this port haven't been take care from the ground up.
    </paragraph>
    <paragraph>
      When I'm writting a code I find it to be a great practice to design
      <link href="http://www.youtube.com/watch?v=-FRm3VPhseI">an API that tell me how to use it</link> even without documentation.
      This is hardly possible but I see it as the optimal API, a direction I will try to tend.
      'bind and edit' is just not anything close to this idea especially because it is decorated with 'selectors' link
      <link href="http://www.opengl.org/sdk/docs/man/xhtml/glActiveTexture.xml">glActiveTexture</link>
    </paragraph>

    <list name="Selectors according to DSA extension:">
      <list-element>The matrix mode (deprecated)</list-element>
      <list-element>The current bound texture for each supported texture target</list-element>
      <list-element>The active texture</list-element>
      <list-element>The active client texture</list-element>
      <list-element>The current bound program for each supported program target</list-element>
      <list-element>The current bound buffer for each supported buffer target</list-element>
      <list-element>The current GLSL program</list-element>
      <list-element>The current framebuffer object</list-element>
    </list>
    <list name="Selectors added since DSA extension release:">
      <list-element>The current VAO object (OpenGL 3.0, tricky with immutable / partly mutable / fully mutable uses)</list-element>
      <list-element>The current bound framebuffer object for draw and read. (OpenGL 3.0)</list-element>
      <list-element>The current bound renderbuffer object. (OpenGL 3.0)</list-element>
      <list-element>The current bound sampler for each supported texture target (OpenGL 3.3)</list-element>
      <list-element>The current transform feedback object (OpenGL 4.0)</list-element>
    </list>

    <paragraph>
      Chances are that this number of selectors will increase in the future (immutable state object? blend object?).
      The 'bind and edit' model asks the question of object use cases (object edits / call draws).
      Do we really need to affect the binded objects for the draw call when we want to edit an object?
      How do we want to manage the current states of the renderer?
    </paragraph>
    <paragraph>
      At draw call, we just want to draw but with the 'bind and edit' model
      we might need to check current states just to make sure that edit code side of the software didn't perturbe one or another state.
      We might end up with just checking everything which is a massive CPU overload.
      Worse! To do these states checking, a developer might think of a using <keyword href="http://www.opengl.org/sdk/docs/man/xhtml/glGet.xml">glGet*</keyword> functions
      to request the current state but this is such a bad idea for effectiveness.
    </paragraph>
    <paragraph>
      The way I decide to resolve this problem is by using macro state objects (a set of states of similar semantics) assign a unique identifier for each,
      an compiling the state into an OpenGL <link href="http://www.opengl.org/resources/faq/technical/displaylist.htm">display list</link>.
      When I bind the macro object, I just execute the display list which change all the states and probably more than what I need.
      Simple and efficient (on nVidia, I never made tests on AMD). However, display lists are 'deprecated'...
    </paragraph>
    <paragraph>
      I am lucky. I wrote a multithreaded OpenGL renderer where one thread was dedicated to the OpenGL renderer and
      use to process all the commands given by as many threads as possible which each of them add a lot to do already:
      the application with user event handling, procedural geometry updates, procedural texture generations, etc.
      One thread to feed them all.
    </paragraph>
    <paragraph>
      The design allows with one frame of latency and a reduce cost (a single mutex per frame to swap message sender / recipient lists)
      for the message manager (to communicate from all the threads to the OpenGL thread) to handle the scenario, maximizing macro task multithreading.
      One problem with this design was the management of feedbacks from the OpenGL thread to the other threads.
      All the communications between threads required to use the message manager to be safe.
      With this design, if you need to read a single value, you need to pass by the message system,
      wait until the message is processed (up to 1 frame latency!) before getting the result... We need to stall the rendering pipeline for 1 frame!
    </paragraph>
    <paragraph>
      I'm sure AMD and nVidia design clever solutions to hide this multithreading latency but still it remains somewhere
      where <keyword href="http://www.opengl.org/sdk/docs/man/xhtml/glGet.xml">glGet*</keyword> isn't an optimal scenario.
    </paragraph>

    <code title="Old-fashioned state checking with possible under-layered bi-directional thread communications:">
      <line>
        <keyword>void</keyword> setTexture2DParameter(GLuint Texture, GLenum Target, GLenum Pname, GLint Param)
      </line>
      <line>
        {
      </line>
      <line align="32px">
        GLenum SavedTexture2D;
      </line>
      <line align="32px">
        glGetIntegerv(GL_TEXTURE_BINDING_2D, &amp;SavedTexture2D);
      </line>
      <line align="32px">
        <comment>// SavedTexture2D could be the same texture object than Texture...</comment>
      </line>
      <line align="32px">
        if(SavedTexture2D != Texture2D)
      </line>
      <line align="64px">
        glBindTexture(GL_TEXTURE_2D, Texture);
      </line>
      <line align="32px">
        glTexParameteri(GL_TEXTURE_2D, Pname, Param);
      </line>
      <line align="32px">
        if(SavedTexture2D != Texture2D)
      </line>
      <line align="64px">
        glBindTexture(GL_TEXTURE_2D, SavedTexture2D);
      </line>
      <line>
        }
      </line>
    </code>

    <paragraph>
      We really don't want to call this <codeword>setTexture2DParameter</codeword> function.
      In a real and complex software, it's actually quite tempting from time to time to write that kind of hack...
      Moreover, we are changing the current active 'texture unit' without actually knowing which one it is.
      Even if the current texture object is restaured, in a debugging perspective... it's odd!
    </paragraph>

    <code title="DSA way, no state checking required with possible under-layered one direction thread communication:">
      <line>
        <comment>// We directly change a texture object without affecting the bound texture object</comment>
      </line>
      <line>
        <comment>// which could actually be the bound texture object.</comment>
      </line>
      <line>
        glTextureParameteriEXT(Texture, Target, Pname, Param);
      </line>
    </code>

    <paragraph>
      Nice isn't it? With DSA, it's nice and handy.
    </paragraph>

    <paragraph>
      I take the example of texture because <link href="http://www.opengl.org/registry/doc/glspec33.core.20100311.withchanges.pdf">OpenGL 3.3</link>
      introduces the first DSA object in the API with the sampler object.
    </paragraph>

    <code title="Creation and use of a sampler object:">
      <line>
        glGenSamplers(1, &amp;<keyword>this</keyword>->SamplerName);
      </line>
      <line>
        glSamplerParameteri(<keyword>this</keyword>->SamplerName, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
      </line>
      <line>
        glSamplerParameteri(<keyword>this</keyword>->SamplerName, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
      </line>
      <line>
        glSamplerParameteri(<keyword>this</keyword>->SamplerName, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
      </line>
      <line>
        glSamplerParameteri(<keyword>this</keyword>->SamplerName, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
      </line>
      <line>
        glSamplerParameteri(<keyword>this</keyword>->SamplerName, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
      </line>
      <line>
        glSamplerParameterfv(<keyword>this</keyword>->SamplerName, GL_TEXTURE_BORDER_COLOR, &amp;glm::<userword>vec4</userword>(0.0f)[0]);
      </line>
      <line>
        glSamplerParameterf(<keyword>this</keyword>->SamplerName, GL_TEXTURE_MIN_LOD, -1000.f);
      </line>
      <line>
        glSamplerParameterf(<keyword>this</keyword>->SamplerName, GL_TEXTURE_MAX_LOD, 1000.f);
      </line>
      <line>
        glSamplerParameterf(<keyword>this</keyword>->SamplerName, GL_TEXTURE_LOD_BIAS, 0.0f);
      </line>
      <line>
        glSamplerParameteri(<keyword>this</keyword>->SamplerName, GL_TEXTURE_COMPARE_MODE, GL_NONE);
      </line>
      <line>
        glSamplerParameteri(<keyword>this</keyword>->SamplerName, GL_TEXTURE_COMPARE_FUNC, GL_LEQUAL);
      </line>
      <line>
        glSamplerParameterf(<keyword>this</keyword>->SamplerName, GL_TEXTURE_COMPARE_FUNC, GL_LEQUAL);
      </line>
      <line>
        glSamplerParameteri(<keyword>this</keyword>->SamplerName, GL_TEXTURE_MAX_ANISOTROPY_EXT, 16.f);
      </line>
      <line>
        ...
      </line>
      <line>
        <comment>// Doesn't affect any texture object but used by texture unit 0.</comment>
      </line>
      <line>
        glBindSampler(0, <keyword>this</keyword>->SamplerName);
      </line>
    </code>

    <paragraph>
      Now: scenario! This sampler is used for a chunked terrain renderer and for some reasons on the configuration,
      the software is too slow and we want to reduce the texture filtering quality. A sampler object is shared and used already by a set of chunks.
      We don't have to mess the texture unit were it is binded or we don't have to mess with current binded sampler.
      'Edit' and 'draw' cases are independant. Bonus of the new sampler object, we don't have to browse all the chucks to find the onces who uses this sampler!
    </paragraph>

    <code title="Update a sampler object:">
      <line>
        glSamplerParameteri(<keyword>this</keyword>->SamplerName, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_NEAREST);
      </line>
      <line>
        glSamplerParameteri(<keyword>this</keyword>->SamplerName, GL_TEXTURE_MAX_ANISOTROPY_EXT, 1.f);
      </line>
    </code>

    <paragraph>
      Sampler objects, even if we could complain for some things, as the first DSA API, succeeds and calls for more DSA.
    </paragraph>

    <paragraph>
      From time to time during development, selectors become bugs prone.
      What if <codeword href="http://www.opengl.org/sdk/docs/man/xhtml/glActireTexture.xml">glActireTexture(GL_TEXTURE0)</codeword>
      is unexpectingly call somewhere in the code without developers knowlegde of it?
      It can just completely mess up the complete rendered image without any OpenGL error.
      This is actually why I never call <codeword href="http://www.opengl.org/sdk/docs/man/xhtml/glBindTexture.xml">glBindTexture</codeword> without
      <codeword href="http://www.opengl.org/sdk/docs/man/xhtml/glActiveTexture.xml">glActireTexture</codeword> just the line before:
      to be sure that I am actually binding the texture where I expect to bind it.
      With DSA, we would simply have a function like <codeword>glBindNamedTexture(uint unit, enum target, uint texture)</codeword> which garanties the correct behavior.
      On top of this, the API itself tell us how to use it: wonderful and
      no rick that some developers wouldn't be aware of the <codeword href="http://www.opengl.org/sdk/docs/man/xhtml/glActiveTexture.xml">glActireTexture</codeword> selector or simply forgot it by mistake.
    </paragraph>

    <paragraph>
      When generalized to the whole API, we notice that the DSA API tell you more about how to use the API,
      which function needs to be called before one function, each function calling for more functions to be called before itself.
      By this way, DSA is a better self documented API.
    </paragraph>

    <paragraph>
      The current <link href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">GL_EXT_direct_state_access</link> extension
      has few part I don't really like. For example, it doesn't allow to only edit object, it also allows to edit binding point values like the fonction
      <codeword>glMultiTexParameterivEXT</codeword> function that allows to edit a texture unit binding point.
      It fells to me that it is messing around with the 'draw' case and for debugging purpose,
      I prefer to check at an object level rather than at each parameter value level.
    </paragraph>

    <paragraph>
      The idea of immutable objects at draw fells more reliable at software development level and maybe more efficient at drivers development level.
      It's likely that an object might be create and edit at one place but use for drawing at multiple places and multiple combinaison orders.
    </paragraph>

    <paragraph>
      The super awful function: <codeword>glMultiTexImage2DEXT</codeword> changes the data of a texture from
      where it is binded but which you don't know what is it name if we don't keep track of the object name or query it...
      Odd and scary!
    </paragraph>

    <list name="DSA dreams functions:">
      <list-element>glNamedTextureImage2D</list-element>
      <list-element>glNamedTextureSubImage2D</list-element>
      <list-element>glCopyNamedTextureSubImage2D</list-element>
      <list-element>glBindNamedTexture(uint unit, enum target, uint texture)</list-element>
      <list-element>glNamedBufferSubData</list-element>
      <list-element>glMapNamedBuffer</list-element>
      <list-element>glNamedProgramUniform1i</list-element>
      <list-element>glNamedRenderbufferStorage</list-element>
      <list-element>glNamedFramebufferTexture2D</list-element>
      <list-element>glNamedFramebufferTexture2D</list-element>
      <list-element>glGenerateNamedTextureMipmap(uint texture, enum target)</list-element>
      <list-element>glNamedFramebufferDrawBuffers(uint framebuffer, sizei n, const enum *bufs)</list-element>
      <list-element>glNamedFramebufferReadBuffer(uint framebuffer, enum mode)</list-element>
      <list-element>glNamedVertexArrayVertexAttribFormat</list-element>
      <list-element>...</list-element>
    </list>

    <list name="GL_EXT_direct_state_access nightmares functions:">
      <list-element>void glMultiTexParameterfEXT(enum texunit, enum target, enum pname, float param);</list-element>
      <list-element>void glMultiTexImage2DEXT(enum texunit, ...);</list-element>
      <list-element>void glGenerateMultiTexMipmapEXT(enum texunit, enum target);</list-element>
      <list-element>void glMultiTexRenderbufferEXT(enum texunit, enum target, uint renderbuffer);</list-element>
      <list-element>...</list-element>
    </list>

    <paragraph>
      The OpenGL API has few others clues related on the DSA direction took by OpenGL.
      The <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link> function
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glDrawTransformFeedback.xml">glDrawTransformFeedback</codeword> which second parameter takes a transform feedback object.
      Following the 'edit and bind' principe, the ARB would have create a dedicated binding point <codeword>GL_DRAW_TRANSFORM_FEEDBACK</codeword>
      just like they did for framebuffer blit with the binding point <codeword>GL_READ_FRAMEBUFFER</codeword> and <codeword>GL_DRAW_FRAMEBUFFER</codeword>.
      More obvious, the <link href="http://www.opengl.org/registry/doc/glspec32.core.20091207.withchanges.pdf">OpenGL 3.2</link> function
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glUniformBlockBinding.xml">glUniformBlockBinding</codeword> which takes as first parameter a 'program' name
      where all the others <codeword href="http://www.opengl.org/sdk/docs/man/xhtml/glUniform.xml">glUniform*</codeword> functions affect the current binded program.
    </paragraph>

    <paragraph>
      Well, you understand it: I really but I mean really hope to see DSA in OpenGL 3.4 and OpenGL 4.1! Number 1 in my wishlist.
      Would it really be in OpenGL 3.4 and OpenGL 4.1? From my understanding and what I read here and there nVidia is really up for DSA but some ARB members are not.
      Well... some might be AMD. At <link href="http://www.opengl.org/registry/doc/glspec33.core.20100311.withchanges.pdf">OpenGL 3.3</link> release
      the lack of DSA was the main cloud in a sky of congratulations.
      I really like the always constructive contribution of a former Bizzard developer but now working for Valve (Thanks for the update Rob!) who said at
      <link href="http://www.opengl.org/registry/doc/glspec33.core.20100311.withchanges.pdf">OpenGL 3.3</link> and
      <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link> release:
    </paragraph>

    <quote author="Rob Barris">"If a dozen separate developers all shout loudly for DSA for example, this could effectively raise its priority for an upcoming release"</quote>

    <paragraph>
      Well, that's my personal loud shout!
    </paragraph>

    <source-list>
      <source-element type="Link" href="post-0269.html" title="OpenGL 4.0 review" />
      <source-element type="Link" href="post-0267.html" title="OpenGL 3.3 review" />
      <source-element type="Link" href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=274025#Post274025" title="Community begging thread for next OpenGL release (no spam here please!)" />
    </source-list>
  </post>

  <post index="0278" date="16/04/2010" std-date="2010-04-16T08:30:00.00Z" title="Call of the Ktulu">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Call of the Ktulu">
      <summary>London 2010 - Regent Park</summary>
      <fullscreen>http://picasaweb.google.co.uk/groovounet/CallOfTheKtulu#slideshow/5458579894879383954</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5458579881001051345%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="http://lh4.ggpht.com/_bpz9rGNwhX4/S8DFq-OAg2I/AAAAAAAAHFo/Xbu0cB514HA/s144/237.jpg"
        pic288="http://lh4.ggpht.com/_bpz9rGNwhX4/S8DFq-OAg2I/AAAAAAAAHFo/Xbu0cB514HA/s288/237.jpg"
        pic400="http://lh4.ggpht.com/_bpz9rGNwhX4/S8DFq-OAg2I/AAAAAAAAHFo/Xbu0cB514HA/s400/237.jpg"
        pic800="http://lh4.ggpht.com/_bpz9rGNwhX4/S8DFq-OAg2I/AAAAAAAAHFo/Xbu0cB514HA/s800/237.jpg" />
    </album>

    <paragraph>
      A friend told me that he really likes my flower pictures but he has a request:
      Could I do some flower pictures with something heavy metal spirit and the intensity of Bethoveen?
    </paragraph>
    <paragraph>
      Exciting idea, challenging! I asked a song, he frist sent me the 7th symphonie of Bethoveen that I listen a week or two and
      then The Call of Ktulu by Metallica that I listen for two to three weeks and during the photo shoot. (Yeah, I looped on 1 song!)
    </paragraph>
    <paragraph>
      I'm not sure if it's a success but I certainly had fun to do this album!
    </paragraph>
    <video title="Launch the song and enjoy the slideshow" href="http://www.youtube.com/v/sWGOEWdV13M&amp;hl=en_GB&amp;fs=1" width="800" height="500" />
    <image
      img="http://lh4.ggpht.com/_bpz9rGNwhX4/S8DFq-OAg2I/AAAAAAAAHFo/Xbu0cB514HA/s800/237.jpg"
      href="http://lh4.ggpht.com/_bpz9rGNwhX4/S8DFq-OAg2I/AAAAAAAAHFo/Xbu0cB514HA/s800/237.jpg" />
    <image
      img="http://lh6.ggpht.com/_bpz9rGNwhX4/S8DFflxf8ZI/AAAAAAAAHEU/_HX9vSWYfAY/s800/003.jpg"
      href="http://lh6.ggpht.com/_bpz9rGNwhX4/S8DFflxf8ZI/AAAAAAAAHEU/_HX9vSWYfAY/s800/003.jpg" />
    <image
      img="http://lh5.ggpht.com/_bpz9rGNwhX4/S8DFigiikcI/AAAAAAAAHEs/mNMJ2jaUQXI/s800/086.jpg"
      href="http://lh5.ggpht.com/_bpz9rGNwhX4/S8DFigiikcI/AAAAAAAAHEs/mNMJ2jaUQXI/s800/086.jpg" />
    <image
      img="http://lh6.ggpht.com/_bpz9rGNwhX4/S8DFk1FWPxI/AAAAAAAAHE8/DZth4z9AbUk/s800/141.jpg"
      href="http://lh6.ggpht.com/_bpz9rGNwhX4/S8DFk1FWPxI/AAAAAAAAHE8/DZth4z9AbUk/s800/141.jpg" />
    <image
      img="http://lh3.ggpht.com/_bpz9rGNwhX4/S8DFlRB9BZI/AAAAAAAAHFA/zUUtkOGexOo/s800/158.jpg"
      href="http://lh3.ggpht.com/_bpz9rGNwhX4/S8DFlRB9BZI/AAAAAAAAHFA/zUUtkOGexOo/s800/158.jpg" />
    <image
      img="http://lh3.ggpht.com/_bpz9rGNwhX4/S8DFl76bOQI/AAAAAAAAHFE/d6RTpFKthbE/s800/165.jpg"
      href="http://lh3.ggpht.com/_bpz9rGNwhX4/S8DFl76bOQI/AAAAAAAAHFE/d6RTpFKthbE/s800/165.jpg" />
    <image
      img="http://lh5.ggpht.com/_bpz9rGNwhX4/S8DFmhFeVFI/AAAAAAAAHFI/my7-2Xy2c5M/s800/181.jpg"
      href="http://lh5.ggpht.com/_bpz9rGNwhX4/S8DFmhFeVFI/AAAAAAAAHFI/my7-2Xy2c5M/s800/181.jpg" />

    <source-list>
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/CallOfTheKtulu" title="The full album" />
    </source-list>
  </post>

  <post index="0277" date="12/04/2010" std-date="2010-04-12T08:30:00.00Z" title="OpenGL Samples Pack 3.3.1.1 released (Updated)">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      The OpenGL Samples Pack 3.3.1.0 is available and it catches up with some of the main features of OpenGL:
      <link href="http://www.opengl.org/registry/specs/ARB/uniform_buffer_object.txt">Uniform Buffer</link>,
      <link href="http://www.opengl.org/registry/specs/EXT/transform_feedback.txt">transform feedback</link> and
      <link href="http://www.opengl.org/registry/specs/ARB/instanced_arrays.txt">instanced array</link>.
    </paragraph>
    <paragraph>
      Another aspect of this release is the change for 2 design policy:
      A <link href="http://www.opengl.org/registry/specs/ARB/explicit_attrib_location.txt">semantics location</link> approach instead of a query location approach
      and a generalized use of VAOs.
      Am I not the developer who think <link href="http://www.opengl.org/registry/specs/ARB/vertex_array_object.txt">VAOs</link> are evils?
      Well, I am but thanks to Graham Sellers, AMD OpenGL manager, I have a better idea of how good VAOs are.
      Again, such a demonstration of the good will toward OpenGL, my feeling for a shiny OpenGL future keep increasing: GOOD!
    </paragraph>
    <paragraph>
      Let's say that you can espect about +20% with VAO if your bottleneck in on the draw call and if you draw less than 2000 different VAOs (/ meshes) with enough attributes.
      It is already something and we can't say anymore that VAOs are evil.
      On nVidia the limit is about 200 different VAOs (/ meshes) which is seriously an issue from nVidia implementation.
      With an appropriate manager, <link href="http://www.opengl.org/registry/specs/ARB/draw_elements_base_vertex.txt">glDrawElementsBaseVertex</link>
      and changing the element array buffer, we can put several meshes per VAOs and actually reduce the number of VAOs to really a few.
      It requires a bit of software design and feels an bit odd (half-mutable VAOs) but it's possible to make this VAOs count limit not a problem.
    </paragraph>
    <paragraph>
      For a while I thought (and I believe most of the community members) that VAOs were optionals.
      Most of us ignore it because we didn't see any improvement and VAO brings a software design constrain if we rely on something like immunable VAOs.
      Well, VAOs are REQUIRED with OpenGL core profile and as I discovered it, it's not so bad if we know these limits. (2000 VAOs on AMD and 200 VAOs on nVidia).
    </paragraph>
    <code title="Mutable VAO for OpenGL core profile to replace the deprecated default VAO:">
      <line>
        glGenVertexArrays(1, &amp;<keyword>this</keyword>->VertexArrayName);
      </line>
      <line>
        glBindVertexArray(<keyword>this</keyword>->VertexArrayName);
      </line>
    </code>
    <code title="Proper use of 'immutable' VAO:">
      <line>
        glGenVertexArrays(1, &amp;<keyword>this</keyword>->VertexArrayName);
      </line>
      <line>
        glBindVertexArray(<keyword>this</keyword>->VertexArrayName);
      </line>
      <line align="32px">
        glBindBuffer(GL_ARRAY_BUFFER, <keyword>this</keyword>->BufferName);
      </line>
      <line align="32px">
        glVertexAttribPointer(glf::semantic::attr::POSITION,
      </line>
      <line align="64px">
        2, GL_FLOAT, GL_FALSE, <keyword>sizeof</keyword>(vertex), GLF_BUFFER_OFFSET(0));
      </line>
      <line align="32px">
        glVertexAttribPointer(glf::semantic::attr::TEXCOORD,
      </line>
      <line align="64px">
        2, GL_FLOAT, GL_FALSE, <keyword>sizeof</keyword>(vertex), GLF_BUFFER_OFFSET(sizeof(glm::<userword>vec2</userword>)));
      </line>
      <line align="32px">
        glBindBuffer(GL_ARRAY_BUFFER, 0);
      </line>
      <line>

      </line>
      <line align="32px">
        glEnableVertexAttribArray(glf::semantic::attr::POSITION);
      </line>
      <line align="32px">
        glEnableVertexAttribArray(glf::semantic::attr::TEXCOORD);
      </line>
      <line>
        glBindVertexArray(0);
      </line>
    </code>
    <paragraph>
      I hope to find some time to write something about that topic including a dedicated test, including a possible improvement with
      <link href="http://developer.nvidia.com/object/bindless_graphics.html">'bindless graphics'</link>
      which might lead to about +100% efficiency when/if available in future OpenGL specification.
    </paragraph>
    <paragraph>
      All the samples run on <link href="http://support.amd.com/us/kbarticles/Pages/Catalyst-OpenGL-preview-driver.aspx">AMD OpenGL 4.0 drivers</link>,
      all but one sample run on <link href="http://developer.nvidia.com/object/opengl_driver.html">nVidia OpenGL 3.3 drivers</link>.
    </paragraph>
    <title>Update</title>
    <paragraph>
      The samples pack has been updated to fix an issue with the CMake project. A little issue that got here from my transition to Git!
      With <link href="http://developer.nvidia.com/object/opengl_driver.html">nVidia OpenGL 4.0 drivers</link> all the samples pass without any error.
    </paragraph>

    <source-list>
      <source-download index="1026" />
      <source-element type="Download" href="http://support.amd.com/us/kbarticles/Pages/Catalyst-OpenGL-preview-driver.aspx" title="AMD 'preview' OpenGL 4.0 drivers" />
      <source-element type="Download" href="http://developer.nvidia.com/object/opengl_driver.html" title="nVidia 'beta' OpenGL 3.3 drivers" />
      <source-element type="Link" href="./post-0267.html" title="OpenGL 3.3 review" />
      <source-element type="Link" href="./post-0269.html" title="OpenGL 4.0 review" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0276" date="10/04/2010" std-date="2010-04-10T23:30:00.00Z" title="G-Truc Creation 6.4 released">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      I have a growing obsession: How I experience things.
      Readying a text, watching a picture, going to an exhibition, working on something and actually everything I do.
      We can't do everything in any condition or at least not as well.
      A good experience makes it easier to learn things, more efficient to do things, reduce tiredness, increase enjoyment, etc.
      I am really into that kind of things and believe it or not: it works for me!
    </paragraph>
    <paragraph>
      I really don't like all these websites with ads everywhere or those that desperately try to fill the pages with as much stuff they can.
      Such a good representation of our current society where is always about "more more and more".
      I even believe that if most website provides chip and short content it's because their layouts are so full that it is impossible for someone to really concentrate for long.
      Sometime I really want to say: "please let me breeze!"
    </paragraph>
    <paragraph>
      This update of G-Truc Creation is mainly inspired by this experience idea.
      You might think "A good experience with such orange?".
      I want to say yes, it's how I want the reader to experience this space.
      I believe that orange is a color that push boundaries beyond the consensus or the usual and that's exactly what I am looking for.
    </paragraph>
    <paragraph>
      Some people might wonder: "Where is the menu!". I move it to the <link href="search.html">search page</link>.
      If you read an article, why should you care about seeing the menu?
      I would personally prefer that you concentrate on the content, memorize what you want and even elaborate your own ideas to send me a feedback for example.
      The menu in the search page and it is more complete that what it used to be.
      If you don't immediately see what you are looking for, you can see use the google search on G-Truc Creation.
    </paragraph>
    <paragraph>
      I have also added two new buttons in the title: One for my <link href="http://picasaweb.google.co.uk/groovounet">Picasa page</link > and one for my <link href="http://twitter.com/g_truc">Twitter page</link>.
      I must say that I hardly use Twitter yet...
      However, I want to use it more because I am looking for something to connect with my readers to get a bit more of feadbacks and continue to improve my content.
      We will see how it goes... enjoy!
    </paragraph>

  </post>

  <post index="0275" date="09/04/2010" std-date="2010-04-09T08:30:00.00Z" title="Getting started with Git">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      I have started my transition from SVN to Git.
      It is an open source distributed version control system whose design allows fast and easy branching and merging.
    </paragraph>
    <paragraph>
      Have you experience with SVN merging a 2 million lines code 6 months after the branching because of the development of a major feature that simply broke the software for 3 months before getting something working? Well... I experience it... twice! The time, it took me a week of pain and probably some consequences of this merge still remains (3 years later!). The second time, I thought about suicide before the merge to find a way out!
    </paragraph>
    <paragraph>
      For years, SVN has a new feature for about each new version "branching and merging is now done right!". Well, it never happened and it won't happen because, conceptually, SVN is just wrong.
    </paragraph>
    <paragraph>
      This is from where is coming from my motivation to use Git. With Git, I expect to use a version control system that works and that allows me to manage my projects with a real development model driven by the version control system. A merge takes about 1 second with Git... which gives a complete different perception of branching!
    </paragraph>
    <list name="However, Git has 2 main problems:">
      <list-element>It is much more complicated to get started with Git than SVN.</list-element>
      <list-element>The tools are still not really mature. (TortoiseGit…)</list-element>
    </list>
    <paragraph>
      Beyond that, it's so far just full happiness!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://git-scm.com/" title="Git website" />
      <source-element type="Link" href="http://code.google.com/p/git-osx-installer/" title="git-osx-installer: Git on MacOS X" />
      <source-element type="Link" href="http://code.google.com/p/msysgit/" title="msysgit: Git on Windows" />
      <source-element type="Link" href="http://code.google.com/p/tortoisegit/" title="TortoiseGit" />
      <source-element type="Link" href="http://nvie.com/git-model" title="A successful Git branching model" />
      <source-element type="Link" href="http://www.kernel.org/pub/software/scm/git/docs/everyday.html" title="Everyday GIT With 20 Commands Or So" />
      <source-element type="Link" href="http://www.gitcasts.com" title="GitCasts (Podcasts aboout Git)" />
    </source-list>
  </post>

  <post index="0274" date="03/04/2010" std-date="2010-04-03T03:30:00.00Z" title="GLM 0.9 Beta 1 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      A new development version of GLM 0.9 is available.
    </paragraph>
    <paragraph>
      This version is based on <link href="http://www.opengl.org/registry/doc/GLSLangSpec.4.00.8.clean.pdf">GLSL 4.0</link>
      and supports the new common and integer functions.
      Also a long and frequently asked feature has been implemented: inplicit conversions.
      However, the rules defining implicit conversions by GLSL 4.0 are quite weaked and can't really be apply in C++.
    </paragraph>
    <paragraph>
      Reaching the beta status, this new features close the feature list of GLM 0.9. Further development releases may happen before the final release.
    </paragraph>
    <paragraph>
      The development of GLM 0.9 has took longer than what I was expecting.
      I really hope the final release will be done by the end of May.
      After that, I am going to use <link href="http://git-scm.com/">Git</link> as new version control system which should make the work a lot easier to manage maintenance and experimental features.
      For example, in GLM 0.9, there is a lot of code for SSE optimization which is included but unactive. I'm really look forward to this transition!
    </paragraph>
    <source-list>
      <source-download type="Download" index="1024" />
    </source-list>
  </post>

  <post index="0273" date="30/03/2010" std-date="2010-03-30T03:30:00.00Z" title="Hello Radeon HD 5850!">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      I love my new graphics card!
      A Radeon HD 5850 generously provided by AMD to test my work on it.
      OpenGL 4.0 hardware, silent, 4 screen outputs so that I can plug my 3 24 inch screens on it to have a descent working space for both my programming and photography.
      Nice! Thanks you AMD!
    </paragraph>
    <paragraph>
      If I may analyze this, I will say it's another demonstration of the increase of interest for OpenGL by AMD.
      They want the stuff out there to work, it's good for AMD image related to OpenGL which hasn't been good.
      Since 1 or 2 years, the community starts to see some results from AMD evolution.
      Now, this image gets better and better as the drivers progress and as AMD is showing a desire to bring innovations through OpenGL publishing AMD extensions.
    </paragraph>
    <paragraph>
      AMD OpenGL drivers are still not at the level of nVidia OpenGL drivers but now they are 'good' quality.
      However, in this world there is no space for 'good', we ask for 'great'!
      Something convenient with nVidia OpenGL drivers is that it "always works" even if it should not.
      AMD OpenGL drivers are much more strict and I quite appreciate this.
      Chances are, if it works on AMD, it will work on nVidia.
      I really hope that AMD is going to keep up the good work and, with my new baby, I am going to keep an eye on it!
    </paragraph>
    <image title="My Radeon HD 5850 with an exclusive ATI sticker! Beautiful..."
               img="./post/0273.jpg"
               href="./post/0273-large.jpg" />
  </post>

  <post index="0272" date="29/03/2010" std-date="2010-03-29T08:00:00.00Z" title="The Real Van Gogh at the Royal Academy of Arts">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <paragraph>
      It's with a lot of excitement that I went to the <link href="http://en.wikipedia.org/wiki/Vincent_van_Gogh">Vincent Van Gogh</link> (1853 - 1890) exhibition
      displayed at the <link href="http://www.royalacademy.org.uk/">Royal Academy of Arts</link>.
      Van Gogh is the painter that I call "the crazy one but crazy like it's not cool to be". It implies in my twisted mind a lot of admiration and curiosity for him.
    </paragraph>
    <image img="./post/0272-1.jpg" href="./post/0272-1.jpg" />
    <image title="Wheat Fields after the Rain (1890)" img="./post/0272-2.jpg" href="./post/0272-2.jpg" />
    <paragraph>
      Van Gogh is two sides for me. One embodied by <link href="http://en.wikipedia.org/wiki/Sunflowers_(painting)">Tournesols</link> (1888)
      or <link href="http://en.wikipedia.org/wiki/File:Vincent_Willem_van_Gogh_138.jpg">Van Gogh's Chair</link> (1888)
      where I sincerely don't see the big fuzz about them and one embodied by <link href="http://en.wikipedia.org/wiki/Starry_Night_Over_the_Rhone">Starry Night Over the Rhone</link> (1888)
      or <link href="http://en.wikipedia.org/wiki/File:Van_Gogh_The_Olive_Trees..jpg">Olive Trees with the Alpilles in the Background</link> (1889)
      that I absolutely adore!
    </paragraph>
    <paragraph>
      The exhibition is subtitled "the artist and his letters".
      All along the exhibition, the drawings and paintings comments are based on these letters.
      During his 10 years of work as a painter, he wrote almost 1000 letters, available for reading, mainly to his brother Theo (1857 - 1891)
      but also with other painters like <link href="http://en.wikipedia.org/wiki/Anthon_van_Rappard">Anthon van Rappard</link> (1858 - 1892),
      <link href="http://en.wikipedia.org/wiki/Paul_Gauguin">Paul Gauguin</link> (1848 - 1903),
      <link href="http://en.wikipedia.org/wiki/Émile_Bernard">Emile Bernard</link> (1868 - 1941)...
    </paragraph>
    <quote author="Vincent to Theo">The duty of the painter is to study nature in depth and to use all his intelligence, to put his feelings into his work so that it becomes comprehensible to others</quote>
    <paragraph>
      The exhibition follow his artist life from place to place he leaved which inspired him: La Hague, Paris, Arles, the asylum of saint-Paul-deMausole and Auvers.
      It is dedicated to his training, with many drawings. His fascinating how he had period of obsession for one topic, trying and trying again.
      A proper study of elements that would become a part of his painting few years later.
      From these topics we find landscape, perspective, peasants, figures and of course colorization.
    </paragraph>
    <quote author="Vincent to Anna and Willemien Van Gogh">
      For my part, I'm wholly absorbed in the vast expanse of wheat fields against the hills,
      large as a sea, delicate yellow, delicate pale green, delicate purple of a ploughed and weeded piece of land,
      regularly speckled with the green of flowering potato plants, all under a sky with delicate blue, white, pink, violet tones.
      I'm wholly in a mood of almost too much calm, in a mood to paint that.
    </quote>
    <paragraph>
      I leave the exhibition a bit skeptical. I think the paintings set wasn't really good.
      I find few paintings at least great but some of them where absolutely stunning.
      I didn't know the white roses painting and I absolutely loved it, I could have spend hours on front of it.
      However for the rest and the most, the magic didn't take. It got me thinking.
    </paragraph>
    <image title="Olive Trees with the Alpilles in the Background (1889)"
               img="./post/0272-4.jpg"
               href="./post/0272-4-large.jpg" />
    <paragraph>
      What is giving me these huge feelings from some of his paintings?
      In the letters, he doesn't sound like a crazy person. The paintings are not actually crazy either.
      I saw methodologies, a process, techniques, harmonious colors either pale or contrasted.
      All I saw is a fascination for the world around him, a passion for observation and a man, when executing art, at peace.
    </paragraph>
    <quote author="Vincent to Theo">
      How I'd like to talk to you about art again, but now we can only write to each other about it often;
      find things beautiful as much as you can, most people find too little beautiful.
    </quote>
    <paragraph>
      All in all, I recommend this exhibition.
      It gives a good view of Van Gogh life as an artist and shows how he became a talented painter by his genius at being a colorist.
      I am actually quite tempted to go back just to sit and watch for hours the white roses painting which became one of my favorite painting.
      The perfect color combination, intense but united with an indescribable energy. ♥
    </paragraph>
    <paragraph>
      The exhibition is on until the 18th of April for £12.
    </paragraph>
    <image img="./post/0272-3.jpg" href="./post/0272-3.jpg" />
    <source-list>
      <source-element type="Link" href="http://www.royalacademy.org.uk/exhibitions/vangogh" title="The exhibition page" />
      <source-element type="Link" href="http://static.royalacademy.org.uk/files/the-real-van-gogh-education-guide-final-624.pdf" title="The exhibition education guide (worth to read!)" />

    </source-list>
  </post>

  <post index="0271" date="28/03/2010" std-date="2010-03-28T23:30:00.00Z" title="OpenGL Samples Pack 3.3.0.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      First things first: I decide to change the numbering convention of the OpenGL Samples Pack. From now on, it follows the OpenGL version it requires to run all the samples.
    </paragraph>
    <paragraph>
      Following this, the OpenGL Samples Pack 3.3.0.0 is an OpenGL 3.3 set of samples that requires OpenGL 3.3 graphics cards and drivers.
    </paragraph>
    <paragraph>
      It contains 28 samples including 5 new samples: Sampler object, GLSL semantics (explicit location),
      occlusion query, conditional rendering with any sample and timer query.
    </paragraph>
    <paragraph>
      Both AMD and nVidia provide beta OpenGL 3.3 drivers but currently both fail to run all the samples correctly.
      I expect this situation resolved within few weeks maybe a month.
    </paragraph>
    <paragraph>
      The previous OpenGL Samples Pack for OpenGL 3.2 is still available for developers you prefer reliable drivers.
    </paragraph>

    <source-list>
      <source-download index="1023" />
      <source-download index="1022" />
      <source-element type="Download" href="http://support.amd.com/us/kbarticles/Pages/Catalyst-OpenGL-preview-driver.aspx" title="AMD 'preview' OpenGL 4.0 drivers" />
      <source-element type="Download" href="http://developer.nvidia.com/object/opengl_driver.html" title="nVidia 'beta' OpenGL 3.3 drivers" />
      <source-element type="Link" href="./post-0267.html" title="OpenGL 3.3 review" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0270" date="24/03/2010" std-date="2010-03-24T20:30:00.00Z" title="Skin(s)">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Skin(s)">
      <summary>London 2010</summary>
      <fullscreen>http://picasaweb.google.co.uk/groovounet/Skin#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5449713775405178785%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
                pic144="http://lh5.ggpht.com/_bpz9rGNwhX4/S6FGElOVkUI/AAAAAAAAGuA/9cHPwjknrm8/s144/127.jpg"
                pic288="http://lh5.ggpht.com/_bpz9rGNwhX4/S6FGElOVkUI/AAAAAAAAGuA/9cHPwjknrm8/s288/127.jpg"
                pic400="http://lh5.ggpht.com/_bpz9rGNwhX4/S6FGElOVkUI/AAAAAAAAGuA/9cHPwjknrm8/s400/127.jpg"
                pic800="http://lh5.ggpht.com/_bpz9rGNwhX4/S6FGElOVkUI/AAAAAAAAGuA/9cHPwjknrm8/s800/127.jpg" />
    </album>

    <paragraph>
      How relaxing it is to find a great tree for a photo shoot!
    </paragraph>
    <paragraph>
      I believe that a good photograph or a good painting can be nothing but pleasant to look.
      An idea that the French artist, <link href="http://www.pierre-soulages.com/">Pierre Soulages</link>, reinforce through is work.
    </paragraph>
    <paragraph>
      With this series, I explore my subject with the only idea that its surface face pleasant to look and to explore:
      A meaningless and pleasant exploration of surface colors and shapes.
    </paragraph>
    <image
               img="http://lh5.ggpht.com/_bpz9rGNwhX4/S6FGElOVkUI/AAAAAAAAGuA/9cHPwjknrm8/s400/127.jpg"
               href="http://lh5.ggpht.com/_bpz9rGNwhX4/S6FGElOVkUI/AAAAAAAAGuA/9cHPwjknrm8/s800/127.jpg" />
    <image
               img="http://lh6.ggpht.com/_bpz9rGNwhX4/S6FGDCkEFNI/AAAAAAAAGt8/IKdWeLaoHns/s400/118.jpg"
               href="http://lh6.ggpht.com/_bpz9rGNwhX4/S6FGDCkEFNI/AAAAAAAAGt8/IKdWeLaoHns/s800/118.jpg" />
    <image
               img="http://lh4.ggpht.com/_bpz9rGNwhX4/S6FF_R6x5vI/AAAAAAAAGt0/UNygbALOLrQ/s400/102.jpg"
               href="http://lh4.ggpht.com/_bpz9rGNwhX4/S6FF_R6x5vI/AAAAAAAAGt0/UNygbALOLrQ/s800/102.jpg" />
    <image
               img="http://lh6.ggpht.com/_bpz9rGNwhX4/S6FF4Wi708I/AAAAAAAAGtk/QOQFT4Cign0/s400/094.jpg"
               href="http://lh6.ggpht.com/_bpz9rGNwhX4/S6FF4Wi708I/AAAAAAAAGtk/QOQFT4Cign0/s800/094.jpg" />
    <image
               img="http://lh5.ggpht.com/_bpz9rGNwhX4/S6FGFrcZZyI/AAAAAAAAGuE/-iTQkyvoQsw/s400/129.jpg"
               href="http://lh5.ggpht.com/_bpz9rGNwhX4/S6FGFrcZZyI/AAAAAAAAGuE/-iTQkyvoQsw/s800/129.jpg" />

    <source-list>
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/Skin" title="The full album" />
    </source-list>
  </post>

  <post index="0269" date="23/03/2010" std-date="2010-03-23T23:30:00.00Z" title="OpenGL 4.0 review">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
      <tag>gtc-tech-project-openglreviews</tag>
    </meta>

    <paragraph>
      <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link>
      is the new specification for GeForce GTX 4** and Radeon HD 5*** hardware: aka Direct3D 11 hardware level.
      In this review we go through all the new features and explore their details.
    </paragraph>

    <title>Tessellation.</title>
    <paragraph>
      OpenGL 4.0 brings 3 new processing stages that take place between the vertex shader and geometry shader.
    </paragraph>
    <list>
      <list-element>Control shader (Known as Hull shader in Direct3D 11)</list-element>
      <list-element>Primitive generator</list-element>
      <list-element>Evaluation shader (Known as Domain shader in Direct3D 11)</list-element>
    </list>
    <paragraph>
      In a way, the tessellation stages replace the vertex shader stage in the graphics pipeline.
      Most of the vertex shader tasks will be dispathed in the control shader and the evalution shader.
      So far, the vertex shader stage is still required but the control shader and the evaluation shader are both optional.
    </paragraph>
    <paragraph>
      Control shaders work on 'patches', a set of vertices.
      Their output per-vertex data and per-patch data used by the primitive generator and available as read only in the evaluation shader.
    </paragraph>
    <paragraph>
      Input per-vertex data are stored in an array called 'gl_in' which maximum size is <codeword>gl_MaxPatchVertives</codeword>.
      The elements of <codeword>gl_in</codeword> contain the variables <codeword>gl_Position</codeword>,
      <codeword>gl_PointSize</codeword>, <codeword>gl_ClipDistance</codeword> and <codeword>gl_ClipVertex</codeword>.
      The per-patch variables are <codeword>gl_PatchVerticesIn</codeword> (number of vertices in the patch),
      <codeword>gl_PrimitiveID</codeword> (number of primitives of the draw call) and <codeword>gl_InvocationID</codeword> (Invocation number).
    </paragraph>
    <paragraph>
      The control shaders have a <codeword>gl_out</codeword> array of per-vertex data which members are <codeword>gl_Position</codeword>,
      <codeword>gl_PointSize</codeword> and <codeword>gl_ClipDistance</codeword>.
      They also output per-patch data with the variables <codeword>gl_TessLevelOuter</codeword>
      and <codeword>gl_TesslevelInner</codeword> to control the tesselation level.
    </paragraph>
    <paragraph>
      A control shader is invoked several times, one by vertex of a patch and each invocation is identified by <codeword>gl_InvocationID</codeword>.
      These invocations can be synchronised by the built-in function <codeword>barrier</codeword>.
    </paragraph>
    <paragraph>
      The primitive generator consumes a patch and produces a set of points, lines or triangles.
      Each vertex generated are associated with (u, v, w) or (u, v) position available in the evaluation shader thanks to the variable <codeword>gl_TessCoord</codeword>
      where u + v + w = 1.
    </paragraph>
    <paragraph>
      The evaluation shaders provide a <codeword>gl_In</codeword> array like control shaders.
      The members of the elements of <codeword>gl_In</codeword> are <codeword>gl_Position</codeword>,
      <codeword>gl_PointSize</codeword> and <codeword>gl_ClipDistance</codeword> for each vertex of a patch.
      The evaluation shaders have the variables <codeword>gl_PatchVerticesIn</codeword> and <codeword>gl_PrimitivesID</codeword>
      but also some extra variables <codeword>gl_TessLevelOuter</codeword> and
      <codeword>gl_TessLevelInner</codeword> which contain the tessellation levels of the patch.
    </paragraph>
    <paragraph>
      The evaluation shaders output <codeword>gl_Position</codeword>, <codeword>gl_PointSize</codeword> and <codeword>gl_ClipDistance</codeword>.
    </paragraph>
    <paragraph>
      Tessellation has a lot more details to understand to work on a real implementation in a project! Those details are available in
      <link href="http://www.opengl.org/registry/specs/ARB/tessellation_shader.txt">GL_ARB_tessellation_shader</link> and obviously in
      <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0 specification</link>.
      I think the API need some refinements but provides enough to start having fun with tesselation.
    </paragraph>

    <title>Subroutine.</title>
    <paragraph>
      Subroutines are defined by <link href="http://www.opengl.org/registry/specs/ARB/shader_subroutine.txt">GL_ARB_shader_subroutine</link>
      as part of <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0 specification</link>.
      This mechanism is some sort of C++ function pointer which allows to select, from the C++ program, a specific algorithm to be used in a GLSL program.
      This feature is a great enhancement for the 'uber-shader' type of software design
      where all the algorithms are included in a single shader to handle multiple/every cases.
      Subroutines allow to select specific shader code-pathes but also to keep the same program and program environment.
    </paragraph>
    <paragraph>
      The following GLSL code sample defines 3 subroutine uniforms, which means 3 entries to change a shader behaviour.
      Several functions can be defined for a subroutine and a single subroutine function can be used for multiple subroutine uniforms.
      Subroutine function can't be overloaded. Subroutine uniforms are the sort of 'function pointer' but can only 'point' on subroutine functions.
    </paragraph>

    <code title="Subroutine in GLSL 4.00:">
      <line>
        <keyword>subroutine vec4</keyword> greatFeature(<keyword>in vec3</keyword> Var1, <keyword>in vec3</keyword> Var2);
      </line>
      <line>
        <keyword>subroutine vec4</keyword> bestFeature(<keyword>in vec3</keyword> Var1, <keyword>in vec3</keyword> Var2);
      </line>
      <line>
        <keyword>subroutine mat4</keyword> otherFeature(<keyword>in vec4</keyword> Var1, <keyword>in float</keyword> Var2, <keyword>in int</keyword> var3);
      </line>
      <line>

      </line>
      <line>
        <keyword>subroutine</keyword>(greatFeature, bestFeature)
      </line>
      <line>
        <keyword>vec4</keyword> myFeature1(<keyword>in vec3</keyword> Var1, <keyword>in vec3</keyword> Var2)
      </line>
      <line>
        { ... } <comment>// Required function body</comment>
      </line>
      <line>

      </line>
      <line>
        <keyword>subroutine</keyword>(greatFeature, bestFeature)
      </line>
      <line>
        <keyword>vec4</keyword> myFeature2(<keyword>in vec3</keyword> Var1, <keyword>in vec3</keyword> Var2)
      </line>
      <line>
        { ... } <comment>// Required function body</comment>
      </line>
      <line>

      </line>
      <line>
        <keyword>subroutine</keyword>(bestFeature)
      </line>
      <line>
        <keyword>vec4</keyword> myBestFeature(<keyword>in vec3</keyword> Var1, <keyword>in vec3</keyword> Var2)
      </line>
      <line>
        { ... } <comment>// Required function body</comment>
      </line>
      <line>

      </line>
      <line>
        <keyword>subroutine</keyword>(otherFeature)
      </line>
      <line>
        <keyword>subroutine mat4</keyword> myOtherFeature(<keyword>in vec4</keyword> Var1, <keyword>in float</keyword> Var2, <keyword>in int</keyword> var3);
      </line>
      <line>
        { ... } <comment>// Required function body</comment>
      </line>
      <line>

      </line>
      <line>
        <comment>// Could be set to myFeature1, myFeature2</comment>
      </line>
      <line>
        <keyword>subroutine uniform</keyword> greatFeature GreatFeature;
      </line>
      <line>

      </line>
      <line>
        <comment>// Could be set to myFeature1, myFeature2, myBestFeature</comment>
      </line>
      <line>
        <keyword>subroutine uniform</keyword> bestFeature BestFeature;
      </line>
      <line>

      </line>
      <line>
        <comment>// Could be set to myOtherFeature only...</comment>
      </line>
      <line>
        <comment>// probably not a recommanded use of subroutines...</comment>
      </line>
      <line>
        <keyword>subroutine uniform</keyword> otherFeature OtherFeature;
      </line>
      <line>

      </line>
      <line>
        void main()
      </line>
      <line>
        {
      </line>
      <line align="32px">
        <comment>// Subroutine uniform variables are called the same way functions are called.</comment>
      </line>
      <line align="32px">
        GreatFeature();
      </line>
      <line align="32px">
        ...
      </line>
      <line align="32px">
        BestFeature();
      </line>
      <line align="32px">
        ...
      </line>
      <line align="32px">
        OtherFeature();
      </line>
      <line>
        }
      </line>
    </code>

    <paragraph>
      The subroutine uniforms are assigned using the function <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glUniformSubroutines.xml">glUniformSubroutinesuiv</codeword>
      which parameters define the list of the subroutine functions used set to all subroutine uniforms.
      To get the subroutine function locations, OpenGL provides the function <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glGetSubroutineIndex.xml">glGetSubroutineIndex</codeword>.
    </paragraph>

    <title>Transform feedback.</title>
    <paragraph>
      Transform feedback is the OpenGL name given to Direct3D output stream.
      It allows to capture processed vertices data before rasterisation and to be more accurate, just before clipping.
      A first extension proposed by nVidia (<link href="http://www.opengl.org/registry/specs/NV/transform_feedback.txt">GL_NV_transform_feedback</link>)
      has been promoted to <link href="http://www.opengl.org/registry/specs/EXT/transform_feedback.txt">GL_EXT_transform_feedback</link>
      and finally included in <link href="http://www.opengl.org/registry/doc/glspec30.20080811.withchanges.pdf">OpenGL 3.0 specification</link>.
    </paragraph>

    <code title="From where we come (OpenGL 3.0):">
      <line>
        <keyword>char</keyword> * Strings[] = {<string>"Position"</string>, <string>"Color"</string>};
      </line>
      <line>
        glTransformFeedbackVaryings(Program, 2, Strings, GL_SEPARATE_ATTRIBS);
      </line>
      <line>
        glLinkProgram(Program);
      </line>
      <line>
        ...
      </line>
      <line>
        glBindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, 0, PositionBuffer);
      </line>
      <line>
        glBindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, 1, ColorBuffer);
      </line>
      <line>
        <comment>// No rasterisation will bit performed, optional.</comment>
      </line>
      <line>
        glEnable(GL_RASTERIZER_DISCARD);
      </line>
      <line>
        ...
      </line>
      <line>
        glBeginQuery(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, Query);
      </line>
      <line>
        glBeginTransformFeedback(GL_TRIANGLES);
      </line>
      <line align="32px">
        glDrawElement(...);
      </line>
      <line>
        glEndTransformFeedback();
      </line>
      <line>
        glEndQuery(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
      </line>
      <line>
        ...
      </line>
      <line>
        <comment>// Query the number of primitives written in the transform buffer.</comment>
      </line>
      <line>
        glGetQueryObjectuiv(Query, GL_QUERY_RESULT, &amp;PrimitivesWritten);
      </line>
    </code>

    <paragraph>
      This is basically how transform feedback works with <link href="http://www.opengl.org/registry/doc/glspec30.20080811.withchanges.pdf">OpenGL 3.0</link>.
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glTransformFeedbackVaryings.xml">glTransformFeedbackVaryings</codeword>
      is a program state that must to be called before GLSL program linking.
      The last parameter can be either <codeword>GL_SEPARATE_ATTRIBS</codeword> or <codeword>GL_INTERLEAVED_ATTRIBS</codeword>.
      <codeword>GL_SEPARATE_ATTRIBS</codeword> is used to save each transform feedback varying in different buffers and
      <codeword>GL_INTERLEAVED_ATTRIBS</codeword> is used to save all transform feedback varying in the same buffer.
    </paragraph>
    <paragraph>
      <codeword>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN</codeword> is a query that can be used to get
      the number of primitives actually written in the transform feedback buffer(s).
      When data are captured from a vertex shader and the feedback primitive is the same as the drawn primitive,
      the number of primitives written in the buffer is likely to be the same as the number of primitives sent at draw call but transform feedback has such
      flexibility that transform feedback primitive can be different than draw call primitive.
    </paragraph>
    <paragraph>
      Furthermore, transform feedback can capture geometry shader output.
      As geometry shader can generate or discard primitives, which output vertrices count become unpredictable.
      Transform feedback buffers can be used as vertex data of further draw calls where the vertrices polygon count might define the draw call primitive count.
      If you repeat a series of geometry shader and transform feedback, we might have a tessellator... but a really slow useless one!
    </paragraph>

    <paragraph>
      This work has been followed by some more work by nVidia in the form of
      <link href="http://www.opengl.org/registry/specs/NV/transform_feedback2.txt">GL_NV_transform_feedback2</link>
      to finally give us 4 new extensions in
      <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link> which push the transform feedback boundaries.
    </paragraph>
    <list>
      <list-element>
        <link href="http://www.opengl.org/registry/specs/ARB/transform_feedback2.txt">GL_ARB_transform_feedback2</link>
      </list-element>
      <list-element>
        <link href="http://www.opengl.org/registry/specs/ARB/transform_feedback3.txt">GL_ARB_transform_feedback3</link>
      </list-element>
      <list-element>
        <link href="http://www.opengl.org/registry/specs/ARB/draw_indirect.txt">GL_ARB_draw_indirect (Partially)</link>
      </list-element>
      <list-element>
        <link href="http://www.opengl.org/registry/specs/ARB/gpu_shader5.txt">GL_ARB_gpu_shader5 (Partially)</link>
      </list-element>
    </list>

    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/transform_feedback2.txt">GL_ARB_transform_feedback2</link> defines 3 features.
      First, it creates a transform feedback object (sometime called XBO) that encapsulates the transform feedback states...
      Well, that is to say the transform feedback buffers which with
      <codeword>GL_INTERLEAVED_ATTRIBS</codeword> is just 1 buffer... what's the point?!
    </paragraph>

    <paragraph>
      This object allows to pause (<codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glPauseTransformFeedback.xml">glPauseTransformFeedback</codeword>)
      and resume (<codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glResumeTransformFeedback.xml">glResumeTransformFeedback</codeword>)
      transform feedback capture. XBO manages a behaviour 'state'.
      This way, multiple transform feedback objects can record the vertex attributes, one after the other but never at the same time.
      In an OpenGL command flow, we can imagine that some draw calls belong to one transform feedback and others belong to a second transform feedback.
    </paragraph>

    <paragraph>
      Finally, this extension provides the function <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glDrawTransformFeedback.xml">glDrawTransformFeedback</codeword>
      to use transform feedback buffers as vertex shader source without having to query the primitives written count.
      When querying this count with <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glGetQueryObject.xml">glGetQueryObjectuiv</codeword>,
      the function is going to stall the graphics pipeline waiting for the OpenGL commands to be completed.
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glDrawTransformFeedback.xml">glDrawTransformFeedback</codeword> replaces
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glDrawArrays.xml">glDrawArrays</codeword> in this case and doesn't need the vertices count,
      it's going to use automatically the count of written primitives in the transform feedback object to draw.
      <link href="http://www.opengl.org/registry/specs/ARB/transform_feedback2.txt">GL_ARB_transform_feedback2</link>
      is part of <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link> but is also supported by GeForce GT200 as an extension.
    </paragraph>

    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/transform_feedback3.txt">GL_ARB_transform_feedback3</link> defines 2 features.
      First, with <link href="http://www.opengl.org/registry/doc/glspec30.20080811.withchanges.pdf">OpenGL 3.0</link>
      when we capture varying we are limited by 2 dispached methods: <codeword>GL_SEPARATE_ATTRIBS</codeword>
      to write a varying per buffer and <codeword>GL_INTERLEAVED_ATTRIBS</codeword> to write all the varyings in a single buffer.
    </paragraph>

    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/transform_feedback3.txt">GL_ARB_transform_feedback3</link>
      proposes a much more realistic scenario: It allows to write interleaved varyings in several buffers.
      Let's take an example. A transform feedback object could contains 3 buffers. The first buffer could capture 1 varying.
      The second buffer could capture 3 varying. and the third one could capture 2 varyings.
      This behaviour is defined with a simple very approach: In the name list given to
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glTransformFeedbackVaryings.xml">glTransformFeedbackVaryings</codeword>,
      we insert the name <codeword>gl_NextBuffer</codeword> as a separator between buffer.
    </paragraph>

    <paragraph>
      Also, this extension has some interactions with <link href="http://www.opengl.org/registry/specs/ARB/gpu_shader5.txt">GL_ARB_gpu_shader5</link>

      which defines multiple vertex streams in geometry shaders.
      Multiple vertex streams is a new concept for <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link>.
      In a way, before <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link> we had a single vertex streams which was use by the rasterizer.
      The first vertex stream is still used by the raterizer but the others can be output to transform feedback objects.
      Such possibility requires an extra set of functions to query the written primitives per stream and to be able to draw directly using a specific vertex stream.
      This is done with
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glDrawTransformFeedbackStream.xml">glDrawTransformFeedBackStream</codeword>,
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glBeginQueryIndexed.xml">glBeginQueryIndexed</codeword>,
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glEndQueryIndexed.xml">glEndQueryIndexed</codeword> and
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glGetQueryIndexed.xml">glGetQueryIndexediv</codeword>.
    </paragraph>

    <code title="Where we are now (OpenGL 4.0):">
      <line>
        <comment>// Create a transform feedback object</comment>
      </line>
      <line>
        GLuint Feedback = 0;
      </line>
      <line>
        glGenTransformFeedbacks(1, &amp;TransformFeedback);
      </line>
      <line>
        glBindTransformFeedbacks(GL_TRANSFORM_FEEDBACK, TransformFeedback);
      </line>
      <line>
        glBindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, 0, PositionBuffer);
      </line>
      <line>
        glBindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, 1, ColorBuffer);
      </line>
      <line>
        glBindTransformFeedbacks(GL_TRANSFORM_FEEDBACK, 0);
      </line>
      <line>
        ...
      </line>
      <line>
        <comment>// Setup transform feedback before linking</comment>
      </line>
      <line>
        <keyword>char</keyword> * Strings[] = {<string>"Position"</string>, <string>"gl_NextBuffer"</string>, <string>"Diffuse"</string>, <string>"Specular"</string>};
      </line>
      <line>
        glTransformFeedbackVaryings(Program, 3, Strings, GL_INTERLEAVED_ATTRIBS);
      </line>
      <line>
        glLinkProgram(Program);
      </line>
      <line>
        ...
      </line>
      <line>
        <comment>// Draw and capture the streams</comment>
      </line>
      <line>
        glBindTransformFeedbacks(GL_TRANSFORM_FEEDBACK, TransformFeedback);
      </line>
      <line>
        glEnable(GL_RASTERIZER_DISCARD);
      </line>
      <line>
        glBeginTransformFeedback(GL_TRIANGLES);
      </line>
      <line>
        glDrawElement(...);
      </line>
      <line>
        glEndTransformFeedback();
      </line>
      <line>
        ...
      </line>
      <line>
        <comment>// Bind a stream buffer</comment>
      </line>
      <line>
        glBindBuffer(GL_ARRAY_BUFFER, ColorBuffer);
      </line>
      <line>
        glVertexAttribPointer(DiffuseLocation, 4, GL_FLOAT, GL_FALSE,
      </line>
      <line align="32px">
        <keyword>sizeof</keyword>(glm::<userword>vec4</userword>) * 2, 0);
      </line>
      <line>
        glVertexAttribPointer(SpecularLocation, 4, GL_FLOAT, GL_FALSE,
      </line>
      <line align="32px">
        <keyword>sizeof</keyword>(glm::<userword>vec4</userword>) * 2, BUFFER_OFFSET(<keyword>sizeof</keyword>(glm::<userword>vec4</userword>)));
      </line>
      <line>
        glBindBuffer(GL_ARRAY_BUFFER, 0);
      </line>
      <line>
        ...
      </line>
      <line>
        <comment>// Draw the stream buffer without written primitives query</comment>
      </line>
      <line>
        glDrawTransformFeedbackStream(GL_POINTS, TransformFeedback, 1);
      </line>
    </code>

    <code title="Extra of the geometry shader:">
      <line>
        <keyword>layout</keyword>(<keyword>out</keyword> = 0) <keyword>out vec4</keyword> Position;
      </line>
      <line>
        <keyword>layout</keyword>(<keyword>out</keyword> = 1) <keyword>out vec4</keyword> Diffuse;
      </line>
      <line>
        <keyword>layout</keyword>(<keyword>out</keyword> = 1) <keyword>out vec4</keyword> Specular;
      </line>
    </code>

    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/draw_indirect.txt">GL_ARB_draw_indirect</link> provides new draw call functions
      (<codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glDrawArraysIndirect.xml">glDrawArraysIndirect</codeword> and
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glDrawElementsIndirect.xml">glDrawElementsIndirect</codeword>)
      and a new buffer binding point called
      <codeword>GL_DRAW_INDIRECT_BUFFER</codeword>.
      They behave the same way than
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glDrawArraysInstancedBasedVertex.xml">glDrawArraysInstancedBasedVertex</codeword> and
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glDrawElementsInstancedBasedVertex.xml">glDrawElementsInstancedBasedVertex</codeword>
      except that the parameters are read from a buffer binded at
      <codeword>GL_DRAW_INDIRECT_BUFFER</codeword> point.
      This buffer could be generated by transform feedback or another APIs (OpenCL / Cuda) which avoid
      an undesired read back of GPU memory which would stall the rendering pipeline.
    </paragraph>

    <code title="Format of the indirect buffer for arrays draw call">
      <line>
        <keyword>typedef struct</keyword> {
      </line>
      <line align="32px">
        GLuint count;
      </line>
      <line align="32px">
        GLuint primCount;
      </line>
      <line align="32px">
        GLuint first;
      </line>
      <line align="32px">
        GLuint reservedMustBeZero;
      </line>
      <line>
        } DrawArraysIndirectCommand;
      </line>
    </code>

    <code title="Format of the indirect buffer or elements draw call">
      <line>
        <keyword>typedef struct</keyword> {
      </line>
      <line align="32px">
        GLuint count;
      </line>
      <line align="32px">
        GLuint primCount;
      </line>
      <line align="32px">
        GLuint firstIndex;
      </line>
      <line align="32px">
        GLint  baseVertex;
      </line>
      <line align="32px">
        GLuint reservedMustBeZero;
      </line>
      <line>
        } DrawElementsIndirectCommand;
      </line>
    </code>

    <title>Geometry shader (r)evolution.</title>

    <paragraph>
      <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link>
      Geometry shader provides streams and also a great improvement of this programmable stage: Geometry instancing.
      Where others OpenGL instancing techniques execute the entire graphics pipeline for each instance,
      this fonctionnality allows to run multiple times the geometry shader,
      each run being identified by <codeword>gl_InvocationID</codeword>.
      The number of time the geometry shader is invoked is indicated inside the geometry shader using the new input layout qualifier.
    </paragraph>

    <code title="Geometry shader input layout qualifier:">
      <line>
        <keyword>layout</keyword>(<keyword>triangles</keyword>, <keyword>invocations</keyword> = 7) <keyword>in</keyword>;
      </line>
    </code>

    <paragraph>
      The first parameter in the input layout is the input primitive type which can be
      <keyword>
        <keyword>points</keyword>
      </keyword>, <keyword>
        <keyword>lines</keyword>
      </keyword>, <keyword>
        <keyword>lines_adjacency</keyword>
      </keyword>,
      <keyword>
        <keyword>triangles</keyword>
      </keyword> and <keyword>
        <keyword>triangles_adjacency</keyword>
      </keyword>.
    </paragraph>

    <paragraph>
      Geometry shader also provides new required output layout qualifiers.
    </paragraph>

    <code title="Geometry shader input layout qualifier:">
      <line>
        <keyword>layout</keyword>(<keyword>triangle_strip</keyword>, <keyword>max_vertices</keyword> = 76, <keyword>stream</keyword> = 0) <keyword>out</keyword>;
      </line>
    </code>

    <paragraph>
      This layout defines the geometry shader output primitive,
      <codeword>points</codeword>, <codeword>line_strip</codeword> or <codeword>triangle_strip</codeword> and
      the maximum number of vertices the shader will ever emit in a single invocation. The maximum value is <codeword>gl_MaxGeometryOutputVertices</codeword>.
      <codeword>stream</codeword> declares the default stream and can be different to 0 only when the output primitive is <codeword>points</codeword>.
      <codeword>stream</codeword> number can be declare in the global scoop,
      for a block or a non-block output variable.
      Vertrices and primitives are emited to specific streams using the GLSL functions
      <codeword>EmitStreamVertex</codeword> and <codeword>EndStreamPrimitive</codeword>
    </paragraph>

    <paragraph>
      This is just the changes in geometry shader, a few of all changes that
      <link href="http://www.opengl.org/registry/doc/GLSLangSpec.4.00.8.clean.pdf">GLSL 4.0</link> includes.
    </paragraph>

    <title>GLSL 4.0 punch (in my face).</title>

    <paragraph>
      <link href="http://www.opengl.org/registry/doc/GLSLangSpec.4.00.8.clean.pdf">GLSL 4.0</link> evolves a main change in the programming policy.
      Where GLSL until <link href="http://www.opengl.org/registry/doc/GLSLangSpec.3.30.6.clean.pdf">GLSL 3.3</link> was all about explicit conversions,
      <link href="http://www.opengl.org/registry/doc/GLSLangSpec.4.00.8.clean.pdf">GLSL 4.0</link> provides implicit conversions.
      It implies a lot of rules to define these conversions ... I'm really not sure about it, about how good this is for GLSL.
      At least a concequence is that GLM will use implicit conversion in a future version,
      a request widely requested which is probably why GLSL made this switch.
    </paragraph>

    <paragraph>
      <link href="http://www.opengl.org/registry/doc/GLSLangSpec.4.00.8.clean.pdf">GLSL 4.0</link>
      introduces a new qualifier call <codeword>precise</codeword> that can be use to any variable
      to ensure that the result of an operation is performed the way the code request it.
      Compiler performs a lot of optimizations that can affect the result with a little lack of precision for a high performance benefit.
      <codeword>precise</codeword> effectively avoid those optimizations.
    </paragraph>

    <paragraph>
      GLSL 4.00 extends the set of built-in functions with new integer functions (mainly bitfield manipulation functions),
      floating-point pack and unpack functions and extends the list of common functions.
    </paragraph>

    <title>Adaptative multisampling and per-sample processing</title>

    <paragraph>
      Thanks to <link href="http://www.opengl.org/registry/specs/ARB/sample_shading.txt">GL_ARB_sample_shading</link> and some GLSL 4.00 functionnalties defined in
      <link href="http://www.opengl.org/registry/specs/ARB/gpu_shader5.txt">GL_ARB_gpu_shader5</link>,
      <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link> gives us much more control on multisampling.
    </paragraph>

    <paragraph>
      With <link href="http://www.opengl.org/registry/specs/ARB/sample_shading.txt">GL_ARB_sample_shading</link>,
      the programmer can force the minimum number of samples that will be compute independently.
      To be efficient, most implementation share some values between samples like texture coordinates
      so that a texture fetch can be reused for every samples of a fragment.
      For example, in case of alpha test based on alpha texture, this behaviour can introduce aliasing. A problem quite obvious in Crysis.
    </paragraph>
    <paragraph>
      The function <codeword>glMinSampleShading</codeword> is used to set this mimimum number of samples.
      In GLSL, it gives us several built-in variables: <codeword>in int gl_SampleID</codeword> the number of the sample,
      a value between 0 and <codeword>gl_NumSamples - 1 </codeword> <codeword>uniform int gl_NumSamples</codeword>
      is the total number of samples in the framebuffer;
      <codeword>in vec2 gl_SamplePosition</codeword> the position of the sample in the pixel (between 0.0 and 1.0 where 0.5 is the pixel center);
      <codeword>out int gl_SampleMask[]</codeword> is used to changed the coverage of a sample,
      to exclude some samples from further fragment processing
      but it will never enable uncovered samples.
    </paragraph>
    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/gpu_shader5.txt">GL_ARB_gpu_shader5</link>
      provides further per-sample controls regarding how in/out data are interpolated using qualifiers.
      When <codeword>centroid</codeword> is used to qualify a variable,
      a single value can be assigned to that variable for all the samples in the pixel.
      However, when <codeword>sample</codeword> qualify a variable,
      a separate value must be assigned to that variable for each covered sampled.
    </paragraph>
    <paragraph>
      New built-in interpolation functions <codeword>interpolateAtCentroid</codeword>,
      <codeword>interpolateAtSample</codeword> and <codeword>interpolateAtOffset</codeword> are available
      to compute interpolated value of a fragment shader input variable.
      <codeword>interpolateAtCentroid</codeword> will return the value of a variable a centroid location, <codeword>interpolateAtSample</codeword>
      at sample location and <codeword>interpolateAtOffset</codeword> at an offset location from the pixel center where (0, 0) is the center of the pixel.
      If an input variable is declared with the qualifier <codeword>noperspective</codeword>, the interpolation is computed without perspective correction.
    </paragraph>

    <title>Direct3D 10.1 features.</title>
    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/draw_buffers_blend.txt">GL_ARB_draw_buffers_blend</link> extended
      <link href="http://www.opengl.org/registry/specs/EXT/draw_buffers2.txt">per-colorbuffer blending</link>
      with per-colorbuffer blend equation with the new functions
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glBlendEquation.xml">glBlendEquationi</codeword>,
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glBlendEquationSeparate.xml">glBlendEquationSeparatei</codeword>,
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glBlendFunc.xml">glBlendFunci</codeword> and
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glBlendFuncSeparate.xml">glBlendFuncSeparatei</codeword>.
    </paragraph>
    <code>
      <line>
        <comment>// Reset the initial blend states of a specific colorbuffer.</comment>
      </line>
      <line>
        <keyword>void</keyword> ResetColorbufferBlend(GLuint Colorbuffer)
      </line>
      <line>{</line>
      <line align="32px">glDisablei(GL_BLEND, Colorbuffer);</line>
      <line align="32px">glColorMaski(Colorbuffer, GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);</line>
      <line align="32px">glBlendFunci(Colorbuffer, GL_ONE, GL_ZERO);</line>
      <line align="32px">glBlendEquationi(Colorbuffer, GL_FUNC_ADD);</line>
      <line>}</line>
    </code>

    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/texture_cube_map_array.txt">GL_ARB_texture_cube_map_array</link> extended
      <link href="http://www.opengl.org/registry/specs/EXT/texture_array.txt">texture array</link> to cube maps.
    </paragraph>

    <title>Programmable filtering.</title>
    <paragraph>
      What is really about with this sampler object? It's about "die Die DIE fixed function sampler!".
      <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link> hardware brings an efficient programmable filtering.
    </paragraph>
    <paragraph>
      This is possible thanks to 3 extensions <link href="http://www.opengl.org/registry/specs/ARB/texture_gather.txt">GL_ARB_texture_gather</link>,
      <link href="http://www.opengl.org/registry/specs/ARB/texture_query_lod.txt">GL_ARB_texture_query_lod</link> and
      <link href="http://www.opengl.org/registry/specs/ARB/gpu_shader5.txt">GL_ARB_gpu_shader5</link>.
    </paragraph>
    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/texture_gather.txt">GL_ARB_texture_gather</link>
      is actually a Direct3D 10.1 hardware feature and provides the function textureGather.
      This function determines the "2x2 footprint that are used for linear filtering in a texture lookup
      and it returns a vector consisting of the first component from each of the 4 texels in the footprint".
      Nice... but very limited.
    </paragraph>
    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/gpu_shader5.txt">GL_ARB_gpu_shader5</link>
      extends this fonctionnaly so that we get a fully programmable texture filtering.
      The sampler object is no longer useful. It allows to gather any component of a 2x2 footprint.
      It allows to use an arbitrary offset to select the footprint and even extend this functionnality to a per-component offset.
      Finally, it allows to perform a per-sample depth comparison.
    </paragraph>
    <paragraph>
      Finally, <link href="http://www.opengl.org/registry/specs/ARB/texture_query_lod.txt">GL_ARB_texture_query_lod</link> defines the function <keyword>textureQueryLOD</keyword> to query, in GLSL,
      the LOD that would be computed if a texture lookup was performed.
    </paragraph>
    <paragraph>
      With such feature, we can perform a per-fragment adaptative texture filtering. "Anisotropic filtering 16x" is no longer a meaningful concept.
    </paragraph>

    <title>Double-precision floating-point support aka FP64.</title>
    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/gpu_shader_fp64.txt">GL_ARB_gpu_shader_fp64</link> is part
      <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link> and exposes support of FP64 uniforms and FP64 computations in GLSL.
      I'm really supprised and actually fairly ceptical about this choice.
      All Direct3D 11 cards doesn't have hardware support for doubles especially on AMD side. It quite makes sens as few users would need it.
      On the Radeon HD 5XXX series, the only cards that have double support are the Radeon HD 5830, Radeon HD 5850, Radeon HD 5870 and Radeon HD 5890 based on RV870 chip.
    </paragraph>
    <paragraph>
      AMD said it will support <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link>
      on the entire Radeon HD 5XXX line which implies that double float will be emulated and, as a conscequence, really slow...
      Well, what is the meaning of "Really slow"?
      AMD claims at <link href="http://www.tomshardware.com/news/amd-s-rv670-double-precision-half-speed,4774.html">FireStream 9170 release</link> (a pro RV670 / Radeon HD 3870 card)
      that they emulate double float with 2 single floats and that this result in 1/2 to 1/4 of the single precision performance.
      According to <link href="http://pastebin.ca/1848493">a code to emulate FP64 on GPU with Cuda</link> I found on nVidia forums,
      I would say that emulated FP64 would be about 10 to 20 times slowers than FP32.
    </paragraph>
    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/gpu_shader_fp64.txt">GL_ARB_gpu_shader_fp64</link> is a great extension.
      I just think it should have stay as an extension but
      I'm not sure it would be any problem in practice anyway as the use cases for FP64 are fairly limited, especially with OpenGL.
      Considering the GPUs that support FP64, we notice that this is the kind of feature that doesn't follow GPU generations but high-end graphics in general.
      The OpenGL 3.X cards that support hardware FP64 (and probably
      <link href="http://www.opengl.org/registry/specs/ARB/gpu_shader_fp64.txt">GL_ARB_gpu_shader_fp64</link>)
      are Radeon HD 4770, 4830, 4850, 4870, 4890, 4850 X2, 4870 X2; GeForce GTX 260, 275, 280, 285, 295.
    </paragraph>

    <code title="A double addition emulation with 2 floats by Norbert Juffa (nVidia):">
      <line>
        <keyword>vec2</keyword> dblsgl_add(<keyword>vec2</keyword> x, <keyword>vec2</keyword> y)
      </line>
      <line>
        {
      </line>
      <line align="32px">
        <keyword>vec2</keyword> z;
      </line>
      <line align="32px">
        <keyword>float</keyword> t1, t2, e;
      </line>
      <line align="32px">

      </line>
      <line align="32px">
        t1 = x.y + y.y;
      </line>
      <line align="32px">
        e = t1 - x.y;
      </line>
      <line align="32px">
        t2 = ((y.y - e) + (x.y - (t1 - e))) + x.x + y.x;
      </line>
      <line align="32px">
        z.y = e = t1 + t2;
      </line>
      <line align="32px">
        z.x = t2 - (e - t1);
      </line>
      <line align="32px">
        <keyword>return</keyword> z;
      </line>
      <line>
        }
      </line>
    </code>

    <code title="A double multiplication emulation with 2 floats by Norbert Juffa (nVidia):">
      <line>
        <keyword>vec2</keyword> dblsgl_mul(<keyword>vec2</keyword> x, <keyword>vec2</keyword> y)
      </line>
      <line>
        {
      </line>
      <line align="32px">
        <keyword>vec2</keyword> z;
      </line>
      <line align="32px">
        <keyword>float</keyword> up, vp, u1, u2, v1, v2, mh, ml;
      </line>
      <line align="32px">

      </line>
      <line align="32px">
        up = x.y * 4097.0;
      </line>
      <line align="32px">
        u1 = (x.y - up) + up;
      </line>
      <line align="32px">
        u2 = x.y - u1;
      </line>
      <line align="32px">
        vp = y.y * 4097.0;
      </line>
      <line align="32px">
        v1 = (y.y - vp) + vp;
      </line>
      <line align="32px">
        v2 = y.y - v1;
      </line>
      <line align="32px">
        <comment>//mh = __fmul_rn(x.y,y.y);</comment>
      </line>
      <line align="32px">
        mh = x.y*y.y;
      </line>
      <line align="32px">
        ml = (((u1 * v1 - mh) + u1 * v2) + u2 * v1) + u2 * v2;
      </line>
      <line align="32px">
        <comment>//ml = (fmul_rn(x.y,y.x) + __fmul_rn(x.x,y.y)) + ml;</comment>
      </line>
      <line align="32px">
        ml = (x.y*y.x + x.x*y.y) + ml;
      </line>
      <line align="32px">

      </line>
      <line align="32px">
        mh = mh;
      </line>
      <line align="32px">
        z.y = up = mh + ml;
      </line>
      <line align="32px">
        z.x = (mh - up) + ml;
      </line>
      <line align="32px">
        <keyword>return</keyword> z;
      </line>
      <line>
        }
      </line>
    </code>

    <title>More texture formats! But not so many actually</title>
    <paragraph>
      Almost all OpenGL release implies more texture formats.
      This is again the case with <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link> as 2 new extensions on that side has been released.
      <link href="http://www.opengl.org/registry/specs/ARB/texture_buffer_object_rgb32.txt">GL_ARB_texture_buffer_object_rgb32</link>
      also part of <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link> specification
      and <link href="http://www.opengl.org/registry/specs/ARB/texture_compression_bptc.txt">GL_ARB_texture_compression_bptc</link>
      excluded from <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link> specification,
      probably just because of an S3 patent just like
      <link href="http://www.opengl.org/registry/specs/EXT/texture_compression_s3tc.txt">GL_EXT_texture_compression_s3tc</link>
    </paragraph>
    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/texture_buffer_object_rgb32.txt">GL_ARB_texture_buffer_object_rgb32</link>
      trivially adds 3 channels 32 bits texture buffers: <codeword>GL_RGB32I</codeword>, <codeword>GL_RGB32UI</codeword> and <codeword>GL_RGB32F</codeword>.
    </paragraph>
    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/texture_compression_bptc.txt">GL_ARB_texture_compression_bptc</link>
      provides Direct3D 11 compressed formats knowned as BC6H and BC7 and called respectivelly <codeword>GL_BPTC_FLOAT</codeword> and <codeword>GL_BPTC</codeword> with OpenGL.
      They aim high dynamic range, low dynamic range texture compression and high quality compression of sharp edges.
      The compression ratio for <codeword>GL_BPTC_FLOAT</codeword> and <codeword>GL_BPTC</codeword> are 6:1 and 3:1.
    </paragraph>

    <title>Conclusion</title>
    <paragraph>
      Considering that <link href="http://www.opengl.org/registry/doc/glspec32.core.20091207.withchanges.pdf">OpenGL 3.2</link> has been released about 6 months ago, that
      <link href="http://www.opengl.org/registry/doc/glspec33.core.20100311.pdf">OpenGL 3.3</link> has been release at the same time than
      <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link>,
      I would like to say that <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link>
      is the most impressive work ever done by the ARB even if we still miss some important features.
      It provides the same hardware level of features than Direct3D 11 but some concepts are missing (Command lists are missing but this is more a software king of think).
    </paragraph>
    <list name="OpenGL 4.0 is:">
      <list-element>A set of big new features: Tesselation, programmable filtering, subroutines, programmable multisampling.</list-element>
      <list-element>A set of features refinements: Tranform feedback, geometry shaders, configuration offset screen rendering blending.</list-element>
      <list-element>A set of small useful features: More compressed texture formats, cube map arrays.</list-element>
      <list-element>A clear graphics cards range.</list-element>
      <list-element>A good graphics API.</list-element>
    </list>

    <paragraph>
      On the drivers side, all the work from the past 2 years by ATI is remarcable. The drivers are know solid on Windows.
      nVidia has still great drivers and has already published <link href="http://developer.nvidia.com/object/opengl_driver.html">beta drivers for OpenGL 3.3.</link>
      OpenGL 4.0 beta drivers should be available at GeForce GTX 480 launch on the 26th of March.
    </paragraph>

    <paragraph>
      If it continues this way, that developer tools follow,
      I really see OpenGL making it comes back as main API in games even on Windows.
      There is a long way before this happened but good signs keep popping from everywhere
      just like the recent news announcing <link href="http://www.wired.com/gamelife/2010/03/steam-mac/">Steam on Mac with actual game running OpenGL</link>.
    </paragraph>

    <paragraph>
      <link href="http://www.opengl.org/registry/doc/glspec33.core.20100311.pdf">OpenGL 3.3</link> and
      <link href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf">OpenGL 4.0</link>
      are good graphics APIs and I think we are just 1 or 2 steps away from getting great APIs.
      I will cover, in the last series article, expectations (or wishes?) for OpenGL 3.4 and OpenGL 4.1 that might fill the gasp separating OpenGL from awesomeness!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf" title="OpenGL 4.0 core specification" />
      <source-element type="Link" href="http://www.opengl.org/registry/doc/glspec40.compatibility.20100311.withchanges.pdf" title="OpenGL 4.0 compatibility specification" />
      <source-element type="Link" href="http://www.opengl.org/registry/doc/GLSLangSpec.4.00.8.clean.pdf" title="GLSL 4.0 specification" />
      <source-element type="Link" href="http://www.opengl.org/registry" title="OpenGL registry with everything"/>
      <source-element type="Link" href="http://www.khronos.org/files/opengl4-quick-reference-card.pdf" title="OpenGL 4.0 quick reference card" />
    </source-list>
  </post>

  <post index="0268" date="17/03/2010" std-date="2010-03-17T20:00:00.00Z" title="Let's meet up at Eurographics 2010!">
    <meta>
      <tag>gtc-tech-event</tag>
    </meta>

    <paragraph>
      I am pleased to say that I will be at Eurographics 2010, the 3-7 May at Norrkoping in Sweden. A week of brain feeding of state of the art graphics! :D
    </paragraph>
    <paragraph>
      If by any chance you are at Eurographics, send me a mail!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.eurographics2010.se/program/" title="Eurographics 2010 program" />
    </source-list>
  </post>

  <post index="0267" date="16/03/2010" std-date="2010-03-16T23:30:00.00Z" title="OpenGL 3.3 review">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
      <tag>gtc-tech-project-openglreviews</tag>
    </meta>

    <paragraph>
      My reading and study of the new specifications is almost done. I decided to write 3 posts about these huge releases.
    </paragraph>
    <list>
      <list-element>1 - OpenGL 3.3 review (&lt;- here we are!)</list-element>
      <list-element>2 - OpenGL 4.0 review</list-element>
      <list-element>3 - OpenGL future.</list-element>
    </list>

    <title>RGB10A2 format for vertex attributes and textures.</title>
    <paragraph>
      I keep saying: "It's all about bandwidth!" A GPU is so much computional power, it need to be feed.
    </paragraph>
    <paragraph>
      Usually, for normals and tangents attributes we use floating point data.
      It is a lot of precision but a big cost in memory bandwidth.
      <link href="http://www.opengl.org/registry/specs/ARB/vertex_type_2_10_10_10_rev.txt">GL_ARB_vertex_type_2_10_10_10_rev</link> provide RGB10A2 format for vertex attribute.
      The bandwidth is reduced by 2 or 3 times and it keep a really good precision, actually higher than most normal maps.
    </paragraph>
    <paragraph>
      <link href="http://www.opengl.org/sdk/docs/man/xhtml/glTexImage2D.xml">OpenGL supports RGB10A2 textures</link> since OpenGL 1.1 but
      <link href="http://www.opengl.org/registry/specs/ARB/texture_rgb10_a2ui.txt">GL_ARB_texture_rgb10_a2ui</link>
      allows an unnormalized access to the texture data just like <link href="http://www.opengl.org/registry/specs/EXT/texture_integer.txt">GL_EXT_texture_integer</link>
      allowed it for common interger textures in <link href="http://www.opengl.org/registry/doc/glspec30.20080923.pdf">OpenGL 3.0</link>.
    </paragraph>

    <title>Sampler object</title>
    <paragraph>
      Finally! The OpenGL community has <link href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=263750#Post263750">debated a lot</link>
      about this feature before the release.
      OpenGL texture objects is a conceptual non sens which blend data and operations on a single object.
      It results in a lot of limitations that various extensions try to remove.
      <link href="http://www.opengl.org/registry/specs/ARB/sampler_objects.txt">GL_ARB_sampler_objects</link> allows sampling a single image
      with multiple different filters and sampling multiple images with the same filter.
      This could be a huge benefice both in texture memory (no data copy) and texture filtering processing thanks to an adaptative filtering per-fragment.
      Why using an amazing filtering method when the fragment is in a blurred part of the image?
    </paragraph>
    <paragraph>
      This extension still rely on the "texture unit" semantic.
      Many developers (include me) wished to see this extension but in a form that avoid avoid texture unit.
      To be fair, I would say that <link href="http://www.opengl.org/registry/specs/ARB/sampler_objects.txt">GL_ARB_sampler_objects</link> provides a simple solution for a complex problem.
      I can't be against sure approach. Moreover, this extension is the first one to use 'direct state access' instead of 'bind to edit' API.
    </paragraph>
    <paragraph>
      Samplers apply on all texture targets.
    </paragraph>
    <code title="Some dreamed code:">
      <line number="0">
        GLuint Sampler = 0;
      </line>
      <line number="1">
        glGenSamplers(1, &amp;Sampler);
      </line>
      <line number="2">
        glSamplerParameteri(Sampler, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
      </line>
      <line number="3">
        glSamplerParameteri(Sampler, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
      </line>
      <line number="4">
        glSamplerParameteri(Sampler, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
      </line>
      <line number="5">
        glSamplerParameteri(Sampler, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
      </line>
      <line number="6">
        glSamplerParameteri(Sampler, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
      </line>
      <line number="7">
        glSamplerParameteri(Sampler, GL_TEXTURE_MAX_ANISOTROPY_EXT, 16);
      </line>
    </code>
    <code title="And I woke up:">
      <line number="1">
        <comment>// Bind 1 texture to be sample by 2 samplers.</comment>
      </line>
      <line number="1">
        glBindSampler(0, Sampler);
      </line>
      <line number="2">
        glBindSampler(1, SamplerB);
      </line>
      <line number="3">
        glActiveTexture(GL_TEXTURE0);
      </line>
      <line number="3">
        glBindTexture(GL_TEXTURE_2D, Texture);
      </line>
      <line number="3">
        glActiveTexture(GL_TEXTURE1);
      </line>
      <line number="3">
        glBindTexture(GL_TEXTURE_2D, Texture);
      </line>
    </code>
    <title>GLSL update</title>
    <paragraph>
      <link href="http://www.opengl.org/registry/doc/GLSLangSpec.3.30.6.clean.pdf">GLSL 3.30</link> is few changes away from
      <link href="http://www.opengl.org/registry/doc/GLSLangSpec.1.50.11.pdf">GLSL 1.50</link>.
      One good thing is the version change. It's easier to match GLSL and OpenGL versions from now on.
    </paragraph>
    <paragraph>
      <link href="http://www.opengl.org/registry/specs/ARB/shader_bit_encoding.txt">GL_ARB_shader_bit_encoding</link>
      provides functions for getting and setting the bit encoding for floating-point values.
      4 fonctions: <codeword>floatBitsToInt</codeword>, <codeword>floatBitsToUint</codeword>,
      <codeword>intBitsToFloat</codeword>, <codeword>uintBitsToFloat</codeword>.
    </paragraph>
    <paragraph>
      More important feature and actually I think it's quite a great improvement: <codeword href="http://www.opengl.org/registry/specs/ARB/explicit_attrib_location.txt">GL_ARB_explicit_attrib_location</codeword>.
      This extension allows setting the location of the input variables inside the vertex shader and the output variables inside the fragment shader.
      This is actually a great and beautiful way to implement <link href="http://developer.nvidia.com/object/cg_toolkit.html">Cg</link> 'semantics' in GLSL.
    </paragraph>
    <code title="Vertex shader input declaration:">
      <line number="0">
        <keyword>#version</keyword> 330
      </line>
      <line number="1">
        <keyword>#define</keyword> POSITION 0
      </line>
      <line number="2">
        <keyword>#define</keyword> COLOR0 1
      </line>
      <line number="3">
        <keyword>#define</keyword> NORMAL 4
      </line>
      <line number="4">

      </line>
      <line number="5">
        <keyword>layout</keyword>(<keyword>location</keyword> = POSITION) <keyword>in vec4</keyword> Position;
      </line>
      <line number="6">
        <keyword>layout</keyword>(<keyword>location</keyword> = COLOR0) <keyword>in vec4</keyword> Colors[3]; <comment>// Reserve 2 and 3 locations.</comment>
      </line>
      <line number="7">
        <keyword>layout</keyword>(<keyword>location</keyword> = NORMAL) <keyword>in vec4</keyword> Normal;
      </line>
    </code>
    <code title="Fragment shader output declaration:">
      <line number="0">
        <keyword>#version</keyword> 330
      </line>
      <line number="1">
        <keyword>#define</keyword> COLOR0 0
      </line>
      <line number="2">
        <keyword>#define</keyword> NORMAL 3
      </line>
      <line number="3">

      </line>
      <line number="4">
        <comment>// Reserve location 0, 1 and 2</comment>
      </line>
      <line number="5">
        <keyword>layout</keyword>(<keyword>location</keyword> = COLOR0) <keyword>out vec4</keyword> Colors[3];
      </line>
      <line number="6">
        <comment>// First parameter of the blend equation, index = 0 by default</comment>
      </line>
      <line number="7">
        <keyword>layout</keyword>(<keyword>location</keyword> = NORMAL) <keyword>out vec3</keyword> Normal;
      </line>
      <line number="8">
        <comment>// Second parameter of the blend equation</comment>
      </line>
      <line number="9">
        <keyword>layout</keyword>(<keyword>location</keyword> = NORMAL, <keyword>index</keyword> = 1) <keyword>out vec4</keyword> Factor;
      </line>
    </code>
    <paragraph>
      Less or even no more
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glGetFragDataLocation.xml">glGetFragDataLocation</codeword>,
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glBindFragDataLocation.xml">glBindFragDataLocation</codeword>,
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glGetAttribLocation.xml">glGetAttribLocation</codeword>,
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glBindAttribLocation.xml">glBindAttribLocation</codeword> calls needed!
      These functions are quite an overload and unplessanted for software design.
    </paragraph>
    <paragraph>
      This location idea is such a main feature for me. However, that's not enough to be really a great one.
      I would like to see some kind of GL_ARB_explicit_uniform_location to set the uniform variable locations and
      extend the concept for 'varying' variables which will fix all the complaint I have against
      <link href="http://www.opengl.org/registry/specs/EXT/separate_shader_objects.txt">seperate shader objects</link>
      (to make each stage independent) before promoting this extension to core (in OpenGL 3.4...).
    </paragraph>
    <paragraph>
      Wait a minute? From where come this 'index' of blend equation parameter?
      I would say from <codeword href="http://www.opengl.org/registry/specs/EXT/blend_func_extended.txt">GL_ARB_blend_func_extended</codeword> extension,
      a <link href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=251694#Post251694">community request</link>
      and also it seems to be a Direct3D 10 feature (Anyone has some documentation on that?).
      To use the second index, new values can be used in <codeword>glBlendEquation</codeword> and <codeword>glBlendEquationSeparate</codeword>:
      <codeword>GL_SRC1_COLOR</codeword>, <codeword>GL_SRC1_ALPHA</codeword>, <codeword>GL_ONE_MINUS_SRC1_COLOR</codeword>, <codeword>GL_ONE_MINUS_SRC1_ALPHA</codeword>.
    </paragraph>

    <title>Occlusion query refinement</title>
    <paragraph>
      <codeword href="http://www.opengl.org/registry/specs/ARB/occlusion_query2.txt">GL_ARB_occlusion_query2</codeword> is the one extension that's made me laught.
      It's a nice extension that adds a new occlusion query: <codeword>GL_ANY_SAMPLES_PASSED</codeword>.
      The difference with <codeword>GL_SAMPLES_PASSED</codeword>? <codeword>GL_SAMPLES_PASSED</codeword> returns a count of samples
      and <codeword>GL_ANY_SAMPLES_PASSED</codeword> is just a boolean value that returns not null is any sample pass.
      Just like the super old <link href="http://www.opengl.org/registry/specs/HP/occlusion_test.txt">GL_HP_occlusion_test</link> extension behave!
      An example in this extension shows some conditional rendering using <codeword>GL_ANY_SAMPLES_PASSED</codeword>
      without using the OpenGL conditional rendering funtions...
    </paragraph>
    <paragraph>
      Ok, this extension is a why not... but I don't think this extension improves anything.
      It's nice and will of course work as well as <codeword>GL_SAMPLES_PASSED</codeword> with conditional rendering and maybe slighty faster.
    </paragraph>

    <title>Promoted extensions to OpenGL core specification</title>

    <list>
      <list-element>
        <link href="http://www.opengl.org/registry/specs/ARB/texture_swizzle.txt">GL_ARB_texture_swizzle</link>
      </list-element>
      <list-element>
        <link href="http://www.opengl.org/registry/specs/ARB/instanced_arrays.txt">GL_ARB_intanced_arrays</link>
      </list-element>
      <list-element>
        <link href="http://www.opengl.org/registry/specs/ARB/timer_query.txt">GL_ARB_timer_query</link>
      </list-element>
    </list>
    <paragraph>
      Texture swizzle provides some new texture sampler states to swizzle the texture components which provides a great freedom to interpret texture format.
    </paragraph>
    <paragraph>
      Instanced arrays provides an alternative to the current OpenGL instancing techniques.
      We can already use uniform buffer and texture buffer to store the per instance data,
      <codeword href="http://www.opengl.org/registry/specs/ARB/instanced_arrays.txt">GL_ARB_intanced_arrays</codeword>
      proposed to use array buffers for per instance data.
      Using the function <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glVertexAttribDivisor.xml">glVertexAttribDivisor</codeword> for each per-instance array buffer,
      we specify that the draw call must use the first attribute for N vertices where N should be the count of instances vertices.
      This extension allows to draw multiples different objects as well, as far as they have the same number of vertices.
      Using attributes for instance data is likely to avoid the latency of a texture buffer fetch but might
      fill up the attribute data flow if the size of per instance data is quite large.
      Probably the fastest instancing method for small per instance data rendering and huge number of instance.
    </paragraph>
    <paragraph>
      Instanced arrays is an extension that came along with OpenGL 3.0 release without being promoted to core until now.
      This extension have been widely supported by ATI but lacks on nVidia drivers, being part of the core specification
      will hopefully brings this feature on nVidia hardware.
    </paragraph>
    <paragraph>
      Finally, <codeword href="http://www.opengl.org/registry/specs/ARB/timer_query.txt">GL_ARB_timer_query</codeword>
      usse the query object to request the time in nanosecond spend by OpenGL calls without stalling the graphics pipeline.
      A great extension for optimisations and maybe for dynamically adjusting the quality level to keep a good enough frame rate.
    </paragraph>

    <title>
      GLSL <codeword>#include</codeword> directive extension
    </title>
    <paragraph>
      <codeword href="GL_ARB_shading_language_include">GL_ARB_shading_language_include</codeword> is an extension that provides an
      <codeword>#include</codeword> directive to GLSL but it hasn't been promoted to OpenGL 3.3 specifications.
      <link href="http://www.opengl.org/registry/doc/GLSLangSpec.3.30.6.clean.pdf">GLSL 3.30</link> specification shows that initially,
      this extension was planned to be part of OpenGL 3.3 core.
    </paragraph>
    <paragraph>
      The goal of this <codeword>#include</codeword> directive is to reuse the same shader text in multiple shader across multiple contexts.
      The way <link href="GL_ARB_shading_language_include">GL_ARB_shading_language_include</link> allows this,
      it introduces 'named strings' to create some kind of paths in the GLSL compiler space that contains the shader texts.
      These name strings are created and deleted by <codeword>glNamedStringARB</codeword> and <codeword>glDeleteNamedStringARB</codeword>.
      From these name strings, the shader text can be compiled with the function
      <codeword>glCompileShaderIncludeARB</codeword> of
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glCompileShader.xml">glCompileShader</codeword>.
    </paragraph>
    <paragraph>
      This extension is an interesting step on the topic of GLSL build management.
      Developpers are asking for improvements on that side, <codeword>#include</codeword> but also shader binaries (blobs).
      I'm not completely convinced by this extension. It might require just few improvements.
      Direct loading from OS filesystem have been considered but involved portability issues.
    </paragraph>

    <title>Until the next series post</title>
    <paragraph>
      And this is absolutely all for OpenGL 3.3? Yes, it's not so much! The others extensions are weither Direct3D 10.1 and Direct3D 11 hardware extensions.
      OpenGL 3.3 is a small update of OpenGL 3.2 which provides some good refinements for API.
      However, I already expect an OpenGL 3.4 release because some subsets of OpenGL 4.0 features seem to be perfectly compatible with OpenGL 3.x hardware.
      Moreover, GLSL 3.3 and GLSL 4.0 suffer of imcompabilities independant from the hardware.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.opengl.org/registry/doc/glspec33.core.20100311.withchanges.pdf" title="OpenGL 3.3 core specification" />
      <source-element type="Link" href="http://www.opengl.org/registry/doc/glspec33.compatibility.20100311.withchanges.pdf" title="OpenGL 3.3 compatibility specification" />
      <source-element type="Link" href="http://www.opengl.org/registry/doc/GLSLangSpec.3.30.6.pdf" title="GLSL 3.3 specification" />
      <source-element type="Link" href="http://www.opengl.org/registry" title="OpenGL registry with everything"/>
      <source-element type="Link" href="http://www.khronos.org/files/opengl4-quick-reference-card.pdf" title="OpenGL 4.0 quick reference card" />
    </source-list>
  </post>

  <post index="0266" date="11/03/2010" std-date="2010-03-11T15:00:00.00Z" title="OpenGL 3.3 AND OpenGL 4.0 released at GDC 2010!">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
      <tag>gtc-tech-opengl-event</tag>
    </meta>

    <paragraph>
      I can't believe it. Really!
    </paragraph>
    <paragraph>
      First, because OpenGL 4.0 is released but also because they bring much more than what I was expecting!
      I'm starting my reading and I'll come back with a detailled post.
    </paragraph>
    <paragraph>
      It's a lot of specifications released at the same time: OpenGL 3.3 core / compatibility, GLSL 3.3, OpenGL 4.0 core / compatibility, GLSL 4.0 and 19 ARB extensions. Whouuu! Oo
    </paragraph>
    <paragraph>
      nVidia announced a full OpenGL 4.0 support at Fermi released... meaning end of March!
    </paragraph>
    <paragraph>
      Enjoy!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.opengl.org/registry/doc/glspec40.core.20100311.withchanges.pdf" title="OpenGL 4.0 core specification" />
      <source-element type="Link" href="http://www.opengl.org/registry/doc/glspec40.compatibility.20100311.withchanges.pdf" title="OpenGL 4.0 compatibility specification" />
      <source-element type="Link" href="http://www.opengl.org/registry/doc/GLSLangSpec.4.00.7.pdf" title="GLSL 4.0 specification" />
      <source-element type="Link" href="http://www.opengl.org/registry/doc/glspec33.core.20100311.withchanges.pdf" title="OpenGL 3.3 core specification" />
      <source-element type="Link" href="http://www.opengl.org/registry/doc/glspec33.compatibility.20100311.withchanges.pdf" title="OpenGL 3.3 compatibility specification" />
      <source-element type="Link" href="http://www.opengl.org/registry/doc/GLSLangSpec.3.30.6.pdf" title="GLSL 3.3 specification" />
      <source-element type="Link" href="http://www.opengl.org/registry" title="OpenGL registry with everything"/>
    </source-list>
  </post>

  <post index="0265" date="09/03/2010" std-date="2010-03-09T20:00:00.00Z" title="GLM FAQ">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>


    <paragraph>
      As part of GLM 0.9 development, I am rewriting the manual which include a FAQ. This is what I currently get, if you have more ideas don't hesitate to submit!
    </paragraph>

    <quote>1. Why GLM follows GLSL specification and conventions?</quote>
    <paragraph>
      Following GLSL conventions is a really strict policy of GLM.
      GLM has been designed following the idea that everyone does its own math library with his own conventions.
      The idea is that brilliant developers (the OpenGL ARB) worked together and agreed to make GLSL.
      Following GLSL conventions is a way to find consensus. Moreover, basically when a developer knows GLSL, he knows GLM.
    </paragraph>

    <quote>2. Why vec4(x) * y doesn't build?</quote>
    <paragraph>
      GLM follows GLSL semantic conventions and features.
      Indeed, a vector by a scalar product is supported.
      However, GLSL defines for example a vector of float by a float scalar but doesn’t support for example a vector of float by a double scalar.
      Value types must match.
    </paragraph>
    <code>
      <line number="0">
        <userword>vec4</userword> v1;
      </line>
      <line number="1">
        <userword>vec4</userword> v2;
      </line>
      <line number="2">
        <userword>dvec4</userword> v3;
      </line>
      <line number="3">
        <keyword>float</keyword> s1;
      </line>
      <line number="4">
        <keyword>double</keyword> s2;
      </line>
      <line number="5">
        ...
      </line>
      <line number="6">
        v2 = v1 * s1; <comment>// OK</comment>
      </line>
      <line number="7">
        v2 = v1 * s2; <comment>// ERROR</comment>
      </line>
      <line number="8">
        v3 = v3 * s2; <comment>// OK</comment>
      </line>
      <line number="9">
        v2 = v1 * 2.0f; <comment>// OK</comment>
      </line>
      <line number="10">
        v2 = v1 * 2.0; <comment>// ERROR</comment>
      </line>
      <line number="11">
        v2 = v1 * 2; <comment>// ERROR</comment>
      </line>
    </code>

    <quote>3.3. Would it be possible to add my feature?</quote>
    <paragraph>
      YES. Every feature request could be added by submitting it here:
      https://sourceforge.net/apps/trac/glf/newticket
    </paragraph>
    <paragraph>
      These requests would mainly take the form of extensions and if you provide an implementation, the feature will be added automatically in GLM release.
    </paragraph>

    <quote>3.4. Does GLM run GLSL program?</quote>
    <paragraph>
      No, GLM is a C++ implementation of a subset of GLSL.
    </paragraph>

    <quote>3.5. Does a GLSL compiler build GLM codes?</quote>
    <paragraph>
      Not directly but it can be easy to port.
      However, the difference between a shader and C++ program at software design level will probably make this idea unlikely or impossible.
    </paragraph>

    <quote>3.6. Should I use GTX extensions?</quote>
    <paragraph>
      GTX extensions are qualified to be experimental extensions.
      In GLM this means that these extensions might change from version to version without restriction.
      In practice, it doesn’t really change except time to time.
      GTC extensions are stabled, tested and perfectly reliable in time.
      Many GTX extensions extend GTC extensions and provide a way to explore features and implementations before becoming stable by a promotion as GTC extensions.
      This is fairly the way OpenGL features are developed through extensions.
    </paragraph>

    <quote>3.7. Would it be possible to change GLM to do glVertex3fv(glm::vec3(0))?</quote>
    <paragraph>
      It's possible to implement such thing in C++ with the implementation of the appropriate cast operator.
      In this example it's likely because it would result as a transparent cast.
      However, most of the time, it's really unlikely resulting of build with no error and programs running with unexpected behaviors.
    </paragraph>
    <code title="GLM_GTX_type_ptr extension provide a safe solution:">
      <line number="0">
        glm::<userword>vec4</userword> v(0);
      </line>
      <line number="1">
        glm::<userword>mat4</userword> m(0);
      </line>
      <line number="2">
        glVertex3fv(glm::value_ptr(v));
      </line>
      <line number="3">
        glLoadMatrixfv(glm::value_ptr(m));
      </line>
    </code>

    <code title="Another solution inspired by STL:">
      <line number="0">
        glm::<userword>vec4</userword> v(0);
      </line>
      <line number="1">
        glm::<userword>mat4</userword> m(0);
      </line>
      <line number="2">
        glVertex3fv(&amp;v[0]);
      </line>
      <line number="3">
        glLoadMatrixfv(&amp;m[0][0]);
      </line>
    </code>

    <quote>3.8. Where can I ask my questions?</quote>
    <paragraph>
      A good place is the OpenGL Toolkits forum on OpenGL.org:
      http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=postlist&amp;Board=10&amp;page=1
    </paragraph>

    <quote>3.9. Where can I report a bug?</quote>
    <paragraph>
      Just like feature requests: https://sourceforge.net/apps/trac/glf/newticket
    </paragraph>

    <quote>3.10. Where can I find the documentation of extensions?</quote>
    <paragraph>
      The Doxygen generated documentation includes a complete list of all extensions available.
      Explore this documentation to get a complete view of all GLM capabilities!
      <link href="http://glm.g-truc.net/html/index.html">http://glm.g-truc.net/html/index.html</link>
    </paragraph>

  </post>

  <post index="0264" date="08/03/2010" std-date="2010-03-08T02:00:00.00Z" title="Flowers revival (updated)">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>

    <paragraph>
      <link href="post-0248.html">The flowers revival post</link> was broken and has been fixed, including more flowers pictures.
    </paragraph>
    <paragraph>
      Last week-end tasted like a gleam of spring. Few more weeks and it will be blossoming everywhere in London, bringing the most enjoyable time of the city!
    </paragraph>

    <source-list>
      <source-element type="Link" href="post-0248.html" title="Flowers revival post" />
    </source-list>
  </post>

  <post index="0263" date="04/03/2010" std-date="2010-03-04T20:00:00.00Z" title="Using sRGB color space with OpenGL">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      <link href="http://en.wikipedia.org/wiki/SRGB">sRGB</link> is a non-linear color space that can be directly displayed by computer display devices.
      Another very popular color space is <link href="http://www.cambridgeincolour.com/tutorials/sRGB-AdobeRGB1998.htm">Adobe RGB</link> often used in photography for its higher precision.
      sRGB and Adobe RGB color spaces define what actual color is a color code so that on all compatible outputs or supports, the color will look the same.
    </paragraph>
    <paragraph>
      OpenGL defines sRGB textures (OpenGL 2.1) and sRGB framebuffers (OpenGL 3.0) to take advantage of the sRGB color space.
      sRGB provides an optimized use of each value of the storage range so that these values become more relevant for our eyes perception.
      A quality gain for zero extra storage.
    </paragraph>
    <paragraph>
      OpenGL provides sRGB with 8 bits components and compressed sRGB data only. These formats are identified with
      <codeword>GL_SRGB</codeword>, <codeword>GL_SRGB8</codeword>, <codeword>GL_SRGB_ALPHA</codeword>, <codeword>GL_SRGB8_ALPHA8</codeword>,
      <codeword>GL_COMPRESSED_SRGB</codeword> and <codeword>GL_COMPRESSED_SRGB_ALPHA</codeword>.
      When the extension <codeword href="http://www.opengl.org/registry/specs/EXT/texture_compression_s3tc.txt">GL_EXT_texture_compression_s3tc</codeword> is supported,
      the following format are supported: <codeword>GL_COMPRESSED_SRGB_S3TC_DXT1_EXT</codeword>, <codeword>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT</codeword>,
      <codeword>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT</codeword> and <codeword>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT</codeword>.
      These formats are absolutely similar to the usual DXTC1, DXTC3 and DXTC5 but with sRGB sources.
    </paragraph>
    <paragraph>
      The ARB has considered that less that 8 bits per pixel is not enough precision to make a non linear color space relevant for storage.
      The ARB has also considered that more than 8 bits per pixel is so much precision than sRGB isn't really useful.
      Another way to see this, is that less than 8 bits per pixel is not used anymore and more than 8 bits per pixels conversion to linear space would be too expensive to do on the hardware.
      Currently, we can expect the conversion to be implemented in GPUs with a lookup table of 256 values so that this conversion is almost free to perform.
      However, a table with 65536 values is a lot higher transistors cost. I would not be surprised to see sRGB16 OpenGL extension in the future.
    </paragraph>
    <paragraph>
      With OpenGL 3.2 core profile, there is no 1 or 2 components sRGB textures.
      With OpenGL 3.2 compatibility profile we have some extra formats: <codeword>GL_SLUMINANCE</codeword>, <codeword>GL_SLUMINANCE8_ALPHA8</codeword>,
      <codeword>GL_COMPRESSED_SLUMINANCE</codeword> and <codeword>GL_COMPRESSED_SLUMINANCE_ALPHA</codeword>.
      One example where nVidia is right about <link href="http://nvidia.fullviewmedia.com/GPU2009/0930-gold-1407.html">"some deprecated OpenGL features might be useful" (minute 23)</link>.
    </paragraph>
    <paragraph>
      When an alpha channel is used, <link href="http://www.alvyray.com/memos/17_nonln.pdf">the alpha channel ALWAYS remains linear</link>.
      The texture format names use a separated token 'ALPHA' to show this difference between channels.
    </paragraph>
    <paragraph>
      sRGB is not a linear color space. If we have 2 sRGB pixels A and B then A + B is not a valid operation.
      Each time a sRGB value is used for an operation, the value need to be converted to a linear color space value.
      To convert a 8 bits sRGB pixel to a linear RGB pixel, the graphics card might need 16 bits per channel to be lossless.
    </paragraph>
    <paragraph>
      On the OpenGL pipeline we will find these conversions for three tasks: texel sampling, multisample resolution and blending.
      OpenGL gives control of these conversions only at blending stage with the calls <codeword>glEnable(GL_FRAMEBUFFER_SRGB)</codeword> and <codeword>glDisable(GL_FRAMEBUFFER_SRGB)</codeword>.
      When enabled, the values are linearized prior to their use for blending. A lack of conversions will generally darken the framebuffer.
    </paragraph>
    <paragraph>
      For texel fetch and multisample resolution, these conversions are performed automatically but the way it's performed is just a recommandation.
      For texel fetch, the recommantation is to perform the conversions to a linear space before the filtering.
      For the multisample resolution, the recommanration is to perform the conversions before the average.
    </paragraph>
    <paragraph>
      sRGB textures are supported from GeForce 6 and Radeon 9***. sRGB framebuffers require a GeForce 8 or a Radeon HD 2***.
      Apple drivers doesn't support OpenGL 3.0 yet (in MacOS X 10.6.2) but supports <codeword href="http://www.opengl.org/registry/specs/EXT/texture_sRGB.txt">GL_EXT_texture_sRGB</codeword>
      and <codeword href="http://www.opengl.org/registry/specs/EXT/framebuffer_sRGB.txt">GL_EXT_framebuffer_sRGB</codeword> for all cards that support sRGB color space.
      Intel drivers are also suposed to support both sRGB textures and framebuffers... I'm so sure either about S3.
      Chrome 4** supports sRGB textures and are suposed to support sRGB framebuffers because S3 claims that Chrome 4** are OpenGL 3 cards but <codeword>GL_EXT/ARB_framebuffer_sRGB</codeword> isn't in the extension list of the card.
    </paragraph>
    <paragraph>
      Unfortunatly, OpenGL ES 1 and 2 don't provide any support of sRGB.
    </paragraph>
    <paragraph>
      To get started with using sRGB with OpenGL, the <link href="post-0260.html">last release</link> of the <link href="project-0026.html">OpenGL 3 Samples Pack</link>
      contains a sample using a sRGB framebuffer object.
    </paragraph>
    <list name="sRGB +:">
      <list-element>OpenGL and Direct3D support.</list-element>
      <list-element>Compressed textures support.</list-element>
      <list-element>Defines which color a set of values represent.</list-element>
      <list-element>Same storage size than RGB for higher quality.</list-element>
      <list-element>Great LDR format when use with HDR rendering.</list-element>
      <list-element>Large support by tools (Photoshop, Lightroom, Paint Shop Pro, etc.) and hardware (GPUs, Cameras, Monitors, etc.).</list-element>
    </list>
    <list name="sRGB -:">
      <list-element>Arithmetic operations are not correct without conversion to a linear format.</list-element>
      <list-element>Lower precision than Adobe RGB.</list-element>
    </list>

    <source-list>
      <source-element type="Link" href="http://www.w3.org/Graphics/Color/sRGB.html" title="A Standard Default Color Space for the Internet: sRGB" />
      <source-element type="Link" href="http://en.wikipedia.org/wiki/SRGB" title="sRGB on WikiPedia" />
      <source-element type="Link" href="http://www.cambridgeincolour.com/tutorials/sRGB-AdobeRGB1998.htm" title="sRGB IEC61966-2.1 vs Adobe RGB 1998" />
    </source-list>
  </post>

  <post index="0262" date="02/03/2010" std-date="2010-03-02T20:00:00.00Z" title="OpenGL Overload (GLO) announcement">
    <meta>
      <tag>gtc-tech-project-glo</tag>
    </meta>

    <paragraph>
      OpenGL Overload (GLO) is new project I am working on.
    </paragraph>
    <paragraph>
      I have been thinking of replacing <link href="http://glew.sourceforge.net">GLEW</link> for a while.
      Unfornunatly, GLEW isn't well maintained and lack of some fonctionnalities such project could provide.
    </paragraph>
    <paragraph>
      The goal of GLO is first to provide a loading of the OpenGL implementation on Windows
      (probably <link href="http://www.opengl.org/registry/doc/glspec32.core.20091207.pdf">OpenGL 3.2 core</link> for the moment).
      The second point is to provide some kind of debugging fonctionnalies. When enabled, each OpenGL function will be automatically checked and return a message in case of any issue.
      Finally, a third objective is to provide a basic C++ wrapper.
    </paragraph>
    <paragraph>
      I expect to release a first version as soon as it can replace <link href="http://glew.sourceforge.net">GLEW</link> in the <link href="project-0026.html">OpenGL 3 Samples Pack</link>.
    </paragraph>

  </post>

  <post index="0261" date="28/02/2010" std-date="2010-02-28T02:00:00.00Z" title="Inland">
    <meta>
      <date text="08/02/2010" std="2010-02-08T02:00:00.00Z" />
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Inland">
      <summary>Regent park 2009</summary>
      <fullscreen>http://picasaweb.google.co.uk/groovounet/Inland#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5373666994561392289%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="http://lh4.ggpht.com/_bpz9rGNwhX4/SpMZyZLbe9I/AAAAAAAADgk/prhhM_R1_fg/s144/043.JPG"
        pic288="http://lh4.ggpht.com/_bpz9rGNwhX4/SpMZyZLbe9I/AAAAAAAADgk/prhhM_R1_fg/s288/043.JPG"
        pic400="http://lh4.ggpht.com/_bpz9rGNwhX4/SpMZyZLbe9I/AAAAAAAADgk/prhhM_R1_fg/s400/043.JPG"
        pic800="http://lh4.ggpht.com/_bpz9rGNwhX4/SpMZyZLbe9I/AAAAAAAADgk/prhhM_R1_fg/s800/043.JPG" />
    </album>

    <paragraph>
      I took this serie of dramatic photography just after I watched <link href="http://www.imdb.com/title/tt0460829/">Inland Empire</link> (2006) which gave it it name.
      I had my <link href="http://www.imdb.com/name/nm0000186/">David Lynch</link> period where I watched all his movies and like a lot almost all of them.
      I guess that in some ways David Lynch films are quite influencial to my photography projects.
      My favorite film is probably <link href="http://www.imdb.com/title/tt0116922/">Lost Highway</link> (1997) but
      <link href="http://www.imdb.com/title/tt0100935/">Wild at Heart</link> (1990) and <link href="http://www.imdb.com/title/tt0080678">Elephant Man</link> (1980) are also really high rated.
    </paragraph>
    <image title="Inland n°1"
                     img="http://lh4.ggpht.com/_bpz9rGNwhX4/SpMZyZLbe9I/AAAAAAAADgk/prhhM_R1_fg/s400/043.JPG"
                     href="http://lh4.ggpht.com/_bpz9rGNwhX4/SpMZyZLbe9I/AAAAAAAADgk/prhhM_R1_fg/s800/043.JPG" />
    <image title="Inland n°2"
                     img="http://lh6.ggpht.com/_bpz9rGNwhX4/SpMZuimwNeI/AAAAAAAADgY/WaPdP68vav8/s400/136.JPG"
                     href="http://lh6.ggpht.com/_bpz9rGNwhX4/SpMZuimwNeI/AAAAAAAADgY/WaPdP68vav8/s800/136.JPG" />
    <image title="Inland n°3"
                     img="http://lh4.ggpht.com/_bpz9rGNwhX4/SpMZsTu_gsI/AAAAAAAADgU/Gi_schUaNCA/s400/066.JPG"
                     href="http://lh4.ggpht.com/_bpz9rGNwhX4/SpMZsTu_gsI/AAAAAAAADgU/Gi_schUaNCA/s800/066.JPG" />
    <image title="Inland n°4"
                     img="http://lh5.ggpht.com/_bpz9rGNwhX4/SpMZw_veBaI/AAAAAAAADgc/rcs0g2vh6-I/s400/156.JPG"
                     href="http://lh5.ggpht.com/_bpz9rGNwhX4/SpMZw_veBaI/AAAAAAAADgc/rcs0g2vh6-I/s800/156.JPG" />

    <source-list>
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/Inland" title="The full album" />
    </source-list>
  </post>

  <post index="0260" date="27/02/2010" std-date="2010-02-27T23:30:00.00Z" title="OpenGL 3 Samples Pack 1.3.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      This new version adds a new sample about <link href="http://www.opengl.org/registry/specs/EXT/texture_sRGB.txt">sRGB textures</link> and
      <link href="http://www.opengl.org/registry/specs/ARB/framebuffer_sRGB.txt">sRGB framebuffer</link>. I will add a post about sRGB soon.
    </paragraph>
    <paragraph>
      I have also updated a lot of samples to fix various bugs on nVidia, ATI hardware and also a lot of work due to a bug in GLEW with recent nVidia drivers.
      I'm considering (again) loading OpenGL implementation myself...
    </paragraph>

    <source-list>
      <source-download index="1022" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0259" date="25/02/2010" std-date="2010-02-25T20:00:00.00Z" title="On our way to OpenGL 3.3 and OpenGL 4.0?">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
    </meta>

    <paragraph>
      Between the 9th and 13th of March, the major game developer conference, the <link href="http://www.gdconf.com">GDC 2010</link> will take place in San Francisco.
      Last year, GDC 2009 was the event where OpenGL 3.1 was announced. My little findger tells me that we can expect OpenGL 3.3 or at least some ARB extensions to be released this year.
      With this post, I am dealing with what will could expect for the future OpenGL specifications.
    </paragraph>
    <paragraph>
      nVidia has released a really interesting <link href="http://nvidia.fullviewmedia.com/GPU2009/0930-gold-1407.html">presentation</link> with audio at
      <link href="http://www.nvidia.com/object/gpu_technology_conference.html">GPU Technology Conference</link> about OpenGL.
      Three different speekers for three different topics.
      Barthold Lichtenbelt about OpenGL strategy and Shader Model 5, Mark Kilgard about OpenGL 3.2 and nVidia developments and Michael Gold about OpenGL interopability with other APIs and itself.
      With such a crew and such topics, I really pay attention to each detail!
    </paragraph>
    <paragraph>
      Barthold Lichtenbelt, also OpenGL ARB Working Group Chair, gave the ARB discussion feature list for future releases.
      On top of the list SM5 features support, means D3D11 hardware. On second position there is making GLSL a true superset of GLSL ES.
      Crossing information, OpenGL ES could become an OpenGL profile like OpenGL core or OpenGL compatibility ... so maybe OpenGL embedded?
      That's would be absolutely nice! My personnal guess is that OpenGL for D3D11 hardware will be called OpenGL 4.0.
      This doesn't imply a possible API rewrite, this is so off the table.
      Beside, I don't believe in changes but in evolutions and on that matter, the deprecation and profiles mechanisiums did great.
      It's a major jump and this way OpenGL 3.x would remain for SM4 hardware.
      It makes a lot of sens to me especially because graphics card has tend to be more stable feature wise since SM4 generation.
      I don't picture any OpenGL embedded profile any time soon.
    </paragraph>
    <paragraph>
      In this feature list a lot of "oldies" that the OpenGL community is pushing for: <link href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">Direct State Access</link>,
      <link href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=263750#Post263750">splitting of the texture object into an image and a sampler object</link>,
      shader binaries, anisotropic filtering. Even if I would love to see it as soon as possible, I don't see Direct State Access or seperated image and sampler objects for OpenGL 3.3... maybe OpenGL 4.0?
    </paragraph>
    <paragraph>
      Two elements "Use program objects without linking" and "semantics" implies to me a single idea: <link href="http://www.opengl.org/registry/specs/EXT/separate_shader_objects.txt">seperate shader objects</link>.
      I really don't like this extension but this is definetely where we are going for good reasons: software design and Direct3D compatility.
      I just don't like the way problems are solved. Basically, developers defined variables could not be used and we should rely on the old
      and deprecated build-in variables which makes the code absolutely missleading: For example, what the fuck does it means to use a variable called texcoord for a tangent?!
      Other issue, it introduces a new selector "glActiveProgramEXT" which is absolutely bug prone.
      Semantics like Cg would allows no linking and no missleading language use as it just introduce some kind of binding points that variable could be attached to.
      Also, Direct State Access removes selectors. Every elements are here to make it right... findger crossed! I expect this concept to be in OpenGL 3.3.
    </paragraph>
    <paragraph>
      Last really important part: API interopability which became really important these days because of OpenCL and CUDA but also because of the whole SLI / CrossFire thing.
      There are considering cross process texture sharing. (why not buffer?) I think it will be in the OpenGL 3.3 train. Some results of this work is probably the recent OpenCL question
      <codeword href="http://www.khronos.org/registry/cl/extensions/khr/cl_khr_gl_sharing.txt">CL_KHR_gl_sharing</codeword>.
      Previous work like the acknowledge <codeword href="http://www.opengl.org/registry/specs/AMD/wgl_gpu_association.txt">WGL_AMD_gpu_association</codeword> extension or the older
      <codeword href="http://www.opengl.org/registry/specs/NV/gpu_affinity.txt">WGL_NV_gpu_affinity</codeword> extension give more clues.
    </paragraph>
    <paragraph>
      ATI driver 10.2 reports an extension called GL_ARB_blend_func_extended which isn't documented yet.
      I read here and there that ATI hardware have much more flexible ROPs than what OpenGL or Direct3D exposed but I don't know about nVidia hardware.
      Is this an atempt to fill this gap? Probably, but I'm quite sure we will have details about it during the GDC 2010.
      It will definetly give some anwers to people who asked for programmable blending.
      nVidia has published the great extension <codeword href="http://www.opengl.org/registry/specs/NV/texture_barrier.txt">GL_NV_texture_barrier</codeword> which allows to safely write on a binded texture.
      Probably, a part of this GL_ARB_blend_func_extended extension.
    </paragraph>
    <paragraph>
      SM5 support? I think it will be with an OpenGL 4.0 release at <link href="http://www.siggraph.org/s2010">Siggraph 2010</link>.
      I expect to see SM5 supports by nVidia with nVidia extensions at GeForce GTX 480 launch end of March.
      Will we have an OpenGL 3.3 at GDC 2010? What would it be?
      Answers will be given in 2 weeks!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://nvidia.fullviewmedia.com/GPU2009/0930-gold-1407.html" title="OpenGL: The train has left the station" />
    </source-list>
  </post>

  <post index="0258" date="24/02/2010" std-date="2010-02-24T00:30:00.00Z" title="Analyse of a XPath query">
    <meta>
      <tag>gtc-tech-devel-xml</tag>
    </meta>

    <paragraph>
      The version 6 of G-Truc Creation was a great opportunity for to refresh my knowledge of <link href="http://www.w3.org/TR/xslt">XSLT</link> and <link href="http://www.w3.org/TR/xpath">XPath</link>.
    </paragraph>
    <paragraph>
      It's amazing how these two languages are powerfull, a good solution always end up with few code.
    </paragraph>
    <code>
      <line number="0">
        $Post[./tag[contains(., 'gtc-tech-comment')]][$Count>=position()]
      </line>
    </code>
    <paragraph>
      Select $Count first elements of $Post which contains a child element 'tag' which value contains the string-value 'gtc-tech-comment'.
    </paragraph>
    <paragraph>
      In my real code I prefer to use variable as much as I can so that for example 'gtc-tech-comment' would be replace by one.
      When an XPath expression is too long I would cut it in several parts. Here $Post[./tag[contains(., 'gtc-tech-comment')]] could be place in a variable.
      It will also make the code easier to understand in lot of case.
    </paragraph>
    <paragraph>
      An example of XML code where this XPath code can be applied. $Post is a variable that contains all the 'post' element.
    </paragraph>
    <code title="XML example">
      <line number="0">
        &lt;list&gt;
      </line>
      <line number="1" align="32px">
        &lt;post&gt;
      </line>
      <line number="2" align="64px">
        &lt;tag&gt;gtc-g-truc-source&lt;/tag&gt;
      </line>
      <line number="3" align="64px">
        &lt;tag&gt;gtc-tech-comment-opengl&lt;/tag&gt;
      </line>
      <line number="4" align="32px">
        &lt;/post&gt;
      </line>
      <line number="5" align="32px">
        &lt;post&gt;
      </line>
      <line number="6" align="64px">
        &lt;tag&gt;gtc-opencl&lt;/tag&gt;
      </line>
      <line number="7" align="32px">
        &lt;/post&gt;
      </line>
      <line number="8" align="32px">
        &lt;post&gt;
      </line>
      <line number="9" align="64px">
        &lt;tag&gt;gtc-tech-content&lt;/tag&gt;
      </line>
      <line number="10" align="32px">
        &lt;/post&gt;
      </line>
      <line number="11">
        &lt;/list&gt;
      </line>
    </code>
    <paragraph>
      The result of this query is a set of 2 elements: 'post' elements from line 1 and 5 for every value of $Count greater than 1.
    </paragraph>

  </post>

  <post index="0257" date="23/02/2010" std-date="2010-02-23T03:00:00.00Z" title="G-Truc Creation 6.3 source released">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      G-Truc Creation has had a lot of changes for the past few months, actually since the release of version 6.
      Three updates later, I quite like how it is now and I wish to keep it this way for a while.
    </paragraph>

    <source-list>
      <source-download type="Download" index="1021" />
    </source-list>
  </post>

  <post index="0256" date="21/02/2010" std-date="2010-02-21T23:30:00.00Z" title="OpenGL tip: Generate mipmaps">
    <meta>
      <date text="21/02/2010" std="2010-02-21T23:30:00.00Z" />
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      Through the years OpenGL has seen three different methods to generate mipmaps.
      Now days mipmaps are absolutely common and should be used it most of the cases, even bi-linear filtering because it provides both higher performance and higher visual quality for just 1/3 of image memory cost.
    </paragraph>
    <paragraph>
      The first method is available since OpenGL 1.1 and used to be <codeword href="http://www.opengl.org/sdk/docs/man/xhtml/gluBuild2DMipmaps.xml">gluBuild2DMipmaps</codeword>.
      It generates mipmaps on the CPU side and automatically calls <codeword href="http://www.opengl.org/sdk/docs/man/xhtml/glTexImage2D.xml">glTexImage2D</codeword>
      for each level just like if the programmer was generating them himself or loading a <link href="http://en.wikipedia.org/wiki/S3_Texture_Compression">S3TC texture</link>.
      A good feature at that time was the capability of <codeword href="http://www.opengl.org/sdk/docs/man/xhtml/gluBuild2DMipmaps.xml">gluBuild2DMipmaps</codeword>
      to use <link href="http://www.opengl.org/wiki/NPOT_Textures">NPOT</link> textures and convert them to power of two (POT) mipmaps.
      Until OpenGL 2.0, graphics card didn't had POT 2D textures support beside <link href="http://www.opengl.org/registry/specs/ARB/texture_rectangle.txt">rectangular textures</link>...
    </paragraph>
    <paragraph>
      <codeword href="http://www.opengl.org/sdk/docs/man/xhtml/gluBuild2DMipmaps.xml">gluBuild2DMipmaps</codeword> is the solution for convenience but isn't efficient and out dated feature wise.
      POT can be useful but can't be used anymore and mipmaps generation on <link href="http://www.gamedev.net/reference/articles/article2331.asp">FrameBuffer Object</link> is really complicated and inefficient.
      It would involve copying the texture data from the graphics memory to the main memory and sending it back in the graphics memory...
      I don't like so much this method but I must admit that it is a really good method for some compatibilities issues with old hardware or
      OpenGL implementation that doesn't support NPOT textures or doesn't provide other mipmaps generation method.
      Moreover, at texture loading, this method feats well in a compatibility code path.
    </paragraph>
    <paragraph>
      OpenGL 1.4 brings the second method with the extention <codeword href="http://www.opengl.org/registry/specs/SGIS/generate_mipmap.txt">GL_SGIS_generate_mipmap</codeword>.
      This method is "hardware accelerated"; the OpenGL API is simple but completely weard because based on a state change using
      <codeword href="http://www.opengl.org/sdk/docs/man/xhtml/glTexParameter.xml">glTexParameter*</codeword>.
    </paragraph>
    <code>
      <line number="0">glTexParameteri(Target, GL_GENERATE_MIPMAP, GL_TRUE);</line>
    </code>
    <paragraph>
      A state change for an operation... sound awkward? It is!
      This call will NOT generate any mipmap. It only says that when a modification to the base level mipmap is done, the lower mipmaps of the base level mipmap shoud be generated.
      For example, when loading a texture, it means that this previous call should be done before <codeword href="http://www.opengl.org/sdk/docs/man/xhtml/glTexImage2D.xml">glTexImage2D</codeword>.
    </paragraph>
    <list>
      <list-element>
        <codeword>GL_GENERATE_MIPMAP</codeword> can't be used with <link href="http://www.opengl.org/wiki/NPOT_Textures">NPOT</link> if there are not supported by the hardware of
        <codeword href="http://www.opengl.org/registry/specs/ARB/texture_non_power_of_two.txt">GL_ARB_texture_non_power_of_two</codeword>.
      </list-element>
      <list-element>
        <codeword>GL_GENERATE_MIPMAP</codeword> can't be used with framebuffer object.
      </list-element>
      <list-element>
        <codeword>GL_GENERATE_MIPMAP</codeword> doesn't provide a fine control of when the mipmaps should be generated.
        The best you can do, is disable <codeword>GL_GENERATE_MIPMAP</codeword>, update several parts of the texture and enable it just before the last update... awkward.
      </list-element>
    </list>
    <paragraph>
      Finally, but not least, for everyone who is using OpenGL ES 2.0, OpenGL 3.x or hardware supporting
      <codeword href="http://www.opengl.org/registry/specs/EXT/framebuffer_object.txt">GL_EXT_framebuffer_object</codeword>:
      <codeword href="http://www.opengl.org/sdk/docs/man4/xhtml/glGenerateMipmap.xml">glGenerateMipmap</codeword>!
    </paragraph>
    <paragraph>
      This function does actually two things which is maybe the only issue with it: It allocates the mipmaps memory and generate the mipmaps.
      This is very important to notice for framebuffer object texture mipmaps generation because it might reduce render to texture efficiency or simply crash depending if you are using nVidia or ATI OpenGL implementation.
    </paragraph>
    <code title="Example of glGnerateMipmap for rendering to mipmapped texture:">
      <line number="0">
        <comment>//Create the mipmapped texture</comment>
      </line>
      <line number="1">glGenTextures(1, &amp;ColorbufferName);</line>
      <line number="2">glBindTexture(ColorbufferName);</line>
      <line number="3">glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 512, 512, 0, GL_UNSIGNED_BYTE, NULL);</line>
      <line number="4">
        glGenerateMipmap(GL_TEXTURE_2D); <comment>// /!\ Allocate the mipmaps /!\</comment>
      </line>
      <line number="5">...</line>
      <line number="6">
        <comment>//Create the framebuffer object and attach the mipmapped texture</comment>
      </line>
      <line number="7">glBindFramebuffer(GL_FRAMEBUFFER, FramebufferName);</line>
      <line number="8">glFramebufferTexture2D(</line>
      <line number="9" align="32px">GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, ColorbufferName, 0);</line>
      <line number="10">...</line>
      <line number="11">
        <comment>//Commands to actually draw something</comment>
      </line>
      <line number="12">render();</line>
      <line number="13">...</line>
      <line number="14">
        <comment>//Generate the mipmaps of ColorbufferName</comment>
      </line>
      <line number="15">glActiveTexture(GL_TEXTURE0);</line>
      <line number="16">glBindTexture(GL_TEXTURE_2D, ColorbufferName);</line>
      <line number="17">glGenerateMipmap(GL_TEXTURE_2D);</line>
    </code>
    <paragraph>
      On the software design point of view, <codeword>glGenerateMipmap</codeword> will make programmers happy as generating mipmaps with it is completely independent from texture modifications.
    </paragraph>
    <list name="glGenerateMipmap provides:">
      <list-element>
        "Hardware acceleration".
      </list-element>
      <list-element>
        Mipmaps generation of Framebuffer Object textures.
      </list-element>
      <list-element>
        A fine control of when mipmaps are generated.
      </list-element>
      <list-element>
        A great API to use within the OpenGL program.
      </list-element>
    </list>
    <paragraph>
      Finally, OpenGL provides the function call <codeword href="http://www.opengl.org/sdk/docs/man/xhtml/glHint.xml">glHint(GL_GENERATE_MIPMAP_HINT, Hint);</codeword>
      where 'hint' could be <codeword>GL_FASTEST</codeword>, <codeword>GL_NICEST</codeword> or <codeword>GL_DONT_CARE</codeword> to indicate the quality of filtering when generating mipmaps.
    </paragraph>
    <paragraph>
      My personal advice would be to use glGenerateMipmap but is need to be available on your platform.
      From GeForce FX 5*** and Radeon 9*** you will have support for
      <codeword>GL_EXT_framebuffer_object</codeword> or
      <codeword>GL_ARB_framebuffer_object</codeword> with updated drivers.
      S3 supports
      <codeword>GL_EXT_framebuffer_object</codeword> and OpenGL 3 with its Chrome 430. Apple supports
      <link href="http://developer.apple.com/graphicsimaging/opengl/capabilities">
        <codeword>glGenerateMipmap</codeword> from MacOS X 10.2
      </link>
      and even Intel claims a support. (I would not confirm that one without a test!)
      If you really need compatibility with old platform, <codeword href="http://www.opengl.org/sdk/docs/man/xhtml/gluBuild2DMipmaps.xml">gluBuild2DMipmaps</codeword> is a great and solid choice.
    </paragraph>

    <source-list>
      <source-download type="Download" index="1020" />
    </source-list>
  </post>

  <post index="0255" date="20/02/2010" std-date="2010-02-20T00:30:00.00Z" title="GLM 0.9 Alpha 2 released">
    <meta>
      <date text="20/02/2010" std="2010-02-20T00:30:00.00Z" />
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      A new development version of GLM is available.
      It focus on providing more relevant error messages in case of inapprociate use of GLM.
    </paragraph>

    <source-list>
      <source-download type="Download" index="1020" />
    </source-list>
  </post>

  <post index="0254" date="18/02/2010" std-date="2010-02-18T20:00:00.00Z" title="Raytracer 1.1 released">
    <meta>
      <tag>gtc-tech-project-ovtsa</tag>
    </meta>

    <paragraph>
      To test my current framework, I made an update of my raytracer: It uses <link href="project-0016.html">GLM</link> and <link href="project-0024.html">GLI</link>.
    </paragraph>
    <paragraph>
      More than 2 years since the previous release, the code has changed a bit but feature wise it's basically the same raytracer beside few tricks.
      Intersection with spheres and plans only, I pay much more attention on materials. I just find it much more fun to play with at the time I did it!
    </paragraph>
    <list name="Feature list:">
      <list-element>Glossy reflexion et reflaction.</list-element>
      <list-element>Adaptative antialiasing.</list-element>
      <list-element>Soft shadows.</list-element>
      <list-element>Procedural materials.</list-element>
    </list>
    <image title="Glossy refraction surfaces" img="./post/0254-2.jpg" href="./post/0254-2-large.jpg" />
    <image title="Soft shadows and ... a bug :/" img="./post/0254-1.jpg" href="./post/0254-1.jpg" />
    <paragraph>
      I expect to release a version 1.2 which will support multithreading with OpenMP but also some optimisations allowing the compiler to generate a faster SIMD code.
      In the end, I will use this raytracer to evaluate Visual Studio 2010 <link href="post-0128.html">like I did in the past</link>.
    </paragraph>
    <source-list>
      <source-download type="Download" index="1019" />
    </source-list>

  </post>

  <post index="0253" date="16/02/2010" std-date="2010-02-16T21:00:00.00Z" title="G-Truc Creation 6.3 released">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      G-Truc Creation 6.2 hasn't last for long with this new 6.3 update!
    </paragraph>
    <paragraph>
      On contrary of last update, version 6.3 hasn't require so much work.
      It's a polish pass that fixes some bugs, update the front page but also bring some facilities to share on social network G-Truc Creation's posts.
      I wish this will compensate for the lack of proper feedback system.
    </paragraph>
    <paragraph>
      Version 6.4 on progress, with more polish here and there...
    </paragraph>

  </post>

  <post index="0252" date="15/02/2010" std-date="2010-02-15T20:00:00.00Z" title="GLI 0.2.1.0 released">
    <meta>
      <tag>gtc-tech-project-gli</tag>
      <tag>gtc-tech-project-ovtsa</tag>
    </meta>

    <paragraph>
      <link href="project-0024.html">GLI</link> 0.2.1.0 is available.
    </paragraph>
    <paragraph>
      This update mainly aims to make GLI more convenient to use within the upcoming update of my <link href="project-0018.html">raytracer project</link>.
    </paragraph>
    <paragraph>
      It adds a useful texelWrite function to directly write a texel of a define format to a GLI image. It's actually the counter part of the texelFetch function.
    </paragraph>
    <code title="texelWrite declaration:">
      <line number="0">
        <keyword>template </keyword>&lt;<keyword>typename </keyword> gentype&gt;
      </line>
      <line number="1">
        <keyword>void</keyword> texelWrite(
      </line>
      <line number="2" align="32px">
        image &amp; Image,
      </line>
      <line number="3" align="32px">
        glm::<userword>uvec2</userword> const &amp; Texcoord,
      </line>
      <line number="4" align="32px">
        image::level_type const &amp; Level,
      </line>
      <line number="5" align="32px">
        genType const &amp; Color);
      </line>
    </code>

    <source-list>
      <source-download type="Download" index="1018" />
    </source-list>
  </post>

  <post index="0251" date="12/02/2010" std-date="2010-02-12T23:45:00.00Z" title="Visual Studio 2010 RC released">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      After 3 months and half months since the release of Visual Studio 2010 Beta 2,
      the release candidate is finally available.
    </paragraph>
    <paragraph>
      When the Beta 2 was released, I was quite excited to try and use it but I must admit that after a while I gave up on it:
      Full of bugs but especially the GUI was sooo slow!
    </paragraph>
    <paragraph>
      I installed it on WinXP 32 and tried it quickly. The GUI is so much faster!
      It looks a lot more polished and convincing enough to be installed on my main configuration running Seven 64.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://msdn.microsoft.com/en-us/vstudio/dd582936.aspx" title="Visual Studio 2010 RC download page" />
    </source-list>
  </post>

  <post index="0250" date="10/02/2010" std-date="2010-02-10T20:00:00.00Z" title="February 2010 SDK and new samples for Direct3D 11">
    <meta>
      <tag>gtc-tech-devel-documentation-directx</tag>
    </meta>

    <paragraph>
      <link href="http://blogs.msdn.com/manders/archive/2010/02/05/the-february-2010-directx-sdk-is-available.aspx">The February SDK of Direct3D 11 is available</link>. It brings an wellcome update of PIX for Direct3D 11 profiling.
    </paragraph>
    <paragraph>
      On the same time, ATI has released 6 great samples for Direct3D 10.1 (Transparency Anti-Aliasing, High Definition Ambient Occlusion, Depth of Field) and
      Direct3D 11 (Detail Tessellation, PN-Triangles, Contact Hardening Shadows).
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.microsoft.com/downloads/details.aspx?displaylang=en&amp;FamilyID=2c7da5fb-ffbb-4af6-8c66-651cbd28ca15" title="DirectX SDK February 2010 page" />
      <source-element type="Link" href="http://www.gamasutra.com/view/feature/3728/sponsored_feature_whats_new_in_.php?print=1" title="Gamasutra article about PIX" />
      <source-element type="Link" href="http://developer.amd.com/gpu/radeon/pages/RadeonSDKSamplesDocuments.aspx" title="ATI Radeon SDK page" />
    </source-list>
  </post>

  <post index="0249" date="09/02/2010" std-date="2010-02-09T00:30:00.00Z" title="GLM 0.9 Alpha 1 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      First step until a major release for GLM with this first alpha of GLM 0.9.
    </paragraph>
    <paragraph>
      This version brings a large internal redesign to improve the library reliability and optimized some parts.
      It removed the deprecated features and API which implies that GLM 0.9 isn't backward compatible.
    </paragraph>
    <paragraph>
      For most users the build issues when upgrading to GLM 0.9 should be reduced especially if they follow the deprecation policy. The following examples uses GLM 0.9 conversions.
    </paragraph>
    <paragraph>
      This release is still UNSTABLE and not recommanded for commertial product.
    </paragraph>
    <code title="Compute face normals:">
      <line number="0">
        <keyword>#include </keyword>
        <string>&lt;glm/glm.hpp&gt;</string>
      </line>
      <line number="1"></line>
      <line number="2">
        <keyword>void</keyword> computeFaceNormals(mesh &amp; Mesh)
      </line>
      <line number="3">{</line>
      <line number="4" align="32px">
        <keyword>for</keyword>(mesh::iteractor it = Mesh.Faces.begin(); it != Mesh.Faces.end(); ++it)
      </line>
      <line number="5" align="32px">{</line>
      <line number="6" align="64px">
        glm::<userword>vec3 </userword><keyword>const</keyword> &amp; a = Mesh.Points[it->Vertices[0].Index].Position;
      </line>
      <line number="7" align="64px">
        glm::<userword>vec3 </userword><keyword>const</keyword> &amp; b = Mesh.Points[it->Vertices[1].Index].Position;
      </line>
      <line number="8" align="64px">
        glm::<userword>vec3 </userword><keyword>const</keyword> &amp; c = Mesh.Points[it->Vertices[2].Index].Position;
      </line>
      <line number="9" align="64px">it->Normal = glm::normalize(glm::cross(c - a, b - a));</line>
      <line number="10" align="32px">}</line>
      <line number="11">}</line>
    </code>
    <code title="OpenGL rendering:">
      <line number="1">
        <keyword>#include </keyword>
        <string>&lt;glm/glm.hpp&gt;</string>
      </line>
      <line number="2">
        <keyword>#include </keyword>
        <string>&lt;glm/gtc/matrix_projection.hpp&gt;</string>
      </line>
      <line number="3">
        <keyword>#include </keyword>
        <string>&lt;glm/gtc/matrix_transform.hpp&gt;</string>
      </line>
      <line number="4">
        <keyword>#include </keyword>
        <string>&lt;glm/gtx/type_ptr.hpp&gt;</string>
      </line>
      <line number="5"></line>
      <line number="6">
        <keyword>namespace</keyword>
      </line>
      <line number="7">{</line>
      <line number="8" align="32px">
        glm::<userword>vec4 </userword><keyword>const</keyword> ClearColor(glm::<userword>vec3</userword>(0.0f), 1.0f);
      </line>
      <line number="9" align="32px">
        glm::<userword>ivec4 </userword><keyword>const</keyword> Viewport(glm::<userword>ivec4</userword>(0, 0, 640, 480);
      </line>
      <line number="10">}</line>
      <line number="11"></line>
      <line number="12">
        <keyword>void</keyword> render()
      </line>
      <line number="13">{</line>
      <line number="14" align="32px">
        glClearColor(ClearColor.r, ClearColor.g, ClearColor.b, ClearColor.a);
      </line>
      <line number="15" align="32px">
        glClear(GL_COLOR_BUFFER_BIT);
      </line>
      <line number="16"></line>
      <line number="17" align="32px">
        glViewport(Viewport.x, Viewport.y, Viewport.z, Viewport.w);
      </line>
      <line number="18"></line>
      <line number="19" align="32px">
        glm::<userword>mat4</userword> Projection = glm::perspective(45.0f, 4.0f / 3.0f, 0.1f, 100.0f);
      </line>
      <line number="20" align="32px">
        glm::<userword>mat4</userword> ViewTranslate = glm::translate(
      </line>
      <line number="21" align="64px">
        glm::<userword>mat4</userword>(1.0f),
      </line>
      <line number="22" align="64px">
        glm::<userword>vec3</userword>(0.0f, 0.0f, -translateCurrent.y));
      </line>
      <line number="23" align="32px">
        glm::<userword>mat4</userword> ViewRotateX = glm::rotate(
      </line>
      <line number="24" align="64px">ViewTranslate,</line>
      <line number="25" align="64px">rotationCurrent.y,</line>
      <line number="26" align="64px">
        glm::<userword>vec3</userword>(-1.0f, 0.0f, 0.0f));
      </line>
      <line number="27" align="32px">
        glm::<userword>mat4</userword> View = glm::rotate(
      </line>
      <line number="28" align="64px">RotateX,</line>
      <line number="29" align="64px">rotationCurrent.x,</line>
      <line number="30" align="64px">
        glm::<userword>vec3</userword>(0.0f, 1.0f, 0.0f));
      </line>
      <line number="31" align="32px">
        glm::<userword>mat4</userword> ModelView = glm::scale(View, glm::<userword>vec3</userword>(0.5f));
      </line>
      <line number="32"></line>
      <line number="33" align="32px">
        glMatrixMode(GL_PROJECTION);
      </line>
      <line number="34" align="32px">
        glLoadMatrixf(glm::value_ptr(Projection));
      </line>
      <line number="35" align="32px">
        glMatrixMode(GL_MODELVIEW);
      </line>
      <line number="36" align="32px">
        glLoadMatrixf(glm::value_ptr(ModelView));
      </line>
      <line number="37"></line>
      <line number="38" align="32px">
        draw();
      </line>
      <line number="39">}</line>
    </code>
    <code title="Raytracing lighting:">
      <line number="0">
        <keyword>#include </keyword>
        <string>&lt;glm/glm.hpp&gt;</string>
      </line>
      <line number="1"> </line>
      <line number="2" align="0px">
        glm::<userword>vec3</userword> lighting
      </line>
      <line number="3">(</line>
      <line number="4" align="32px">
        intersection <keyword>const</keyword> &amp; Intersection,
      </line>
      <line number="5" align="32px">
        material <keyword>const</keyword> &amp; Material,
      </line>
      <line number="6" align="32px">
        light <keyword>const</keyword> &amp; Light,
      </line>
      <line number="7" align="32px">
        glm::<userword>vec3 </userword><keyword>const</keyword> &amp; View
      </line>
      <line number="8">)</line>
      <line number="9">{</line>
      <line number="10" align="32px">
        <align>
          glm::<userword>vec3 </userword> Inaccuracy = glm::vecRand(0.0f, Light.inaccuracy());
        </align>
      </line>
      <line number="11" align="32px">
        <align>
          glm::<userword>vec3 </userword> Color(0.0f);
        </align>
      </line>
      <line number="12" align="32px">
        <align>
          glm::<userword>vec3 </userword> LightVector = glm::normalize(
        </align>
      </line>
      <line number="13" align="64px">
        <align>Light.position() - Intersection.position() + Inaccuracy);</align>
      </line>
      <line number="14"> </line>
      <line number="15" align="32px">
        <keyword>if</keyword>(!shadow(Intersection.position(), Light.position(), LightVector))
      </line>
      <line number="16" align="32px">{</line>
      <line number="17" align="64px">
        <keyword>float</keyword> Diffuse = glm::dot(Intersection.normal(), LightVector);
      </line>
      <line number="18" align="64px">
        <keyword>if</keyword>(Diffuse > 0.0f)
      </line>
      <line number="19" align="64px">{</line>
      <line number="20" align="96px">
        <align>Color += Light.color() * Material.diffuse() * Diffuse;</align>
      </line>
      <line number="21" align="96px">
        <align>
          glm::<userword>vec3 </userword> Reflect = glm::reflect(
        </align>
      </line>
      <line number="22" align="128px">
        <align>glm::normalize(-LightVector),</align>
      </line>
      <line number="23" align="128px">
        <align>glm::normalize(Intersection.normal()));</align>
      </line>
      <line number="24" align="96px">
        <keyword>float</keyword> Specular = glm::pow(
      </line>
      <line number="25" align="128px">
        <align>glm::max(glm::dot(Reflect, View), 0.0f),</align>
      </line>
      <line number="26" align="128px">
        <align>Material.specularExponent());</align>
      </line>
      <line number="27" align="96px">
        <align>Color += Material.specular() * Specular;</align>
      </line>
      <line number="28" align="64px">}</line>
      <line number="29" align="32px">}</line>
      <line number="30" align="32px"></line>
      <line number="31" align="32px">
        <keyword>return</keyword> Color;
      </line>
      <line number="32">}</line>
    </code>

    <source-list>
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/query?group=status&amp;milestone=GLM+0.9.0.0" title="GLM 0.9.0.0 roadmap" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/newticket" title="Submit a report for GLM 0.9" />
      <source-download type="Download" index="1017" />
    </source-list>
  </post>

  <post index="0248" date="08/02/2010" std-date="2010-02-08T02:00:00.00Z" title="Flowers revival">
    <meta>
      <date text="08/02/2010" std="2010-02-08T02:00:00.00Z" />
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Flowers revival">
      <summary>Regent park 2009 - 2010</summary>
      <fullscreen>http://picasaweb.google.co.uk/groovounet/FlowersRevival#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5435671517485662129%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="http://lh5.ggpht.com/_bpz9rGNwhX4/S4GkiGpvwvI/AAAAAAAAGXg/_cqiKiP-y9I/s144/Picture%20022.jpg"
        pic288="http://lh5.ggpht.com/_bpz9rGNwhX4/S4GkiGpvwvI/AAAAAAAAGXg/_cqiKiP-y9I/s288/Picture%20022.jpg"
        pic400="http://lh5.ggpht.com/_bpz9rGNwhX4/S4GkiGpvwvI/AAAAAAAAGXg/_cqiKiP-y9I/s400/Picture%20022.jpg"
        pic800="http://lh5.ggpht.com/_bpz9rGNwhX4/S4GkiGpvwvI/AAAAAAAAGXg/_cqiKiP-y9I/s800/Picture%20022.jpg" />
    </album>

    <paragraph>
      "Everything is light everything is bright". So why some kind of pictures are suposed to be interesting and why other kind aren't?
      I'm not saying that all the pictures are good, just that there isn't unteresting topics.
    </paragraph>
    <paragraph>
      I'm affraid that flowers are in this not valuable case and this is quite a shame as this remains a topic for which I have a lot of fun!
    </paragraph>
    <image title="Flowers revival"
                             img="http://lh5.ggpht.com/_bpz9rGNwhX4/S4qTDaI5WTI/AAAAAAAAGeA/-e7hQSuhKX8/s400/619.jpg"
                             href="http://lh5.ggpht.com/_bpz9rGNwhX4/S4qTDaI5WTI/AAAAAAAAGeA/-e7hQSuhKX8/s800/619.jpg" />
    <image title="Flowers revival"
                             img="http://lh5.ggpht.com/_bpz9rGNwhX4/S4GkiGpvwvI/AAAAAAAAGXg/_cqiKiP-y9I/s400/Picture%20022.jpg"
                             href="http://lh5.ggpht.com/_bpz9rGNwhX4/S4GkiGpvwvI/AAAAAAAAGXg/_cqiKiP-y9I/s800/Picture%20022.jpg" />
    <image title="Flowers revival"
                             img="http://lh3.ggpht.com/_bpz9rGNwhX4/S4qS9GXEG3I/AAAAAAAAGdo/DtHKYPCkn1k/s400/093.jpg"
                             href="http://lh3.ggpht.com/_bpz9rGNwhX4/S4qS9GXEG3I/AAAAAAAAGdo/DtHKYPCkn1k/s800/094.jpg" />
    <image title="Flowers revival"
                             img="http://lh4.ggpht.com/_bpz9rGNwhX4/S4qS-Xdc2FI/AAAAAAAAGds/qdL9KgZnPyw/s400/276.jpg"
                             href="http://lh4.ggpht.com/_bpz9rGNwhX4/S4qS-Xdc2FI/AAAAAAAAGds/qdL9KgZnPyw/s800/276.jpg" />
    <image title="Flowers revival"
                             img="http://lh6.ggpht.com/_bpz9rGNwhX4/S4qTBQhe2aI/AAAAAAAAGd4/e12NGqCM9PY/s400/163.jpg"
                             href="http://lh6.ggpht.com/_bpz9rGNwhX4/S4qTBQhe2aI/AAAAAAAAGd4/e12NGqCM9PY/s800/163.jpg" />
    <image title="Flowers revival"
                             img="http://lh5.ggpht.com/_bpz9rGNwhX4/S4qTCBEmADI/AAAAAAAAGd8/05CeiBCyOwc/s400/147.jpg"
                             href="http://lh5.ggpht.com/_bpz9rGNwhX4/S4qTCBEmADI/AAAAAAAAGd8/05CeiBCyOwc/s800/147.jpg" />
    <image title="Flowers revival"
                             img="http://lh3.ggpht.com/_bpz9rGNwhX4/S4qTEa-3YVI/AAAAAAAAGeE/Z3rQr8vsEM4/s400/669.jpg"
                             href="http://lh3.ggpht.com/_bpz9rGNwhX4/S4qTEa-3YVI/AAAAAAAAGeE/Z3rQr8vsEM4/s800/669.jpg" />
    <image title="Flowers revival"
                             img="http://lh5.ggpht.com/_bpz9rGNwhX4/S4qTFWS5ZjI/AAAAAAAAGeI/TIES_HNruV0/s400/781.jpg"
                             href="http://lh5.ggpht.com/_bpz9rGNwhX4/S4qTFWS5ZjI/AAAAAAAAGeI/TIES_HNruV0/s800/781.jpg" />

    <source-list>
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/FlowersRevival" title="The full album" />
    </source-list>
  </post>

  <post index="0247" date="07/02/2010" std-date="2010-02-07T21:15:00.00Z" title="G-Truc Creation 6.2 released">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      After a lot of work, the new update G-Truc Creation is available. Enjoy!
    </paragraph>

  </post>

  <post index="0246" date="03/02/2010" std-date="2010-02-03T02:30:00.00Z" title="Boost 1.42.0 released: UUID">
    <meta>
      <tag>gtc-tech-devel-cpp</tag>
    </meta>

    <paragraph>
      Less than 3 months after the last release of Boost, a new version is available!
    </paragraph>
    <paragraph>
      Beyond the bug fixes and the updaded libraries, Boost 1.42.0 add a new library called UUID. The goal of this library is to generate unique identifiers.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.boost.org/users/news/version_1_42_0" title="Boost 1.42.0 release note" />
      <source-element type="Link" href="http://www.boost.org/doc/libs/1_42_0/libs/uuid/uuid.html" title="UUID library documentation" />
    </source-list>
  </post>

  <post index="0245" date="25/01/2010" std-date="2010-01-25T00:30:00.00Z" title="GLM 0.8.4.4 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      An update of GLM is available. Mirrors changes, it mainly aims to fix some warnings from Visual Studio and GCC.
    </paragraph>
    <paragraph>
      At a remained, until a proper FAQ get release, a great place for question about GLM is the <link href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=postlist&amp;Board=10&amp;page=1">OpenGL.org Toolkits forum</link>.
    </paragraph>

    <source-list>
      <source-download type="Download" index="1016" />
    </source-list>
  </post>

  <post index="0244" date="21/01/2010" std-date="2010-01-21T00:30:00.00Z" title="If I had to write C code...">
    <meta>
      <tag>gtc-tech-devel-cpp</tag>
    </meta>

    <paragraph>
      I am a C++ programmer and it's fair to say that my experience with C is actually limited.
      However, I have been working with C code lately, even if I think that code is quite pretty, I found some disturbing approaches.
    </paragraph>
    <list name="So if I had to write C code, I would try to avoid">
      <list-element>
        Using integers for enums.
      </list-element>
      <list-element>
        Using macros when constants and functions could be used.
      </list-element>
      <list-element>
        Using large and flat structures instead of a hierarchy of small structures.
      </list-element>
      <list-element>
        Writing functions with 1000 of lines, 100 lines is already quite long.
      </list-element>
      <list-element>
        Writing files with 10000 of lines, 1000 lines is already quite long.
      </list-element>
    </list>
    <paragraph>
      Nothing spetacular but in practice, it is something that happen too often. Anyway, C is ok but not as fun as C++ can be!
    </paragraph>

  </post>

  <post index="0243" date="20/01/2010" std-date="2010-01-20T08:30:00.00Z" title="G-Truc Creation 6.2 work in progress">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      I started working on the new update of the website and I must admit that going thought the website code after 3 months was quite complicated.
    </paragraph>
    <paragraph>
      Just to add a simple category in the menu, I had to make changes in 4 different files... That's a bad smell, a sign of bad software design.
      That's the first thing I took care of so that now it's absolutely handy to add or remove a category. I edit a XML file and this is it:
      The appropriated files are generated, the menu is updated, the directory (below the title of a post) is updated and a simple change of name is automatically reported everywhere.
    </paragraph>
    <paragraph>
      <link href="http://www.w3.org/TR/xslt">XSLT</link> is that wonderful that, once again, doing these design changes, I actually reduce the amount of code to manage all this.
    </paragraph>
    <paragraph>
      This is a great improvement on the development side followed by few others:
      tags so that a post could be in several categories, reduction of build and upload time and finally use of <link href="http://www.cmake.org">CMake</link> to manage the website project.
    </paragraph>
    <paragraph>
      There are still some bad smells in the code I would like to fix after what I will work on the main goal of this update:
      A clear separation between the programming and artistic sides. Release expected within 2 weeks.
    </paragraph>

  </post>

  <post index="0242" date="14/01/2010" std-date="2010-01-14T00:30:00.00Z" title="You have to use a revision control system... really!">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      This post is dedicated to a friend I helped getting started with Subversion (SVN). Hi man! :p
      Seriously, I didn't know that, in 2010, it could be possible to work without such kind of system.
    </paragraph>
    <paragraph>
      In this post, I'm not saying that you should use SVN, I'm just presenting the basic principles and functionalities.
      I'm saying use a <link href="http://en.wikipedia.org/wiki/Revision_control">revision control system</link>!
      I had a lot of pain in the past with SVN when it came to merge and the eternal joke:
      Finally in the next version, yes, merges will work and be easy to do!" No, it never happened!
      Some people claim <link href="http://mercurial.selenic.com/">Mercurial</link> or <link href="http://git-scm.com/">Git</link> is so much better.
      Fair enough, try them and let me know, I'm interested, until then I'm going to use SVN.
    </paragraph>
    <paragraph>
      SVN is a revision control system that manages for you the changes you do on a code and blend it with the changes someone else has done on the same code.
      You can even duplicate the code you are working on,
      on the same computer or on several computers. Edit different parts on each location, send everything to the server repository and
      get all the changes applied on each computer!
      Wonderful isn't it?! It's much more! With some software like <link href="http://trac.edgewall.org/">Trac</link>,
      you can browse the full history of the changes made, by who and when.
      So useful for debugging!
      SVN also allows you to tag a state of the code at a time to save this code as a specific version if you want.
    </paragraph>
    <paragraph>
      SVN could be use with <link href="http://tortoisesvn.tigris.org">TortoiseSVN</link> on Windows with a GUI style or in command line.
      I'm presenting here the command line way to make it simple but I actually use as much as I can TortoiseSVN.
    </paragraph>
    <list name="I like to say that there are 4 everyday commands:">
      <list-element>
        svn co 'repository-url' [directory]: To checkout a repository on the local disk.
      </list-element>
      <list-element>
        svn add 'files': To add source files to the repository.
      </list-element>
      <list-element>
        svn ci: To commit the source to the server repository, to send the change to the server.
      </list-element>
      <list-element>
        svn up: To update the source from the repository, to get all the changes you haven't made from the server.
      </list-element>
    </list>
    <paragraph>
      To get started, it's easy: create an account on <link href="https://sourceforge.net/">SourceForge</link> or
      <link href="http://code.google.com/projecthosting/">Google Code</link>.
      Checkout the repository, add your source files, commit them and that's it!
    </paragraph>
    <paragraph>
      When learning programming at school, just before starting to work on their first project, the students should learn how to use a
      <link href="http://en.wikipedia.org/wiki/Revision_control">revision control system</link>.
      As a matter of fact, none of the schools I went during my education were using or even talking about any... I hope it has changed!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://svnbook.red-bean.com/en/1.0/ch09.html" title="SVN complete reference" />
      <source-element type="Link" href="http://tortoisesvn.tigris.org/" title="TortoiseSVN website" />
      <source-element type="Link" href="http://subversion.tigris.org/" title="Subversion website" />
    </source-list>
  </post>

  <post index="0241" date="13/01/2010" std-date="2010-01-13T22:00:00.00Z" title="OpenGL 3.0 to reach MaxOS X 10.6.3?">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      The disappointment of the OpenGL community by MacOS X 10.6 was big at its release. We were all expecting an OpenGL 3.0 support, after all, MacOS X 10.4 and 10.5 already support OpenGL 2.1.
    </paragraph>
    <paragraph>
      MacOS 10.6.2 support OpenGL 2.1 only but actually we already have a lot of extensions featuring OpenGL 3.0 capabilities:
      <codeword>GL_APPLE_flush_buffer_range</codeword>, <codeword>GL_APPLE_vertex_array_object</codeword> (erk), <codeword>GL_ARB_color_buffer_float</codeword>,
      <codeword>GL_ARB_texture_compression_rgtc</codeword>, <codeword>GL_ARB_texture_float</codeword>, <codeword>GL_ARB_texture_rg</codeword>,
      <codeword>GL_EXT_draw_buffers2</codeword>, <codeword>GL_EXT_framebuffer_blit</codeword>, <codeword>GL_EXT_framebuffer_multisample</codeword>,
      <codeword>GL_EXT_gpu_shader4</codeword>, <codeword>GL_EXT_packed_depth_stencil</codeword>, <codeword>GL_EXT_texture_integer</codeword>, <codeword>GL_EXT_transform_feedback</codeword>,
      <codeword>GL_NV_conditional_render</codeword> and <codeword>GL_ARB_half_float_vertex</codeword>.
    </paragraph>
    <paragraph>
      This effectively means that only 2 extensions are missing to reach the level of OpenGL 3.0: <codeword>GL_EXT_texture_array</codeword> and <codeword>GL_EXT_texture_shared_exponent</codeword>.
      On top of that we need GLSL 1.3 support.
    </paragraph>
    <paragraph>
      Fortunalty, a great news drop Yesturday: in the beta build of MacOS X 10.6.3, the 2 missing extensions are implemented so that GLSL 1.3 only is missing.
      It brings a lot of expectations for this next Mac OS X 10.6 update!
    </paragraph>
    <paragraph>
      It's a good news but still not such a great one. Windows has reach OpenGL 3.2 with nVidia and ATI, Linux has descent OpenGL 3.2 nVidia drivers and Mac OS X ... well ... has Apple policy ...
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.appleinsider.com/articles/10/01/12/support_for_opengl_3_0_added_in_beta_build_of_mac_os_x_10_6_3.html" title="Source" />
      <source-element type="Link" href="http://developer.apple.com/graphicsimaging/opengl/capabilities/" title="Apple capabilities matrix" />
      <source-element type="Link" href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=263105#Post263105" title="MacOS X 10.6.2 extensions list" />
    </source-list>
  </post>

  <post index="0240" date="10/01/2010" std-date="2010-01-10T20:00:00.00Z" title="GLI 0.2.0.0 released" picture="">
    <meta>
      <tag>gtc-tech-project-gli</tag>
    </meta>

    <paragraph>
      A new version of <link href="project-0024.html">GLI</link> is available.
      It provides a better API which is not backward compatible with GLI 0.1.x.x but which makes more sens hopefully.
    </paragraph>
    <paragraph>
      One important detail is the removal of the Boost dependence but <link href="project-0016.html">GLM</link> remains required.
    </paragraph>
    <paragraph>
      <link href="post-0233.html">The OpenGL 3 Samples Pack</link> will be updated with GLI 0.2.0.0 like all my projects.
    </paragraph>
    <paragraph>
      GLI is still very experimental and not very advanced in its features but it answers to most of my needs.
    </paragraph>

    <source-list>
      <source-download type="Download" index="1015" />
    </source-list>
  </post>

  <post index="0239" date="09/01/2010" std-date="2010-01-09T23:00:00.00Z" title="Pierre Soulages at Paris Centre Pompidou">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <quote author="1953, Pierre Soulages">It's what I do that teaches me what I'm looking for.</quote>
    <paragraph>
      When it goes to France, I become, most of the time, quite extousiat.
      On the art creation side however, I sadly think that Paris is dead, that Paris rely on the nostalia of itself and whatever that seems to grow doesn't last.
      This feeling have been reenforced by living in London and visiting Berlin where I felt finding life or like a friend tall me, it's like Paris is close and Berlin is open.
    </paragraph>
    <image title="Peinture, 300 x 235 cm, 9 juillet 2000" img="./post/0239-1.jpg" href="./post/0239-1.jpg" />
    <paragraph>
      France isn't just Paris, I have been surprised several times in the past of how dynamic and how creative the French province could be.
      Pierre Soulages is one of this artist that reenforces this idea.
    </paragraph>
    <paragraph>
      Pierre Soulages is a French painter, borned at Rodez in 1919 and state as "the most known French living artist".
      From his youth, Pierre Soulages has soon developed a painting with neither image nor language.
      Instead, I would say he has been fascinated by a painting exploration and the relationships with the paintings.
      On the contrary of most abstract painting, Soulages works haven't been lead by internationalization but by his own explorations and experiences with his own paintings.
    </paragraph>
    <quote author="Pierre Soulages">The reality of a work is the three-way relationship it establishes between the thing that it is, the painter who made it, and the viewer who sees it.</quote>
    <paragraph>
      Pierre Soulages builds a real obsession for black that lead him in 1979 to create what he will called later 'Outrenoir'.
    </paragraph>
    <quote author="1986, Pierre Soulages">
      Why black? The only answer, which covers the unknown reasons that lurk in the obscurest regions of ourselves and of the powers of painting, is: BECAUSE.
    </quote>
    <paragraph>
      'Outrenoir' is an exploration based on the relationship between the light and the painting surface: Reflexions, direct and diffuse lighting, the chromatic subtlety and just the material as a 'thing'.
      As a result a photograph of one of his late painting isn't really interesting. Soulages painting involves a kind of dynamic and requires to be experienced.
    </paragraph>
    <quote author="Pierre Soulages">
      Outrenoir to signify, beyond black, a light reflected and transmuted by black. Outrenoir: a black that ceases to be itself to become luminous, a source of secret light.
      Outrenoir: a mental space that isn't that of ordinary black.
    </quote>
    <paragraph>
      Conscerning the exhibition itself, the layout is just great and were devised with Soulages who really care about how the painting are experienced by the visitors.
      Finally, a long video present the myth beyond Soulages which is absolutly fascinating. Like I say in these cases: Pierre Soulages is a real person.
    </paragraph>
    <video title="Exposition presentation" href="http://www.dailymotion.com/swf/xbkxbp" width="800" height="500" />
    <video title="La lumière du noir" href="http://www.dailymotion.com/swf/xbkzdz" width="800" height="500" />
    <paragraph>
      I have been so amazed by his last work, by the quantity of the work it represents and that at 89 years, Soulage still continue to explore is topic and show new and interesting results.
      I would even say that what I prefer in this work, is what he didn't the past 10 years.
      This exhibition is displayed until 8th of March and is of course one of my highest recommandation if you don't mind to much the huge crowd...
    </paragraph>
    <source-list>
      <source-element type="Link" href="http://www.pierre-soulages.com/" title="Pierre Soulages website" />
      <source-element type="Link" href="http://www.centrepompidou.fr/Pompidou/Manifs.nsf/AllExpositions/1F34F8382E5324A5C12575CC0032C831?OpenDocument&amp;sessionM=2.2.1&amp;L=1&amp;form=Actualite" title="Soulages exhibition page" />
      <source-element type="Link" href="http://www.telegraph.co.uk/expat/expatnews/6325178/Black-is-the-new-black-for-Pierre-Soulages-Frances-best-known-living-artist.html" title="Telegraph review" />
      <source-element type="Link" href="http://alizemorand.com/2009/11/16/pierre-soulages-paint-it-black/" title="Alize Morand review" />
    </source-list>

  </post>

  <post index="0238" date="08/01/2010" std-date="2010-01-08T23:00:00.00Z" title="G-Truc Creation in 2010">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      On this beginning of the year, I decided to give a general status on G-Truc Creation, the projects and the vision for 2010.
    </paragraph>
    <paragraph>
      First, I'm glad that my efforts on G-Truc Creation I put since last summer seems to be enjoyed by you visitors as your number have significantly grow
      so I hope it will continue this way and that it means the content is interesting for you.
    </paragraph>
    <paragraph>
      For G-Truc Creation in 2010, I would like to make a shift to reach something like half of the content dedicated to my technical side
      and half of the content dedicated to my creative side which is a fair estimation of my interests.
      As a consequence, I plan to divide more clearly G-Truc Creation into these 2 sides because I guess that some readers would be interested only on the technical side
      and others to the creative side even if for me, one calls the other and reverse.
    </paragraph>
    <paragraph>
      This will be materialized by an update (or updates) of G-Truc Creation website which will keep the same design but with a content reorganization based on categorizes and tags.
      Everything will become posts to browse however the feed system will remains similar.
    </paragraph>
    <paragraph>
      Finally, I have some delays on my projects releases so that I reschedule or unscheduled some.
      I was expecting to do more during the holidays...
      when I haven't done much beside celebrating and enjoying my time a different way.
      I wish to go back on more schedule work but I will see how it goes.
      The next release will be GLI 0.2.0.0.
      I also have 3 more exhibitions post to write from my holidays, plenty of photo projects I would like to share and more!
    </paragraph>

  </post>

  <post index="0237" date="06/01/2010" std-date="2010-01-06T23:30:00.00Z" title="Fellini, La Grande Parade at Paris Jeu de Paume">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <quote author="Federico Fellini" href="http://en.wikipedia.org/wiki/Federico_Fellini">
      I am Fellini!
      I send a small advertissement to the newspapers which says more or less:"federico fellini is ready to meet all those people who wish to see him' every idiot in Rome turns up to see me, including the police.
      [...] I may see a thousand in order to pick two, but I assimilate them all. It's as if they were saying to me, "take a good look at us, each of us is a bit of the mosaic you are now building up
    </quote>
    <paragraph>
      Sometime exhibitions are so good that their designs feel like art itself. It's exactly what I felt visiting the exhibition about Fellini (1920 - 1993) at <link href="http://www.jeudepaume.org/">Jeu de Paume</link>,
      Federico Fellini, the artist behind the legendary <link href="http://en.wikipedia.org/wiki/La_Dolce_Vita">La Dolce Vita</link> or <link href="http://www.imdb.com/title/tt0056801/">8½</link>.
      Movies, quotes, drawing, photographs and even slide films are used to present his inspirations but also his vision as movie writter and director.
    </paragraph>
    <paragraph>
      It presents the history of his work through his experience of movies and his inspirations: The photo-novel, parades, the circus, the church, miracles, the youth tastes, etc.
    </paragraph>
    <paragraph>
      This exhibition is displayed until the 17th January 2010 for 7 euros and is one of this exhibition that tackle a fascinating topic with a fantastic display.
    </paragraph>
    <image title="Federico Fellini portrait" img="./post/0237-1-normal.jpg" href="./post/0237-1-normal.jpg" />
    <quote author="Federico Fellini" href="http://en.wikipedia.org/wiki/Federico_Fellini">
      The circus: immedially I saw it I felt ecstatic, totally committed to that noise and music, to those monstrous apparitions, to those threats of death.
      I saw the big top as a miracle factory where things were done that were impossible for most men. This kind of show, based on wonder and fantasy,
      on jokes and nonsense, and on the lack of any coldly intellectual meaning, is just the thing for me.
    </quote>
    <quote author="Federico Fellini" href="http://en.wikipedia.org/wiki/Federico_Fellini">
      Dinners: everything here belongs to the belly, becomes belly.
      A spectacle to be devoured with the eyes, but also the menace of all those eyes, mouths, faces and overflowing bodies, eager to swallow.
    </quote>
    <quote author="Federico Fellini" href="http://en.wikipedia.org/wiki/Federico_Fellini">
      Behind the camera: I am incapable of looking at things in a detached way, through the camera for example.
      I don't give a fig for objectivity. I need to be in the thick of things.
      I need to know everything about everyone, to make love with everything around me.
    </quote>
    <quote author="Federico Fellini" href="http://en.wikipedia.org/wiki/Federico_Fellini">
      Count up to six, slowly and bitterly, then continues up to twenty nine, but with a hint of contempt as well.
      I put dialogue into the film after I made it.
    </quote>
    <image title="La dolce Vita, 1960, movie poster" img="./post/0237-3-normal.jpg" href="./post/0237-3-normal.jpg" />
    <image title="La dolce Vita, 1960, movie extra" img="./post/0237-4-normal.jpg" href="./post/0237-4-normal.jpg" />

    <source-list>
      <source-element type="Link" href="http://www.jeudepaume.org/index.php?page=article&amp;idArt=1030&amp;lieu=7" title="Exhibition page" />
      <source-element type="Link" href="http://www.imdb.com/name/nm0000019/" title="IMDB page" />
      <source-element type="Link" href="http://en.wikipedia.org/wiki/Federico_Fellini" title="Wikipedia page" />
    </source-list>
  </post>

  <post index="0236" date="05/01/2010" std-date="2010-01-05T10:00:00.00Z" title="GLEW 1.5.2 released with OpenGL 3.2 support">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      Finally! GLEW has been updated to support all OpenGL 3.2 features. Most of the new exciting extensions are also supported:
      <codeword href="http://www.opengl.org/registry/specs/AMD/vertex_shader_tessellator.txt">GL_AMD_vertex_shader_tessellator</codeword>,
      <codeword href="http://www.opengl.org/registry/specs/EXT/separate_shader_objects.txt">GL_EXT_separate_shader_objects</codeword>,
      <codeword href="http://www.opengl.org/registry/specs/NV/shader_buffer_load.txt">GL_NV_shader_buffer_load</codeword>,
      <codeword href="http://www.opengl.org/registry/specs/NV/vertex_buffer_unified_memory.txt">GL_NV_vertex_buffer_unified_memory</codeword>,
      <codeword href="http://www.opengl.org/registry/specs/NV/texture_barrier.txt">GL_NV_texture_barrier</codeword>
    </paragraph>
    <paragraph>
      A really good news that implies an update of my projects!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://glew.sourceforge.net" title="GLEW website" />
    </source-list>
  </post>

  <post index="0235" date="23/12/2009" std-date="2009-12-23T19:00:00.00Z" title="C wrapping of C++ code">
    <meta>
      <tag>gtc-tech-devel-cpp</tag>
    </meta>

    <paragraph>
      At work I have to integrate my C++ code in a large C code ... an opportunity for my to test for the first time an experience of writing a C wrapper of my C++ code ... which turns out to be really easy!
    </paragraph>
    <paragraph>
      Everything is based on <codeword>extern</codeword> "C" qualifier, <codeword>#ifdef __cplusplus</codeword> and a proper API design.
      Actually, I have been really suprized how versatile the code can become between C and C++.
      Use either one of the other, with a good and simple design, that's fine.
    </paragraph>
    <code title="header.h">
      <line number="1">
        <keyword>#ifndef </keyword> __cplusplus
      </line>
      <line number="2">
        <keyword>extern</keyword> "C"
      </line>
      <line number="3">
        <keyword>#endif </keyword>
        <comment>//__cplusplus</comment>
      </line>
      <line number="4">
        <keyword>void</keyword> func();
      </line>
    </code>
    <code title="source.cpp">
      <line number="1">
        <keyword>#include</keyword> "header.h"
      </line>
      <line number="1">
        <keyword>#include</keyword> &lt;iostream&gt;
      </line>
      <line number="2"> </line>
      <line number="3">
        <keyword>extern</keyword> "C" <keyword>void</keyword> func()
      </line>
      <line number="4">{</line>
      <line number="5" align="32px">std::cout &lt;&lt; "This is C++ code!" &lt;&lt; std::endl;</line>
      <line number="6">}</line>
    </code>
    <code title="source.c">
      <line number="1">
        <keyword>#include</keyword> "header.h"
      </line>
      <line number="2"> </line>
      <line number="3">
        <keyword>int</keyword> main()
      </line>
      <line number="4">{</line>
      <line number="5" align="32px">func();</line>
      <line number="6">}</line>
    </code>
    <paragraph>
      On the design area, I like to create C structures that contain a <codeword>void</codeword> pointeur to store the C++ object.
      It brings a higher typed and object oriented approached to C which fit well with C++ code.
      For each operation, I call the C function with the right 'object' to modify It follows the
      <link href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">"direct state access"</link>
      way of OpenGL if you want as opposed to the "bind and edit" classic way of OpenGL.
    </paragraph>
    <paragraph>
      The C++ Experiments set of tests has been updated with this C wrapper experiment.
    </paragraph>

    <source-list>
      <source-download index="1014" />
    </source-list>
  </post>

  <post index="0234" date="22/12/2009" std-date="2009-12-22T19:00:00.00Z" title="Marmotte &amp; Biquette">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Marmotte &amp; Biquette">
      <summary>Paris 2009</summary>
      <fullscreen>http://picasaweb.google.co.uk/groovounet/MarmotteAndBiquette#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5387414474610842449%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="http://lh5.ggpht.com/_bpz9rGNwhX4/SsPyOp4_vwI/AAAAAAAAD_A/Q2CiZk0g4sI/s144/695.JPG"
        pic288="http://lh5.ggpht.com/_bpz9rGNwhX4/SsPyOp4_vwI/AAAAAAAAD_A/Q2CiZk0g4sI/s288/695.JPG"
        pic400="http://lh5.ggpht.com/_bpz9rGNwhX4/SsPyOp4_vwI/AAAAAAAAD_A/Q2CiZk0g4sI/s400/695.JPG"
        pic800="http://lh5.ggpht.com/_bpz9rGNwhX4/SsPyOp4_vwI/AAAAAAAAD_A/Q2CiZk0g4sI/s800/695.JPG" />
    </album>

    <paragraph>
      I started 2009 with the idea of exploring the idea of simplicity in life and I'm finishing it with an extension of this idea: life balance.
      Insanity is fine and actually a stunning source of creativity, explorations and experiences.
      Insanity is ok, as far as it is properly balance with sanity:
      A tea time with the greatest tea, the proper set of cheese, wine and brad, a walk in a park or quiet Sunday evening resting in the coach with friends singing and playing guitar.
      Whahouuuu, I love it so much!
    </paragraph>
    <paragraph>
      I took this series of photographs experiencing this delightful time and found the balance for that week-end.
    </paragraph>
    <image title="Marmotte and Biquette n°1" img="http://lh3.ggpht.com/_bpz9rGNwhX4/SsPx9AYT_eI/AAAAAAAAD-w/BixF2Tz6m2U/s400/637.JPG" href="http://picasaweb.google.co.uk/groovounet/MarmotteAndBiquette#slideshow/5387415609641532898" />
    <image title="Marmotte and Biquette n°2" img="http://lh5.ggpht.com/_bpz9rGNwhX4/SsPyOp4_vwI/AAAAAAAAD_A/Q2CiZk0g4sI/s400/695.JPG" href="http://picasaweb.google.co.uk/groovounet/MarmotteAndBiquette#slideshow/5387415912842247938" />
    <image title="Marmotte and Biquette n°3" img="http://lh3.ggpht.com/_bpz9rGNwhX4/SsPyByQIYDI/AAAAAAAAD-0/gPIMlubXxu4/s400/649.JPG" href="http://picasaweb.google.co.uk/groovounet/MarmotteAndBiquette#slideshow/5387415691748466738" />
    <image title="Marmotte and Biquette n°4" img="http://lh4.ggpht.com/_bpz9rGNwhX4/SsPyFfA3Y3I/AAAAAAAAD-8/gAd-J3YMzlI/s400/684.JPG" href="http://picasaweb.google.co.uk/groovounet/MarmotteAndBiquette#slideshow/5387415755303641970" />
    <image title="Marmotte and Biquette n°5" img="http://lh5.ggpht.com/_bpz9rGNwhX4/SsPyD5hO96I/AAAAAAAAD-4/yiDmjwy1Jqk/s400/658.JPG" href="http://picasaweb.google.co.uk/groovounet/MarmotteAndBiquette#slideshow/5387415728058988450" />
    <image title="Marmotte and Biquette n°6" img="http://lh6.ggpht.com/_bpz9rGNwhX4/SsPyh87zx9I/AAAAAAAAD_E/09z9Pu2s80E/s400/697.JPG" href="http://picasaweb.google.co.uk/groovounet/MarmotteAndBiquette#slideshow/5387416244371834834" />
    <source-list>
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/MarmotteAndBiquette" title="The full album" />
    </source-list>
  </post>

  <post index="0233" date="20/12/2009" std-date="2009-12-20T00:30:00.00Z" title="OpenGL 3 Samples Pack 1.2.1 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      I have just updated the OpenGL 3 Samples Pack. The version 1.2.1 still contains 25 OpenGL 3.2 samples.
      It supports Windows and Linux, nVidia and ATI cards thanks to the lastest drivers.
    </paragraph>

    <source-list>
      <source-download index="1013" />
      <source-element type="Link" href="post-0229.html" title="OpenGL 3 Samples Pack 1.2.0 release post" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0232" date="19/12/2009" std-date="2009-12-19T21:00:00.00Z" title="ATI Drivers reaches OpenGL 3.2 and OpenCL 1.0">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
      <tag>gtc-tech-opencl-status</tag>
    </meta>

    <paragraph>
      It's really the Chrismas season! ATI Sanda has 2 gifts for us!
    </paragraph>
    <paragraph>
      First one, just like I announced it in a <link href="http://www.g-truc.net/post-0190.html">previous news</link> ATI finally releases their OpenCL 1.0 drivers!
    </paragraph>
    <paragraph>
      Second one, the drivers finally support OpenGL 3.2! On that side, the news is even better!
      AMD has worked hard to make progress to catch up on Direct3D 11 features with extensions:
      <codeword>GL_AMD_texture_compression_dxt6</codeword>, <codeword>GL_AMD_texture_compression_dxt7</codeword> and <codeword>GL_AMD_seamless_cubemap_per_texture</codeword>.
      I have no idea of what kind of feature brings <codeword>GL_AMD_seamless_cubemap_per_texture</codeword> but <codeword>GL_AMD_texture_compression_dxt6</codeword>
      probably correspond to BC6 format and <codeword>GL_AMD_texture_compression_dxt7</codeword> to BC7 format.
    </paragraph>
    <paragraph>
      I have updated the OGL3 Samples Pack to make sure it's compatible with this new drivers, new release soon!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://support.amd.com/us/kbarticles/Pages/ATICatalyst912Hotfix.aspx" title="ATI Catalyst 9.12 Hotfix " />
      <source-element type="Link" href="http://www.gamasutra.com/view/feature/3759/sponsored_feature_introducing_.php?print=1" title="Introducing DirectX 11" />
    </source-list>
  </post>

  <post index="0231" date="16/12/2009" std-date="2009-12-16T21:00:00.00Z" title="C++ Experiments">
    <meta>
      <tag>gtc-tech-devel-cpp</tag>
    </meta>

    <paragraph>
      Some programmers are explaining for hours that Lisp, Java, C, C++, C#, Python are their favorite languages because they are the best language and they can even rationally explain why and find good points.
    </paragraph>
    <paragraph>
      I think this is ways to much dogmatic for me, I'm a septic person.
      The world hasn’t been build from reasons but from passions!
      Everyone will find positive and negative point for languages ... so who cares of the best language?
      My favorite language is C++ because it is the one I have the most fun with!
    </paragraph>
    <paragraph>
      Over the years, I always had more to learn about C++ everyday and this is going to continue probably until I use C++.
      Over those years each time I had a question about C++ I create a test project to check it out.
      I saved a lot of those test programs and I though it might be good idea to use them as a material to speak more about C++ on G-Truc Creation.
      I decided to make a project of them "C++ Experiments".
    </paragraph>
    <list name="This first version contains only three study:">
      <list-element>
        Overloaded functions through the return parameter only.
      </list-element>
      <list-element>
        Global function with template template parameter.
      </list-element>
      <list-element>
        Class with template template parameter and template template default argument.
      </list-element>
    </list>
    <paragraph>
      Is it any familiar? Check it out and have fun!
    </paragraph>

    <source-list>
      <source-download index="1011" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/newticket" title="Submit a bug report" />
    </source-list>
  </post>

  <post index="0230" date="10/12/2009" std-date="2009-12-10T23:30:00.00Z" title="WebGL Draft Specification released!">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      After months of development in Google Chrome, FireFox, Safari; demos by passionate people a draft of the specification is now available.
      I was actually expecting a specification on the format of Khronos Group Specification but it likely to be a W3C specification which is actually better!
    </paragraph>
    <paragraph>
      It has been such a fast and efficient development and adoption!
      Meanwhile, Microsoft, the company which completely lost faith in innovation, has no plan about WebGL for
      <link href="http://www.osnews.com/story/22506/Internet_Explorer_9_To_Get_GPU_Rendering_CSS3_HTML5_Support">Internet Explorer 9</link>.
      My personal advice for Internet Explorer users: Stop smoking and start respecting yourself!
      You are using a piece of shit, have a look at <link href="http://www.google.com/landing/chrome/beta">Google Chrome</link>, it's awesome and available on Windows, MacOS and Linux.
    </paragraph>

    <source-list>
      <source-element type="Link" href="https://cvs.khronos.org/svn/repos/registry/trunk/public/webgl/doc/spec/WebGL-spec.html" title="WebGL draft specification" />
      <source-element type="Link" href="http://hacks.mozilla.org/2009/12/webgl-draft-released-today/" title="Details by Arun Ranganathan chair of the WebGL Working Group" />
      <source-element type="Link" href="https://www.khronos.org/webgl" title="WebGL page on Khronos Group website" />
    </source-list>
  </post>

  <post index="0229" date="07/12/2009" std-date="2009-12-07T02:30:00.00Z" title="OpenGL 3 Samples Pack 1.2.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      This new version includes a total of 25 OpenGL 3.2 samples.
    </paragraph>
    <list name="Samples list:">
      <list-element>
        Buffer type: Use different types of array buffer.
      </list-element>
      <list-element>
        Buffer update: Use glMapBufferRange to update a array buffer
      </list-element>
      <list-element>
        Draw base vertex: Draw based on vertex indexes with and index offset.
      </list-element>
      <list-element>
        Draw elements: Draw based on vertex indexes.
      </list-element>
      <list-element>
        Draw instanced: Instancing from an unique attribute source.
      </list-element>
      <list-element>
        Draw multiple: Instancing using different attribute sources.
      </list-element>
      <list-element>
        Draw range: Draw based on vertex indexes with a limited range of index value.
      </list-element>
      <list-element>
        FBO blit: Copy a colorbuffer to another colorbuffer.
      </list-element>
      <list-element>
        FBO mipmaps: Generate mipmaps of a FBO colorbuffer to sue it as a texture.
      </list-element>
      <list-element>
        FBO multiple output: Render to several colorbuffer.
      </list-element>
      <list-element>
        FBO multisample: Render in a multisampled FBO.
      </list-element>
      <list-element>
        GLSL Block 140: Uniform blocks of GLSL 1.40
      </list-element>
      <list-element>
        GLSL Block 150: Generalized blocks of GLSL 1.50
      </list-element>
      <list-element>
        Image 2D: Load a 2D RGB texture
      </list-element>
      <list-element>
        Image 2D Array: Load several 2D RGB images in a single texture.
      </list-element>
      <list-element>
        Image 2D Compressed: Load a 2D DXTC texture
      </list-element>
      <list-element>
        Image Rect: Use of a rectangle texture
      </list-element>
      <list-element>
        Rasterizer viewport: Display in different viewport.
      </list-element>
      <list-element>
        Sampler anisotropy (ext): Apply a texture using different level of anisotropic filtering.
      </list-element>
      <list-element>
        Sampler filter: Apply a texture using varius type of filtering.
      </list-element>
      <list-element>
        Sampler swizzle (ext): Swizzle texture components at sampling.
      </list-element>
      <list-element>
        Sampler wrap: Apply a texture using varius wrap modes.
      </list-element>
      <list-element>
        Test scissor: Limit wrtting to an area of the framebuffer.
      </list-element>
      <list-element>
        VAO: Use of a vertex array object.
      </list-element>
    </list>
    <paragraph>
      This version is based on a <link href="https://sourceforge.net/tracker/?func=detail&amp;atid=523277&amp;aid=2835498&amp;group_id=67586">snapshot of GLEW</link> which bring a full support of OpenGL 3.2.
    </paragraph>
    <paragraph>
      Thanks to the contributors for the Linux port, especially Todd Marshall. It is still in development at this stage but it is getting closer to stable!
    </paragraph>

    <source-list>
      <source-download index="1011" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/newticket" title="Report a bug for the OpenGL 3 Samples Pack 1.2.0" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/browser/Tags/ogl3-samples-pack/ogl3-samples-pack-1.2.0.20091207" title="Browse the code with Trac" />
      <source-element type="Link" href="http://glf.svn.sourceforge.net/viewvc/glf/Trunk/ogl3-samples-pack.tar.gz?view=tar" title="Download OpenGL 3 Samples Pack from SVN trunk" />
    </source-list>
  </post>

  <post index="0228" date="04/12/2009" std-date="2009-12-04T09:00:00.00Z" title="CMake 2.8 final released">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      <link href="http://www.cmake.org">CMake 2.8.0</link> is now released since a while ago.
      I have started to update my projects using CMake with 2.8 and I have encountered mostly one issue.
      For the future, I really expect to continue to increase my use of CMake.
    </paragraph>
    <paragraph>
      With CMake 2.6, to use a library of the same solution, I used to just add a dependency.
    </paragraph>
    <code>
      <line number="0">
        add_dependencies(${EXE_NAME} ${LIB_NAME})
      </line>
    </code>
    <paragraph>
      With CMake 2.8, we implicitly need to link with this library.
    </paragraph>
    <code>
      <line number="0">
        add_dependencies(${EXE_NAME} ${LIB_NAME})
      </line>
      <line number="1">
        target_link_libraries(${EXE_NAME} ${LIB_NAME})
      </line>
    </code>
    <paragraph>
      The adoption of CMake continues to increase. A build of <link href="http://www.boost.org">Boost</link> based on CMake is available and so much more convenient that the old BJam.
      <link href="http://qt.nokia.com/products/appdev/developer-tools/developer-tools#qt-tools-at-a">Qt Creator</link>, the Qt free IDE released with Qt 4.6, supports CMake since version 1.1.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.cmake.org/cmake/resources/software.html" title="CMake download page" />
      <source-element type="Link" href="http://sodium.resophonic.com/boost-cmake/1.41.0.cmake0" title="Boost 1.41.0 for CMake download page" />
      <source-element type="Link" href="http://qt.nokia.com/downloads" title="Qt download page" />
      <source-element type="Link" href="http://www.kitware.com/news/home/browse/CMake?2009_11_04&amp;CMake+2.8.0+Now+Ava" title="CMake 2.8 press release" />
    </source-list>
  </post>

  <post index="0227" date="01/12/2009" std-date="2009-12-01T23:30:00.00Z" title="Shoot(r) 1.3 released">
    <meta>
      <tag>gtc-tech-project-shooter</tag>
    </meta>

    <paragraph>
      Almost 5 years after the last release of Shoot(r), a new release is available!
    </paragraph>
    <image title="Screenshot of Shoot(r)" img="./post/0227-1.jpg" href="./post/0227-1.jpg" />
    <paragraph>
      In 5 years, tools have changed. The only purpose of this release is to update Shoot(r) to use my current toolset.
    </paragraph>
    <paragraph>
      The project is now managed using <link href="https://sourceforge.net/apps/trac/glf/browser/Trunk/shoot(r)">SVN</link> and <link href="http://www.cmake.org">CMake</link>.
    </paragraph>
    <paragraph>
      It uses <link href="http://glew.sourceforge.net">GLEW 1.5.1</link>, <link href="./post-0221.html">GLM 0.8.4.3</link> and <link href="./post-0186.html">GLI 0.1.1.0</link>.
      FMod has been updated to 3.75, Libxml2 to 2.7.6 and SDL to a 1.3 snapshot.
    </paragraph>
    <paragraph>
      This release is for Windows only.
    </paragraph>
    <paragraph>
      More developments are scheduled but, for now, nothing based on gameplay.
    </paragraph>

    <source-list>
      <source-download index="1010" />
      <source-element type="Link" href="http://shooter.g-truc.net" title="Shoot(r) webpage" />
    </source-list>
  </post>

  <post index="0226" date="26/11/2009" std-date="2009-11-26T08:30:00.00Z" title="Yesterday by the Jasmin Vardimon Company">
    <meta>
      <tag>gtc-crea-performance</tag>
    </meta>

    <video title="Jasmin Vardimon Company: Yesterday trailer" href="http://www.youtube.com/v/fK6ebegd9gU&amp;hl=en_GB&amp;fs=1" width="800" height="500" />
    <paragraph>
      Last week, I assist to <link href="http://www.jasminvardimon.com/productions.html">Yesterday</link>,
      a contemporary dance performance by the <link href="http://www.jasminvardimon.com">Jasmin Vardimon Company</link>.
    </paragraph>
    <paragraph>
      An original feature, this performance takes advantage of videos and animations.
      I love the use of new media in art but most of the time I think it looks inappropriate or overused.
      In Yesterday, it was just a perfect appropriation of "new technologies"!
    </paragraph>
    <image title="Yesturday" img="./post/0226-5.jpg" href="./post/0226-5.jpg" />
    <paragraph>
      Yesterday is mainly based on dance but it involves so much creativity and so many ideas to illustrate, to build the performance and makes the audience fully experience it.
      With dedicated dancers and the energy they give on stage, Yesterday is an emotional travel from laugh to pain again an again through the different scenes.
    </paragraph>
    <paragraph>
      I notice a dancer during the performance that amazed me by her commitment.
      After some researches, I found her name: <link href="http://www.youtube.com/watch?v=1XZe_7iYRb0">Mafalda Deville</link>.
    </paragraph>
    <image title="Yesturday" img="./post/0226-1.jpg" href="./post/0226-1.jpg" />
    <paragraph>
      In 2009, I saw many exhibitions and performances but if I had to choose just one, it would be Yesterday.
      The creativity, the commitment, the passion, the perfect uses of the media reasserts the notion of true beauty and forms the greatest of art performances.
    </paragraph>
    <image title="Yesturday" img="./post/0226-2.jpg" href="./post/0226-2.jpg" />
    <list name="Calendar">
      <list-element>
        Wed 02 December 2009 at the Hall for Cornwall, Truro
      </list-element>
      <list-element>
        Mon 01 February 2010 at the Wycombe Swan, High Wycombe
      </list-element>
      <list-element>
        Thu 04 February 2010 at Birmingham Repertory Theatre, Birmingham
      </list-element>
      <list-element>
        02 - 04 Marth 2010 at Herzelia Performing Arts Center, Herzelia - Israel
      </list-element>
      <list-element>
        Sat 06 Marth 2010 at Haifa Auditorium, Haifa - Israel
      </list-element>
      <list-element>
        Sat 07 Marth 2010 at The Jerusalem Centre for the Performing Arts, Jerusalem - Israel
      </list-element>
    </list>
    <image title="Yesturday" img="./post/0226-3.jpg" href="./post/0226-3.jpg" />
    <source-list>
      <source-element type="Link" href="http://www.jasminvardimon.com/about.html" title="About the Jasmin Vardimon Company" />
      <source-element type="Link" href="http://www.jasminvardimon.com/productions.html" title="About the Yesturday performance" />
      <source-element type="Link" href="http://www.youtube.com/user/jasminvardimononline" title="More video of the Jasmin Vardimon Company" />
      <source-element type="Link" href="http://www.facebook.com/pages/Brighton-United-Kingdom/Jasmin-Vardimon-Company/74321258897" title="Facebook page of the Jasmin Vardimon Company" />
    </source-list>
    <image title="Yesturday" img="./post/0226-4.jpg" href="./post/0226-4.jpg" />

  </post>

  <post index="0225" date="24/11/2009" std-date="2009-11-24T02:30:00.00Z" title="OpenGL 3 Samples Pack 1.1.0 released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      This version adds 4 samples about texture filtering but is actually a major update for development tools support.
    </paragraph>
    <paragraph>
      The version has been tested with Visual Studio 2005, 2008 and 2010.
      An experimental version for Linux is still in development but is also included in this release.
      This version also brings support for <link href="http://www.cmake.org/cmake/resources/software.html">CMake 2.8</link>.
    </paragraph>
    <paragraph>
      To simplify the use of the pack, the dependence with <link href="http://www.boost.org">Boost</link> in <link href="./post-g-truc-projects-gli-full.html">GLI</link> has been removed.
    </paragraph>
    <paragraph>
      The last source code is now always available within a <link href="http://glf.svn.sourceforge.net/viewvc/glf/Trunk/ogl3-samples-pack.tar.gz?view=tar">tar.gz file</link>.
    </paragraph>
    <code title="To check out the source code, the command line is the following:">
      <line number="1">svn co https://glf.svn.sourceforge.net/svnroot/glf/Trunk/ogl3-samples-pack</line>
    </code>
    <paragraph>
      Thanks for posting bug report <link href="https://sourceforge.net/apps/trac/glf/newticket">on Trac</link>. You need a <link href="http://www.sf.net">SourceForge</link> account for that!
    </paragraph>

    <source-list>
      <source-download index="1009" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/newticket" title="Report a bug for the OpenGL 3 Samples Pack 1.1.0" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/browser/Tags/ogl3-samples-pack/ogl3-samples-pack-1.1.0.20091124" title="Browse the code with Trac" />
      <source-element type="Link" href="http://glf.svn.sourceforge.net/viewvc/glf/Trunk/ogl3-samples-pack.tar.gz?view=tar" title="Download OpenGL 3 Samples Pack from SVN trunk" />
    </source-list>
  </post>

  <post index="0224" date="21/11/2009" std-date="2009-11-21T23:30:00.00Z" title="Trac on G-Truc Creation">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>
    <type category="gtc-g-truc-source">
      <tag>Trac</tag>
      <tag>Update</tag>
    </type>

    <paragraph>
      <link href="http://trac.edgewall.org/">Trac</link> is web based tracking system that provides an interface to <link href="http://subversion.tigris.org">Subversion</link>.
    </paragraph>
    <paragraph>
      To improve my projects management, I decided to use <link href="http://trac.edgewall.org/">Trac</link> for all my projects on <link href="http://www.g-truc.net">G-Truc Creation</link>.
      Each version in development is now a milestone on Trac. 'Tickets' are created to description the work to do for these milestones.
      When I milestone is finished and released is become a version and users can add tickets to report bugs. To report bugs users need to have an account on <link href="http://www.sourceforge.net">SourceForge.net</link>.
    </paragraph>
    <paragraph>
      To access to the Trac of G-Truc Creation, I have added a button on the title.
    </paragraph>
    <paragraph>
      For bug reports or feature requests for a G-Truc Creation project, please use <link href="https://sourceforge.net/apps/trac/glf">G-Truc Creation Trac</link>.
    </paragraph>

    <source-list>
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/newticket" title="Create a new ticket" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/report/1" title="View tickets" />
      <source-element type="Link" href="https://sourceforge.net/apps/trac/glf/browser/Trunk" title="Browse SVN trunk" />
      <source-element type="Link" href="http://trac.edgewall.org/" title="Trac website" />
    </source-list>
  </post>

  <post index="0223" date="19/11/2009" std-date="2009-11-19T19:00:00.00Z" title="Boost 1.41.0 released: Property Tree">
    <meta>
      <tag>gtc-tech-devel-cpp</tag>
    </meta>
    <type category="gtc-article-cpp">
      <tag>Boost</tag>
      <tag>C++</tag>
    </type>

    <paragraph>
      <link href="http://www.boost.org">Boost</link> is still on its regular bases of updated which is great even if I can't manage to follow!
    </paragraph>
    <paragraph>
      <link href="http://www.boost.org/users/news/version_1_41_0">Boost 1.41.0</link> includes a new library called "Property Tree". This library looks great to manage software configuration files.
      It includes a <link href="http://codesynthesis.com/~boris/blog/2008/05/19/real-xml-parser/">so called XML parser</link> which really isn't,
      it doesn't support SAX or <link href="http://www.w3.org/DOM/">DOM</link> and most XML features.
      It's a look like XML reader and writer which actually fine for configuration files and cases where you control the production of XML.
      The XML parser it actually based on <link href="http://rapidxml.sourceforge.net">RapidXml</link>.
    </paragraph>
    <paragraph>
      It might actually replace in a lot of cases none conformed library like <link href="http://rapidxml.sourceforge.net">RapidXml</link>,
      <link href="http://www.grinninglizard.com/tinyxml/">TinyXML</link> or maybe <link href="http://vtd-xml.sourceforge.net">VTD-XML</link>.
      Of course, it will never become a substitute for this good old and compliant <link href="http://xerces.apache.org/xerces-c">Xerces-C</link>.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.boost.org/users/news/version_1_41_0" title="Boost 1.41.0 release note" />
      <source-element type="Link" href="http://www.boost.org/doc/libs/1_41_0/doc/html/property_tree.html" title="Property tree documentation" />
    </source-list>
  </post>

  <post index="0222" date="18/11/2009" std-date="2009-11-18T00:15:00.00Z" title="Anish Kapoor at the London Royal Academy of Arts">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>
    <type category="gtc-exhibition">
      <tag>Exhibition</tag>
    </type>

    <image title="1999, Yellow" img="./post/0222-2-small.jpg" href="./post/0222-2-normal.jpg" />
    <quote author="Anish Kapoor" href="http://www.anishkapoor.com/">To make new art you have to make new space.</quote>
    <paragraph>
      <link href="http://www.royalacademy.org.uk">The Royal Acamedy of Arts</link> features an absolutely great exhibition by Anish Kapoor an international acclaimed sculptor.
    </paragraph>
    <paragraph>
      The work of Anish Kapoor is perfectly defined by a signature. A fascination for shapes, curves, mirrors, wax and an obsession for pigments especially a very specific dark raspberry.
    </paragraph>
    <quote author="Anish Kapoor" href="http://www.anishkapoor.com/">Throughout history the hand of the artist has been hailed as the means by which the expression of art finds a voice. To make art without the hand is a goal that sets art beyond expression.</quote>
    <paragraph>
      Beyond just the pieces themselves, <bold>the experience</bold> with the pieces out and gives the overall impression, interest and feeling.
      I think that the accomplishment of Anish Kapoor is that he makes the visitors forget about the techniques about the process to just allow them to <bold>live the exhibition</bold> which, by the way, turns out to be quite fun!
    </paragraph>
    <image title="2008, Shooting into the corner" img="./post/0222-small.jpg" href="./post/0222-normal.jpg" />
    <quote author="The Royal Acamedy of Arts" href="http://www.royalacademy.org.uk">A ritual arena in which a symbolic act of violence is allowed to occur.</quote>
    <paragraph>
      Unfortunately for the visitors, this exhibition is a huge success and the Royal Academy is quite crowed despite a high price ticket of £12. The exhibition is on until 11 December 2009.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.royalacademy.org.uk/exhibitions/anish-kapoor/" title="The exhibition page" />
      <source-element type="Link" href="http://www.anishkapoor.com/" title="Anish Kapoor website" />
      <source-element type="Link" href="http://en.wikipedia.org/wiki/Anish_Kapoor" title="Anish Kapoor Wikipedia page" />
    </source-list>
  </post>

  <post index="0221" date="16/11/2009" std-date="2009-11-16T08:00:00.00Z" title="GLM 0.8.4.3 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>
    <type category="gtc-project-glm">
      <tag>GLM</tag>
    </type>

    <paragraph>
      A new revision of GLM is available. The version improves the support of half-precision floating-point arithmetic for consistency with the overall library.
    </paragraph>
    <paragraph>
      It's generally a very bad practice to use half-precision based types (half, hvec*, hmat*) because x86 CPU hasn't a native half float support.
      GPU doesn't support them, the purpose of half float is to store data for the GPUs and reduce memory bandwise.
    </paragraph>
    <paragraph>
      To get started with <link href="http://www.g-truc.net/project-0016.html">GLM</link>,
      have a look on the <link href="http://www.g-truc.net/project-0026.html">OpenGL 3 Samples Pack.</link>
    </paragraph>

    <source-list>
      <source-download index="1008" />
      <source-download index="1007" />
    </source-list>
  </post>

  <post index="0220" date="13/11/2009" std-date="2009-11-13T08:00:00.00Z" title="C++ tips: It's an instantiation! No a function declaration!">
    <meta>
      <tag>gtc-tech-devel-cpp</tag>
    </meta>
    <type category="gtc-article-cpp">
      <tag>C++</tag>
    </type>

    <paragraph>
      C++, I love this language, is it the best one? I don't know, I don't care much, all I know it's the one I have the most fun with and always something left to learn...
    </paragraph>
    <paragraph>
      Today, I wrote this simple code that open my eyes wide and hit my head on my desk a couple of time.
    </paragraph>
    <code title="Class declaration:">
      <line number="0">
        <keyword>class</keyword> Class
      </line>
      <line number="1">{</line>
      <line number="2">
        <keyword>public</keyword>:
      </line>
      <line number="3" align="32px">
        Class(glm::<userword>uvec2</userword> const &amp; TileSize);
      </line>
      <line number="4" align="32px">
        <keyword>void</keyword> Func(<keyword>int</keyword> Param1, <keyword>int</keyword> Param2);
      </line>
      <line number="5">};</line>
    </code>
    <code title="Use case:">
      <line number="1">
        <keyword>int</keyword> func(glm::<userword>uvec3</userword> const &amp; TileSize)
      </line>
      <line number="2">{</line>
      <line number="3" align="32px">
        Class MyClass(glm::<userword>uvec2</userword>(TileSize));
      </line>
      <line number="4" align="32px">MyClass.Func(76, 76);</line>
      <line number="5">}</line>
    </code>
    <paragraph>
      But unfortunately I have got an error:
    </paragraph>
    <quote author="Visual Studio 2005">
      error C2660: 'MyClass' : function does not take 2 arguments.
    </quote>
    <paragraph>
      I have to say that when the code is simplified to this extreme, it's quite easier to understand what is happening:
      MyClass <bold>isn't a Class instance</bold>, it <bold>is a function declaration</bold> that takes a <keyword>
        glm::<userword>vec2</userword>
      </keyword> is parameter and return a Class.
      This is because of the cast from <keyword>
        glm::<userword>vec3</userword>
      </keyword> to <keyword>
        glm::<userword>vec2</userword>
      </keyword>.
    </paragraph>
    <code title="Build fix:">
      <line number="1">
        <keyword>int</keyword> func(glm::<userword>uvec3</userword> const &amp; TileSize)
      </line>
      <line number="2">{</line>
      <line number="3" align="32px">
        glm::<userword>uvec2</userword> TileSize2(TileSize));
      </line>
      <line number="4" align="32px">Class MyClass(TileSize2);</line>
      <line number="5" align="32px">MyClass.Func(76, 76);</line>
      <line number="6">}</line>
    </code>
    <paragraph>
      Thanks to <link href="http://twistedwave.com">Thomas Thiriez</link>, the C++ God I asked for deep and accurate answers.
      He even gives me a perfect <link href="http://www.gotw.ca/gotw/075.htm">reference</link> about this C++ twist.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.gotw.ca/gotw/075.htm" title="GotW #75: Istream Initialization?" />
    </source-list>
  </post>

  <post index="0219" date="11/11/2009" std-date="2009-11-11T23:30:00.00Z" title="Creation process: When photography made me a better programmer.">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      For years, I have tried everything to make me able to do more, to save time to just do.
      I stop watching TV year ago, optimise my time to go to work doing something during this time,
      and reduce my time of sleep but still I'm dreaming of more time!
    </paragraph>
    <paragraph>
      On my photography side, I recently get obsessed with the notion of "experiencing the creation process".
      How to make the people going to the direction of the photographer idea or what the photographer wants?
      It could be as simple as that they don't pose but ignore the camera.
      How to simple visualise the picture and actually see it as what it is to do what you want to do with it.
      I really think that Photoshop is a bad user experience of photography.
      It's a great software experience but when it comes to creative photography what I'm looking of it's any kind of feeling.
    </paragraph>
    <paragraph>
      After too much thinking of "experiencing the creation process" I end up to considering my creation process of... softwares!
      I have years of experience in this area but mostly all I know I learned it on the job ... maybe to much based on habits ... It's about time for me to improve my development process with a critical look on it!
      I decided to read one of an ex co-worker at <link href="http://www.e-onsoftware.com">e-on software</link> reference:
      <link href="http://www.joelonsoftware.com">Joel on software</link> by <link href="http://www.joelonsoftware.com/AboutMe.html">Joel Spolsky</link>.
    </paragraph>
    <quote author="Joel Spolsky" href="http://www.joelonsoftware.com/AboutMe.html">
      The neat thing about The Joel Test is that it's easy to get a quick yes or no to each question. You don't have to figure out lines-of-code-per-day or average-bugs-per-inflection-point. Give your team 1 point for each "yes" answer.
    </quote>
    <paragraph>
      It contains a lot of information about software development, we agree or not, it doesn't matter to me, what's matter: it's a good base to think.
    </paragraph>
    <list>
      <list-element>
        <link href="http://www.joelonsoftware.com/articles/fog0000000043.html">The Joel Test: 12 Steps to Better Code</link>
      </list-element>
      <list-element>
        <link href="http://www.joelonsoftware.com/articles/fog0000000023.html">Daily Builds are Your Friend</link>
      </list-element>
      <list-element>
        <link href="http://www.joelonsoftware.com/articles/fog0000000029.html">Painless Bug Tracking</link>
      </list-element>
      <list-element>
        <link href="http://www.joelonsoftware.com/articles/fog0000000245.html">Painless Software Schedules</link>
      </list-element>
      <list-element>
        <link href="http://www.joelonsoftware.com/articles/fog0000000069.html">Things You Should Never Do</link>
      </list-element>
      <list-element>
        <link href="http://www.joelonsoftware.com/articles/fog0000000036.html">Painless Functional Specifications - Part 1: Why Bother?</link>
      </list-element>
      <list-element>
        <link href="http://www.joelonsoftware.com/articles/fog0000000067.html">Top Five (Wrong) Reasons You Don't Have Testers</link>
      </list-element>
      <list-element>
        <link href="http://www.joelonsoftware.com/uibook/chapters/fog0000000057.html">Controlling Your Environment Makes You Happy</link>
      </list-element>
    </list>
    <paragraph>And a lot more articles! I have to say that I found them really funny time to time!</paragraph>
    <paragraph>
      My output from this? Hopefully a better development process to lead the development of <link href="http://glm.g-truc.net">GLM</link> 0.9 before a first stable release...
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.joelonsoftware.com" title="Joel on software" />
    </source-list>
  </post>

  <post index="0218" date="06/11/2009" std-date="2009-11-06T08:00:00.00Z" title="Looking for a forum for GLM users? Found a bug?">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      I had this request again and again: "Where can I find a forum for GLM users?". Unfortunately, I didn't have any answer for a while...
    </paragraph>
    <paragraph>
      I decided to contact the <link href="http://www.opengl.org">OpenGL.org website</link> webmaster James Riordon to ask if I could redirect GLM users to the
      <link href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=postlist&amp;Board=10&amp;page=1">OpenGL Toolkits forum</link> and I get an approval for this idea.
    </paragraph>
    <paragraph>
      I also want to recall that GLM have a <link href="https://sourceforge.net/tracker/?group_id=129808&amp;atid=1126032">bug tracker</link>
      which is the <bold>best way</bold> to summit a bug, even if I receive most of them by email...
      From now, I will redirect developers to the <link href="https://sourceforge.net/tracker/?group_id=129808&amp;atid=1126032">bug tracker</link> to accept a bug request.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=postlist&amp;Board=10&amp;page=1" title="OpenGL toolkits forum to post question on GLM" />
      <source-element type="Link" href="https://sourceforge.net/tracker/?group_id=129808&amp;atid=1126032" title="GLM bug tracker" />
    </source-list>
  </post>

  <post index="0217" date="05/11/2009" std-date="2009-11-05T22:00:00.00Z" title="Küken ♥ Cocoon">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <type category="gtc-photography">
      <tag>Photography</tag>
    </type>
    <album title="Küken ♥ Cocoon">
      <summary>London 2009</summary>
      <fullscreen>http://picasaweb.google.co.uk/groovounet/KukenCocoon#slideshow </fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5394067887524352849%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
                            pic144="http://lh6.ggpht.com/_bpz9rGNwhX4/StuUN6k_YrI/AAAAAAAAESU/SZ3MmrEP724/s144/685.JPG"
                            pic288="http://lh6.ggpht.com/_bpz9rGNwhX4/StuUN6k_YrI/AAAAAAAAESU/SZ3MmrEP724/s288/685.JPG"
                            pic400="http://lh6.ggpht.com/_bpz9rGNwhX4/StuUN6k_YrI/AAAAAAAAESU/SZ3MmrEP724/s400/685.JPG"
                            pic800="http://lh6.ggpht.com/_bpz9rGNwhX4/StuUN6k_YrI/AAAAAAAAESU/SZ3MmrEP724/s800/685.JPG" />
    </album>

    <image title="Küken ♥ Cocoon"
                             img="http://lh4.ggpht.com/_bpz9rGNwhX4/StuUQbbDIcI/AAAAAAAAESc/fT3cBpZ4Zgw/s400/707.JPG"
                             href="http://lh4.ggpht.com/_bpz9rGNwhX4/StuUQbbDIcI/AAAAAAAAESc/fT3cBpZ4Zgw/s800/707.JPG" />
    <paragraph>
      This is a photography series about Cocoon, a great French indie music band I discovered in Paris a while ago actually before they got known.
    </paragraph>
    <paragraph>
      The band is composed of two members, Mark and Morgane who create around their music a cute world: Panda Mountain! A world where Küken finds a place through this photography experiment.
    </paragraph>
    <paragraph>
      It's been a while since I saw them in concert even if there are in tour all year. They are working on a new album and I surely can't way to ear it!
    </paragraph>
    <image title="Küken ♥ Cocoon"
     img="http://lh3.ggpht.com/_bpz9rGNwhX4/StuUOtghbAI/AAAAAAAAESY/iw_YwXesKKM/s400/693.JPG"
     href="http://lh3.ggpht.com/_bpz9rGNwhX4/StuUOtghbAI/AAAAAAAAESY/iw_YwXesKKM/s800/693.JPG" />
    <image title="Küken ♥ Cocoon"
     img="http://lh6.ggpht.com/_bpz9rGNwhX4/StuUN6k_YrI/AAAAAAAAESU/SZ3MmrEP724/s400/685.JPG"
     href="http://lh6.ggpht.com/_bpz9rGNwhX4/StuUN6k_YrI/AAAAAAAAESU/SZ3MmrEP724/s800/685.JPG" />
    <image title="Küken ♥ Cocoon"
     img="http://lh3.ggpht.com/_bpz9rGNwhX4/StuUUvGlEgI/AAAAAAAAES4/8YjoVGGAbf4/s400/796.JPG"
     href="http://lh3.ggpht.com/_bpz9rGNwhX4/StuUUvGlEgI/AAAAAAAAES4/8YjoVGGAbf4/s800/796.JPG" />
    <image title="Küken ♥ Cocoon"
     img="http://lh5.ggpht.com/_bpz9rGNwhX4/StuUM1h-XuI/AAAAAAAAESQ/ZPZYRqv8mZ4/s400/671.JPG"
     href="http://lh5.ggpht.com/_bpz9rGNwhX4/StuUM1h-XuI/AAAAAAAAESQ/ZPZYRqv8mZ4/s800/671.JPG" />

    <source-list>
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/KukenCocoon" title="The full album" />
      <source-element type="Link" href="http://www.frompandamountains.com/" title="Cocoon website" />
    </source-list>
  </post>

  <post index="0216" date="03/11/2009" std-date="2009-11-03T19:00:00.00Z" title="OpenGL 3 Samples Pack Updated">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      The OpenGL 3 Samples Pack has been updated with two new samples dealing with framebuffer multisampling and multiple framebuffer outputs.
    </paragraph>
    <paragraph>
      Beside this, an experimental support for Linux is available. Thanks to Todd Marshall for this port!
    </paragraph>

    <source-list>
      <source-download index="1007" />
    </source-list>
  </post>

  <post index="0215" date="01/11/2009" std-date="2009-11-01T23:30:00.00Z" title="G-Truc Creation 6.1 source released">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      G-Truc Creation 6.1 is now quite mature even if I still want to make a lot of little changes. Anyway, I think its good enough to be released.
    </paragraph>
    <paragraph>
      Compared to version 6.0, a lot of refactoring has been done and the code is actually a lot different, hopefully for the best!
    </paragraph>
    <paragraph>
      On a different topic G-Truc Creation has reached a new visits record with 555 single visitors per day in average in October.
      A little jump dues to the release of the <link href="./project-0026.html">OpenGL 3 Samples Pack</link>.
    </paragraph>

    <image-list>
      <image-element title="G-Truc Creation 6.1 screenshot" small="./project/site/site11-small.jpg" normal="./project/site/site11-normal.jpg" />
    </image-list>
    <source-list>
      <source-download index="1006" />
    </source-list>
  </post>

  <post index="0214" date="30/10/2009" std-date="2009-10-30T03:00:00.00Z" title="IBM Releases OpenCL Drivers for POWER6 and Cell/B.E.">
    <meta>
      <tag>gtc-tech-opencl</tag>
    </meta>

    <paragraph>
      Just like I was expecting, IBM releases an OpenCL drivers for the Cell but actually also for the POWER6.
      There is a SDK, a forum and review system, it looks quite serious to me.
      I'm not a specialist in IBM chips so I can't say either or not the PS3 Cell is supported, I wish it is!
    </paragraph>
    <paragraph>
      All major desktop actors have release something for OpenCL: Apple, nVidia, AMD and now IBM...
      All? Not really, Intel is missing... It is actually possible to use the AMD OpenCL SDK on Intel CPUs.
      Intel is doing great CPUs chips and it is mostly it.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.alphaworks.ibm.com/tech/opencl" title="IBM OpenCL page" />
    </source-list>
  </post>

  <post index="0213" date="28/10/2009" std-date="2009-10-28T20:00:00.00Z" title="Using CMake with Visual Studio 2010 Beta 2">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      Unfortunately, <link href="http://msdn.microsoft.com/en-gb/vstudio/dd582936.aspx">Visual Studio 2010 Beta 2</link> isn't compatible with <link href="http://www.cmake.org">CMake 2.8 rc3</link>...
      It involves errors at project generation.
      However, the issue have been fixed in <link href="http://www.cmake.org/files/vCVS/cmake-2.9.20091028-win32-x86.exe">CMake nightly builds!</link>
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.cmake.org/files/vCVS/cmake-2.9.20091028-win32-x86.exe" title="CMake 2.9 build 20091028" />
      <source-element type="Link" href="http://www.cmake.org/files/vCVS/" title="CMake nightly builds directory" />
    </source-list>
  </post>

  <post index="0212" date="26/10/2009" std-date="2009-10-26T23:30:00.00Z" title="No Love Lost by Damien Hirst at The Wallace Collection">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      With <link href="http://www.wallacecollection.org/collections/exhibition/77">'No Love Lost'</link>, <link href="http://www.wallacecollection.org">The Wallace Collection</link>is hosting a much unexpected exhibition.
      The artist behind it, <link href="http://en.wikipedia.org/wiki/Damien_Hirst">Damien Hirst</link>,is some kind of heir of the 'weird' abstract painters where the place usually features classical or even baroque type of art.
      I personally love both the Wallace Collection and abstract painting but the meeting of both is an outstanding great idea!
    </paragraph>
    <quote>
      Hung in the traditional galleries of The Wallace Collection, your guests will be able to enjoy the visual dialogue between Hirst’s works and the Old Master paintings displayed in the museum’s opulent galleries.
    </quote>
    <quote>
      Receptions can be held throughout our stunning first floor galleries along side a remarkable array of masterpieces by artists such as <link href="http://en.wikipedia.org/wiki/Rembrandt">Rembrandt</link>, Titian Hals and <link href="http://en.wikipedia.org/wiki/Diego_Vel%C3%A1zquez">Velazquez</link>
    </quote>
    <paragraph>
      <link href="http://www.wallacecollection.org/collections/exhibition/77">'No Love Lost'</link> exhibition contains only 25 pieces in two rooms but I believed I saw maybe 2 paintings that are going to stay in the history of art and at least in my memory as masterpieces.
    </paragraph>
    <paragraph>
      One is called "Floating Skull".
      It represents a skull and involves some kind of strong spot light technique which makes the painting likes emitting lights.
      It displays the skull like a 3D object.
      As a result, the skull seems to free itself from the frame: absolutely stunning! I think that anyone seeing it, notice how singular it is.
    </paragraph>
    <paragraph>
      I would have love to put a picture of it but no picture can properly display what is does because its effect is mainly based on the reflection of the light, the paint material and the thickness of the brushstrokes.
      The only way I see to show this piece would but through real-time computer graphics...
      It would be quite exciting as an experiment for me!
    </paragraph>
    <paragraph>
      The second one is called "Requiem, White Roses and Butterflies" and it shows bellow.
      Again, like with "Floating Skull", it is remarkable how this painting ignore the frame to exist beyond it.
      The white perspective lines, the thickness of the roses and butterflies, the brushstrokes and the size of the painting generate a feeling of volume, of large empty space, of swallow in a dim universe.
    </paragraph>
    <image title="2008 - Requiem, White Roses and Butterflies - Damien Hirst" img="./post/0212-1-normal.jpg" href="./post/0212-1-normal.jpg" />
    <paragraph>
      An exhibition book is available with all the paintings of this exhibition.
      The quality is good but the paintings really need to be seen real.
      It's not much text but it ends with a conversation between <link href="http://en.wikipedia.org/wiki/John_Hoyland">John Hoyland</link> and Damien Hirst that just deserved to be read: Artists they came across, past stories, tastes, inspirations and 'fuck' everywhere as proper British sentences need to be grammatically correct.
    </paragraph>
    <paragraph>
      The exhibition is on until the 24th January 2010 for free but donations welcome and it should not be missed!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.wallacecollection.org/entertain/damienhirst" title="Exhibition page on The Wallace Collection website" />
      <source-element type="Link" href="http://en.wikipedia.org/wiki/Damien_Hirst" title="Damien Hirst" />
    </source-list>
  </post>

  <post index="0211" date="25/10/2009" std-date="2009-10-25T03:00:00.00Z" title="WormsHL legacies">
    <meta>
      <tag>gtc-tech-project-wormshl</tag>
    </meta>

    <paragraph>
      WormsHL is the first team project I have work for and had a lot of fun! WormsHL is a Half-Life modification based on the universe of the games "Worms". Quite a challenging project! I get in the team as "C++ programmer" to become "Lead Programmer" and "Team Leader", 8 years ago... The project has been really important for me; it really gave me the passion for 3D graphics programming.
    </paragraph>
    <paragraph>
      I notice few weeks ago that almost all the content related to WormsHL has disappeared from Internet. So sad... WormsHL was on its time quite famous, download on the website at more than 200 000 times when we stop counting and start using mirrors. It’s been distributed with the famous <link href="http://www.jvn.com/blog/joystick-le-blog-officiel.html">French video game magazine Joystick</link> including 2 articles about the project in magazine.
    </paragraph>
    <paragraph>
      I still have on my hard disk and some CDs somewhere the remains of the project. To be sure these remains survive or at least I don’t lose them I decided to put everything on <link href="https://sourceforge.net/projects/wormshl/">SourceForge</link>.
    </paragraph>
    <paragraph>
      Thanks again for everyone you work on this project and everyone who supported it by playing it! It was a great and successful adventure!
    </paragraph>
    <image title="WormsHL b3.2 in-game" img="./post/0211-small.jpg" href="./post/0211-normal.jpg" />

    <source-list>
      <source-download index="1005" />
      <source-element type="Link" href="./project-0002.html" title="Project page" />
      <source-element type="Link" href="https://sourceforge.net/projects/wormshl/" title="SourceForge page" />
    </source-list>
  </post>

  <post index="0210" date="23/10/2009" std-date="2009-10-23T03:00:00.00Z" title="WebGL, not even release already adopted!">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      WebGL is going to be a graphics specification based on <link href="http://www.khronos.org/opengles/">OpenGL ES 2.0</link> for web browsers. Soon, we are going to be able to do real-time graphics in the web browser in Javasript!
    </paragraph>
    <paragraph>
      How amazing does it sound? I can't see the limits of the possibilities it brings yet!
    </paragraph>
    <paragraph>
      I think this a common agreement, announced at Siggraph 2009, the project already have an implementation in
      <link href="http://news.cnet.com/8301-30685_3-10371399-264.html">Google Chrome</link>,
      <link href="http://webkit.org/blog/603/webgl-now-available-in-webkit-nightlies/">Safari</link> and
      <link href="http://blog.vlad1.com/2009/09/21/webgl-samples/">Firefox</link> while the specification are not released.
    </paragraph>
    <paragraph>
      A lot of <link href="http://learningwebgl.com/blog/?p=361">blogs about WebGL</link> are already available and some <link href="http://bjartr.blogspot.com/2009/10/webglu-open-source-webgl-utility.html">projects released</link>. On my side, I wonder if I could find some time to make a version of <link href="http://glm.g-truc.net">GLM</link> in Javascript.
    </paragraph>
    <paragraph>
      I think WebGL is going to be a well spread standard from 2010, replacing Flash in lot of cases with advantages but I also expect to see games like <link href="http://www.quakelive.com">Quake Live</link> running cross-platform with WebGL.
    </paragraph>
    <paragraph>
      I surely can't wait to start working on my next version of G-Truc Creation using WebGL!
    </paragraph>

  </post>

  <post index="0209" date="22/10/2009" std-date="2009-10-22T13:00:00.00Z" title="Visual Studio 2010 Beta 2 available for everyone">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      I'm surprised that everyone seems so enthusiast with Windows 7.
      I'm quite enthusiast as well and I'm actually using it for a while but: is Windows 7 really great? I think it is just not a bad OS.
      When I compare with MacOS X Snow Leopard, the OS is certainly not the reason why Windows is still my main platform.
      If I wasn't a graphics programmer. I would not use Windows!
    </paragraph>
    <list name="I am using Windows for 2 main reasons:">
      <list-element>
        1: OpenGL drivers (<link href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=262817#Post262817">Snow Leopard is limited to OpenGL 2.1!!!</link>)
      </list-element>
      <list-element>2: Visual Studio (XCode is...)</list-element>
    </list>
    <paragraph>
      I'm using Visual Studio for all my developments, really everything!
      It's my main tool, I know how it behaves, I know how to tweak it and I know how to integrate external tools in it.
      I'm completely dependent on it which is quite an awful situation because on other platform I become inefficient!
    </paragraph>
    <paragraph>
      Few days after the <link href="http://blogs.msdn.com/directx/default.aspx">release of the new DirectX MSDN Developer Center</link>,
      Visual Studio 2010 Beta 2 is available for everyone... obviously, I'm interested.
      I have quite skipped Visual Studio 2008 and Visual Studio 2010 provides some features I can't miss: Some support of C++ 0x.
    </paragraph>
    <paragraph>
      When I tried Visual Studio 2010 beta 1 for the first time, I noticed that Visual Studio is now displayed in Direct3D... even on Windows XP!
      The interface has quite changed to become blue but there are some ugly effects especially for the code selection. It is such heavy software! The size of the download gives us a clue on that: 2.2 GB!
    </paragraph>
    <paragraph>
      Since the first beta, the development team seems to have done quite a great job to optimize the interface, it is definitely smoother to use.
    </paragraph>
    <paragraph>
      I notice a really great new feature: the possibility to grad a code window out of the main window. This is going to be great for multiple screens development!
    </paragraph>
    <paragraph>
      My next step will be an evaluation of the compiler efficiency. It hasn't been great on that side for the past releases (up to Visual Studio 6!) when GCC continues to generate faster and faster code...
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://msdn.microsoft.com/en-gb/vstudio/dd582936.aspx" title="Download page of Visual Studio 2010 Beta 2" />
      <source-element type="Link" href="http://msdn.microsoft.com/directx" title="DirectX MSDN Developer Center" />
    </source-list>
  </post>

  <post index="0208" date="19/10/2009" std-date="2009-10-19T13:00:00.00Z" type="g-truc-projects-glm" title="GLM 0.8.4.2 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      An update of GLM 0.8.4.2... It fixes a single build issue with half vectors.
      I'm quite annoyed I leaved such error... anyway it's fixed now.
      If you don't have any issue with GLM 0.8.4.1, no need to update.
    </paragraph>

    <source-list>
      <source-download index="1004" />
    </source-list>
  </post>

  <post index="0207" date="18/10/2009" std-date="2009-10-18T09:00:00.00Z" title="MacResearch OpenCL podcast">
    <meta>
      <tag>gtc-tech-opencl</tag>
    </meta>

    <paragraph>
      Since the release of Snow Leopard, David Gohara from <link href="http://www.macresearch.org/">MacResearch</link> has been working on some video podcasts about OpenCL.
    </paragraph>
    <paragraph>
      The podcasts are based on commented slides with demos time to time. These podcasts target MacOS X and especially XCode and nVidia GT200 chips.
      It really is a in depth coverage based on code samples and GPU architecture.
    </paragraph>
    <paragraph>
      Furthermore, a good part of the podcasts is dedicated to the questions from the previous podcast.
    </paragraph>
    <paragraph>
      I highly recommend these podcasts! There are available through iTune or individual downloads.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://feeds.feedburner.com/opencl" title="Podcast link" />
      <source-element type="Link" href="http://www.macresearch.org/opencl" title="MacResearch OpenCL page" />
    </source-list>
  </post>

  <post index="0206" date="17/10/2009" std-date="2009-10-17T00:30:00.00Z" title="SHOWstudio: Fashion Revolution at London Somerset House">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      <link href="http://www.somersethouse.org.uk/">The Somerset House</link> is hosting an exhibition that I didn't expect to enjoy that much!
      <link href="http://www.somersethouse.org.uk/fashion/showstudio/default.asp">"SHOWstudio: Fashion Revolution"</link>.
    </paragraph>
    <paragraph>
      Fashion, not always my cup of tea but anyway I decide to go because this exhibition feature a live fashion photography shoot from time to time.
      It was a good opportunity for me to follow my current study of the interaction between the photographer and the model.
      After this exhibition, I end up with a single idea, a single obsession, which I believe to be a huge step: "Experience the creation process",
      maybe some kind of my interpretation of <link href="http://www.showstudio.com">SHOWstudio</link> fundations: Process, performance, participation.
    </paragraph>
    <quote author="Nick Knight" href="http://www.nickknight.com">
      “SHOWstudio is based on the belief that showing the entire creative process —from conception to completion— is beneficial for the artist, the audience and the art itself.”
    </quote>
    <paragraph>
      I can't say, I have been so excited by the photography shoot. It seems too static for me especially when I advocate the release of emotions.
      Well, that's maybe how fashion photography is.
      However, the exhibition itself is a wonder, a tribute to creativity and how to live fashion beyond just the cloches, beyond its predominate media.
      Over the years, SHOWstudio explored fashion with photography, performances, computer graphics (really!)
      and especially films through many collaboration with <link href="http://www.alexandermcqueen.com/">Alexander McQueen</link>, Kate Moss, Björk, etc.
      Each project feels like an unique creative experiment...
    </paragraph>
    <paragraph>
      For once, and I hope it's going to be a habit, the exhibition is still on and due to its success,
      more live photography shows are planned on Wednesday 28th October and 30th October from 12am to 21pm and I'm probably going to one of those to see another live photography shoot.
      The exhibition is on until 20 December 2009 for only £5 and I highly recommend it!
    </paragraph>
    <video title="SHOWstudio exhibition video presentation" href="http://www.youtube.com/v/lDFoxfNNY84&amp;hl=en&amp;fs=1" width="800" height="500" />

    <source-list>
      <source-element type="Link" href="http://www.somersethouse.org.uk/fashion/showstudio/default.asp" title="The exhibition page" />
      <source-element type="Link" href="http://www.showstudio.com" title="SHOWstudio website" />
    </source-list>
  </post>

  <post index="0205" date="16/10/2009" std-date="2009-10-16T13:00:00.00Z" title="ATI Stream SDK 2.0 beta 4: CPU + GPU">
    <meta>
      <tag>gtc-tech-opencl</tag>
    </meta>

    <paragraph>
      Following the schedule I was speaking about few days ago, ATI released the ATI Stream SDK 2.0 Beta 4 with CPU and GPU support.
    </paragraph>
    <paragraph>
      A good information is the list of the supported GPUs: The complet Radeon HD 4*** and Radeon HD 5*** series!
      It's a good confirmation for the HD 4*** serie even if in this case I would also expect the Radeon HD 3*** series to be supported as well.
    </paragraph>
    <paragraph>
      I have few questions remain.
      Aparrently on MacOS X, it's not possible to share the memory between different devices,
      the CPU and the GPU. Is it possible on an AMD platform?
    </paragraph>
    <quote author="AMD claim for ATI Stream overview">
      ATI Stream technology is a set of advanced hardware and software technologies that enable AMD graphics processors (GPU),
      <bold>working in concert</bold> with the system’s central processor (CPU).
    </quote>
    <paragraph>
      To actually works in concert it needs to be able to share memory between devices.
      The OpenCL 1.0 specification is not clear about that and it seams to be implementation dependant.
      Until, I get a Radeon HD 5*** ... I'm investigating! Wait and see...
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://developer.amd.com/GPU/ATISTREAMSDKBETAPROGRAM/Pages/default.aspx" title="ATI Stream SDK v2.0 page" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-opencl-beta-driver-v2.0-beta4-vista-win7.zip" title="ATI OpenCL driver Vista/Seven" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-stream-sdk-v2.0-beta4-vista-win7-64.exe" title="ATI Stream SDK v2.0 beta 4 for Vista/Seven 64" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-stream-sdk-v2.0-beta4-vista-win7-32.exe" title="ATI Stream SDK v2.0 beta 4 for Vista/Seven 32" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-opencl-beta-driver-v2.0-beta4-xp.zip" title="ATI OpenCL driver WinXP" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-stream-sdk-v2.0-beta4-xp64.exe" title="ATI Stream SDK v2.0 beta 4 for XP 64" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-stream-sdk-v2.0-beta4-xp32.exe" title="ATI Stream SDK v2.0 beta 4 for XP 32" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-opencl-beta-driver-v2.0-beta4-lnx.zip" title="ATI OpenCL driver Linux" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-stream-sdk-v2.0-beta4-lnx64.tgz" title="ATI Stream SDK v2.0 beta 4 for Linux 64" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-stream-sdk-v2.0-beta4-lnx32.tgz" title="ATI Stream SDK v2.0 beta 4 for Linux 32" />
      <source-element type="Link" href="http://www.khronos.org/message_boards/viewforum.php?f=27" title="Khronos OpenCL forum" />
    </source-list>
  </post>

  <post index="0204" date="15/10/2009" std-date="2009-10-15T09:00:00.00Z" title="OpenGL 3 Samples Pack released">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      The OpenGL 3 Sample Pack is a collection of OpenGL 3 samples based on "Core" features.
      OpenGL 3.1 drivers are required for most samples but a sample requires OpenGL 3.2.
    </paragraph>
    <paragraph>
      The purpose of this samples pack is just to document the new API with some code to get started with a modern way to use OpenGL.
    </paragraph>
    <paragraph>
      This project is using <link href="http://www.libsdl.org/svn.php">SDL 1.3 beta</link> to create a window with an OpenGL 3 context,
      <link href="post-0197.html">GLM 0.8.4.1</link> as a math library and a replacement for deprecated OpenGL fucntions and
      <link href="post-0186.html">GLI 0.1.1.0</link> to load images, either compressed or not.
    </paragraph>
    <list name="Build 20091015 Initial log:">
      <list-element>Added buffer type sample</list-element>
      <list-element>Added buffer update sample</list-element>
      <list-element>Added draw instanced sample</list-element>
      <list-element>Added FBO mipmaps sample</list-element>
      <list-element>Added GLSL 1.4 block sample</list-element>
      <list-element>Added GLSL 1.5 block sample</list-element>
      <list-element>Added Image 2D sample</list-element>
      <list-element>Added Image Array 2D sample</list-element>
      <list-element>Added Compressed Image 2D sample</list-element>
      <list-element>Added Image Rectangle sample</list-element>
      <list-element>Added Rasterizer sample</list-element>
      <list-element>Added Vertex Array Object sample</list-element>
    </list>
    <paragraph>
      12 samples are included in this first release but a lot more samples are on their ways, I hope this release will be a great appetizer for future releases!
    </paragraph>

    <source-list>
      <source-download index="1003" />
    </source-list>
  </post>

  <post index="0203" date="12/10/2009" std-date="2009-10-12T20:00:00.00Z" title="Reassert a flavor of a simple expression">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Reassert a flavor of a simple expression">
      <summary>London 2009</summary>
      <fullscreen>http://picasaweb.google.co.uk/groovounet/ReassertAFlavorOfSimpleExpression#slideshow </fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5388708379642914609%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="http://lh3.ggpht.com/_bpz9rGNwhX4/SsiJvVbRWkI/AAAAAAAAED0/WJvxdaRy5U4/s144/179.JPG"
        pic288="http://lh3.ggpht.com/_bpz9rGNwhX4/SsiJvVbRWkI/AAAAAAAAED0/WJvxdaRy5U4/s288/179.JPG"
        pic400="http://lh3.ggpht.com/_bpz9rGNwhX4/SsiJvVbRWkI/AAAAAAAAED0/WJvxdaRy5U4/s400/179.JPG"
        pic800="http://lh3.ggpht.com/_bpz9rGNwhX4/SsiJvVbRWkI/AAAAAAAAED0/WJvxdaRy5U4/s800/179.JPG" />
    </album>

    <paragraph>
      This series of photographs acknowledge my interest for abstract expressionism and especially this kind of simple design that <link href="http://en.wikipedia.org/wiki/Mark_Rothko">Mark Rothko</link>
      explored all his life: Both simple and complex just like emotions.
      I admire him for all the energy it gives in the exploration of a simple expression.
      Most of the time huge paintings of the size of a wall, something 10 different variations of a similar idea and spending the day just watching a single painting to get various perception of it according to the sun light.
      That’s being dedicated.
    </paragraph>
    <paragraph>
      My visit of the <link href="http://www.tate.org.uk/modern/exhibitions/markrothko/default.shtm">London Modern Tate exhibition of Mark Rothkos</link>
      leaves its mark on me. His works has become a strong influence on this experiment but actually on most of my photographs.
      When I leave this exhibition, I had this weird thing in me; I couldn't put a word on it.
      It wasn't from my mind but from my stomach, an emotion, just a real emotion pure of any rational justification.
    </paragraph>
    <paragraph>
      From my point of view, most abstract paintings are so intellectual.
      I find it’s really interesting that cute down to the most simple square in a square there is nothing to understand any more except your own feeling on from of such creation.
    </paragraph>
    <paragraph>
      These photographs are made to bring back this simple expression and are supposed to be enjoying wide in an empty environment.
    </paragraph>
    <image title="Reassert a flavor of a simple expression"
      img="http://lh3.ggpht.com/_bpz9rGNwhX4/SsiJvVbRWkI/AAAAAAAAED0/WJvxdaRy5U4/s400/179.JPG"
      href="http://lh3.ggpht.com/_bpz9rGNwhX4/SsiJvVbRWkI/AAAAAAAAED0/WJvxdaRy5U4/s800/179.JPG" />
    <image title="Reassert a flavor of a simple expression"
      img="http://lh6.ggpht.com/_bpz9rGNwhX4/SsiJvCSt4-I/AAAAAAAAEDw/XCW-s5TgmH4/s400/171.JPG"
      href="http://lh6.ggpht.com/_bpz9rGNwhX4/SsiJvCSt4-I/AAAAAAAAEDw/XCW-s5TgmH4/s800/171.JPG" />
    <image title="Reassert a flavor of a simple expression"
      img="http://lh3.ggpht.com/_bpz9rGNwhX4/SsiJwrJcjuI/AAAAAAAAEEA/ISD_cMYDscI/s400/222b.JPG"
      href="http://lh3.ggpht.com/_bpz9rGNwhX4/SsiJwrJcjuI/AAAAAAAAEEA/ISD_cMYDscI/s800/222b.JPG" />
    <image title="Reassert a flavor of a simple expression"
      img="http://lh4.ggpht.com/_bpz9rGNwhX4/SsiJvzNsiZI/AAAAAAAAED4/7pm4GV4L08c/s400/210.JPG"
      href="http://lh4.ggpht.com/_bpz9rGNwhX4/SsiJvzNsiZI/AAAAAAAAED4/7pm4GV4L08c/s800/210.JPG" />

    <source-list>
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/ReassertAFlavorOfSimpleExpression?feat=directlink" title="Picasa page with 7 pictures" />
    </source-list>
  </post>

  <post index="0202" date="11/10/2009" std-date="2009-10-11T23:30:00.00Z" title="G-Truc Creation 6.1 released">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      The first major update of G-Truc Creation 6 is released!
    </paragraph>
    <paragraph>
      The website has little changes on the design side, it maintly provides news functionnalities through the new menu buttons and the photography tab.
    </paragraph>
    <list name="Changelog:">
      <list-element>Added photography tab</list-element>
      <list-element>Added research in G-Truc Creation using Google</list-element>
      <list-element>Added list of all the feeds</list-element>
      <list-element>Added info page</list-element>
      <list-element>Added contact page</list-element>
      <list-element>Updated design</list-element>
      <list-element>Refactored XSLT code</list-element>
    </list>
    <paragraph>
      So what's next? I'm not really happy with the photography part so that it will probably be updated soon.
      Following next: A samples page for my OpenGL 3 Samples Pack (ready for not released...),
      a page for my 3D graphics content (projects and articles) and finally a version for phones.
    </paragraph>

    <source-list>
      <source-element type="Link" href="./contact.html" title="Any comment?" />
    </source-list>
  </post>

  <post index="0201" date="09/10/2009" std-date="2009-10-09T09:00:00.00Z" title="G-Truc Creation 6.0 source code">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      I used to release G-Truc Creation website source code in the past and I just forgot to do it so far for version 6.0.
    </paragraph>
    <paragraph>
      I guess that for people interested in XSLT, they will find  pretty good soure to look at. The build have been tested on Windows and MacOS X.
    </paragraph>
    <paragraph>
      A first major update of the website is on it's way, version 6.1!
    </paragraph>

    <source-list>
      <source-download index="1002" />
    </source-list>
  </post>

  <post index="0200" date="08/10/2009" std-date="2009-10-08T20:00:00.00Z" title="Rasterization on Larrabee">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      When it comes to Intel graphics, I never feel like using ecstatic words because how painful working on Intel graphics chips is. (Especially with OpenGL!)
      Nevertheless, I can't deny my interest for Intel project: <link href="http://software.intel.com/en-us/articles/larrabee/">Larrabee</link>.
      I don't think Larrabee is the right way to go and I don't think Intel is going to do it right. (Even what they expect to do).
    </paragraph>
    <paragraph>
      Larrabee is a platform following a convergent general idea: More and more programmable chips and actually make everything programmable!
      The <link href="http://graphics.cs.williams.edu/archive/SweeneyHPG2009/TimHPG2009.pdf">recent presentation</link> of
      <link href="http://en.wikipedia.org/wiki/Tim_Sweeney_(game_developer)">Tim Sweeney</link> at <link href="http://highperformancegraphics.org"> HPG 2009</link>
      is a good representation of this trend.
    </paragraph>
    <paragraph>
      A week ago an excellent article about <link href="http://www.devmaster.net/articles/rasterization-on-larrabee">"Rasterisation on Larrabee"</link>
      has been posted on <link href="http://www.devmaster.net">DevMaster.net</link>.
      The article is really detailed and explains how rasterization could be optimized and even with the case of multisampling.
      The method is a tiled based rendering like in <link href="http://en.wikipedia.org/wiki/PowerVR">PowerVR</link> GPUs
      but quite less advanced. This article raise me 2 comments.
    </paragraph>
    <paragraph>
      First, a new possible bottleneck with Direct3D 11 GPUs will probably around the setup engine where the rasterization is performed.
      So far, it's one of the only components on nVidia and AMD chips that have never become massively parallel.
      With the raise of tessellation, the amount of triangles to rasterize could be a lot higher!
      AMD with their Radeon 58** seems to tried something (some kind of dual setup engine) but according
      <link href="http://www.hardware.fr/articles/770-6/dossier-amd-radeon-hd-5870.html">some reviews</link>, they didn't get it right.
      I completely believe that tiled engines are the way to go: Potentially massively parallel rasterization!
      However, getting it right is hard; it really is a much more complicated hardware component.
    </paragraph>
    <paragraph>
      Second, I'm quite astonished to see his article published on DevMaster...
      It's not the first time that Intel published something on a community website (previously on GameDev.net).
      A strategy for Larrabee adoption by developers?
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.devmaster.net/articles/rasterization-on-larrabee/" title="Rasterization on Larrabee by Michael Abrash" />
      <source-element type="Link" href="http://graphics.cs.williams.edu/archive/SweeneyHPG2009/TimHPG2009.pdf" title="The end of the GPU roadmap by Tim Sweeney" />
    </source-list>
  </post>

  <post index="0199" date="07/10/2009" std-date="2009-10-07T08:30:00.00Z" title="CMake 2.8 rc2 released">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      <link href="http://www.cmake.org">CMake</link> is a cross-platform and open source build system for Visual Studio, GCC, ICC, Watcom, Borland, CodeBlock, XCode, Eclipse, 32 bits / 64 bits, etc...
      It allows managing a project independently of the development platform.
      CMake became one of my favorite tool the past year!
    </paragraph>
    <paragraph>
      From the <link href="http://www.cmake.org/pipermail/cmake/2009-October/032410.html">RC2 changelog</link>, I mainly 2 great adds. First, CMake 2.8 provides Visual Studio 2010 support. Second, a new command "cmake --build" allows to build any solution that CMake has generated. For example, no need to launch Visual Studio to build a Visual Studio solution!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.cmake.org/files/v2.8/" title="List of CMake 2.8 rc2 builds for all platforms" />
      <source-element type="Link" href="http://www.cmake.org/pipermail/cmake/2009-October/032410.html" title="CMake 2.8 rc2 changelog" />
    </source-list>
  </post>

  <post index="0198" date="06/10/2009" std-date="2009-10-06T09:00:00.00Z" title="nVidia ForceWare 191.07: First stable OpenGL 3.2 drivers!">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      With the release of OpenGL 3.2 specification, nVidia has already publish some beta OpenGL 3.2 drivers. 3 revisions latter, the implementation is already stable!
    </paragraph>
    <paragraph>
      It should not be too long before AMD cash up, hopefully before the end of the year...
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.nvidia.com/Download/index.aspx?lang=en-us" title="nVidia drivers page" />
    </source-list>
  </post>

  <post index="0197" date="05/10/2009" std-date="2009-10-05T13:00:00.00Z" title="GLM 0.8.4.1 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
      <tag>gtc-tech-devel-cpp</tag>
    </meta>

    <paragraph>
      I have just release an update of GLM.
      This version fixes few bugs and is mainly the result of a great contribution from <link href="http://glintercept.nutty.org/links.html">Damian Trebilco</link>
      who did a major update of <link href="http://glm.g-truc.net/glm-manual.pdf">GLM manual</link>.
    </paragraph>
    <paragraph>
      A major behavior change is the static assert working even when <link href="http://www.boost.org">Boost</link> isn't used.
      The error message isn't as nice as the Boost one but good enough.
      This static assert implementation is provided by Damian as well.
    </paragraph>
    <code title="Alternative static assert implementation:">
      <line number="0">
        <keyword>#define</keyword> GLM_STATIC_ASSERT(x) <keyword>typedef char</keyword> __CASSERT__##__LINE__[(x) ? 1 : -1]
      </line>
    </code>

    <source-list>
      <source-download type="Download" index="1001" />
      <source-element type="Link" href="http://glm.g-truc.net/glm-manual.pdf" title="GLM Manual" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
    </source-list>
  </post>

  <post index="0196" date="04/10/2009" std-date="2009-10-04T01:00:00.00Z" title="OpenGL is on trend!">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      I got shock in a train close to Lille in France because of a power failure on my way from London to Paris last week-end.
      From, 19H30 to 5h20, I didn't have much to do but a great MacBook Pro 13” with a great batterie life. I started writing this article about OpenGL and the good reasons to be optimistic these days being a OpenGL developer!
    </paragraph>
    <paragraph>
      For the story, the train runs out of power a lot sooner than my laptop!
    </paragraph>
    <paragraph>
      Enjoy!
    </paragraph>

    <source-list>
      <source-download type="Download" index="1000" />
    </source-list>
  </post>

  <post index="0195" date="03/10/2009" std-date="2009-10-03T12:00:00.00Z" title="XSLT processors: Xalan-C 1.10 VS Saxon Java 9.2">
    <meta>
      <tag>gtc-tech-devel-xml</tag>
    </meta>

    <paragraph>
      I'm really annoyed by the fact that <link href="http://xerces.apache.org/xerces-c/">Xerces-C</link> and <link href="http://xml.apache.org/xalan-c/">Xalan-C</link> doesn't evolve anymore.
      No support of <link href="http://www.w3.org/TR/xslt20/">XSLT 2.0</link> and <link href="http://www.w3.org/TR/xpath20/">XPath 2.0</link>, also 3 years after the final specification release ...
    </paragraph>
    <paragraph>
      Unfortunately, we don't have many choices ... I think that libxml and libxslt are awful libraries and not up to date as well.
      I found few weeks ago a .NET and Java XSLT 2.0 processor: <link href="http://saxon.sourceforge.net/">Saxon</link>. I thought I should give it a try especially to make G-Truc Creation build on MacOS X!
    </paragraph>
    <paragraph>
      Saxon is a great tools, very accurate conformance wise, but it's probably because it's Java based: It is awfully slow!
    </paragraph>
    <list name="Build of G-Truc Creation v6.0, 312 files:">
      <list-element>Saxon 9.2: 16:00.3 minutes</list-element>
      <list-element>Xalan-J 2.7.1: 10:02.5 minutes</list-element>
      <list-element>Xalan-C 1.10: 1:09.4 minutes</list-element>
    </list>
    <paragraph>
      1 minute is already quite long when I develop on the website, so that I just build the appropriate files. So now 16 minutes with Saxon ... I'm probably going to keep using Xalan for a while.
    </paragraph>
    <paragraph>
      For years I have been using Xerces and Xalan for my website but also for varius projects. They are such great libraries and once again I would love to see them maintain at its original level of excellence.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://xml.apache.org/xalan-c/" title="Xalan-C website" />
      <source-element type="Link" href="http://xml.apache.org/xalan-j/" title="Xalan-J website" />
      <source-element type="Link" href="http://saxon.sourceforge.net/" title="Saxon website" />
    </source-list>
  </post>

  <post index="0194" date="02/10/2009" std-date="2009-10-02T00:15:00.00Z" title="nVidia and AMD new hardware generation">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      22 Septembre 2009, AMD released <link href="http://www.amd.com/uk/products/desktop/graphics/ati-radeon-hd-5000/Pages/ati-radeon-hd-5000.aspx">Radeon 5870</link>. 1 October 2009, nVidia announced <link href="http://www.nvidia.com/object/fermi_architecture.html">Fermi architecture</link>. Both Direct3D 11 GPUs, both <link href="http://www.khronos.org/opencl">OpenCL</link> throughput processor.
    </paragraph>
    <paragraph>
      AMD is the first to be really, leading the high-end market at least 3 months, if nVidia GT300 actually manage to take the leadership. An announcement 3 months before the release? A sign that nVidia feel threat from the Radeon 5870 which is a great chip, but maybe not such a great value, performance wise.
    </paragraph>
    <paragraph>
      Marketing wise, both company use a very diferent approach, AMD based on Eyefinity (up to 6 screens gaming which is actually better for just for the desktop!) and Direct 3D 11 when nVidia push on throughtput computing and developers support. nVidia is definetly working more than AMD on the marketing side once again.
    </paragraph>
    <paragraph>
      Developer wise, Direct 3D 11 is not a jump like Direct 3D 10 have been especially on nVidia side with the GeForce 8 complet rework of the architechture compare to GeForce 7.
      ATI always evolve surely and safely and again the Radeon 5870 seams to me to be an small evolution of the Radeon 4870 and I actually wonder if ATI could build Direct3D 11 drivers for this chip. Ok, let's be fair BC6, BC7 HDR compression formats and <link href="http://en.wikipedia.org/wiki/IEEE_754-2008">IEEE754-2008</link> floats were probably not supported in Radeon 4***.
      On nVidia side, the tesselator will be definetely new fairly make sens. nVidia is pushing on throughput computing and the architechture looks optimized for this use but throughput computing is great already on GeForce 8! nVidia announce CUDA 3 with a C++ support... I wonder where are the limitation but I think it will be very limited, classes probably, polymophism maybe, template? Anyway, I don't see any future for CUDA beside scientific and really professional and dedicated purpose. (Like a bank which decided to run its database on server based on 32 Tesla cards...)
    </paragraph>
    <paragraph>
      After the GeForce 8 / Radeon X1800 which state <bold>if instruction is fine or great</bold>, on the programming side, I think this new generation state more than ever: <bold>bandwise is limited!</bold>
      Radeon 5870 and GT300 have both nearly double of computional power than the previous generation but the memory bandwise doesn't increase as much, roughly by 50%. The good old time of precomputed textures with arithmetic results is so over!
      This is reenforce by some architechture details. The two setup engines of the Radeon 5870 which sound to me like a "please use the tesselator for higher resolution instead of reading memory". Other clue, the large cache size and even the L1 / L2 memory structure which is going to reduce cache miss and reduce the need of writing on the GPU memory.
      Take even more care of you memory bandwise, that's the key of a fast rendering engine for this generation! I haven't notice details yet about how nVidia manage the triangle rasterization, it could be a bottleneck with the tesselator and when we look at the really bad results of geometry shader tesselation on nVidia GPUs, I would have enjoy details on this area.
    </paragraph>
    <paragraph>
      As a conclusion, I feel that on my personnal computer I would love a Radeon 5*** to join my GeForce 8 or maybe a GT300. When GeForce 8 was released, it was such a jump that I bought it as soon as I could. With this new generation I feel like, so far, with <link href="http://www.khronos.org/opencl">OpenCL</link> I have plenty of experiments to do so I will be resonnable for now and save my money.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.pcper.com/article.php?aid=789" title="PC Perspective article: NVIDIA Fermi Next Generation GPU Architecture Overview" />
      <source-element type="Link" href="http://www.pcper.com/article.php?aid=783" title="PC Perspective article: ATI Radeon HD 5870 1GB Graphics Card and AMD Eyefinity Review" />
      <source-element type="Link" href="http://www.hardware.fr/articles/772-1/nvidia-fermi-revolution-gpu-computing.html" title="Hardware.fr article: Nvidia Fermi : la révolution du GPU Computing" />
      <source-element type="Link" href="http://www.hardware.fr/articles/770-1/dossier-amd-radeon-hd-5870.html" title="Dossier : AMD Radeon HD 5870 - Hardware.fr" />
      <source-element type="Link" href="http://s09.idav.ucdavis.edu/talks/02_kayvonf_gpuArchTalk09.pdf" title="From Shader Code to a Teraflop: How Shader Cores Work" />
    </source-list>
  </post>

  <post index="0193" date="01/10/2009" std-date="2009-10-01T02:00:00.00Z" title="Popo's book experiment">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Revealling the good all time">
      <summary>Paris 2009</summary>
      <fullscreen>http://picasaweb.google.co.uk/groovounet/Paris1960#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_GB&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5387416244677603297%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_GB" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="http://lh5.ggpht.com/_bpz9rGNwhX4/SsPz5VDgrZI/AAAAAAAAD_o/y9aY_yaUsKA/s144/08b.jpg"
        pic288="http://lh5.ggpht.com/_bpz9rGNwhX4/SsPz5VDgrZI/AAAAAAAAD_o/y9aY_yaUsKA/s288/08b.jpg"
        pic400="http://lh5.ggpht.com/_bpz9rGNwhX4/SsPz5VDgrZI/AAAAAAAAD_o/y9aY_yaUsKA/s400/08b.jpg"
        pic800="http://lh5.ggpht.com/_bpz9rGNwhX4/SsPz5VDgrZI/AAAAAAAAD_o/y9aY_yaUsKA/s800/08b.jpg" />
    </album>

    <paragraph>
      Last week-end, I was in Paris and I did a photography experiment I was planning for months for <link href="http://www.pauline-n.book.fr">Pauline</link>.
    </paragraph>
    <paragraph>
      On Saturday morning, we had a briefing where I explained how I would like to do this experiment and what kind of result I was expecting.
      Before this breifing, I didn't had any idea of the photography theme. This speach was more about how I see photography and how it should serve her book.
    </paragraph>
    <paragraph>
      Basically, I explained how I believe that photography must come from the heart not the head because the goal of a picture is, I believe, to generate an emotinal response and not an rational response.
      We also spoke about how she needs to be the picture subject and not the picture object. If she was an object in the pictures, it doesn't mean that the pictures would not generate emotional response but these pictures are made for her book.
    </paragraph>
    <paragraph>
      At the end for the briefing we found a common interest for <link href="http://en.wikipedia.org/wiki/French_New_Wave">La Nouvelle Vague</link>
      and we setup this context with the assistance of Alexandra Navarro.
      The shoot took place in the lovely <link href="http://maps.google.co.uk/maps?f=q&amp;source=s_q&amp;hl=en&amp;q=&amp;vps=1&amp;jsv=177f&amp;sll=48.85389,2.370949&amp;sspn=0.003406,0">Cour Damoye</link> close to Bastille.
    </paragraph>
    <image img="./post/0193-03b.jpg" href="http://picasaweb.google.co.uk/groovounet/Paris1960#slideshow/5387417278547947378" />
    <image img="./post/0193-06b.jpg" href="http://picasaweb.google.co.uk/groovounet/Paris1960#slideshow/5387417358975697122" />
    <image img="./post/0193-12b.jpg" href="http://picasaweb.google.co.uk/groovounet/Paris1960#slideshow/5387417841323146946" />
    <image img="./post/0193-17b.jpg" href="http://picasaweb.google.co.uk/groovounet/Paris1960#slideshow/5387417929867609010" />
    <paragraph>
      I used a bit of post processing to make the pictures look slightly older and to amplify the visual impact.
    </paragraph>
    <paragraph>
      I'm quite happy with this experiment, Pauline was really providing the energy for this shoot which was really needed because of a major train delay between London and Paris which give me about 3 hours of sleep.
      All pictures were "played" and "not static" which I hope give something more natural and more 'real'. By real, I mean an outside display of an inside trait.
    </paragraph>
    <paragraph>
      These pictures could have been better if I had enough of sleep (I was struggeling using my camera and quite shaking) and I think we would have need a lot more researsh to really reach this idea of "Nouvelle Vague".
      Photography requires a lot of work!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://picasaweb.google.co.uk/groovounet/Paris1960" title="The full album" />
      <source-element type="Link" href="http://www.pauline-n.book.fr" title="Pauline's book" />
    </source-list>
  </post>

  <post index="0192" date="30/09/2009" std-date="2009-09-30T00:30:00.00Z" type="other-exhibitions" title="Martin Parr at the Paris Jeu de Paume ">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      <link href="http://www.martinparr.com">Martin Parr</link> is a British documentary photographer, photojournalist and collector.
      A common theme for his photography is wealth where he shows how we should be more worry of wealth rather than poverty.
      Through is pictures he takes a critical look at modern society."
    </paragraph>
    <paragraph>
      Le Jeu de Paume proposed an exhibition about his works and his 'world',
      by the display of Martin Parr photographs and some of his collection from:
      <link href="www.briangriffin.co.uk">Brian Griffin</link>,
      <link href="http://en.wikipedia.org/wiki/Tony_Ray-Jones">Tony Ray Jones</link>,
      <link href="http://www.grahamsmithphotography.com/">Graham Smith</link>,
      <link href="http://www.chriskillip.com/">Chris Killip</link>, etc.
    </paragraph>
    <quote author="Martin Parr" href="http://www.martinparr.com">
      "This show is currently touring Europe and features all my collections and my new Luxury project. The collections range between Saddam Hussein watches to recent British documentary photographs from other Bristh photographers"
    </quote>
    <paragraph>
      Martin Parr has been appointed Guest Curator for <link href="http://www.bpb.org.uk">Brighton Photo Biennial’s</link> fourth edition, taking place in October and November 2010.
    </paragraph>
    <image title="Russia. Moscow. Fashion Week 2004" img="./post/0192-1-normal.jpg" href="./post/0192-1-normal.jpg" />
    <image title="United Arab Emirates. Dubai. DIFC Gulf Art Fair 2007" img="./post/0192-2-normal.jpg" href="./post/0192-2-normal.jpg" />
    <image title="USA. Hollywood. Attendees at a charity function 2000" img="./post/0192-3-normal.jpg" href="./post/0192-3-normal.jpg" />
    <image title="Betty at the Port Glasgow Town Hall Xmas Party 2005" img="./post/0192-4-normal.jpg" href="./post/0192-4-normal.jpg" />
    <image title="Father &amp; son, Westend of Newcastle, Tyneside 1980" img="./post/0192-5-normal.jpg" href="./post/0192-5-normal.jpg" />
    <image title="Japan. Miyazaki. The Artificial Beach Inside the Ocean Dome 1996" img="./post/0192-6-normal.jpg" href="./post/0192-6-normal.jpg" />

    <source-list>
      <source-element type="Link" href="Planète Parr exhibition page" title="http://www.jeudepaume.org/?page=article&amp;idArt=828&amp;lieu=1&amp;idImg=1028" />
      <source-element type="Link" href="http://www.martinparr.com" title="Martin Parr web page" />
    </source-list>
  </post>

  <post index="0191" date="29/09/2009" std-date="2009-09-29T08:00:00.00Z" title="nVidia release OpenCL drivers!">
    <meta>
      <tag>gtc-tech-opencl</tag>
    </meta>

    <paragraph>
      nVidia has finally release its first public release and conformant of OpenCL drivers for Windows with a complet and impressive SDK!
    </paragraph>
    <paragraph>
      There are 30 samples demonstrating how to use OpenCL by itself but also with OpenGL interaction.
      The SDK is label nVidia SDK Computing SDK which involve CUDA (77 samples) and DirectCompute (4 samples).
      All the samples are suposed to run on GeForce 8 and upper but I actually get some crashes for some.
    </paragraph>
    <paragraph>
      nVidia has also release an "OpenGL Visual Profiler" for debugging.
    </paragraph>
    <paragraph>
      This is probably the really start of stream processing on PC, we will probably see a lot of software announcing GPU acceleration in the next months!
    </paragraph>
    <image title="Screenshot of the OpenGL + OpenCL samples of the SDK" img="./post/0191-small.jpg" href="./post/0191-normal.jpg" />

    <source-list>
      <source-element type="Link" href="http://developer.nvidia.com/object/get-opencl.html" title="nVidia OpenCL download page" />
    </source-list>
  </post>

  <post index="0190" date="25/09/2009" std-date="2009-09-24T13:15:00.00Z" title="ATI Stream SDK 2.0 beta 3 released ... with schedule information!">
    <meta>
      <tag>gtc-tech-opencl</tag>
    </meta>

    <paragraph>
      <link href="http://developer.amd.com/GPU/ATISTREAMSDKBETAPROGRAM/Pages/default.aspx">ATI Stream SDK 2.0</link> was the first public implementation of <link href="http://www.khronos.org/opencl">OpenCL</link> available to anyone! This new release is still limited to CPUs and support is not complete but that's a great platform to learn OpenCL which actually means sens to me as well.
    </paragraph>
    <paragraph>
      ATI Stream SDK 2.0 beta 3 is available for Windows XP/Vista/Seven through Visual Studio 2008 and Linux through GCC 4.3 and ICC 11.
    </paragraph>
    <paragraph>
      I notice on the <link href="http://developer.amd.com/gpu/ATIStreamSDKBetaProgram/assets/ATI_Stream_SDK_FAQ.pdf">beta 3 FAQ</link>, some really interesting information:
    </paragraph>
    <quote>
      "<bold>The GPU version of OpenCL</bold> to be bundled with the ATI Stream SDK is scheduled to be <bold>available later in Q3 of 2009</bold>" ... "<bold>The first production release</bold> of the ATI Stream SDK v2.0 with OpenCL 1.0 support is scheduled to be <bold>available in Q4 of 2009</bold>."
    </quote>
    <paragraph>
      I expect to see a public release for nVidia soon as an implementation for <link href="http://www.apple.com/macosx/technology/">MacOS X Snow Leopard</link> is available and apparantly <link href="http://www.khronos.org/message_boards/viewtopic.php?f=28&amp;t=1919">working pretty well</link>. ATI implementation for MacOS X is... almost unexistant.
    </paragraph>
    <paragraph>
      The Khronos Group has opened <link href="http://www.khronos.org/message_boards/viewforum.php?f=27">(ugly PHPBB) forums for OpenCL</link>, I hope to hang as soon as possible!
    </paragraph>

    <image-list>
      <image-element title="ATI Stream Logo" small="./post/0190-ati-stream.jpg" normal="./post/0190-ati-stream.jpg" />
    </image-list>
    <source-list>
      <source-element type="Link" href="http://developer.amd.com/GPU/ATISTREAMSDKBETAPROGRAM/Pages/default.aspx" title="ATI Stream SDK v2.0 page" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-stream-sdk-v2.0-beta3-vista64.msi" title="ATI Stream SDK v2.0 beta 3 for Vista/Seven 64" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-stream-sdk-v2.0-beta3-vista32.msi" title="ATI Stream SDK v2.0 beta 3 for Vista/Seven 32" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-stream-sdk-v2.0-beta3-xp64.msi" title="ATI Stream SDK v2.0 beta 3 for XP 64" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-stream-sdk-v2.0-beta3-xp32.msi" title="ATI Stream SDK v2.0 beta 3 for XP 32" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-stream-sdk-v2.0-beta3-lnx64.tgz" title="ATI Stream SDK v2.0 beta 3 for Linux 64" />
      <source-element type="Download" href="http://developer.amd.com/Downloads/ati-stream-sdk-v2.0-beta3-lnx32.msi" title="ATI Stream SDK v2.0 beta 3 for Linux 32" />
      <source-element type="Link" href="http://www.khronos.org/message_boards/viewforum.php?f=27" title="Khronos OpenCL forum" />
    </source-list>
  </post>

  <post index="0189" date="24/09/2009" std-date="2009-09-24T23:30:00.00Z" title="G-Truc Creation 6.0 released!">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      This version 6 provides better ways to browse the posts, a lost of improvements on the post formatting, atom feeds with full content included and of course a new design. It is a valid XHTML 1.1 and ATOM 1.0 website!
    </paragraph>
    <!--
        <image title="Valid XHTML 1.1" img="./theme/valid-xhtml11-blue.png" href="http://validator.w3.org/check?url=http%3A//www.g-truc.net/post-lastest-full.html" />
        <image title="Valid Atom 1.0" img="./theme/valid-atom10.png" href="http://validator.w3.org/feed/check.cgi?url=http%3A//www.g-truc.net/post-lastest.xml" />
        -->
    <paragraph>
      However, feature wise, the website is not finished yet. 'The posts' part of the website is the only one available for the moment which is not really convenient to find projects and articles downloads and decriptions. An dedicated section called "3D Graphics" is still under construction for this purpose. In the meantime, by browsing the posts, you could find all the projects and articles released ... with hopefully unbroken links.
    </paragraph>
    <paragraph>
      I also expect to create others parts: Photography, contact and maybe download.
      Finally, an even lighter version of the website will be available for mobile phones but probably not really soon.
    </paragraph>
    <paragraph>
      I believe, this 6th version of G-Truc Creation is a really nice and polished improvement from the previous version ... I hope you will all agree with me!
    </paragraph>

    <image-list>
      <image-element title="Valid XHTML 1.1" small="./theme/valid-xhtml11-blue.png" normal="http://validator.w3.org/check?url=http%3A//www.g-truc.net/index.html" />
      <image-element title="Valid Atom 1.0" small="./theme/valid-atom10.png" normal="http://validator.w3.org/feed/check.cgi?url=http%3A//www.g-truc.net/post-lastest.xml" />
    </image-list>
  </post>

  <post index="0188" date="21/09/2009" std-date="2009-09-21T22:00:00.00Z" title="Generating quantitative data with CSV files" picture="">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      At work, an important part of my job is to be able to generate quantitative data to demonstrate my researsh result. What could be better than an Excel chart to shows your results?
    </paragraph>
    <paragraph>
      From a software to Excel, there is a simple answer: <link href="http://en.wikipedia.org/wiki/Comma-separated_values">CSV files (Comma Separated Values)</link>. It's a text format with a really simple syntax mainly based on the comma separator. It makes really easy to make table of data that Excel is going to load directly.
    </paragraph>
    <code title="Example of CSV file:">
      <line number="   0">1997, Ford, E350,"ac, abs, moon", 3000.00</line>
      <line number="   1">1999, Chevy, "Venture ""Extended Edition""", "", 4900.00</line>
      <line number="   2">1996, Jeep, Grand Cherokee, "MUST SELL!</line>
    </code>

    <source-list>
      <source-element type="Link" href="http://en.wikipedia.org/wiki/Comma-separated_values" title="Detailled description of CSV files." />
    </source-list>
  </post>

  <post index="0187" date="20/09/2009" std-date="2009-09-20T20:00:00.00Z" title="Futurism af the London Modern Tate">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <quote author="F.T. Marinetti, extract of the Manifesto of Futurism, 1909" href="http://en.wikipedia.org/wiki/Filippo_Tommaso_Marinetti">
      "We will glorify war - the world's only hygiene - militarism, patriotism, the destructive gesture of anarchists, beautiful ideas worth dying for, and scorn for women."
    </quote>
    <paragraph>
      <link href="http://en.wikipedia.org/wiki/Futurism">Futurism</link> was a very controversial <link href="http://en.wikipedia.org/wiki/Avant-garde">avant-garde</link> art movement from 1900 to 1915 from Italy which was very influential in Paris before Russia and London. Most artists at that time were interested by the movement but didn't want being associate with it. Therefore, artists initiate their own movement, French <link href="http://en.wikipedia.org/wiki/Cubism">Cubists</link>: <link href="http://en.wikipedia.org/wiki/Orphism_(art)">Orphism</link>; Russian: <link href="http://en.wikipedia.org/wiki/Cubo-Futurism">Cubo-Futurism</link>; British: <link href="http://en.wikipedia.org/wiki/Vorticism">Vorticism</link>. The Futurism movement stop at the beginning of the first World War when most Italien artists were arrested ...
    </paragraph>
    <paragraph>
      This summer the <link href="www.tate.org.uk/modern">London Modern Tate</link> celebrated the centuary birthday of the Manifesto of Futurism with an exhibition.
    </paragraph>
    <paragraph>
      I was actually unexpectlingly amazed by this exhibition which gave me a lot of clues for the transition between <link href="http://ro.wikipedia.org/wiki/Expresionism">Expresionism</link> and <link href="http://en.wikipedia.org/wiki/Surrealism">Surrealism</link>. It discover some great artists: <link href="http://en.wikipedia.org/wiki/Luigi_Russolo">Luigi Russolo</link>, <link href="http://en.wikipedia.org/wiki/Gino_Severini">Gino Severini</link> and my favorite <link href="http://en.wikipedia.org/wiki/Umberto_Boccioni">Umberto Boccioni</link>. Very colorful and kind of emotionnaly dynamic.
    </paragraph>
    <image title="Umberto Boccioni, La Città Che Sale, 1911" img="./post/0187-1911-LaCittaCheSale-display.jpg" href="./post/0187-1911-LaCittaCheSale.jpg" />
    <image title="Umberto Boccioni, Idolo Moderno, 1911" img="./post/0187-1911-IdoloModerno-display.jpg" href="./post/0187-1911-IdoloModerno.jpg" />
    <image title="Umberto Boccioni, Elasticidà, 1912" img="./post/0187-1912-Elasticida-display.jpg" href="./post/0187-1912-Elasticida.jpg" />
    <image title="Gino Severini, Souvenir de voyages, 1911" img="./post/0187-1911-SouvenirDeVoyages-display.jpg" href="./post/0187-1911-SouvenirDeVoyages.jpg" />
    <image title="Luigi Russolo, La Rivolta, 1911" img="./post/0187-1911-LaRivolta-display.jpg" href="./post/0187-1911-LaRivolta.jpg" />
    <image title="Luigi Russolo, Chioma, 1911" img="./post/0187-1911-Chioma-display.jpg" href="./post/0187-1911-Chioma.jpg" />

    <source-list>
      <source-element type="Link" href="http://www.tate.org.uk/modern/exhibitions/futurism/" title="London Modern Tate page" />
    </source-list>
  </post>

  <post index="0186" date="18/09/2009" std-date="2009-09-18T01:00:00.00Z" title="GLI 0.1.1.0 released" picture="">
    <meta>
      <tag>gtc-tech-project-gli</tag>
    </meta>

    <paragraph>
      Almost 6 months after the first release of GLI, I just released an update of my image library!
    </paragraph>
    <list name="Release note:">
      <list-element>Fixed DDS loader</list-element>
      <list-element>Added RGB8 to DDS loader</list-element>
      <list-element>Added component swizzle operation</list-element>
      <list-element>Added 32 bits integer components support</list-element>
      <list-element>Fixed texel fetch</list-element>
    </list>
    <paragraph>
      GLI is still a very exciting project to me and I'm still working on a major update but it takes time ... but I don't actually know when it could be available ... wait &amp; see!
    </paragraph>

    <source-list>
      <source-download type="Download" index="999" />
    </source-list>
  </post>

  <post index="0185" date="17/09/2009" title="G-Truc Creation Version 6, WIP part 2: News feeds and preview!" std-date="2009-09-17T23:00:00.00Z">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      One other espect of the new website will be the improvement on the News Feed. It is currently so bad that I have dropped the idea of including the content of the posts in the news feed. People have to go to the website to read because anyway, it was impossible to read the post in the new feed because it was formatted at all.
    </paragraph>
    <paragraph>
      Version 6 news feeds are going to use <link href="http://tools.ietf.org/html/rfc4287">ATOM</link> instead of <link href="http://blogs.law.harvard.edu/tech/rss">RSS 2.0</link>. It will be formatted and possible to read the full content directly on <link href="http://reader.google.com">Google Reader</link>, <link href="http://www.google.com/ig">Google Homepage</link>, <link href="http://www.netvides.com">NetVides</link>
    </paragraph>
    <paragraph>
      Several news feeds are actually going to be available. For example: for the whole website; for the photography section; for GLM.
    </paragraph>
    <paragraph>
      Moveover, starting now, I'm using <link href="http://feeds.feedburner.com/g-truc">FeedBurner</link> to provide a nicer way to add the feeds to your favorite feed reader. It also makes easier the feeds management as when version 6 will be released, I will need to change to feed address which is visitor won't even notice.
    </paragraph>
    <paragraph>
      Please, update your news feed address with this one: <link href="http://feeds.feedburner.com/g-truc">http://feeds.feedburner.com/g-truc</link>.
    </paragraph>
    <paragraph>
      Finally, a preview release of the new website is available! Enjoy and if you have some ideas, let me know! I actually already had a lot of great feedbacks from friends, thanks to all of them it did make a difference!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.g-truc.net/post-lastest-full.html" title="Preview of G-Truc Creation Version 6" />
      <source-element type="Feed" href="http://feeds.feedburner.com/g-truc" title="Feed address: http://feeds.feedburner.com/g-truc" />
    </source-list>
  </post>

  <post index="0184" date="16/09/2009" std-date="2009-09-16T03:00:00.00Z" title="GLM 0.8.4.0 released">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      GLM 0.8.4.0 is finally released. However, I didn't had enough time to complete the SSE implementation yet. Considering the number of bug reports and feature requests I decide to release this new version.
    </paragraph>
    <paragraph>
      Mainly, GLM 0.8.4.0 brings support for Visual Studio 2010 and GCC 4.4. Also, all the previously commented optimizations (expect SSE code) are included.
    </paragraph>

    <source-list>
      <source-download index="998" />
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
    </source-list>
  </post>

  <post index="0183" date="15/09/2009" title="G-Truc Creation Version 6: Work in progress" std-date="2009-09-15T13:00:00.00Z">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      I have been really active the past days working on a new version of G-Truc Creation website: Version 6!
    </paragraph>
    <paragraph>
      Technically, no much change: It will still based on a big XML database and
      <link href="http://www.w3.org/TR/xhtml11/">XHTML 1.1</link> pages are generated
      thanks to XSLT files using <link href="http://xml.apache.org/xalan-c/">Xalan</link>.
      Of course the design uses a lot of CSS! Philosophically, no much change either:
      The purpose is to improve the website ergonomic...
    </paragraph>
    <paragraph>
      Just for some background check, I had a look on the post where
      I was presenting G-Truc Creation Version 5 and I was quite surprised to notice
      that my expectation for the 6th version are exactly the same of the one of version 5...
      Maybe, this means that version 5 is a failure or that getting a good ergonomic is long evolution.
    </paragraph>
    <paragraph>
      Even though, for version 6, I am considering my content and my evolution.
      It will be more about photography and the OpenGL samples.
      I really, I hope that it will be a big jump for the overall ergonomic,
      making the website easier to browse, easier to find whatever we want.
      A good feedback for me was to notice that the old French news seems to pop-up all time
      which is very annoying because it's not in French but a good news because it means to me its easier to access to everything.
      I'm quite optimistic!
    </paragraph>
    <paragraph>
      Technically, I expect to use <link href="http://www.w3.org/TR/xslt20/">XSLT 2.0</link> and
      <link href="http://www.w3.org/TR/xpath20/">XPath 2.0</link> but despite an upgrade of Xalan to the last version,
      still, it doesn't support those versions. However, I notice that Xalan 1.10 is significantly faster!
      It's good news because version 6 requires a lot more offline processing to generate all the pages.
    </paragraph>
    <paragraph>
      It is designed for netbooks and I also plan a version for mobile phones, at least iPhones, but after the release of version 6!
    </paragraph>
    <paragraph>
      Finally, I would say: new design, new ergonomic and a lot of work!
      I expect to publish a preview version soon but the final release could take several weeks...
    </paragraph>

  </post>

  <post index="0182" title="Google Tech Talks: The Clean Code Talks serie" date="10/09/2009" std-date="2009-09-10T00:00:00.00Z">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      What I really appreciate about Siggraph is that you see talented people speeking about they area so that you can reach the way of some people think.
    </paragraph>
    <paragraph>
      Google organizes and publishes on YouTube some Google Tech Talks. I really like some talks like The Clean Code Talk Series by <link href="http://misko.hevery.com">Misko Hevery</link>. He also has a really great content on his website about <link href="http://misko.hevery.com/code-reviewers-guide">Writing Testable Code</link>
    </paragraph>
    <paragraph>
      Have a look at these videos (linked below) and think about how he thinks, his vision of programming ... it's really instructive!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.youtube.com/watch?v=wEhu57pih5w" title="Unit Testing" />
      <source-element type="Link" href="http://www.youtube.com/watch?v=RlfLCWKxHJ0" title="Don't Look For Things!" />
      <source-element type="Link" href="http://www.youtube.com/watch?v=-FRm3VPhseI" title="Global State and Singletons" />
      <source-element type="Link" href="http://www.youtube.com/watch?v=4F72VULWFvc" title="Inheritance, Polymorphism, &amp; Testing" />
      <source-element type="Link" href="http://misko.hevery.com/code-reviewers-guide/" title="Writing Testable Code" />
    </source-list>
  </post>

  <post index="0181" date="08/09/2009" title="G80 article referenced on nVidia developer website!" std-date="2009-09-08T08:00:00.00Z">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      I just notice last week that the nVidia developer OpenGL page reference the article I wrote about the G80 and published on Ozone3D.net like more than 2 years ago... It must be not too bad!
    </paragraph>
    <paragraph>
      By the way, I'm currently working on G-Truc Creation website version 6! More info in a later post.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://developer.nvidia.com/page/opengl.html" title="nVidia OpenGL developer page" />
      <source-element type="Link" href="http://www.ozone3d.net/tutorials/g80_opengl_programming/" title="G80 programming article" />
    </source-list>
  </post>

  <post index="0180" date="04/09/2009" title="ATI Tootle: Vertex cache optimization and overdraw minimization" std-date="2009-09-04T01:00:00.00Z" picture="">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      nVidia is well known for its SDK and tools by graphics developers.
      ATI has probably not has shiny tools but still provides some crazy good tools!
    </paragraph>
    <paragraph>
      Today, I would like to speak about
      <link href="http://developer.amd.com/GPU/TOOTLE/Pages/default.aspx">ATI Tootle</link>
      which is just the best mesh optimizer available, ways better than D3DXMesh optimization and
      <link href="http://developer.nvidia.com/object/nvtristrip_library.html">nVidia NvTriStrip</link>.
      It doesn't reduce the mesh quality, it just makes meshes a lot faster to render
      based on the last researches in this area!
    </paragraph>
    <list name="Which optimizations are applied to mesh with ATI Tootle?">
      <list-element>Vertex cache optimization. (Reduce vertex processing)</list-element>
      <list-element>Overdraw minimization. (Reduce fragment processing)</list-element>
      <list-element>Vertex prefetch cache optimization. (Reduce cache miss)</list-element>
    </list>
    <paragraph>
      When using indexed vertices, the vertices processed by a vertex shader are saved in a cache: the vertex cache. N (according the graphics chip) vertices are saved in this cache but after N different ones processed the first one is removed from the cache so we better have to use it again better it gets removed.
    </paragraph>
    <paragraph>
      Graphics chips have some mechanism to discard fragment based on fragment occlusion: Z-Cull, Early Z and of course Z tests. The sooner you discard fragments, the less processing you do and save some memory band wise (framebuffer writes).
    </paragraph>
    <paragraph>
      Finally, of course when there is cache miss; it's required to read it from the graphics memory...
    </paragraph>
    <paragraph>
      ATI Tootle provides 2 methods: A slow one that generates faster meshes and a fast one that generates shower (but still really fast!) meshes. Don't worry, it's going to be as fast on G-Force or PowerVR hardwares!
    </paragraph>
    <paragraph>
      One other really popular method for vertex cache optimization is the researsh results of Tom Forsyth: <link href="http://home.comcast.net/~tom_forsyth/papers/fast_vert_cache_opt.html">Linear-Speed Vertex Cache Optimisation</link>. There are some implementations available across the world.
    </paragraph>
    <paragraph>
      Images data are always twiddled or compressed in memory to optimize the texel fetches, cache miss, memory band wide... Meshes optimizations it more complicating but has useful! Getting your assets right provides fast rendering!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://developer.amd.com/GPU/TOOTLE/Pages/default.aspx" title="ATI Tootle web page" />
      <source-element type="Link" href="http://developer.amd.com/media/gpu_assets/Nehab-Triangle_Order_Optimization-SI3D06.pdf" title="EHAB, D. BARCZAK, J. SANDER, P.V. 2006. Triangle Order Optimization for graphics hardware computation culling" />
      <source-element type="Link" href="http://home.comcast.net/~tom_forsyth/papers/fast_vert_cache_opt.html" title="Tom Forsyth. 2006. Linear-Speed Vertex Cache Optimisation" />
      <source-element type="Link" href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=262530" title="OpenGL forum topic about vertex cache" />
    </source-list>
  </post>

  <post index="0179" date="02/09/2009" title="GLM optimization results" std-date="2009-09-02T09:00:00.00Z">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      GLM transformation functions take as a first parameter a matrix to transform by the transformation function.
      It could be not and simply build a transformation matrix to multiply after by this matrix.
      Because transformation matrix are filled with a lot of zeros, a dedicate implementation instead of
      the matrix product could be a lot more efficient.
    </paragraph>
    <paragraph>
      I get though all these optimisations and the results are as expected.
      'rotate' from ~900 cycles to ~675 cycles, translate from ~459 cycles to ~153 cycles and
      scale from ~432 cycles to ~126 cycles. On Q6600 FPU!
    </paragraph>
    <paragraph>
      Finally, I write the code specifically so that compiler could easily optimized it
      for SIMD instructions but obviously my next step is to write a SIMD version.
    </paragraph>
    <paragraph>
      Available for the next release!
    </paragraph>

  </post>

  <post index="0178" date="01/09/2009" title="My Google reader shared items" std-date="2009-09-01T09:00:00.00Z">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      I have been using RSS feed for a while now using google reader.
      It allows to share the item we want,
      I have added a link on G-Truc Creation if you want to follow my shared items.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.google.com/reader/shared/groovounet" title="My shared items" />
    </source-list>
  </post>

  <post index="0177" date="31/08/2009" title="OpenGL tip: Compressed textures" std-date="2009-08-31T17:00:00.00Z">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      Few days ago I was working on compressed textures and speaking with OpenGL community member I realized how tricky it could be. There are workaround that can help to make compressed textures work that shouldn't be used because there is no need!
    </paragraph>
    <list name="Workaround that shouldn't be used: ">
      <list-element>No need of glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP, GL_TRUE)</list-element>
      <list-element>No need of glGenerateMipmap(GL_TEXTURE_2D)</list-element>
      <list-element>No need of glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, ...)</list-element>
    </list>
    <paragraph>
      Like uncompressed textures, mipmaped compressed textures require that all mipmap levels be loaded, means until mipmap 1x1. However DXTC format is back on block of texel so how does it works for mipmaps that size is smaller than a block? These mipmaps are saved in a block of memory of the size of DXT block.
    </paragraph>
    <paragraph>
      Finally, using GL_COMPRESSED_RGB as an internal format when loading an uncompressed image use to give an awful result ... it's not the case anymore! It's always better to generate the compressed image offline but still what drivers do those day is good at least on nVidia side.
    </paragraph>

  </post>

  <post index="0176" date="26/08/2009" title="Matrix inverse integrated in Spin-X Engine" std-date="2009-08-26T20:00:00.00Z">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      Jarkko Lempiäinen, developer of the <link href="http://www.spinxengine.com">Spin-X Engine</link>,
      has ingregrated the SSE matrix inverse code I have released few weeks ago.
    </paragraph>
    <paragraph>
      Have a look at this engine, it looks very interesting!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.spinxengine.com" title="Spin-X Engine website" />
    </source-list>
  </post>

  <post index="0175" date="24/08/2009" title="Siggraph 2009 presentations" std-date="2009-08-24T20:00:00.00Z" picture="../logo/siggraph.png">
    <meta>
      <tag>gtc-tech-event</tag>
    </meta>

    <paragraph>
      Some really interesting Siggraph slides that have been released. Have a nice reading!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://s09.idav.ucdavis.edu/" title="Beyond Programmable Shading day slides" />
      <source-element type="Link" href="http://www.crytek.com/technology/presentations/" title="CryTek Light Propagation Volumes in CryEngine 3 presenatation" />
      <source-element type="Link" href="http://www.khronos.org/library/detail/siggraph-new-orleans-2009-opengl-bof-slides/" title="Khronos Group OpenGL BOF" />
      <source-element type="Link" href="http://www.khronos.org/library/detail/siggraph-new-orleans-2009-opencl-bof-slides/" title="Khronos Group OpenCL BOF" />
      <source-element type="Link" href="http://www.khronos.org/library/detail/siggraph-new-orleans-2009-collada-bof-slides/" title="Khronos Group Collada BOF" />
      <source-element type="Link" href="http://developer.nvidia.com/object/siggraph-2009.html" title="nVidia slides" />
    </source-list>
  </post>

  <post index="0174" date="12/08/2009" title="Matrix inverse with SSE instructions" std-date="2009-08-12T08:00:00.00Z">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      A while ago, I was speaking about my progress on GLM 0.8.4.0 development using SSE instructions to optimized some code.
    </paragraph>
    <paragraph>
      I published at <link href="http://www.devmaster.net">DevMaster.net</link>, the code source of a fast 4 by 4 matrix inverse and product.
    </paragraph>
    <paragraph>
      The result seams really interesting to me: 162 CPU cycles instead of 918 CPU cycles on a Core 2 Q6600 for the inverse. 63 cycles instead of 378 CPU cycles for the matrix product.
    </paragraph>
    <paragraph>
      A speed up by 5.66 times for the matrix inverse and by 6 times for the matrix product. Not bad?
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.devmaster.net/forums/showthread.php?p=69387#post69387" title=" The Code Gem" />
    </source-list>
  </post>

  <post index="0173" date="10/08/2009" title="GLM 0.8.3.5 released: Upgrade to GLSL 1.5" std-date="2009-08-10T20:00:00.00Z">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      Following the release of GLSL 1.5 specification few functions have been promoted to GLM core implementation: determinent and inverse (actually a GLSL 1.4 function). Some bugs have been fixed as well.
    </paragraph>
    <paragraph>
      GLM development progress have been quite slow these days but I hope to give some interesting feadback about GLM 0.8.4.x very soon.
    </paragraph>
    <paragraph>
      Update: GLM 0.8.3.5 is already released to fix a bug.
    </paragraph>

    <source-list>
      <source-download type="Download" index="997" />
    </source-list>
  </post>

  <post index="0172" date="07/08/2009" title="No more IE6" std-date="2009-08-07T20:00:00.00Z" picture="">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      An association of website has launched a website to spend the idea that Internet Explorer 6 must die. I can't agree more, I would even say IE must die.
    </paragraph>
    <paragraph>
      G-Truc Creation is joining this association so that if you visit G-Truc.net with IE6, you will see a message that invits you to use a more recent web browser.
    </paragraph>
    <paragraph>
      I'm personnaly using Chrome 2 most of the time, very fast and stable, on Windows; Safari 4 on Mac and sometime FireFox 3.5. I have been complaining for so long about web browser but these days we really have golden software so just use them!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.ie6nomore.com/" title="IE6 No more website" />
      <source-element type="Link" href="http://www.google.com/chrome" title="Chrome page" />
      <source-element type="Link" href="http://www.apple.com/safari/" title="Safari page" />
    </source-list>
  </post>

  <post index="0171" date="05/08/2009" title="AMD releases the first public OpenCL implementation for x86 CPUs" std-date="2009-08-05T20:00:00.00Z" picture="">
    <meta>
      <tag>gtc-tech-opencl</tag>
    </meta>

    <paragraph>
      I'm so annoying by nVidia marketing/communication methods. A good example is the release of drivers that people believed to be OpenGL 3.2 one ...  but it isn't! There are some features of OpenGL 3.2 but it's not OpenGL 3.2 drivers!
    </paragraph>
    <paragraph>
      With OpenCL, it's quite the same ... just an announcement effect because nVidia OpenCL implementation is not public... On the other hand AMD announced "AMD Delivers Industry’s First OpenCL™ Software Development Platform for x86 CPUs" and it is exactly what it is. I have been trying it, it build and run on my Core 2 CPU.
    </paragraph>
    <paragraph>
      Yes it's not for GPU yet, where the buzz is, but OpenCL for multicore CPUs which is actually as useful. I'm definetly waiting for a GPU implementation but until then I'm so going to have fun with OpenCL on my CPU!
    </paragraph>
    <paragraph>
      Nice release by AMD!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://developer.amd.com/GPU/ATISTREAMSDKBETAPROGRAM/Pages/default.aspx" title="AMD OpenCL download page" />
      <source-element type="Link" href="http://www.businesswire.com/portal/site/google/?ndmViewId=news_view&amp;newsId=20090804006502&amp;newsLang=en" title="AMD press release" />
    </source-list>
  </post>

  <post index="0170" date="03/08/2009" title="OpenGL 3.2 and GLSL 1.5 released at Siggraph!" std-date="2009-08-03T20:00:00.00Z" picture="">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
      <tag>gtc-tech-project-openglreviews</tag>
    </meta>

    <paragraph>
      Just like expected OpenGL 3.2 get released for Siggraph 2009! Three OpenGL specification within a year... A year ago the OpenGL community was really angry about the OpenGL 3.0 released at Siggraph 2008 then OpenGL 3.1 got released at GDC 2009 unexpectingly after 6 months and again with OpenGL 3.2 we roughtly wait 6 months ... impressive!
    </paragraph>
    <paragraph>
      Like with OpenGL 3.1, expect for GL_ARB_compatibility, I expect a good feedback from the developers. The amount of features is hudge and finally reach D3D 10.1 hardware if we include the new ARB extensions.
    </paragraph>
    <paragraph>
      The past few months we saw a lot of AMD extensions released and with this release I think we got the confirmation of the full involvment of AMD for OpenGL. AMD contributions are everywhere with these releases and I actually wonder if they were more active than nVidia ... I'm really considering the RV870 to become my main development card when released!
    </paragraph>
    <paragraph>
      Let's go to the main subject, the features of OpenGL 3.2, GLSL 1.5 and the new extensions! <link href="http://www.opengl.org/registry/specs/ARB/geometry_shader4.txt">Geometry shaders</link> are now part of OpenGL 3.2 core ... I'm still really septic about this choice, I'm waiting for next hardware generation (RV870 and GT300) to give me wrong.
    </paragraph>
    <paragraph>
      For me the big new feature for this release is <link href="http://www.opengl.org/registry/specs/ARB/sync.txt">synchronization objects</link>. This extension aimed to get more control than just glClear and glFinish during the commands list execusion, it provides a more accurate synchronization between the CPU and the GPU, between OpenGL contexts and between OpenGL and OpenCL.
    </paragraph>
    <paragraph>
      A main topic for these release is the interoperability with other APIs, especially Direct3D. <link href="http://www.opengl.org/registry/specs/ARB/vertex_array_bgra.txt">GL_ARB_vertex_array_bgra</link> which provides a similar image format than Direct3D DXGI_FORMAT_B8G8R8A8_UNORM. <link href="http://www.opengl.org/registry/specs/ARB/fragment_coord_conventions.txt">GL_ARB_fragment_coord_conventions</link> allows to use framebuffer coordinate with (0, 0) on the upper left corner like X11, Direct3D or GDI. <link href="http://www.opengl.org/registry/specs/ARB/provoking_vertex.txt">GL_ARB_provoking_vertex</link> allows to choose the provoking vertex convention either like Reality Lab and Direct3D (first vertex) or OpenGL (last vertex). All these features are the direct thoughput of the recent increase of involvement of the gaming industrie within the ARB to help cross platform development. Very nice for us developers and I wish to sew the gaming industrie contribution to keep growing in the future. Let's note a new extension released on nVidia website, <link href="http://developer.download.nvidia.com/opengl/specs/GL_EXT_separate_shader_objects.txt">GL_EXT_separate_shader_objects</link>, which allows separating programs per stage like Cg and HLSL.
    </paragraph>
    <paragraph>
      Other nice features from the gaming industrie is this <link href="http://www.opengl.org/registry/specs/ARB/draw_elements_base_vertex.txt">GL_ARB_draw_elements_base_vertex</link>. It allows drawing several meshes from a single set of vertex buffers using the same element array. It will reduces the memory and the penality of binding a buffer especially in cases where instancing is used. A must use feature!
    </paragraph>
    <paragraph>
      Other main topic is deferred shading. I think it is the future of many rasterizer based graphics engine and I'm sure that we are going to see many progress on that side just because all the knowledge gaps haven't been filled yet. New ARB extensions make OpenGL reaching D3D 10.1 hardware level. <link href="http://www.opengl.org/registry/specs/ARB/texture_multisample.txt">GL_ARB_texture_multisample</link> to access to sample values, <link href="http://www.opengl.org/registry/specs/ARB/sample_shading.txt">GL_ARB_sample_shading</link> to force the processing of a minimum number of samples per fragment to reduce antialising, <link href="http://www.opengl.org/registry/specs/ARB/draw_buffers_blend.txt">GL_ARB_draw_buffers_blend</link> which extends <link href="http://www.opengl.org/registry/specs/EXT/draw_buffers2.txt">GL_EXT_draw_buffers2</link> with per rendertarget functions and equations. <link href="http://www.opengl.org/registry/specs/EXT/texture_gather.txt">GL_ARB_texture_gather</link> provides an equivallent to the Direct3D 10.1 gather4 instruction to fetch 4 texels components from 4 different texel in one call for soft shadow and some post processing effects.
    </paragraph>
    <paragraph>
      Again, we have these features that we didn't expect to see anymore in the OpenGL core even if everyone use it. <link href="http://www.opengl.org/registry/specs/ARB/depth_clamp.txt">GL_ARB_depth_clamp</link> which allows line and polygon primitives to be rasterized without clipping the primitive to the near or far clip volume planes like it is really useful with stencil shadow valumes. <link href="http://www.opengl.org/registry/specs/ARB/seamless_cube_map.txt">GL_ARB_seamless_cube_map</link> allows the implementation to access adjacent cube map faces for the filtering and <link href="http://www.opengl.org/registry/specs/ARB/texture_cube_map_array.txt">GL_ARB_texture_cube_map_array</link> provides D3D10.1 cube map arrays.
    </paragraph>
    <paragraph>
      Finally, an exciting extension I have discored like a new concept to study: <link href="http://www.opengl.org/registry/specs/ARB/texture_query_lod.txt">GL_ARB_texture_query_lod</link>. This extension allows to get the LOD that would have been used for a texture fetch. This would make possible a per fragment LOD, like we could choose a lighting algorithm more or less accurate according this LOD value... I'm quite afraid of flickering if we do so but there is definitly something to explore here.
    </paragraph>
    <paragraph>
      To conclude, I'm fairly happy with this new release and I'm wondering when are we going to see the next OpenGL release. It feels like OpenGL is evolution is quicker than the hardware which is actually required to keep OpenGL as an effective graphics API. My wish is to see some progress on the bindless API for OpenGL 3.3 at GDC 2010 and a Direct3D 11 level for OpenGL 3.4 (4.0?) at Siggraph 2010. Fingers crossed!
    </paragraph>
    <paragraph>
      Don't forgot that Siggraph is on and the Khronos Group is going to hold a BOF for OpenCL tomorrow and a BOF for OpenGL on Wednesday! It can't be missed!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.opengl.org/registry/doc/glspec32.core.20090803.withchanges.pdf" title="OpenGL 3.2 core specification" />
      <source-element type="Link" href="http://www.opengl.org/registry/doc/GLSLangSpec.1.50.09.withchanges.pdf" title="GLSL 1.50 core specification" />
      <source-element type="Link" href="http://www.opengl.org/registry" title="OpenGL registry" />
      <source-element type="Link" href="http://www.khronos.org/news/events/detail/siggraph_2009_new_orleans/" title="Khronos Group BOF schedule" />
    </source-list>
  </post>

  <post index="0169" date="24/07/2009" title="OpenGL 3.2 at Siggraph 2009?" std-date="2009-07-23T20:00:00.00Z" picture="">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
    </meta>

    <paragraph>
      I was thinking for a while: "Would it be possible to see OpenGL 3.2 at Siggraph 2009?" <link href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=261130#Post261130">A news</link> seams to say that it might be possible.
    </paragraph>
    <paragraph>
      What to expect for this version? Not much leaks yet which make me beleave that we can't expect more that an announcement for Siggraph 2009.
    </paragraph>
    <paragraph>
      The ARB have been really active lately and the number of extensions released is a great proof of it.
    </paragraph>
    <paragraph>
      I don't think we will get a lot of new features. Maybe, one big new feature would be shader binary. There is already an <link href="http://www.khronos.org/registry/gles/extensions/OES/OES_get_program_binary.txt">extension</link> for OpenGL ES, it's about time to bring this feature to OpenGL.
    </paragraph>
    <paragraph>
      Lot of extensions could be promoted, <link href="http://www.opengl.org/registry/specs/EXT/vertex_array_bgra.txt">GL_EXT_vertex_array_bgra</link>, <link href="http://www.opengl.org/registry/specs/EXT/texture_swizzle.txt">GL_EXT_texture_swizzle</link>, <link href="http://www.opengl.org/registry/specs/EXT/texture_filter_anisotropic.txt">GL_EXT_texture_filter_anisotropic</link>. Considering the fact that both ATI and nVidia implement the new <link href="http://www.opengl.org/registry/specs/EXT/provoking_vertex.txt">GL_EXT_provoking_vertex</link>, I also expect this extension. Hopefully it will be all this and more!
    </paragraph>
    <paragraph>
      I expect one thing: nVidia public release of its OpenCL implementation... and I can't wait!!!
    </paragraph>

  </post>

  <post index="0168" date="22/07/2009" title="6 lens from 10mm to 300mm" std-date="2009-07-22T20:00:00.00Z">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>

    <paragraph>
      My equipment starts to look like very nice even if I'm still dreaming of a Canon 5D MKII. By now, I have 6 lenses for every use and I don't plan to buy some more soon ... the next target is the 5D MKII!
    </paragraph>
    <paragraph>
      My first lens is a <link href="http://www.dpreview.com/lensreviews/canon_18-55_3p5-5p6_is_c16">Canon EF-S 18-55mm F/3.5-5.6 IS</link>. It's an ok lens sold as a kit with my Canon 450D. I don't think that I'm going to use it anymore actually because my others lenses overlap its uses with higher quality.
    </paragraph>
    <paragraph>
      My second lens is a <link href="http://www.the-digital-picture.com/Reviews/Canon-EF-70-300mm-f-4-5.6-IS-USM-Lens-Review.aspx">Canon EF 70-300mm F/4.0-5.6 USM IS</link>. Very good price for the quality, I'm using it mainly for animal pictures, portrait when far from the subject. I bought it right after I bought my camera and did my first macro pictures because of the nice depth of field but require to be at 1.5m minimum to take the pictures.
    </paragraph>
    <paragraph>
      My third lens is a <link href="http://www.the-digital-picture.com/Reviews/Canon-EF-50mm-f-1.4-USM-Lens-Review.aspx">Canon EF 50mm F/1.4 USM</link>. I become in love with fixed focal lenses with this one. The use of fixed focal lenses bring life to picture because it implies that the protographer need to be more dynamic. The large aperture brings such a nice depth of field blur. Very nice for low light.
    </paragraph>
    <paragraph>
      My forth lens is a <link href="http://www.the-digital-picture.com/Reviews/Canon-EF-28mm-f-1.8-USM-Lens-Review.aspx">Canon EF 28mm F/1.8 USM</link>. I use it for full portrait pictures or two persons portraits pictures. The apperture is very nice for low light and the focal makes it great in house lens.
    </paragraph>
    <paragraph>
      My fifth is a <link href="http://www.the-digital-picture.com/Reviews/Canon-EF-100mm-f-2.8-USM-Macro-Lens-Review.aspx">Canon EF 100mm F/2.8 USM</link>. My macro lens... 100mm at F/2.8, that a crazy beautyful depth of field! Despite the USM motor, autofocus is quite slow so the subject better not to move too much. Pictures are very sharped with a minimum focus distance at 31cm, perfect for great macro pictures!
    </paragraph>
    <paragraph>
      Mu sixth is a <link href="http://www.the-digital-picture.com/Reviews/Canon-EF-S-10-22mm-f-3.5-4.5-USM-Lens-Review.aspx">Canon EF-S 10-22mm F/3.5-4.5 USM</link>. My very wide angle lens, many for landscapes! It can be used for fish-eyes portrait. The only issue with this lens is that it can't be used on full frame camera like every EF-S lenses ...
    </paragraph>
    <paragraph>
      With a <link href="http://www.the-digital-picture.com/Reviews/Canon-580EX-II-Speedlite-Flash-Review.aspx">Canon Speedlite 580EX</link> flash, an Opteka Battery Pack Grip and other accessories, it makes me a happy photographer!
    </paragraph>
    <paragraph>
      I did a little experiment using all my lenses taking pictures for the same positions to show the effect of the focal distance.
    </paragraph>
    <paragraph>
      50 000 pictures later, my passion for experimenting with photography is still on and lot of new projects are on they way! There is never enought photography projects so if you have some ideas and topics for me, just let me know!
    </paragraph>

    <image-list>
      <image-element title="10mm" small="http://lh4.ggpht.com/_bpz9rGNwhX4/SmTrexPkWAI/AAAAAAAADWc/dnXasQLrQrI/s144/016.JPG" normal="http://picasaweb.google.com/lh/photo/CCdbWQRHTie65H9up30k9w?feat=embedwebsite" />
      <image-element title="22mm" small="http://lh4.ggpht.com/_bpz9rGNwhX4/SmTrd91AnRI/AAAAAAAADWY/BW_Q82jid8c/s144/015.JPG" normal="http://picasaweb.google.com/lh/photo/zCVkhek_RtXR57-0qWfCjw?feat=embedwebsite" />
      <image-element title="28mm" small="http://lh3.ggpht.com/_bpz9rGNwhX4/SmTrafG5PWI/AAAAAAAADWM/Xs9vSpMMJRU/s144/009.JPG" normal="http://picasaweb.google.com/lh/photo/FdhOqpler-gLvXzUw7WGMw?feat=embedwebsite" />
      <image-element title="50mm" small="http://lh6.ggpht.com/_bpz9rGNwhX4/SmTrZRqUY1I/AAAAAAAADWI/EZvm4sC8Mks/s144/008.JPG" normal="http://picasaweb.google.com/lh/photo/sdE0Zj31OADGZxLXO_Bi9g?feat=embedwebsite" />
      <image-element title="100mm" small="http://lh3.ggpht.com/_bpz9rGNwhX4/SmTrYFt-QGI/AAAAAAAADWA/TZ360xsr6mA/s144/007.JPG" normal="http://picasaweb.google.com/lh/photo/gCeLkmn_3JWOomRlezfZqw?feat=embedwebsite" />
      <image-element title="300mm" small="http://lh5.ggpht.com/_bpz9rGNwhX4/SmTrWAlkPII/AAAAAAAADV4/LobOHoPD4eY/s144/005.JPG" normal="http://picasaweb.google.com/lh/photo/tmjMs07IaHr64AOsTfzEbQ?feat=embedwebsite" />
    </image-list>
    <source-list>
      <source-element type="Link" href="http://picasaweb.google.com/groovounet/Focal" title="My pictures of my experiment of 6 lens from 10mm to 300mm" />
    </source-list>
  </post>

  <post index="0166" date="17/06/2009" title="iPhone 3GS" std-date="2009-06-17T20:00:00.00Z" picture="./0166-main.jpg">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      During the Apple WorldWide Developers Conference (WWDC), the new iPhone 3GS have been announced.
    </paragraph>
    <paragraph>
      From the user point of view, not much new. It is faster but the iPhone 3G seams quite fast to me.
    </paragraph>
    <paragraph>
      From the programmer point of view, it's a big change! The PowerVR MBX have been replaced by the PowerVR SGX which implies the support of OpenGL ES 2.0 instead of OpenGL ES 1.1.
    </paragraph>
    <paragraph>
      OpenGL ES 2.0 brings a fully programmable approach, a big step, and a lot more fun to program!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.anandtech.com/gadgets/showdoc.aspx?i=3579&amp;p=1" title="A great article from AnandTech" />
    </source-list>
  </post>

  <post index="0165" date="09/06/2009" title="Küken becomes 3D!" std-date="2009-06-09T20:00:00.00Z" picture="./0165-main.jpg">
    <meta>
      <tag>gtc-tech-project-kueken</tag>
    </meta>

    <paragraph>
      I'm currently having a lot of fun learning how to use 3DS max! This is my first interesting results in modeling.
    </paragraph>
    <paragraph>
      The texturing needs to be really improved to make the mesh more real time 3D software complient but I still don't know how to do this. For the hair it's quite the same issue, I hope to find sonething nice foe the rendering. On the good side, I made great progress on the skeleton animation side! :)
    </paragraph>
    <paragraph>
      This model will be perfect to feature the Küken engine!
    </paragraph>

    <image-list>
      <image-element title="Küken 3D" small="./post/0165-1-normal.jpg" normal="./post/0165-1-normal.jpg" />
      <image-element title="Küken 3D" small="./post/0165-2-normal.jpg" normal="./post/0165-2-normal.jpg" />
    </image-list>
  </post>

  <post index="0164" date="02/06/2009" std-date="2009-06-02T20:00:00.00Z" title="Photography Contest by Google and the Saatchi Gallery" picture="">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>
    <album title="Another perception">
      <summary>London 2009</summary>
      <fullscreen>http://picasaweb.google.co.uk/groovounet/TheGooglePhotographyPrizeExtra#slideshow</fullscreen>
      <slide width="800" height="533" href="host=picasaweb.google.co.uk&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=http%3A%2F%2Fpicasaweb.google.co.uk%2Fdata%2Ffeed%2Fapi%2Fuser%2Fgroovounet%2Falbumid%2F5342032669998710577%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" />
      <comment>http://www.g-truc.net</comment>
      <preview
        pic144="http://lh5.ggpht.com/_bpz9rGNwhX4/SiK2afJR_QI/AAAAAAAAClo/q8gj96jmWWY/s144/051.JPG"
        pic288="http://lh5.ggpht.com/_bpz9rGNwhX4/SiK2afJR_QI/AAAAAAAAClo/q8gj96jmWWY/s288/051.JPG"
        pic400="http://lh5.ggpht.com/_bpz9rGNwhX4/SiK2afJR_QI/AAAAAAAAClo/q8gj96jmWWY/s400/051.JPG"
        pic800="http://lh5.ggpht.com/_bpz9rGNwhX4/SiK2afJR_QI/AAAAAAAAClo/q8gj96jmWWY/s800/051.JPG" />
    </album>

    <paragraph>
      Google and the London Saatchi Gallery organize a photography contest based on iGoogle themes. Each photographer need to submit 5 pictures that would be used to create iGoogle theme.
    </paragraph>
    <paragraph>
      I submit my set of picture for with it my first photography contest. I created 5 pictures featuring my little Küken has main character display in a very positive wait, Küken presenting someking of world beauties with a tentative of added emotional values inspired by painter: Monet and Rothko.
    </paragraph>
    <paragraph>
      I hope you like it that my experiment will be selected in the 26 best set shortlist. The five best set of pictures will be display at the Saatchi Gallery and the winning win £5000!
    </paragraph>
    <paragraph>
      If I win, I'll buy a Canon 5D MKII! :D
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://picasaweb.google.com/groovounet/TheGooglePhotographyPrizeExtra" title="My Google Photography Contest Link" />
    </source-list>
    <image-list>
      <image-element title="Photography Contest" small="./post/0164-1-small.jpg" normal="http://picasaweb.google.com/groovounet/TheGooglePhotographyPrizeExtra#5342032674168110338" />
      <image-element title="Photography Contest" small="./post/0164-2-small.jpg" normal="http://picasaweb.google.com/groovounet/TheGooglePhotographyPrizeExtra#5342032677646928626" />
      <image-element title="Photography Contest" small="./post/0164-3-small.jpg" normal="http://picasaweb.google.com/groovounet/TheGooglePhotographyPrizeExtra#5342032678221481186" />
      <image-element title="Photography Contest" small="./post/0164-4-small.jpg" normal="http://picasaweb.google.com/groovounet/TheGooglePhotographyPrizeExtra#5342032684664114930" />
      <image-element title="Photography Contest" small="./post/0164-5-small.jpg" normal="http://picasaweb.google.com/groovounet/TheGooglePhotographyPrizeExtra#5342032692121120914" />
    </image-list>
  </post>

  <post index="0163" date="14/05/2009" title="GLM 0.8.4.0: work in progress" std-date="2009-05-14T23:30:00.00Z">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      GLM 0.8.3.0 have been released a week ago and provides the first GTC stable extensions.
    </paragraph>
    <paragraph>
      However, GLM 0.8.4.0 development have been started for a while and should finally provides some SSE optimisations! It's been a while since I started to experiment with SSE first with intrinsics then with asm (so much fun!) and I finally came back to intrinsics when asm became deprecated by x86-64.
    </paragraph>
    <paragraph>
      I have not idea the extra form the implementation is going to have, so far I have a vec4 and mat4 types and a lot of functions which extend intrinsic functions. I think, the first release while be limited to SSE (and SEE2?) but I expect to take advantage of SSE3 and upper versions thought VC9 intrinsics in the future.
    </paragraph>
    <paragraph>
      When it's going to be released? I'm sure plenty of GLM 0.8.3 patch versions would be released before it happens.
    </paragraph>
    <paragraph>
      Any idea on this topic? Thanks for sharing!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
    </source-list>
  </post>

  <post index="0162" date="05/05/2009" title="Boost 1.39.0: Signals2" std-date="2009-05-05T23:00:00.00Z">
    <meta>
      <tag>gtc-tech-devel-cpp</tag>
    </meta>

    <paragraph>
      Boost 1.39.0 gets released and provides an amazing new library: Signals 2. It is basically a thread safe version of Signals library.
    </paragraph>
    <paragraph>
      My heart stops a second ... o you actually realise the potential for a multithreaded 3D software? There are lot of chances that this is not going be efficient but for some cases it could be just the right solution.
    </paragraph>
    <paragraph>
      For example, what's about a user interface of a 3D software that would run an independent thread for the UI and send messages about where an object is created, moved, edit, etc. to a main thread. Sound definetely good to me!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.boost.org" title="Boost website" />
    </source-list>
  </post>

  <post index="0161" date="21/04/2009" std-date="2009-04-21T20:00:00.00Z" title="Gerhard Richter at the London National Portrait Gallery" picture="0161-main.jpg">
    <meta>
      <tag>gtc-crea-exhibition</tag>
    </meta>

    <paragraph>
      Gerhard Richter is German painter born in Dresden in 1932. His perception of portrait was very unconventional.
    </paragraph>
    <quote>
      "I don't think the painter need either see or know the sitter. A portrait must not express anything of the sitter's 'soul', essence or character"
    </quote>
    <paragraph>
      This is so far from the practice of photographer usually use posing, dressing, environment, etc. to reflect something depth or more personal from the sitter, Richter was resisting interpretation:
    </paragraph>
    <quote>
      "You realise that you can't represent reality at all - that what you make represents nothing but itself, and therefore is itself reality"
    </quote>
    <paragraph>
      He explored techniques to stop tentative of any perception.
    </paragraph>
    <paragraph>
      The National Portrait Gallery in London display an exhibition of 48 Gerhard Richter portraits until May 31th 2009.
    </paragraph>
    <paragraph>
      Inspired by Gerhard Richter ideas, I didn't some experiments based on casual situation, casual pictures.
    </paragraph>

    <image-list>
      <image-element title="Nothing but itself" small="./post/0161-1-small.jpg" normal="http://picasaweb.google.com/groovounet/NothingButItself#5327108393281973474" />
      <image-element title="Nothing but itself" small="./post/0161-2-small.jpg" normal="http://picasaweb.google.com/groovounet/NothingButItself#5327108436896821714" />
      <image-element title="Nothing but itself" small="./post/0161-3-small.jpg" normal="http://picasaweb.google.com/groovounet/NothingButItself#5327109562824546466" />
      <image-element title="Nothing but itself" small="./post/0161-4-small.jpg" normal="http://picasaweb.google.com/groovounet/NothingButItself#5327109570140467666" />
      <image-element title="Nothing but itself" small="./post/0161-5-small.jpg" normal="http://picasaweb.google.com/groovounet/NothingButItself#5327109616613061986" />
      <image-element title="Nothing but itself" small="./post/0161-6-small.jpg" normal="http://picasaweb.google.com/groovounet/NothingButItself#5327110031362706114" />
    </image-list>
    <source-list>
      <source-element type="Link" href="http://www.npg.org.uk:8080/richter/index.htm" title="The exhibition page" />
      <source-element type="Link" href="http://en.wikipedia.org/wiki/Gerhard_Richter" title="Gerhard Richter Wikipedia page" />
      <source-element type="Link" href="http://picasaweb.google.com/groovounet/NothingButItself" title="My photography experiment: Nothing but itself" />
    </source-list>
  </post>

  <post index="0160" date="20/04/2009" std-date="2009-04-20T20:00:00.00Z" title="IAMX in tour" picture="0160-main.jpg">
    <meta>
      <tag>gtc-crea-content</tag>
    </meta>

    <paragraph>
      IAMX is the project of <link href="http://en.wikipedia.org/wiki/Chris_Corner">Chris Corner</link> also member of the band <link href="http://en.wikipedia.org/wiki/Sneaker_Pimps">Sneaker Pimps</link>, a british trip-hop band.
    </paragraph>
    <paragraph>
      With IAMX, Chris Corner explores an energetic electronic based music to deal with darkness, eroticism and decadence.
    </paragraph>
    <paragraph>
      The first album 'Kiss + Swallow (2004)' sound like free electro with a Chris Corner voice display on front which gives a Pop side to this album. The second album released in 2006 in Europe, "The Alternative", provides a more accessible music for most but maybe more balanced. Fortunately, the whole potential of IAMX is unleashed in Live which almost make the albums seem plain after while!
    </paragraph>
    <paragraph>
      IAMX has started a tour in this US and in Europe where they played in London last yesterday, in Paris on Wednesday, in Berlin on Saturday and a lot more dates all over Europe soon! I show that should not be missed by any amateur of good electronic and trip-hop music!
    </paragraph>
    <paragraph>
      Finally, the third album, 'Kingdom of Welcome Addiction', is going to be release on May 18th and a first song 'Think of England' is available on IAMX myspace page.
    </paragraph>

    <image-list>
      <image-element title="IAMX at Koko" small="./post/0160-1-small.jpg" normal="http://picasaweb.google.com/groovounet/IAMX#5326906589731034434" />
      <image-element title="IAMX at Koko" small="./post/0160-2-small.jpg" normal="http://picasaweb.google.com/groovounet/IAMX#5326906602271531042" />
      <image-element title="IAMX at Koko" small="./post/0160-3-small.jpg" normal="http://picasaweb.google.com/groovounet/IAMX#5326906609040916994" />
      <image-element title="IAMX at Koko" small="./post/0160-4-small.jpg" normal="http://picasaweb.google.com/groovounet/IAMX#5326906624855472066" />
      <image-element title="IAMX at Koko" small="./post/0160-5-small.jpg" normal="http://picasaweb.google.com/groovounet/IAMX#5326906630804362514" />
      <image-element title="IAMX at Koko" small="./post/0160-6-small.jpg" normal="http://picasaweb.google.com/groovounet/IAMX#5326906644998935154" />
    </image-list>
    <source-list>
      <source-element type="Link" href="http://www.myspace.com/iamx" title="Myspace page" />
      <source-element type="Link" href="http://iamx.eu" title="IAMX Website" />
    </source-list>
  </post>

  <post index="0159" date="16/04/2009" std-date="2009-04-16T23:00:00.00Z" title="OpenGL Extensions Viewer 3.12 released" picture="">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      OpenGL Extensions Viewer (glView) is one of my favorite free development tool that I use really often.
      It gives information about the OpenGL features supported by your hardware
      but it also provides a large database with all graphics cards and the extensions they support.
    </paragraph>
    <paragraph>
      Try it and adopt it!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.realtech-vr.com/glview/download.html" title="Download page" />
    </source-list>
  </post>

  <post index="0158" date="14/04/2009" std-date="2009-04-14T23:00:00.00Z" title="Küken 0.1.0.0 released" picture="0158-main.jpg">
    <meta>
      <tag>gtc-tech-project-kueken</tag>
    </meta>

    <paragraph>
      A first release of Küken is finally available! This version should be considered as an Alpha version.
    </paragraph>
    <paragraph>
      Küken is an <link href="http://www.opengl.org/registry/doc/glspec30.20080811.withchanges.pdf">OpenGL 3.0</link> + extensions renderer. It is build with a very programmable approach and aims GeForce 8 and beyond. It hasn't been tested on Radeon cards yet so nothing sure with sure platform. However all the extensions used by Küken are supported on Radeon cards which should make it portable quite quickly.
    </paragraph>
    <paragraph>
      It supports offscreen rendering with multisampling, geometry instancing, render 2 buffer, queries and conditional rendering, uniform buffer (Through <link href="http://www.opengl.org/registry/specs/EXT/bindable_uniform.txt">GL_EXT_bindable_uniform</link> currently), etc...
    </paragraph>
    <paragraph>
      It is a low level library where all features are exposed as objects of the rendering pipeline (rasterizer, blend, program, rendertarget, etc.). This design aims allowing effect files, sorting, efficient multithreading and portability to D3D10/11.
    </paragraph>
    <paragraph>
      For higher level features the idea is to create others projects to keep packages tiny. Possible futur projects would be a FX system, a multithreaded tasks ans communications system, a geometry optimization library, a scene graph ... Not much done yet but the FX system should be first available, it will make easier my test process.
    </paragraph>
    <paragraph>
      Küken exposes almost all programmable and not deprecated <link href="http://www.opengl.org/registry/doc/glspec30.20080811.withchanges.pdf">OpenGL 3.0</link> features but there is still a lot of tests to do check everything. The next step is <link href="http://www.opengl.org/registry/doc/glspec31.20090324.pdf">OpenGL 3.1</link> and especially <link href="http://www.opengl.org/registry/specs/ARB/uniform_buffer_object.txt">GL_ARB_uniform_buffer_object</link>.
    </paragraph>
    <paragraph>
      The project is managed using <link href="http://www.cmake.org">CMake</link>, coded in C++ and use <link href="http://glm.g-truc.net">GLM</link> and GLI but have been tested only on Visual C++ 8.0 yet.
    </paragraph>

    <source-list>
      <source-download index="996" />
    </source-list>
  </post>

  <post index="0157" date="08/04/2009" std-date="2009-04-08T20:00:00.00Z" title="Canon EF 70-300mm f4-5.6 IS USM" picture="0157-main.jpg">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>

    <paragraph>
      Last week I recieved a new toy to enjoy some picture sessions: A Canon EF 70-300mm f4-5.6 IS USM lens. I'm so pleased with it!
    </paragraph>
    <paragraph>
      Following my picture inpirations, I enjoy to much the perfectly smooth and soft blur is can produce. So much stronger to much deep that the one produce by my Canon EF-S 18-55mm f/3.5-5.6 IS Lens!
    </paragraph>
    <paragraph>
      Second crazy amazing feature, the USM motor used for the autofocus. So accurate and so fast! However, one issue is the desperate need of lights of this lens which evolved some trouble to focalize in such condion. I have also notice some trouble to focalize when lighting is really to strong (like taking a picture of the sun).
    </paragraph>
    <paragraph>
      This lens is stabilize with two different modes: The first mode is the classic full stabilization mode for none moving subject. The second mode is a vertical or horitonal stabilization which allow to move the camera when taking a picture of a moving subject for example. It's a really nice feature for wildlife or sport pictures.
    </paragraph>
    <paragraph>
      I'm really happy with this lens with is also perfect for my macro picture with 300mm lens techniques. It needs to take pictures at 2 meters from the subject but the blur is so nice and the picture quite shape for such lens.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.dpreview.com/news/0508/05082207canonlenses.asp#press70" title="dpreview review" />
      <source-element type="Link" href="http://www.the-digital-picture.com/Reviews/Canon-EF-70-300mm-f-4-5.6-IS-USM-Lens-Review.aspx" title="The Digital Picture review" />
    </source-list>
    <image-list>
      <image-element title="Canon EF 70-300mm f4-5.6 IS USM picture" small="./post/0157-1-small.png" normal="http://upload.wikimedia.org/wikipedia/commons/7/76/Canon_EF_70-300mm.jpg" />
    </image-list>
  </post>

  <post index="0156" date="03/04/2009" std-date="2009-04-03T10:00:00.00Z" title="RSS feed updated and fixed" picture="">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      I fixed the RSS feed of G-Truc Creation so that it finally works on Google Reader.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.g-truc.net/rss.xml" title="G-Truc Creation RSS feed" />
    </source-list>
  </post>

  <post index="0155" date="01/04/2009" std-date="2009-04-01T09:00:00.00Z" title="GLM 0.8.2.3 released" picture="">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      A new update of GLM is available.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
    </source-list>
  </post>

  <post index="0154" date="28/03/2009" std-date="2009-03-28T01:00:00.00Z" title="GLI 0.1.0.0 released" picture="">
    <meta>
      <tag>gtc-tech-project-gli</tag>
    </meta>

    <paragraph>
      OpenGL Image (GLI) is a "new" C++ project I'm working on mostly based on old image code.
    </paragraph>
    <paragraph>
      It allows to load images (DDS and TGA), save images (TGA), to apply few image operations (flip, mirror) and manipulate image data (duplicate, crop, copy part of images and generate mipmaps), etc.
    </paragraph>
    <paragraph>
      This is still the beginning of the project, the API may change, bugs could occure and obviously features are still very limited.
    </paragraph>
    <paragraph>
      For the future of this project, I would like to add feature like arthmetic operations, blending, trilinear filtering, blitting, rotations, various color operations, compression and so on.
      Also, I expect to provide some quite of OpenCL support ...
    </paragraph>
    <paragraph>
      A lot of work is still needed, there is not even any documentation but it is already quite useful in a combined use with OpenGL for textures. This is kind of a preview so any feedback will be much appreciated!
    </paragraph>
    <paragraph>
      GLI requires <link href="http://www.g-truc.net">GLM</link> and <link href="http://www.boost.org">Boost</link> to build. This first release has been tested only with Visual Studio 8.0.
    </paragraph>

    <source-list>
      <source-download index="995" />
    </source-list>
  </post>

  <post index="0153" date="26/03/2009" std-date="2009-03-26T02:00:00.00Z" title="Canon EOS 500D announced" picture="">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>

    <paragraph>
      I have just bought my Canon EOS 450D and Canon already announced this Canon EOS 500D ... how unfortunate. It's not suposed to replace the Canon EOS 450D but reach a little bit higher gamme to compete with the Nikon D90.
    </paragraph>
    <paragraph>
      Well sound like theory but for sure it makes a better competitor to the Nikon D90 because like this camera for Nikon, it is the first camera to bring video recording for a Canon advanced amator camera ... A feature I would love to have to my camera!
    </paragraph>
    <paragraph>
      It can record at 30 FPS in HD720 and 20 FPS in HD1080. Quite impressive even if this type of camera is not likely going to make you film an amazing movie! It could be a great fun of experimenting!
    </paragraph>
    <paragraph>
      Like the Canon EOS 450D, it is very light for a camera of this quality thanks to the use of plastic body material. One big advantage over Nikon camera for my point of view even if it doesn't look as good. It is still sold with the good generic 18-55 IS lens within a kit.
      However, it gets the 15MP sensor of the 50D which allow the video mode and a better 640*480 screen.
      It also extended the ISO range to 3200 which can be expanded to ISO 12800.
    </paragraph>
    <paragraph>
      Not actually much for this new camera ... expect this video mode! Well, I'm still happy with my lovely 450D :)
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.dpreview.com/news/0903/09032504canoneos500d.asp" title="dpreview previous" />
    </source-list>
  </post>

  <post index="0152" type="graphics-opengl" date="25/03/2009" std-date="2009-03-25T20:00:00.00Z" title="OpenGL 3.1 released at GDC 2009!" picture="">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
      <tag>gtc-tech-project-openglreviews</tag>
    </meta>

    <paragraph>
      Such an unexpected event! <link href="http://www.opengl.org/registry/doc/glspec31.20090324.pdf">OpenGL 3.1</link> and <link href="http://www.opengl.org/registry/doc/GLSLangSpec.Full.1.40.05.pdf">GLSL 1.4</link> got released at <link href="http://www.gdconf.com/">GDC 2009</link>.
      I was actually expecting it for <link href="http://www.siggraph.org/s2009">Siggraph 2009</link> as usual but the ARB releases OpenGL 3.1 really fast this time!
      The amount of work is however quite significant and I'm going to present some aspects of it.
    </paragraph>
    <paragraph title="What about the deprecated features? ">
      Two specifications are actually availabled.
      One specification with all the deprecated features included and one specification with some deprecated features removed.
      For the books, the specification with the deprecated features are the speficiation without the deprecated features plus the extension <link href="http://www.opengl.org/registry/specs/ARB/compatibility.txt">GL_ARB_compatibility</link>.
      Obviously, isn't it? This is quite a shift according what was initially planned with the WGL_CONTEXT_FLAGS of <link href="http://www.opengl.org/registry/specs/ARB/wgl_create_context.txt">WGL_ARB_create_context</link>.
      nVidia is completely against the idea of removing the deprecated features so basically in the drivers nothing is going to change for a while.
      nVidia claims the idea that they want to keep them, that their customers need these features, which is true but which doesn't simplify the developer work and a good pratice learning process.
      I wrote "some deprecated features removed". I'm not exactually sure of what was deprecated.
      I thought triangle fan were but they are still part of OpenGL 3.1 specifications ... It's the kind of feature I would have enjoy to see going away!
      <link href="http://www.opengl.org/registry/specs/NV/primitive_restart.txt">GL_NV_primitive_restart</link> might give a second life for strips ans fans.
      In other hand, display list are deprecated ... and I'm not really happy about it.
      They are still very useful to me to create immutable objects for OpenGL states.
      There is no other feature to do so.
      However, I think that display list become more and more complicate to use because lot of extensions doesn't allow to register some functions in the display list ...
      I would enjoy some immutable states objects or so for those or individual object groups. Blend object, test object, rasterizer object, etc.
      I'm actually wondering how the ARB expect to manage deprecated feature in the future.
      How are they going to name the new deprecated extensions? Further, features are going to be deprecated like most of the glUniform* functions, hopefully some draw calls and obviously more through time.
      I would have expected some kind of GL_ARB_compatibility_30 to say that all the features of OpenGL 3.0 are supported and in the future we could expect some kind of GL_ARB_compatibility_31 for some deprecated features from OpenGL 3.1 in OpenGL 3.2 for example.
    </paragraph>
    <paragraph title="GL_ARB_uniform_buffer_object: ">
      This is THE feature I was expecting! This extention is an evolution of <link href="http://www.opengl.org/registry/specs/EXT/bindable_uniform.txt">GL_EXT_bindable_uniform</link> with a lot of improvements.
      It's purpose is to reduce or replace the calls of glUniform* functions to set every single uniform variable of a GLSL program. All the data are instead store in buffer objects.
      Beyond this feature from <link href="http://www.opengl.org/registry/specs/EXT/bindable_uniform.txt">GL_EXT_bindable_uniform</link>, <link href="http://www.opengl.org/registry/specs/ARB/uniform_buffer_object.txt">GL_ARB_uniform_buffer_object</link> provides the capability to use several buffers for a uniform block in a way close to transform feedback.
      It's also provide several profiles to let the compiler optimize dead uniform, through elimination layout(packed) or to make sure the interface remains as defined in the code layout(std140).
      So far the community feedback on this extension is excellent, as mine! :)
    </paragraph>
    <paragraph>
      An extract of issue 47 of <link href="http://www.opengl.org/registry/specs/ARB/uniform_buffer_object.txt">GL_ARB_uniform_buffer_object</link> specification about the block layout qualifiers. Issues 48 and 75 gives further informations about the std140 packing.
    </paragraph>
    <list name="packed: ">
      <list-element>Implementation may optimize the layout to remove inactive uniforms and otherwise restructure the layout for efficiency.</list-element>
      <list-element>Application must query the GL for the uniform block layout.</list-element>
    </list>
    <list name="shared: ">
      <list-element>Implementation may optimize the layout but must use the same layout across shaders so that the resulting layout can be shared by multiple shaders.</list-element>
      <list-element>Application must query the GL for the uniform block layout.</list-element>
    </list>
    <list name="std140: ">
      <list-element>Implementation must use the pre-determined layout, defined in this specification.</list-element>
      <list-element>Application need not query the implementation for layout information as it can be determined by reading the shader and the specification.</list-element>
    </list>
    <paragraph title="GL_ARB_copy_buffer: ">
      This extension is directly promoted to core even if no one ever heard of it before. The extension specification are not even available yet. Whatever, this extension simply allows to copy a part of a buffer in an other which could be useful especially for softwares that use OpenGL and OpenCL together or maybe softwares that use transform feedback to modify some buffers but which need keeping the original data.
      A good feature, almost obvious those days.
    </paragraph>
    <paragraph title="Promoted extensions: ">
      <link href="http://www.opengl.org/registry/specs/ARB/draw_instanced.txt">GL_ARB_draw_instanced</link> (draw several instances with a single draw call) and <link href="http://www.opengl.org/registry/specs/ARB/texture_buffer_object.txt">GL_ARB_texture_buffer_object</link> (An access of a whole large buffer like a 1D texture) get promoted to core as expected. <link href="http://www.opengl.org/registry/specs/NV/primitive_restart.txt">GL_NV_primitive_restart</link> is also promoted to core.
      This extension allows to restart primitives in a single draw call. Like several glEnd() / glBegin() into a single draw call.
      It could be usefull for triangle fans but especially for triangle strips.
      I have never used it and I'm not planning to use it, indexed buffer gives better results in matter of vertex caching as far as I know.
      Finally, <link href="http://www.opengl.org/registry/specs/ARB/texture_rectangle.txt">GL_ARB_texture_rectangle</link> get promoted to core!
      I wasn't especting it anymore, this extension is so old now and the ARB had initially decided not to promote it because of the <link href="http://www.opengl.org/registry/specs/ARB/texture_non_power_of_two.txt">non power of two textures</link> of OpenGL 2.0.
      I'm glade, they change their minds, I'm still using this extension and enjoying it really much!
    </paragraph>
    <paragraph title="Upgraded capabilities: ">
      OpenGL 3.1 required graphics card that support at least 16 texture units in a vertex shader and provides SNORM texture formats.
    </paragraph>
    <paragraph title="Missing features: ">
      An extension that a lot of people was expect to see promoted to core, the false good idea: <link href="http://www.opengl.org/registry/specs/ARB/geometry_shader4.txt">GL_ARB_geometry_shader4</link>.
      I don't like geometry shaders which I still believed should be called primitive shaders but anyway in pratice this feature is not really useful except for few cases.
      Also missing but which would have been nice to have: <link href="http://www.opengl.org/registry/specs/EXT/texture_swizzle.txt">GL_EXT_texture_swizzle</link> and <link href="http://www.opengl.org/registry/specs/EXT/vertex_array_bgra.txt">GL_EXT_vertex_array_bgra</link> for more compatibility with Direct3D.
      Finally, but no one was actually expecting it soon: <link href="http://www.opengl.org/registry/specs/EXT/direct_state_access.txt">GL_EXT_direct_state_access</link>. This extension still need some work from my point of view but when it's going to be really, it's going to deeply change OpenGL programming! I plan to write about it later, dealing with my experience of it.
    </paragraph>
    <paragraph title="OpenGL 3.1 support and drivers. ">
      OpenGL 3.1 require the same level of hardware than OpenGL 3.0 which means GeForce 8, Radeon HD2000 and Chrome 400.
      nVidia already provides some <link href="http://developer.nvidia.com/object/opengl_3_driver.html">beta drivers for OpenGL 3.1</link>. Honestly, features support is far from compliant yet, no std140, column_major and row_major layout qualifiers in GLSL 1.4, no GL_ARB_uniform_buffer_object yet but it provides GL_ARB_compatibility (not much work to do...) and GL_ARB_copy_buffer. No doubt it's going to be available quite soon, I would say within 3 months.
      ATI already provides <link href="http://www.opengl.org/registry/specs/ARB/texture_buffer_object.txt">GL_ARB_texture_buffer_object</link> (Catalyst 9.3) and <link href="http://www.opengl.org/registry/specs/EXT/bindable_uniform.txt">GL_EXT_bindable_uniform</link> (Catalyst 9.2), the work to OpenGL 3.1 is in the good direction. We can expect full support withim 6 months I guest. ATI publish a lot of new extensions recently I will coming back to this in a next topic.
    </paragraph>
    <paragraph title="Conclusions. ">
      My overall first impression of OpenGL 3.1 is good especially because of this wonderful <link href="http://www.opengl.org/registry/specs/ARB/uniform_buffer_object.txt">GL_ARB_uniform_buffer_object</link> extension and also the promotion to core of <link href="http://www.opengl.org/registry/specs/ARB/texture_rectangle.txt">GL_ARB_texture_rectangle</link> which makes it reliable for the future.
      The deprecation model seems still odd to me and I'm not sure it's going to be reliable or changed anything soon.
      The ARB remains active and I'm looking forward OpenGL 3.2 ... at Siggraph 2009? At least I'm sure we would get news about it during this event!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.opengl.org" title="The OpenGL page" />
      <source-element type="Link" href="http://www.opengl.org/registry/" title="The OpenGL registry with the core and extensions specifications" />
      <source-element type="Link" href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&amp;Number=255002#Post255002" title="The official OpenGL 3.1 Feedback thread" />
      <source-element type="Link" href="http://developer.nvidia.com/object/opengl_3_driver.html" title="nVidia OpenGL 3 page" />
    </source-list>
  </post>

  <post index="0151" date="24/03/2009" std-date="2009-03-24T00:30:00.00Z" title="My new baby: A Canon EOS 450D; My first muse: Küken" picture="0151-main.jpg">
    <meta>
      <tag>gtc-crea-photography</tag>
    </meta>

    <paragraph>
      Few months ago, I used for the first time a Digital SLR Camera, a Nikon D80 + 18-70mm and 70-300mm lenses.
      It definitely makes me have a step forward into photography.
    </paragraph>
    <paragraph>
      Since, I bought myseft a Canon EOS 450D + Canon EF-S 18-55 mm IS, learned pictures and took thousands of pictures! But not as much actually good...
    </paragraph>
    <paragraph>
      Anyway, I'm having fun experimenting on anything that espired me setting up my camera, taking the pictures and post processing them.
    </paragraph>
    <paragraph>
      My little Küken is definetly a main topic for me.
      Maybe, against what most people think, my Küken pictures are not just about Küken but also about my main interest when I look at something, some details.
      I let you see what I see by yourself through a selection of why Küken album.
    </paragraph>
    <paragraph>
      Behond my Küken album, a lot of albums are availabled on my Picasa album. Hope you enjoy and I'm looking forward of further writing about photography.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://picasaweb.google.com/groovounet/FollowingKukenLife" title="Following Küken life album" />
      <source-element type="Link" href="http://picasaweb.google.com/groovounet" title="My Picasa page" />
    </source-list>
    <image-list>
      <image-element title="Küken 1" small="./post/0151-1-small.jpg" normal="http://picasaweb.google.com/groovounet/FollowingKukenLife#5314715579635639906" />
      <image-element title="Küken 2" small="./post/0151-2-small.jpg" normal="http://picasaweb.google.com/groovounet/FollowingKukenLife#5314706956787436466" />
      <image-element title="Küken 3" small="./post/0151-3-small.jpg" normal="http://picasaweb.google.com/groovounet/FollowingKukenLife#5314705432617064530" />
      <image-element title="Küken 4" small="./post/0151-4-small.jpg" normal="http://picasaweb.google.com/groovounet/FollowingKukenLife#5314671157110110402" />
      <image-element title="Küken 5" small="./post/0151-5-small.jpg" normal="http://picasaweb.google.com/groovounet/FollowingKukenLife#5314706985155507762" />
      <image-element title="Küken 6" small="./post/0151-6-small.jpg" normal="http://picasaweb.google.com/groovounet/FollowingKukenLife#5314706860013414514" />
    </image-list>
  </post>

  <post index="0150" date="23/03/2009" std-date="2009-03-23T01:00:00.00Z" title="G-Truc Creation: Version 5 unleashed!" picture="0150-main.jpg">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      I have to admit, the overall G-Truc Creation V4 website ergonomy is not ... well not perfect.
      If I can't find something quickly on it, how someone else could espect to find something?
    </paragraph>
    <paragraph>
      Moreover, blogging is became popular, people like it and I like it!
      It's also the kind of ergonomy where visitors are getting more and more experiences.
    </paragraph>
    <paragraph>
      As a conclusion, this new version 5 become closer to a blog and I changed the way to browse the website.
      I have translated to English a part of the content but a lot of work is still needed
      to reach a full English website ...
      The design is still quite the same even if few updated have been made.
      On a technical side, it's still a full static website based on
      a big XML database XSL and XPath code to generate XHTML pages.
    </paragraph>
    <paragraph>
      On the content side, I expect to deal with others topics that 3D graphics,
      like exhibitions, pictures, musics and crazy personal thougths.
    </paragraph>
    <paragraph>
      I hope you enjoy this new version!
    </paragraph>

    <comment-list>
      <comment-element name="Groove" date="23/03/2009" title="Huhu" >And there is some kind of comment system!</comment-element>
    </comment-list>
  </post>

  <post index="0149" date="17/03/2009" std-date="2009-03-17T20:00:00.00Z" title="Improve your development process, use CMake!" picture="0149-main.jpg">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      Cross platform software is the kind of idea that's quickly annoying because when is come to the development.
      Should we develop the platform versions one after this other or in parallel?
      How to maintain the code running on every platform?
    </paragraph>
    <paragraph>
      Being able to develop in parallel every versions have a lot of advantages but
      it required a good development infrastructure, code
      repository (<link href="http://www.nongnu.org/cvs/">CVS</link>,
      <link href="http://subversion.tigris.org/">SVN</link>,
      <link href="http://git-scm.com/">GIT</link>, ...), tests and a build system;
      here I'm thinking about <link href="http://www.cmake.org">CMake</link>!
    </paragraph>
    <paragraph>
      A build system is a tool which allows creating projects or makefiles to build the software on any platform required.
      A single input for several outputs so that if you add a file on one platform, this file will be added on any output.
      A build system will also make easy the management of different compiler versions
      (Visual C++ 7.1, 8.0, 32 bits / 64 bits).
      It manages your various build profiles like debug, release, beta or whatever you can think of.
    </paragraph>
    <paragraph>
      Switching to <link href="http://www.cmake.org">CMake</link> is a quite long work on already large projects
      but the benefices worth it.
    </paragraph>
    <paragraph>
      I'm currently updating my development process using <link href="http://subversion.tigris.org/">SVN</link>
      and <link href="http://www.cmake.org">CMake</link> for my projects.
      Everything is merged in one place so that when a project is updated it can be checked with all projects
      that uses it which improve it's own testing and force the update of dependent projects to
      the last version so that all code get up and running.
    </paragraph>
    <paragraph>
      Imagine a world where you can rely on your good old code when you try to build it...
      it work! This is the effect of a good code development and maintenance process!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.cmake.org" title="CMake website" />
      <source-element type="Link" href="http://www.cmake.org/cmake/help/cmake2.6docs.html" title="CMake documentation" />
    </source-list>
  </post>

  <post index="0148" date="12/03/2009" std-date="2009-03-12T23:00:00.00Z" title="CryEngine 3 at GDC 2009" picture="0148-main.jpg">
    <meta>
      <tag>gtc-tech-event</tag>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      CryEngine ... what a good name for what is still just the most amazing real time graphics engine today for me but I guest for most graphics programmer!
    </paragraph>
    <paragraph>
      And Crytek write a press release: The CryEngine 3 will be presented at <link href="http://www.gdconf.com">GDC 2009 (March 25th - 27th)</link> in San Francisco. So exiting! But what could we actually espect?
    </paragraph>
    <paragraph>
      According the press release, the development team increase multi platform support to PS3 and XBox 360 which imply OpenGL, D3D9 and D3D10 support. However, no comment have been made in the graphics improvement but is it really disappointing?
    </paragraph>
    <paragraph>
      Multiplatform support was really an issue of the CryEngine 2 over the Unreal Engine 3 and honestly when you look at Crysis even now, don't you have still the moment where you have this string filling that stock you there: "Whahouu, this is freaky amazing!"
    </paragraph>
    <paragraph>
      For sure when I look at the shadows, I think it's good but not really estonishing. The flicking draw back of plant alpha test still annoyed me much. The ambiant illumitation is still very cheap. The terrain rendering is really impressive but SM4 provides quite some capabilities that could lead to better rendering and high performance. Here is four areas when I espect to see improvements in very high quality. Other tech improvement could be better the management of multi core CPUs. Crysis uses just single core for everything in game.
    </paragraph>
    <paragraph>
      I can't way to blow my eye, my mind with picture, video and tech presentation! Take a gasp ... we are going to cry!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.gamasutra.com/php-bin/news_index.php?story=22676" title="Gamasutra news" />
    </source-list>
    <image-list>
      <image-element title="Crysis vs reality" small="./post/0148-1-small.jpg" normal="./post/0148-1-normal.jpg" />
      <image-element title="Crysis vs reality" small="./post/0148-2-small.jpg" normal="./post/0148-2-normal.jpg" />
      <image-element title="Crysis vs reality" small="./post/0148-3-small.jpg" normal="./post/0148-3-normal.jpg" />
      <image-element title="Crysis vs reality" small="./post/0148-4-small.jpg" normal="./post/0148-4-normal.jpg" />
      <image-element title="Crysis vs reality" small="./post/0148-5-small.jpg" normal="./post/0148-5-normal.jpg" />
      <image-element title="Crysis vs reality" small="./post/0148-6-small.jpg" normal="./post/0148-6-normal.jpg" />
      <image-element title="Crysis vs reality" small="./post/0148-7-small.jpg" normal="./post/0148-7-normal.jpg" />
    </image-list>
  </post>

  <post index="0147" date="19/02/2009" std-date="2009-02-19T15:00:00.00Z" title="A patch number for GLM" picture="0147-main.jpg">
    <meta>
      <tag>gtc-tech-project-glm</tag>
      <tag>gtc-tech-project-kueken</tag>
    </meta>

    <paragraph>
      I'm currently working on my "Küken engine", an OpenGL 3.1 ready real-time graphics engine but it's taking me quite some time.
    </paragraph>
    <paragraph>
      Conscequently, GLM haven't changed much since 0.8.0 release excepted bug fixes that I still try to manage as soon as possible on the SVN repository. However, I was a bit unwilling to release new versions. Ninor versions had always bring something, few experimental extensions or ideas. Minor version 0.8.1 and 0.8.2 were just bug fixes...
    </paragraph>
    <paragraph>
      To revolve my problem, I decide to add a patch number so that every release number will look like X.X.X.X by now.
    </paragraph>
    <paragraph>
      Even if GLM doesn't provide something new, I feel good to have it working properly as soon as possible!
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://glm.g-truc.net" title="GLM website" />
    </source-list>
  </post>

  <post index="0146" date="16/02/2009" std-date="2009-02-16T15:00:00.00Z" title="State of OpenGL 3.0 drivers">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      OpenGL 3.0 is on its way! 6 months after the release of the specification, we reached a time were drivers start to be widely available on Windows, Linux and MacOS.
    </paragraph>
    <paragraph>
      With the OpenGL 3.0 specification release, nVidia was proud to announce the release of OpenGL 3.0 beta drivers in August 2008. In the meantime, they reach a stable stage and work pretty well even if I encounter few bug lately. One with VAO and one with DSA and texture buffer. Well it's not even OpenGL 3 features.
    </paragraph>
    <paragraph>
      In December, a second actor bring OpenGL 3. It's not ATI but S3. S3 have been rely surprising with their release of drivers, a lot in advance over ATI in manner of features. I haven't tried it yet but I would love to.
    </paragraph>
    <paragraph>
      At the end of January, ATI finally release OpenGL 3 drivers with full features. Before that, they already had provide support for some feature through OpenGL 2.1 extensions but even with this S3 work was more advanced. Drivers 9.1 doesn't really seams very stable and at their release lot of people were scared about the stability of it because of a crash when using glGetString(GL_VERSION)... "How the rest can work if even this doesn't?".
    </paragraph>
    <paragraph>
      Finally, Intel... Well, I attempt to a very funny presentation from Intel developers at <link href="http://www.fosdem.org/2009/">Fosdom 2009</link>. It started with: We finally bring Framebuffer objects and fragment shader but don't try vertex shader, it's going to crash... Well Intel, I don't care. They don't have OpenGL 2.0 drivers so don't expect OpenGL 3.0 drivers before a while.
    </paragraph>
    <paragraph>
      Overall, I think we reach a dissent drivers stage to start moving to OpenGL 3.0.
    </paragraph>
    <paragraph>
      However, having drivers is good but not really enough. We need tools! <link href="http://glew.sourceforge.net">GLEW</link> and <link href="http://elf-stone.com/glee.php">GLEE</link> get into OpenGL 3.0 quite quickly... but this is mostly it. Libraries like SDL, GLFW of GLUT does not support OpenGL 3.0 yet and the shame is that it really require few changes for such library to support OpenGL 3.0.
    </paragraph>
    <paragraph>
      Those days, I'm more concerned by the community ... or let say the lake of community. It used to be a key of OpenGL success but this key is disappearing. Maybe, it's just all the 3D graphics community which is changing to become more professional.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.s3graphics.com/en/resources/drivers/chrome_500/" title="S3 drivers" />
      <source-element type="Link" href="http://ati.amd.com/support/driver.html" title="ATI drivers" />
      <source-element type="Link" href="http://developer.nvidia.com/object/opengl_3_driver.html" title="nVidia drivers" />
    </source-list>
  </post>

  <post index="0145" date="29/01/2009" std-date="2009-01-29T11:00:00.00Z" title="OpenGL 3.0 map buffer range and OpenGL 3.1 perspectives">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      Introduced by the <link href="http://www.opengl.org/registry/specs/APPLE/vertex_array_range.txt">GL_APPLE_vertex_array_range</link> extension, OpenGL 3.0 introduces a very interesting feature called "mapped buffer range". It can lead to performance improvement and some software design changes.
    </paragraph>
    <paragraph>
      OpenGL 1.5 included the concept of "buffer" from <link href="http://www.opengl.org/registry/specs/ARB/vertex_buffer_object.txt">GL_ARB_vertex_buffer_object</link> and a way to access to the buffer memory with glMapBuffer function. It leads to the possibility to load a buffer directly using the graphics driver memory with skip one buffer copy so that people were expected some speed up.
    </paragraph>
    <paragraph>
      However, the results were no really convincing because even if a copy is skipped, the bottleneck isn't really in the copy but in the memory bandwise. By anyway the driver memory needs to be transfer to the graphics card which basically means that whether we use glMapBuffer or glBufferSubData, data are sent to the GPU memory when the software have finished to edit the whole buffer. This implies a serialization of the CPU and GPU works but to reach 100% efficiency we want the CPU and the GPU in parallel.
    </paragraph>
    <paragraph>
      One solution used by a lot of graphics programmers is to limit the size of buffers. The idea is: Step 1: edit a buffer on CPU; Step 2: send the first buffer and edit a second buffer during this time. By this way, we introduce asynchrony work in our solution. A good side effect of buffer size limitation is the ability to use 16 bits element buffers.
    </paragraph>
    <paragraph>
      A new solution is mapped buffer range. The idea is to edit a range of data instead of the whole buffer. This is now possible thanks to glMapBufferRange function of OpenGL 3.0. It doesn't really deprecate buffer size limitation because of advantages like 16 bits element buffers but it increases the modification granularity.
    </paragraph>
    <paragraph>
      Direct3D 10 changed the balanced cost of the API so that all the checking is done an object creation and not during the rendering. One of these aspects was the creation of the common buffer which does something like grouping the uniform variables in one or several buffer object. This concept has been added to OpenGL through <link href="http://www.opengl.org/registry/specs/EXT/bindable_uniform.txt">GL_EXT_bindable_uniform</link> extension="" and uniform buffers which is expected to be improved and to become part of OpenGL 3.1 core.
    </paragraph>
    <paragraph>
      A good use of these common/uniform buffers can imply some good performance improvements simply because in most shader oriented softwares, glUniform* called numbers is more than 50% of the overall function calls … However, common and uniform buffers need to be updated carefully because usually when updated, the whole buffer need to be send to the graphics card memory. A solution is to group the uniform data, per pass, per program, per object, etc. Mapped buffer ranged provides the ultimate solution because of the fine granularity it allows. A single variable can be updated; all per pass data (eg) can be changed and only then, they and only they will be sent.
    </paragraph>
    <paragraph>
      For me, there is no doubt for me that this feature is going to be really useful in the feature and will find a lot of application beyond what I have just commented.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.opengl.org/registry/specs/ARB/map_buffer_range.txt" title="map buffer range extension" />
    </source-list>
  </post>

  <post index="0144" date="21/01/2009" std-date="2009-01-21T04:00:00.00Z" title="GPU base">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      The GPUs base been updated to include Radeon 4800 and GeForce GTX ...
    </paragraph>

    <source-list>
      <source-element type="Link" href="./gpu.html" title="GPUs base" />
    </source-list>
  </post>

  <post index="0143" date="15/01/2009" std-date="2009-01-15T23:00:00.00Z" title="3D graphics math books">
    <meta>
      <tag>gtc-tech-devel-book</tag>
    </meta>

    <paragraph>
      I recently discovered a new good 3D graphics mathematics book which launch again this essential debate: Which book is the best? There is a lot of 3D graphics math books, I'm far from liking them all. Let's talk about my two favorites ones.
    </paragraph>
    <paragraph>
      For year I had my favorite: Mathematics for 3D game programming and computer graphics. Its deal with all the topics that all book deal with: vectors, matrices, transformations, projections, geometry, etc ... This is completed by quaternions, curves, surfaces but even some physics topics, good enough for quite some fun! A width range of chapters are also dedicated to intersection for visibility determination, collision detection and raytracing. Finally, chapters are dedicated to proper graphics theory like the rasterization pipeline shading and shadows. Just with this book a developer have quite some materials to archive a good demo!
    </paragraph>
    <paragraph>
      The way this book is written is maybe the best! Quite theoretical but illustrated with drawing, some code and some 'visual' formula.
    </paragraph>
    <paragraph>
      The new book I really like: Essential mathematics for games and interactive applications. It won't surprise any person who know both books. There both share the same pedagogy and the topics are quite … similar. I think that it's almost a waste of money to own both of same. However, I have especially notice the chapter titled “real world computer number representation” but in other hand the shadow part is quite … brief.
    </paragraph>
    <paragraph>
      My final thought … I have to admit, I'm a huge fan of Mathematics for 3D game but considering the overall, I think that Essential Mathematics is now slightly better. If you already have Mathematics for 3D game, no need to waste any money. You need a new reference, have a look on Essential Mathematics!
    </paragraph>

    <image-list>
      <image-element title="Mathematics for 3D game programming" small="./post/0143-1-small.jpg" normal="./post/0143-1-normal.jpg" />
      <image-element title="Essential Mathematics for 3D game programming" small="./post/0143-2-small.jpg" normal="./post/0143-2-normal.jpg" />
    </image-list>
  </post>

  <post index="0142" date="22/12/2008" std-date="2008-12-22T03:00:00.00Z" lang="en" title="OpenGL Framework">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Well, let's say that I got back to my favorite API: OpenGL. OpenGL 3.0 still sucks but I have some goods expectation for OpenGL 3.1.
    </paragraph>
    <paragraph>
      First of all some kind of improved bindable uniform seems to be on track because Blizzard study the overload of uniform and it wasn't good at all. For me current bindable uniform are already really good but it seems that an improved version could be included in OpenGL 3.1.
    </paragraph>
    <paragraph>
      We could expect loading of GLSL program from binary as well and hopefully some removed deprecated features … Wait and see.
    </paragraph>
    <paragraph>
      Anyway, I'm working again on OpenGL Framework (GLF). This project is born in 2005 at the same time than GLM but never involved … until now days. Basically, the idea is to provide tools and documentations to program with OpenGL.
    </paragraph>
    <paragraph>
      On the documentation side, GLF includes OpenGL, GLSL and all extensions specifications. It also includes an evolution of the G-Tut-Pack, that we could maybe call version 3. The amount of samples remains quite low yet, I hope to find time to push it up. All samples are design in a truly programmable way and currently use OpenGL 2.1 plus extensions but will maybe move to OpenGL 3.0 before the first release. It's quite the same to be honest. I also expect to provide D3D9 and D3D10 samples as well but probably not soon.
    </paragraph>
    <paragraph>
      On the tools side, it includes GLM but also new libraries: OpenGL Vertex (GLV) for mesh generations and vertex data management; OpenGL Image (GLI) for image loading and processing; and OpenGL Overload, a C++ wrapper using all extensions and making OpenGL simple to stick to the high end programmable features. This is quite a try library, I hope to see good from it but nothing sure yet.
    </paragraph>
    <paragraph>
      I was expecting to release GLF in 2008 but I spend too much time on the new libraries to make this happened. As a preview just check out the SVN repository and feel free to send me your feedback!
    </paragraph>

    <source-list>
      <source-element type="Link" href="https://glf.svn.sourceforge.net/svnroot/glf/sdk " title="GLF SVN repository" />
    </source-list>
  </post>

  <post index="0141" date="21/12/2008" std-date="2008-12-21T23:45:00.00Z" lang="en" title="OpenCL 1.0 specification released">
    <meta>
      <tag>gtc-tech-opencl</tag>
    </meta>

    <paragraph>
      Since OpenCL get announced by Apple 6 months ago a lot of expectations grow up in the developer community but from my point of view it is firstly the result of the enthusiasm of the whole industry for parallel computing that makes OpenCL reaching our world.
    </paragraph>
    <paragraph>
      OpenCL have been designed on a fast track that's for sure! 6 month is roughly the time the Khronos Group used to give birth to it. However, it is obvious that OpenCL doesn't come from nowhere, it amazingly looks like CUDA ...
    </paragraph>
    <paragraph>
      Honestly, that's perfectly fine for me, especially because everyone seems to be really involved in OpenCL development and to agree on it. A side news but a good news is that the Kronos Group demonstrate for the first time that it can be more efficient than Microsoft, Direct3D 11 Compute Shaders are not here yet.
    </paragraph>
    <paragraph>
      One fear could be that OpenCL is just a cheap CUDA. It is definitely not! OpenCL is kind of CUDA + new features. A good example is the API to share data between OpenGL and OpenCL. It is so such more complete. With CUDA we could just work on "buffers". Now with OpenCL we can work on buffers and images. This changes everything! It makes OpenCL a lot more suitable for post processing effects than CUDA. With CUDA we have to use Pixel Buffer Object to read back the framebuffer into a buffer which involved useless copies and lost of the GPU 2D cache.
    </paragraph>
    <paragraph>
      OpenCL could even be some kind of salvation for OpenGL. A lot of requests from the OpenGL community just match with OpenCL design. A good example really complicated to changed in OpenGL is the texture model. We asked for a while for separated images and filter objects. It's done in OpenCL! On the feature side, OpenCL allows to load binary programs instead of just building on  software startup.
    </paragraph>
    <paragraph>
      One word on the language library. The number of functions is just huge! So much more complete than any shading languages. It gave me some ideas for GLM!
    </paragraph>
    <paragraph>
      OpenCL is really a flexible API. It could be use on GPU but also on CPU, Cell, Larabee, DSPs, etc... An extension mechanistic is already available and a wide range of features is available just through extensions. This allows to use OpenCL even on embedded devices.
    </paragraph>
    <paragraph>
      What about the portability issue then? First of all, just the idea writing a parallel oriented program involved always the same kind of software architecture so that whether if it is multi-threaded or/SIMD based. OpenCL can managed these two senarios so maybe a good guideline would be to write all software with multitple thread AND SIMD in minded. Then a program is design for a specific purpose which means that there is few reasons to expected all programs running on any device.
    </paragraph>
    <paragraph>
      nVidia plans to release its first OpenCL drivers within 6 months and will be included as part of CUDA. I bet on a close fellowing from AMD, S3, Intel and IBM.
      I hope Imagination Technologies follows too. Apple is really into it too first for Snow Leopard but OpenCL on the next iPhone... that could be reasonable.
    </paragraph>

    <source-list>
      <source-element type="Link" href="http://www.khronos.org/registry/cl/" title="OpenCL Registry" />
    </source-list>
  </post>

  <post index="0140" date="29/10/2008" std-date="2008-10-29T23:00:00.00Z" lang="en" title="Long time no see">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      I haven't give any news for a while... I went to Australia for holidays, I changed of job leaving <link href="http://www.e-onsoftware.com/">e-on software</link> for <link href="http://www.imgtec.com">Imagination Technologies PowerVR Research Group</link> in UK.
    </paragraph>
    <paragraph>
      However my amator development have been really active during this time on my <link href="http://glm.g-truc.net">GLM</link> project.
    </paragraph>
    <paragraph>
      This is my first news in English but I plan to publish everything exclusively in English by now. I also would like to make a massive update of this website, in English, but also to improve its ergonomy.
    </paragraph>

    <source-list>
      <source-download index="994" />
    </source-list>
  </post>

  <post index="0139" date="12/08/2008" std-date="2008-08-12T03:00:00.00Z" title="OpenGL 3.0 devient OpenGL 2.2...">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
    </meta>

    <paragraph>
      On va la faire courte car je suis tout simplement dégouter de constater l'échec et la mort d'OpenGL 3.0.
      Les spécifications d'OpenGL 3.0 publiés hier n'ont rien à voir avec ce qu'elle était sensé être avec
      ce qui émergait depuis deux ans de réflexion.
    </paragraph>
    <paragraph>
      Pour faire simple, OpenGL 3.0 c'est simplement un OpenGL 2.2, l'intégralité du nouveau model objet à simplement disparu,
      il y a de nouvelles features exposées dont l'on sait que la pertinamence est douteuse
      au niveau du mapping hardware comme au niveau de la consistance de l'API.
    </paragraph>
    <paragraph>
      A l'heure où j'écris ces mots, je remets complètement en cause mon engagement pour OpenGL.
      Il semble temps de tourner une page.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=cfrm" title="Le forum d'OpenGL.org, voir le post 'The ARB announced OpenGL 3.0 and GLSL 1.30 today'" />
      <source-element type="Download" href="http://www.opengl.org/registry/doc/glspec30.20080811.pdf" title="Les spécification d'OpenGL 2.2" />
      <source-element type="Download" href="http://www.opengl.org/registry/doc/GLSLangSpec.Full.1.30.08.pdf" title="Les spécifications de GLSL 1.3" />
    </source-list>
  </post>

  <post index="0138" date="09/08/2008" std-date="2008-08-09T18:00:00.00Z" title="GLM 0.7.6">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      Une nouvelle update de GLM est disponible, La 0.7.6 !
      Pour rappel, GLM est une bibliothèque mathématique C++ basée sur les spécifications de GLSL.
      Cette version améliore notamment la conformance avec le C++ afin de pouvoir compiler
      GLM sans les extensions de Visual Studio ou avec l'option -pedantic de g++.
    </paragraph>
    <paragraph>
      Voilà maintenant 3 ans et demi que je développe ce projet qui n'a jamais été aussi actif
      avec une version par mois en moyen depuis le début de l'année notamment grâce aux nombreux retours que j'obtiens.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://www.ozone3d.net/smf/index.php/topic,1520.0.html" title="Poster un commentaire" />
      <source-download index="993" />
    </source-list>
  </post>

  <post index="0137" date="10/07/2008" std-date="2008-07-10T10:00:00.00Z" title="Builder avec Visual Studio 8 en multithread">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      Parfois builder un projet C++ peut prendre du temps... beaucoup de temps! Chez e-on software attendre 30mins pour un build est une habitude quotidienne... pour les développeurs Windows! Sous Mac automatiquement make -j12 sur les octocores donnent au build multithread tout son sens!
    </paragraph>
    <paragraph>
      Grâce à <link href="http://www.calvin-studio.fr">Arnaud [Calvin1602] Masserann</link> le build Windows à pris un bon coup de boost! Automatiquement, Visual Studio 8 est capable de paralléliser le build des projets qui n'ont pas dépendance entre eux. Malheureusement, c'est un cas assez limité, mais heureusement, il y a /MPx!
    </paragraph>
    <paragraph>
      /MPx est une option à ajouter à la ligne de commande de compilation d'un projet Visual Studio 8 et qui lance autant d'instances de 'cl' qu'indiquer par la commande /MPx (/MP8 pour 8 instances par exemple). J'ai effectué quelques tests sur mon Q6600 + 2Go de RAM tournant sous Windows XP 32.
    </paragraph>
    <list name="Observation sur le SDK de Quake 4 : ">
      <list-element>Quake 4 SDK 1.3 (default): 35s</list-element>
      <list-element>Quake 4 SDK 1.3 (/MP2): 25s</list-element>
      <list-element>Quake 4 SDK 1.3 (/MP4): 20s</list-element>
      <list-element>Quake 4 SDK 1.3 (/MP8): 21s</list-element>
    </list>
    <list name="Observation sur Irrlicht 1.4 : ">
      <list-element>Irrlicht 1.4 (default): 43s</list-element>
      <list-element>Irrlicht 1.4 (/MP4): 14s</list-element>
      <list-element>Irrlicht 1.4 (/MP8): 14s</list-element>
    </list>
    <list name="Observation sur Xerces lib 2.8 : ">
      <list-element>Xerces lib 2.8 (default): 71s</list-element>
      <list-element>Xerces lib 2.8 (/MP4): 26s</list-element>
      <list-element>Xerces lib 2.8 (/MP8): 27s</list-element>
    </list>
    <paragraph>
      Le gain est donc vraiment significatif même si assez variable suivant les projets. J'ai noté une utilisation assez importante de mémoire, les 2 Go sont par loin d'y passer, je pense que sur une machine équipée de Vista et utilisé de manière plus vaste que seulement build un projet, les 4 Go de RAM ne feront pas de mal.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://www.ozone3d.net/smf/index.php/topic,1461.0.html" title="Poster un commentaire" />
    </source-list>
  </post>

  <post index="0136" date="03/07/2008" std-date="2008-07-03T23:00:00.00Z" title="Ouverture de forums pour G-Truc.net sur oZone3D.net">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      JeGX d'oZone3D.net m'a offert la possibilité d'avoir un <link href="http://www.ozone3d.net/smf/index.php/board,39.0.html">forum</link> sur son site pour pouvoir discuter des activités de mon site. Un grand merci à lui !
    </paragraph>
    <paragraph>
      J'espère que vous appréciez de partager votre feedback sur ce forum. Un <link href="http://www.ozone3d.net/smf/index.php/topic,1450.0.html">post</link> est disponible à propos de la réflexion sur les GPUs que j'ai commencé avec MatRem.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://www.ozone3d.net/smf/index.php/board,39.0.html" title="Les forums !" />
    </source-list>
  </post>

  <post index="0135" date="24/06/2008" std-date="2008-06-24T00:00:00.00Z" title="Réflexion sur les GPUs round 2">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      La réflexion sur les GPUs que j'avais commencé il y a quelques temps à pris une tout autre envergure notamment grâce à la participation de Mathieu [MatRem] Roumillac que je remercie pour son esprit critique et sa rigueur en terme de modélisation UML.
    </paragraph>
    <paragraph>
      Nous avons créé de nombreux diagrammes pour montrer différent aspect, point de vue du GPU. Les résultats ne nous conviennent pas encore tout à fait mais voici deux diagrammes issus de cette réflexion qui à n'en pas douter, continuera à s'enrichir.
    </paragraph>
    <paragraph>
      Ces diagrammes ont très probablement certains manquent et nous n'avons pas hésiter à ajouter nos suppositions. Ils sont donc à lire avec un oeil critique et non pas comme des vérités strictes. Bien entendu, tout commentaire est bien venu, d’ailleurs ces diagramme en aurait bien besoin … Cela viendrait avec le temps.
    </paragraph>

    <image-list>
      <image-element title="Concept des GeForce8/9/10 et Radeon HD" small="./post/0135-1-small.png" normal="./post/0135-1-normal.png" />
      <image-element title="Historique des pipelines graphiques" small="./post/0135-2-small.png" normal="./post/0135-2-normal.png" />
    </image-list>
    <source-list>
      <source-element type="Lien" href="http://www.g-truc.net/contact.html" title="Pour m'envoyer un commentaire" />
    </source-list>
  </post>

  <post index="0134" date="15/06/2008" std-date="2008-06-15T19:00:00.00Z" title="Integrer TortoiseSVN à Visual Studio">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      J'ai tout récemment mise à jour mon environnement de développment, en intégrant TortoiseSVN à Visual Studio !
    </paragraph>
    <paragraph>
      Ceci est possible grâce au menu "external tools" dans "Tools" et l'utilisation de TortoiseSVN en ligne de commande.
    </paragraph>
    <list name="Voici quelques commandes utilisent : ">
      <list-element>Update tous les fichiers de la solution: /command:update /path:"$(SolutionDir)" /notempfile /closeonend</list-element>
      <list-element>Commit tous les fichiers de la solution: /command:commit /path:"$(SolutionDir)" /notempfile /closeonend</list-element>
      <list-element>Diff sur le fichier actif: /command:diff /path:"$(ItemPath)" /notempfile /closeonend</list-element>
      <list-element>Log des commits sur le fichier actif: /command:log /path:"$(ItemPath)" /notempfile /closeonend</list-element>
    </list>

    <image-list>
      <image-element title="SVN intégré à Visual Studio" small="./post/0134-small.png" normal="./post/0134-normal.png" />
    </image-list>
    <source-list>
      <source-element type="Lien" href="http://tortoisesvn.net/support" title="La documentation de TortoiseSVN pour créer vos commandes personnalisées" />
    </source-list>
  </post>

  <post index="0133" date="30/05/2008" std-date="2008-05-30T21:00:00.00Z"  title="Küken: hardware driven design">
    <meta>
      <tag>gtc-tech-project-kueken</tag>
    </meta>

    <paragraph>
      Suite à ma réflexion du design de Küken et pour présenter "OpenGL" chez e-on software
      je me suis lancé dans la création d'un diagramme d'activité UML représentant les traitements
      et les flux de données qui gravitent dans d'une carte graphique.
    </paragraph>
    <paragraph>
      J'ai finalement obtenu le diagramme suivant. Trouver le bon type de diagramme UML
      qui pourrait représenter ceci fut déjà une grande étape mais il est clair que ce diagramme seul
      n'est pas suffisant pour donner une bonne appréciation des contraintes liés à la programmation GPU,
      pour monter d’où l’on vient et où l’on se dirige.
    </paragraph>
    <paragraph>
      N'hésiter pas à m'envoyer un commentaire sur ce diagram ou sur vos idées pour réprésenter le GPU.
    </paragraph>

    <image-list>
      <image-element title="Diagram UML" small="./post/0133-small.png" normal="./post/0133-normal.png" />
    </image-list>
    <source-list>
      <source-element type="Lien" href="./contact.html" title="Mon email" />
    </source-list>
  </post>

  <post index="0132" date="18/05/2008" std-date="2008-05-18T21:00:00.00Z" title="Je recherche un job !">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      Après 2 années passées chez <link href="http://www.e-onsoftware.com">e-on software</link> à bosser sur <link href="http://www.vue6.com">Vue</link>, je me dis qu'il est temps de trouver un nouveau défi !
    </paragraph>
    <paragraph>
      Je recherche donc un nouveau boulot, je ne limite pas mes recherches à la France mais au monde.
      Je n'ai pas de recherche spécifique au delà d'être lié à la 3D,
      l'essentiel est ce que l'offre pourrait m'apporter et comment je pourrais mettre en oeuvre mon expérience,
      mes connaissances et mes idées.
    </paragraph>

    <source-list>
      <source-element type="Download" href="http://www.g-truc.net/cv.pdf" title="cv.pdf" />
    </source-list>
  </post>

  <post index="0131" type="g-truc-projects-glm" date="24/03/2008" std-date="2008-03-24T16:00:00.00Z"  title="GLM 0.7.1">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      Une nouvelle version de GLM est disponible à present sous license MIT.
      La documentation a été largement complété et de nombreux bugs ont été corrigé.
    </paragraph>

    <source-list>
      <source-download index="992" />
    </source-list>
  </post>

  <post index="0130" date="14/03/2008" std-date="2008-03-14T01:00:00.00Z"  title="Küken">
    <meta>
      <tag>gtc-tech-project-kueken</tag>
    </meta>

    <paragraph>
      Depuis maintenant un moment, j'ai commencé à travailler sur un nouveau "moteur 3D" entièrement orienté shader avec un terme la vocation d'être massivement multithreadé.
    </paragraph>
    <paragraph>
      Soyons honnête, le projet est vraiment à son commencement. Pour la première release, j'ai simplement prévu d'intégrer un renderer OpenGL 2 mais il manque encore bien des fonctionnalités.
    </paragraph>
    <paragraph>
      Le code est disponible sur SVN et utilise <link href="http://glew.sourceforge.net">GLEW</link> et <link href="http://glm.g-truc.net">GLM</link>.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://sourceforge.net/projects/kuken" title="La page du projet Küken" />
      <source-element type="Lien" href="http://glm.g-truc.net" title="La page de GLM" />
      <source-element type="Lien" href="http://glew.sourceforge.net" title="La page de GLEW" />
    </source-list>
  </post>

  <post index="0129" date="16/01/2008" std-date="2008-01-16T23:00:00.00Z"  title="Render to vertex buffer (R2VB), Vertex texturing et Alpha to coverage">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      Le G-Tut Pack a été mis à jour avec trois nouveaux samples.
      Un premier propose une méthode de rendu dans un vertex buffer.
      Le second donne un exemple de vertex texturing et enfin le troisième évoque l'alpha to coverage,
      c'est à dire la possibilité d'antialiaser une texture qui contient des texels non visible.
      L'alpha test pour le multisampling en somme.
    </paragraph>

    <image-list>
      <image-element title="Render to vertex buffer" small="./sample-ogl2/ogl2-render-to-vertex-buffer-small.png" normal="./sample-ogl2/ogl2-render-to-vertex-buffer.png" />
      <image-element title="Vertex texturing" small="./sample-ogl2/ogl2-vertex-texture-small.png" normal="./sample-ogl2/ogl2-vertex-texture.png" />
      <image-element title="Alpha to coverage" small="./sample-ogl2/ogl2-alpha-to-coverage-small.png" normal="./sample-ogl2/ogl2-alpha-to-coverage.png" />
    </image-list>
    <source-list>
      <source-download index="991" />
    </source-list>
  </post>

  <post index="0128" date="12/01/2008" std-date="2008-01-12T15:00:00.00Z"  title="Comparatif Visual C++ 9.0 / 2008">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
      <tag>gtc-tech-project-ovtsa</tag>
    </meta>

    <paragraph>
      Dans une news du 11/01/2006, deux ans presque jour pour jour, j'évoquais mon passage à Visual Studio 8
      au travers d'un benchmark mettant en œuvre GCC 3.2, GCC 3.4, Visual C++ 7.1 et Visual C++ 8.0.
      les résultats étaient alors peu flatteur pour Visual C++ 8.0.
      Visual C++ 7.1 caracolait alors en tête suivit de près par GCC 3.4, Visual Studio 8.0
      étant largement en retrait. Ces tests avaient été effectués sur mon raytracer avec un Athlon XP 2800+.
    </paragraph>
    <paragraph>
      Aujourd'hui, j'entame ma migration vers Visual C++ 9.0 bien que Visual C++ 8.0 soit toujours mon IDE
      de référence tout simplement car tous les outils (DevPartner, VTune) ne sont pas encore près pour Visual Studio 2008.
      Le test est maintenant réalisé sur un Core 2 Q6600 ce qui laisse l'opportunité d'activer les optimisations SSE2
      ainsi que la compilation en 64bits.
    </paragraph>
    <paragraph>
      Ce test montre que globalement les performances n'ont pas évolué depuis Visual C++ 7.1
      si l'on s'arrête sur le mode 32 bits et sans optimisation SSE.
      L'utilisation des optimisations SSE permet de gagner environ 20% de performances.
      Passer en 64 bits permet de gagner encore environ 10% de performances.
      Selon ce test Visual C++ 8.0 SP1 est pour le moment le plus efficace particulièrement en 64bits.
    </paragraph>
    <paragraph>
      Le schéma suivant donne le temps en seconde pour la génération d'une image avec mon raytracer.
    </paragraph>

    <image-list>
      <image-element title="Le tableau de résultat" small="./post/0128-small.png" normal="./post/0128-normal.png" />
    </image-list>
  </post>

  <post index="0127" date="10/01/2008" std-date="2008-01-10T02:00:00.00Z" title="Tut sur les mipmaps">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      Un nouveau sample est disponible sur le sujet des mipmaps.
      Biais, génération et personnalisation de mipmaps, niveau de base, etc...
    </paragraph>

    <image-list>
      <image-element title="Mipmaps" small="./sample/ogl2/ogl2-mipmaps-small.png" normal="./sample/ogl2/ogl2-mipmaps.png" />
    </image-list>
    <source-list>
      <source-download index="990" />
    </source-list>
  </post>

  <post index="0126" date="23/12/2007" std-date="2007-12-23T02:00:00.00Z" title="Liste GPUs actualisée">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      Il semblerait que je sois dans une formidable dynamique de mise à jour de vieux trucs...
      Cette fois c'est au tour de la liste des GPUs de subir un lifting !
      Elle inclut à présent tous les derniers GPUs jusqu'au GeForce 8800 GTS 512.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="./gpu.html" title="Liste des GPUs" />
    </source-list>
  </post>

  <post index="0125" date="15/12/2007" std-date="2007-12-15T02:00:00.00Z" title="G-Tut-Pack version 2 : 24 nouveaux samples OpenGL 2 disponible">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      J'ai commencé une nouvelle série de samples OpenGL.
      Depuis la dernière mise à jours du G-Tut-Pack le 05/11/2004
      j'ai tenté bien des approches qui non pas données grand chose de convienquant au final...
    </paragraph>
    <paragraph>
      Avec cette nouvelle série de sample pour OpenGL, 24 samples sont déjà disponible !
      Cette version vise à la présentation de l'API d'OpenGL 2 dans une approche
      entièrement orienté programmation GPU avec GLSL.
    </paragraph>
    <paragraph>
      Les exemples utilisent <link href="http://glew.sourceforge.net">GLEW</link>,
      <link href="http://glm.g-truc.net">GLM</link> et <link href="http://www.libsdl.org/">SDL</link>
      mais tout est inclut dans chaque archive, il ne reste qu'à lancer le sample ou le compiler avec Visual Studio 2005.
      Ils sont disponibles sous de manière unitaire mais également regroupé dans une archive.
    </paragraph>

    <source-list>
      <source-download index="989" />
    </source-list>
  </post>

  <post index="0124" date="13/12/2007" std-date="2007-12-13T22:00:00.00Z" title="GLM 0.6.4 disponible">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      GLM continu a évolution avec des mise à jours régulières principalement
      pour corriger des bugs mais aussi en ajoutant de nouvelles extensions.
      La version 0.7 est en cours de développement mais est encore qu'à ses débuts.
    </paragraph>

    <source-list>
      <source-download index="988" />
      <source-element type="Lien" href="http://glm.g-truc.net" title="La page de GLM" />
    </source-list>
  </post>

  <post index="0123" date="16/11/2007" std-date="2007-11-16T22:00:00.00Z" title="ASM trash">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      J'ai passé un peu de temps à me remettre à l'assembleur x86 ces derniers temps.
      J'y ai trouvé beaucoup de plaisir ! La pile des registres flottants,
      les 10 instructions indifférentes juste pour la soustraction, les instructions SSE... ahhh :)
    </paragraph>
    <paragraph>
      Ma principale motivation était d'étudier l'apporte que pourrait apporter les instructions SSE à GLM.
      Bien qu’elles permettent d'exécuter jusqu'à 4 opérations à la fois, leurs utilisations introduisent les latences.
      Dans l'état actuel, il est difficile d'espérer un gain, d'autant qu'il faut permettre au compilateur
      de réaliser ses optimisations et écrire un code au moins aussi efficace que celui du compilateur.
      Bref, il me reste beaucoup encore à faire.
    </paragraph>
    <paragraph>
      J'ai regroupé les résultats de cette activité dans une archive que je mets à votre disposition.
      Il y a également du code que j'ai trouvé sur le net. C’est vraiment brute et rien d’utilisable pour un projet.
      Cependant, c’est une bonne base de code pour observer le fonctionnement de différentes fonctionnalités de l’assembleur.
    </paragraph>

    <source-list>
      <source-download index="987" />
    </source-list>
  </post>

  <post index="0122" date="16/09/2007" std-date="2007-09-16T17:00:00.00Z" title="GLM 0.6.0 disponible">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      Le travail réalisé sur GLM 0.6.0 concerne exclusivement les extensions le leur mécanisme.
    </paragraph>
    <paragraph>
      Une extension GLSL sur le GPU est utilisé de telle manière quelle semble s'intégrer au langage.
      Ceci est possible car le programmeur indique de manière explicite qui souhaite utiliser une extension spécifique.
      Il venait a utilisé deux extensions différentes définissant la même fonction,
      le même type alors il aurait des collisions d'espace de nom.
    </paragraph>
    <paragraph>
      GLM 0.6.0 reprend ce mécanisme pour intégrer les extensions GLM à la bibliothèque core à la demande de l'utilisateur.
    </paragraph>
    <paragraph>
      Beaucoup d'extensions ont été ajouté. GLM 0.5.1 contenait 44 extensions implémenté,
      GLM 0.6.1 en contient 58 dont de nombreuses anciennes améliorées.
      Nombres flottant à demi-précision, vecteur et matrice de taille N, unsigned int,
      opération bit à bit, quaternion, opération sur les matrices, splines, etc.
    </paragraph>

    <source-list>
      <source-download index="986" />
      <source-download index="985" />
    </source-list>
  </post>

  <post index="0121" date="11/09/2007" std-date="2007-09-11T09:00:00.00Z" title="e-onsoftware recrute !">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      Nous recherchons activement de nouveaux passionnés pour enrichir notre équipe de dev !
    </paragraph>
    <list title="Profiles recherchés">
      <element>Un master of C++</element>
      <element>Un master of OpenGL</element>
      <element>Un master of Math</element>
      <element>Un master of plug-in for 3DS, Maya, XSI, etc...</element>
      <element>Un master of PHP and web stuff</element>
    </list>
    <paragraph>
      Expérience pro non nécessaire, stage possible, expérience amateur très recommandé !
    </paragraph>
    <paragraph>
      Pour plus d'infos pas besoin de faire des petits ronds : criccio {at} e-onsoftware {dot} com.
      Vous pouvez également me joindre au 01 43 14 28 15, demandez Christophe.
    </paragraph>
    <paragraph>
      Pour les masters of C++ et/ou OpenGL, la procédure est généralement la suite :
      Je vous appele pour un entretien téléphonique, si je suis enchanté par l'échange,
      je le dirais sinon je le dirais aussi.
      Quelques part se glissera aussi l'envoi d'un portfolio pour que je puisse observer le code que vous avez écris.
      Enfin, vous serez reçu chez e-on software pour faire plus ample connaissance. :)
      Pour les autres master of, ca sera pareil mais avec quelqu'un d'autre.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://www.e-onsoftware.com" title="e-onsoftware.com" />
      <source-element type="Lien" href="http://www.vue6.com" title="Vue6.com" />
    </source-list>
  </post>

  <post index="0120" date="21/08/2007" std-date="2007-08-21T21:00:00.00Z" title="J'adore mon nouvel espace de travail au taf !">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      De retour du Siggraph et de mes vacances, au boulot j'ai eu l'heureuse surprise de découvrir mon nouvel espace de travail,
      que vous pouvez observer sur les screenshots suivant. L'original fait 3520*1200 ...
      Je veux le même genre à la maison ! Ceci sera complété dans la semaine par un Core 2 Quad Q6600 sur lequel
      je vais mettre une GeForce 8 GTS 320 et une Radeon X1950 pro.
      A quoi bon avoir un GeForce et un Radeon sur un même PC alors que
      l'on ne peut pas faire du SLI/Crossfire entre les deux ?
      Tout simplement programmer et tester sur les deux principaux constructeurs aux quotidiens pour faciliter
      ce fastidieux voyage entre le comportement des drivers de l'un ou de l'autre. Je veux pareil à la maison !
    </paragraph>
    <paragraph>
      Concernant mes développements personnelles, la version 0.6 de GLM avance bien avec tout
      un tas de nouvelles fonctionnalités, un nouveau système de nommage et d'espace de nom plus
      conforme au usage les extensions de GLSL, même si c'est manière est contraire aux conventions
      qui avaient étés définit par l'ARB. Le système de configuration est également beaucoup plus simple
      et moins soumit à d’éventuels problèmes de collisions. Cette version corrige également les problèmes
      avec Visual Studio 2005 SP1.
    </paragraph>
    <paragraph>
      J'envisageais un système de 'plug-in' facilitant l'interopérabilité avec d'autres bibliothèques notamment DirectX 9, DirectX 10, WildMagic 4 et NVSG 3 pour les premiers testent. Celui ci sera probablement reporté pour la version 0.7. Autre piste pour l'avenir, une interprétation des fonctionnalités de GLSL au niveau des textures, peut-être suivant l'approche de GLSL 1.2 mais peut-être aussi suivant l'approche de la version de GLSL accompagnant OpenGL 3. J'ai relevé que ce type d'accès trouvait finalement place dans certains de mes projets du coté CPU. Cependant ceci n'est pas encore planifié. (0.8 / jamais ?)
    </paragraph>
    <paragraph>
      Le compte rendu de la BOF d'OpenGL est commencé, j'espère le terminer rapidement.
    </paragraph>

    <image-list>
      <image-element title="Mon espace de travail en édition" small="./post/0120-1-small.jpg" normal="./post/0120-1-normal.jpg" />
      <image-element title="Mon espace de travail en debugging" small="./post/0120-2-small.jpg" normal="./post/0120-2-normal.jpg" />
    </image-list>
  </post>

  <post index="0119" date="02/08/2007" std-date="2007-08-02T13:00:00.00Z" title="Stuff 0.1 et Siggraph 2007">
    <meta>
      <tag>gtc-tech-devel-cpp</tag>
    </meta>

    <paragraph>
      Je vous propose la première release d'un nouveau micro projet nommé "Stuff"
      qui a pour but de proposer des outils génériques basés sur les convensions de la STL et de <link href="http://www.boost.org/">Boost</link>. Ce projet est d'ailleurs dépendent de <link href="http://www.boost.org/">Boost</link>.
    </paragraph>
    <paragraph>
      Principale et même unique fonctionnalité de cette version, ce que j'ai appelé le "async_ptr".
      Il s'agit en fait d'une sort de boost::shared_ptr dont l'on peut partager une donnée,
      entre plusieurs pointeurs, qui n'est pas encore alloué. Cet outil peut-être très utile dans le cas
      du multithread pour effectuer des allocations asynchrones. J'ai pour objectif d'en écrire un tutorial
      mais ce n'est pas encore pour tout de suite, notamment parce que d'autres tâches m'attende, comme le Siggraph 2007 !
    </paragraph>
    <paragraph>
      En effet, je pars samedi à San Diego pour le Siggraph 2007.
      J'ai prévu des journées de conférences bien chargées !
      Je tâcherais de rédiger un petit compte rendu à mon retour.
    </paragraph>

    <source-list>
      <source-download index="984" />
      <source-element type="Lien" href="http://www.siggraph.org/" title="Le site du Siggraph" />
    </source-list>
  </post>

  <post index="0118" date="12/07/2007" std-date="2007-07-12T13:00:00.00Z" title="Document C++ sur 'const' disponible">
    <meta>
      <tag>gtc-tech-devel-cpp</tag>
    </meta>

    <paragraph>
      Un nouvel article est disponible. Il traite de certains aspects liés au mot clé 'const' en C++.
    </paragraph>

    <source-list>
      <source-download index="983" />
    </source-list>
  </post>

  <post index="0117" date="23/01/2007" std-date="2007-01-23T08:00:00.00Z" title="GLM 0.5.0">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      Une nouvelle version de GLM est disponible depuis quelques jours.
      Elle apporte le support des swizzles operators et surtout celui des features de GLSL 1.2.
    </paragraph>
    <paragraph>
      Cette annonce tardive précède celle d'une mise à jour qui corrige quelques bugs dont
      quelqu'uns d'important sur les swizzles operators.
    </paragraph>

    <source-list>
      <source-download index="982" />
    </source-list>
  </post>

  <post index="0116" date="05/01/2007" std-date="2007-01-05T22:15:00.00Z" title="Tutorial sur les VBOs sur oZone3D.net">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      Le tutorial sur les VBOs est à présent disponible sur <link href="http://www.ozone3d.net">oZone3D.net</link>,
      en français et en anglais. Il est accompagné d'un exemple plus élaboré permettant d'observer
      l'impact des VBOs sur les performances.
    </paragraph>
    <paragraph>
      Je vous invite également à visiter le site de <link href="http://www.icare3d.org">Cyril Crassin</link>
      qui dispose d'un contenu très intéressant !
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://www.ozone3d.net/tutorials/opengl_vbo.php" title="Le tutorial sur les VBOs sur oZone3D.net" />
      <source-element type="Lien" href="http://www.icare3d.org" title="Icare 3D de Cyril Crassin" />
    </source-list>
  </post>

  <post index="0115" date="12/11/2006" std-date="2006-11-12T22:30:00.00Z" title="GeForce 8800, point de vue programmation OpenGL">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      Le GeForce 8800 est annoncé et les tests sont formels : c'est de loin la nouvelle meilleure carte graphique du monde !
      Ce en tout point, performance, qualité du rendu et fonctionnalités.
      Ok, mais niveau programmation qu'est ce que cela donne ?
    </paragraph>
    <paragraph>
      Pour répondre à cette question, je vous propose un document sur le sujet,
      traitant plus spécifiquement de la programmation OpenGL du GeForce 8800.
      Bien sûr, il y a les geometry shaders sous OpenGL mais cette carte
      nous réserve également tout un tas de nouvelles gâteries.
    </paragraph>

    <source-list>
      <source-download index="981" />
    </source-list>
  </post>

  <post index="0114" date="06/10/2006" std-date="2006-10-06T20:30:00.00Z" title="Nouvelle révision du document sur les VBOs">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      Cette révision intègre un nouveau test dans le but de détailler d'avantage les tableaux entrelacés.
    </paragraph>
    <paragraph>
      Dans un registre tout à fait différent, c'est avec plaisir que je vous annonce
      que mes activités amateurs reprennent et G-Truc Creation recevra aussi à nouveau des mises à jours
      régulières dès que j'aurai une connexion Internet stable.
    </paragraph>

    <source-list>
      <source-download index="980" />
    </source-list>
  </post>

  <post index="0113" date="06/10/2006" std-date="2006-10-06T22:00:00.00Z" title="Nouvelle révision du document sur les extensions OpenGL">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      L'article sur les extensions OpenGL a subit une petite mise à jour dont beaucoup de corrections.
    </paragraph>

    <source-list>
      <source-download index="979" />
    </source-list>
  </post>

  <post index="0112" date="13/08/2006" std-date="2006-08-13T13:30:00.00Z" title="Nouveaux exemples OpenGL 2.0">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
      <tag>gtc-tech-comment-opengl</tag>
    </meta>

    <paragraph>
      Une nouvelle série d'exemples OpenGL est disponible. Ils utilisent GLEW, SDL et GLM.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://www.g-truc.net/sample.html" title="La page des exemples" />
    </source-list>
  </post>

  <post index="0111" date="03/08/2006" std-date="2006-08-03T21:30:00.00Z" title="OpenGL 2.1 disponible">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
    </meta>

    <paragraph>
      En ce moment même, Boston accueil le Siggraph 2006, évènement qui a servi pour la publication des spécifications d'OpenGL 2.1.
    </paragraph>
    <paragraph>
      OpenGL 2.1 intègre 4 extensions : GL_ARB_half_float_pixel pour le chargement de bitmaps codés avec des nombres flottants sur 16 bits, GL_ARB_texture_float pour le stockage dans la mémoire de la carte graphique de textures utilisant des nombres flottants à simple (32 bits) ou demi précision (16 bits), GL_ARB_color_buffer_float pour un stockage avec des nombres flottants 16 ou 32 bits des tampons chromatiques et GL_ARB_pixel_buffer_object pour une manipulation plus efficace des pixels.
    </paragraph>
    <paragraph>
      Le support des nombres flottants pour les textures et les color buffers permet la réalisation des rendus basés sur le High Dynamics Range ou encore des rendus de flou comme Sebh nous l'a présenté sur <link href="http://www.game-lab.com/phpBB2/viewtopic.php?t=2789">le forum de Game-Lab</link>.
    </paragraph>
    <paragraph>
      Les pixel buffer objects (PBOs) utilise l'API des vertex buffer objects en ajoutant deux nouvelles cibles pour l'écriture et la lecture de pixels. L'utilisation la plus courante est le readback asynchrone du framebuffer pour le rendu sur texture. Une seconde utilisation est le rendu sur vertex array où des données traitées par les pixel pipelines sont renvoyés aux vertex pipelines et enfin les PBOs permettent le texture streaming pour un download des textures plus rapide.
    </paragraph>
    <paragraph>
      Les GeForce 6/7 et les Radeon X1*** sont des cartes OpenGL 2.1, toutes ces fonctionnalités sont disponibles depuis longtemps chez nVidia, chez ATI encore un peu de patiences niveau drivers.
    </paragraph>
    <paragraph>
      Dernière nouveauté de taille, la version 1.2 de l'OpenGL Shading Language (GLSL). Elle apporte beaucoup de modification qui rapproche GLSL du C++ au niveau du typage ainsi que le support de matrices non carrés (eg : mat4x3, mat2x3).
    </paragraph>
    <paragraph>
      Enfin, notons qu'un SDK pour OpenGL 2.1 sera distribué avant la fin 2006 et qu'OpenGL 3.0 est sur les rails pour 2007 avec une refonte importe de l'API.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://www.khronos.org/news/press/Releases/opengl_21_specification_publicly_released" title="Le communiqué de presse du Kronos Groups" />
      <source-element type="Lien" href="http://www.opengl.org/documentation/specs/version2.1/glspec21.pdf" title="Les spécifications d'OpenGL 2.1" />
      <source-element type="Lien" href="http://www.opengl.org/registry/specs/ARB/GLSLangSpec.Full.1.20.6.pdf" title="Les spécifications de GLSL 1.2" />
    </source-list>
  </post>

  <post index="0110" date="21/07/2006" std-date="2006-07-21T23:15:00.00Z" title="OpenGL Pipeline, la newsletter d'OpenGL">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      Pendant de nombreuses années l'ARB d'OpenGL publiait une sorte de résumé des réunions principales (Les meetings notes) qui incluaient les votes d'extensions, l'avancement du travail sur de nouvelles fonctionnalités et les idées pour l'avenir. Malheureusement, voici bientôt trois ans que la publication des comptes rendus a été arrêtée.
    </paragraph>
    <paragraph>
      De nombreux changements, dont la mort de Silicon Graphics et le développement d'OpenGL ES, semble donner un nouveau souffle à OpenGL, preuve en est avec la publication de la première newsletter officiel sur OpenGL sous la houlette de Jon Leech, précédemment l'auteur des meeting notes. Cette newsletter est trimestriel, comme les meetings notes, mais présentée dans une forme nettement plus accessible.
    </paragraph>
    <paragraph>
      Nous apprenons qu'il est maintenant officiel qu'OpenGL passe dans les mains du Kronos Group et comme je le disais dans une news précédente, c'est une bonne chose pour dynamiser le développement d'OpenGL. Ceci permettra une fusion entre OpenGL ES et OpenGL, peut-être jusqu'aux contextes OpenGL (EGL à la place de AGL, WGL et GLX). Il est d'ailleurs ironique de constater que ce qui a permit la portabilité d'OpenGL soit aujourd'hui totalement décrier par les développeurs cependant si EGL venait à remplacer les autres APIs de contextes OpenGL, je pense que nous en serions tous ravies. De plus, ce que de nombreux nouveaux développeurs cherchaient en vain, probablement du fait d'un parallèle avec DirectX, devrait arriver. En effet, un SDK officiel pour OpenGL pourrait voir le jour.
    </paragraph>
    <paragraph>
      Cette newsletter nous parle du développement d'OpenGL avec une nouvelle fonction pour les textures look up (ARB_shader_texture_lod) sous GLSL, de l'extension ARB_sync pour la synchronisation CPU/GPU notamment avec plusieurs contextes OpenGL et enfin du nouveau model d'objets OpenGL.
    </paragraph>
    <paragraph>
      Très bon numéro, vivement le prochain :).
    </paragraph>
    <paragraph>
      PS : Voici bien longtemps que G-Truc Creation n'avait pas étés mise à jour, espérons que des jours plus amateurs arrivent prochainement.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://www.opengl.org/pipeline/" title="La newsletter d'OpenGL" />
    </source-list>
  </post>

  <post index="0109" date="06/06/2006" std-date="2006-06-06T18:00:00.00Z" title="Vertex Buffer Objects, mise à jour">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      Le tutorial et les exemples sur les Vertex Buffer objects d'OpenGL ont étés mise à jour.
      Correction d'erreurs d'orthographe et j'espère correction des crashs au démarrage qui affectait certains utilisateurs.
      Si vous rencontrez encore des problèmes, n'hésitez pas à me contacter.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="./article/vbo-fr.pdf" title="Le tutorial sur les VBOs" />
      <source-element type="Lien" href="./article/vbo.zip" title="Les exemples au format zip (1.8 Mo)" />
      <source-element type="Lien" href="./article/vbo.7z" title="Les exemples au format 7z (1.2 Mo)" />
    </source-list>
  </post>

  <post index="0108" date="05/06/2006" std-date="2006-06-05T21:00:00.00Z" title="Bilan">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      J'ai terminé hier un cycle majeur de ma vie : Mon parcours scolaire ! J'avoue que c'est avec le plus grand soulagement que je franchie ce capte. La suite passe évidemment par le vrai début de mon parcours professionnel qui commencera par un stage en vue d'une embauche pour <link href="http://www.e-onsoftware.com">E-On Software</link>. Leurs <link href="http://www.e-onsoftware.com/products/vue/vue_5_infinite/">productions</link> très impressionnantes, d'ailleurs elle participe au <link href="http://www.siggraph.org/">Siggraph 2006</link>, c'est pourquoi j'ai bien l'intention de parcourir un bon de chemin avec elle. Je commence le 12 juin, jour de mon anniversaire, que demander de mieux comme cadeau ? :)
    </paragraph>
    <paragraph>
      Pour ce qui est de mon parcours amateur je n'ai pas l'intention de m'arrêter ici. Je suis un amateur et je ne perds pas une occasion de le rappeler. Cependant, il est évident que ce profond changement de vie influera sur mon emploi du temps mais dans quelle mesure, j'avoue n'en avoir aucune idée, je me contenterai de faire au mieux.
    </paragraph>
    <paragraph>
      Quels sont mes projets amateurs pour l'avenir ? Il a tout d'abord <link href="http://glm.g-truc.net">GLM</link> qui est un petit projet mais dont le concept me plait vraiment beaucoup. Dans les nouvelles features, il y aura prochainement le support des swizzles operators puis des matrices de tailles N ainsi que de nouvelles possibilités pour le traitement des espaces couleurs. J'aimerai également ajouter des fonctionnalités comme les sparses matrices, la LU decomposition, etc. dans le but de créer un intégrateur implicite pour la résolution des équations de mouvements pour le cas d'une cloth simulation. Cependant, ce ne sera pas avant un moment par contre j'ai d'autres ambitions pour ce projet tel que la création de plug-in pour <link href="http://www.ageia.com">PhysX</link>, DirectX, donc le but est de faciliter l'intégration de GLM. Pour en terminer avec GLM, j'envisage d'implémenter des extensions en GLSL.
    </paragraph>
    <paragraph>
      Sinon, à moyen terme je souhaiterai sortie un benchmark open source pour les tests de CPUs et de compilateurs puis plus tard de GPUs. Cette idée mais venu lors de la réalisation de tests entre différents compilateurs avec mon RayTracer. Mon idée est de regrouper un bon nombre de mes programmes, souvent non disponible, dans un tout. Ce benchmark comprendrai alors de nombreux tests liés au rendu de graphiques ou a la programmation de jeux : Raytracing, cloth simulation, création de géométrie de terrain, image processing, skeleton animation, etc. Ce projet de nomme pour le moment Trucmark.
    </paragraph>
    <paragraph>
      Pour ce qui est de diffusion de connaissances, j'annonçais mon intention de réaliser un nouveau pack de samples il y q quelques temps déjà. Malheureusement, rien n'a été publié. Je sais que ce type de contenu est très appréciez et c'est d'ailleurs ce qui a attiré les premiers visiteurs sur ce site. Cependant, ce n'est pas le plus amusant à programmer et ma ligne éditorial ne me convient plus. Bref, toutes mes excuses pour ses illusions. Pour ce qui est des articles, je souhaites continuer dans la lancé actuelle.
    </paragraph>
  </post>

  <post index="0107" date="05/06/2006" std-date="2006-06-05T21:00:00.00Z" title="Game Development Magazin">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      Un nouveau magazine nommé <link href="http://www.gamedevelopmentmag.com">Game Development Magazin</link> est disponible. L'initiative est courageuse et mérite donc notre soutien. Pour la qualité du contenu, je n'ai pas aucune idée, j'investis dès que je rentre en France.
    </paragraph>

  </post>

  <post index="0106" date="28/05/2006" std-date="2006-05-28T14:00:00.00Z" title="Interview de JeGX">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      JeGX est un amateur de programmation graphiques depuis de nombreuses années mais aussi le webmaster de
      <link href="http://www.ozone3d.net">oZone3D.net</link>, le site qui, à mon avis, diffuse le plus de connaissance
      depuis près d'un an.
    </paragraph>
    <paragraph>
      C'est également le créateur d'Hyperion, un demo-system qui a notamment une vocation pédagogique mais
      qui surtout repose sur une architecture particulièrement moderne basé sur LUA et XML.
    </paragraph>
    <paragraph>
      C'est pour mon plus grand plaisir que JeGX a répondu à mon invitation pour une interview.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="./article/jegx.pdf" title="L'interview au format PDF" />
      <source-element type="Lien" href="http://www.game-lab.com/index.php?section=tutorials&amp;section_id=5&amp;p=tutorial&amp;action=showtut&amp;id=245" title="L'interview sur Game-Lab" />
    </source-list>
  </post>

  <post index="0105" date="22/05/2006" std-date="2006-05-23T14:00:00.00Z" title="GLM 0.4.1 disponible">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      Une mise à jour de GLM est disponible.
      Elle ajoute seulement des exemples d'utilisation avec OpenGL.
      Ils sont disponible avec GCC, MinGW, VC7.1 et VC8.0.
    </paragraph>

    <source-list>
      <source-element type="Téléchargement" href="http://prdownloads.sourceforge.net/glf/glm-0.4.1.zip?download" title="GLM 0.4.1 (zip, 1.6 Mo)" />
      <source-element type="Téléchargement" href="http://prdownloads.sourceforge.net/glf/glm-0.4.1.7z?download" title="GLM 0.4.1 (7z, 522 Ko)" />
      <source-element type="Lien" href="http://glm.g-truc.net" title="Le site de GLM" />
    </source-list>
  </post>

  <post index="0104" date="17/05/2006" std-date="2006-05-17T20:00:00.00Z" title="GLM 0.4.0 disponible">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      Cette nouvelle version introduit les premières fonctionnalités de GLSL 1.2
      via extensions et directement dans le core pour la partie concernant les constructeurs.
      De plus, diverse extensions ont été ajouté ou mise à jours.
      Enfin, il n'est plus nécessaire d'inclure windows.h avant glm.h quand windows.h est nécessaire.
    </paragraph>

    <source-list>
      <source-element type="Téléchargement" href="http://prdownloads.sourceforge.net/glf/glm-0.4.0.zip?download" title="GLM 0.4.0" />
      <source-element type="Lien" href="http://glm.g-truc.net" title="Le site de GLM" />
    </source-list>
  </post>

  <post index="0103" date="13/05/2006" std-date="2006-05-13T12:00:00.00Z" title="Le MegaTexturing par John Carmark">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      Dans une interview donné à Gamer Within, John Carmack présent le MegaTexturing, méthode qui sera utilisée par Enemy Territory: Quake Wars (ETQW) pour le rendu de terrain.
    </paragraph>
    <paragraph>
      N'ayons pas peur des mots, John Carmack en fait de tonnes sur cette solution qu'il dit plus révolutionnaire que le normal mapping introduit par Doom3. L'E3, qui se déroule actuellement, explique peut-être son engommant démesurer. Elle est sans nul doute intéressante mais voyons ce qui se cache sous ce nom très commercial.
    </paragraph>
    <paragraph>
      Le méga texturing semble être une sérieuse optimisation du texture splatting dont le principe est d'utiliser un certain nombre de tiles répéter sur le terrain. Cette méthode augmente virtuellement la résolution de la texture du terrain ce qui augmente la qualité du rendu visuel.
    </paragraph>
    <paragraph>
      Pour le texture splatting classique, le coût en mémoire vidéo est ainsi bien plus faible mais le rendu nécessite une passe par tile divisé par le nombre d'unités de textures de la carte graphique (au mieux). L'optimisation est très complexe et très variable suivant les cartes. Selon mes tests, le texture splatting utilisant 5 tiles est jusqu'à 4.5 fois plus lent que le texture strechting (une grosse texture étirée sur le terrain) de résolution réel équivalent à la résolution virtuelle du texture splatting. (Voir l'image ci-dessous)
    </paragraph>
    <paragraph>
      La méthode de John Carmack semble améliorer le texture splatting en utilisant seulement une texture avec tous les tiles intégrés. Cette solution peut réduire le nombre de passes à une seule mais le fragment shader pour sera plus long et le nombre d'attributs envoyés au GPU plus grand. Chaque tile, pouvant nécessiter un attribut pour ses coordonnées de textures. Nous pouvons également imaginer un pattern de shaders dédiés à une application pour lequel il ne sera pas nécessaire d'envoyer des coordonnées de textures supplémentaires. Enfin, un problème se pose au niveau du filtrage des textures sur les bordures. Si tous les tiles sont juxtaposés, le filtrage risque de provoquer des bugs d'affichages en mélangeant la couleur de texels n'appartenant pas au tile.
    </paragraph>
    <paragraph>
      Cette méthode est prometteuse notamment pour le rendu de terrain de très haute résolution. Là où la quantité de mémoire vidéo nous empêchera d'avoir une texture de 32768*32768, le MegaTexturing répondra présent de manière plus rapide que le texture splatting traditionnel. A mon avis, il est possible de l'implémenter pour un investissement temps raisonnable, le plus ennuyeux étant la création des ressources notamment l'alpha map qui pour être vraiment réusite demande un éditeur dédié.
    </paragraph>
    <paragraph>
      Enfin, John Carmack nous informe que l'implémentation utilisé par ETQW nécessite une carte actuelle mais qu'elle pourrait s'appliquer au bonne veille 3DFX. Dans l'absolue, je suis d'accord mais dans la pratique il n'y a pas API qui le permet, il faudra probablement passer par un fragment shader, c'est à dire que la technique nécessiterait au moins une Ge-Force 5200 ou une Radeon 9500 voir un GeForce 3 / Radeon 7000.
    </paragraph>
    <paragraph>
      Remarque : Le soft de test n'est pas disponible pour le moment, si vous êtes vraiment intéressé, contactez moi.
    </paragraph>

    <image-list>
      <image-element title="Stat" small="./post/0103-small.jpg" normal="./post/0103-normal.jpg" />
    </image-list>
    <source-list>
      <source-element type="Lien" href="http://www.gamerwithin.com/?view=article&amp;article=1319" title="L'interview" />
      <source-element type="Lien" href="http://www.gamedev.net/community/forums/topic.asp?topic_id=390751" title="Topic de GameDev.net" />
      <source-element type="Lien" href="http://www.opengl.org/discussion_boards/ubb/ultimatebb.php?ubb=get_topic;f=3;t=014472" title="Topic de OpenGL.org" />
    </source-list>
  </post>

  <post index="0102" type="graphics-hardware" date="08/05/2006" std-date="2006-05-08T20:00:00.00Z" title="CPU Intel : Adieu Pentium, bonjour Core">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      Intel a dévoilé le nom commercial de sa nouvelle génération de processeur x86 connue sous le nom de code Conroe. Pas de Pentium 5 en vue, il s'agira du Core 2. C'est un processeur bi-core, dépourvu d'instructions 64 bits et composé de 14 pipelines contre 30 pour le Pentium 4.
    </paragraph>
    <paragraph>
      A son introduction, il sera cadencé entre 1.83 GHz et 2.66 GHz, mais il écrasera sans problème le Pentium 4 principalement dans les applications multithreadé grâce à une architecture à très bon rendement. Les 3.8 GHz du Pentium 4 sont utilisés, dans des proportions non négligeables, à l'attente du vidage des pipelines en cas d'erreurs de prédiction. De plus, la version bi-core du Pentium 4, dites 'D', est vraiment déplorable.
    </paragraph>
    <paragraph>
      La désignation Core a déjà été utilisée pour les processeurs nom de code Yonah héritiers de l'architecture P6 utilisé par le Pentium 2, Pentium 3 et Pentium M. Il est principalement utilisé sur les portables et les Mac Intel. Le Core 2 est lui aussi un héritier du P6 et ne reprends du Pentium 4 que son bus Quad Pump (Tout comme le Core Duo et les derniers Pentium M). C'est surtout le vrai nouveau représentant d'Intel pour les ordinateurs de bureau.
    </paragraph>
    <paragraph>
      Je suis personnellement liée à un Dothan 1.5 GHz (prédécesseur du Yonah) sur mon portable et les performances sont vraiment bonnes, parfois supérieur à mon Athlon XP 2.083 GHz. Le Core 2 s'annonce comme un excellent cru, AMD a du souci à ce faire. Selon les premiers tests, un Core 2 à 2.6 GHz bat un Athlon 64 FX 2.6 GHz sur presque tous les sentiers.
    </paragraph>
    <paragraph>
      Mon point de vue à ce jour est le suivant: Oubliez définitivement le Pentium 4, achetez des Athlon 64 pour jouer, des Athlon X2 pour programmer et pour demain tout dépendra du positionnement au niveau du prix d'AMD par rapport à Intel car l'Athlon X2 et le Core 2 sont tout deux de bons processeurs.
    </paragraph>

  </post>

  <post index="0101" date="02/05/2006" std-date="2006-05-02T14:00:00.00Z" title="Vertex Buffer Object">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      Un nouvel article sur les Vertex Buffer Objects est disponible.
      Il se veut particulièrement complet.
    </paragraph>
    <paragraph>
      Il est accompagné d'une série d'exemples présentant les fonctionnalités abordées ainsi
      qu'une utilisation conjointe avec GLSL et Cg.
    </paragraph>

    <source-list>
      <source-element type="Téléchargement" href="./article/vbo.pdf" title="L'article" />
      <source-element type="Téléchargement" href="./article/vbo.zip" title="Exemple .zip (8.5 Mo)" />
      <source-element type="Téléchargement" href="./article/vbo.7z" title="Exemple .7z (2.5 Mo)" />
    </source-list>
  </post>

  <post index="0100" date="29/04/2006" std-date="2006-04-29T14:00:00.00Z" title="Orange 0.1 Alpha">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Orange est un framework pour la création de jeux et d'applications graphiques.
    </paragraph>
    <list title="Voici la liste des features qu'il contient">
      <element>Scene graph</element>
      <element>Gestionnaire d'erreurs et logger (Dont un log XML)</element>
      <element>Gestionnaire de ressources avec lecture depuis des archives au format 7z</element>
      <element>Gestionnaire d'objects par composants</element>
      <element>Détection des fuites de mémoire.</element>
      <element>Gestionnaire de langues</element>
      <element>Ensemble de patterns (Singleton, factory, tree, smart pointer...)</element>
      <element>Outils mathématique (Intégration de GLM)</element>
    </list>
    <paragraph>
      Le projet est décomposé en plusieurs packages. Ceci est le package principal, nommé core, qui est totalement indépendant de la plateforme. D'autres packages, qui existent mais ne sont pas encore disponible, permettent de gérer le son, le temps, les threads, la fenêtre, etc... Ces packages plug-in sont eux dépendant de la plateforme mais s'efforce de proposer une interface indépendante. Des exemples présentent la plus part de fonctionnalités du framework.
    </paragraph>
    <paragraph>
      Orange est distribué sous licence LGPL.
    </paragraph>
    <paragraph>
      Ceci constituât la 100ème news de G-Truc Creation. :).
    </paragraph>

    <source-list>
      <source-element type="Téléchargement" href="./project/orange/orange-0.1.0.zip" title="Orange 0.1 .zip (1.8 Mo)" />
      <source-element type="Téléchargement" href="./project/orange/orange-0.1.0.7z" title="Orange 0.1 .7z (1.1 Mo)" />
    </source-list>
  </post>

  <post index="0099" date="26/04/2006" std-date="2006-04-26T14:00:00.00Z"  title="Cloth simulation">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Je réalise actuellement une cloth simulation. Voici quelques screenshots :
    </paragraph>

    <image-list>
      <image-element title="Cloth 1" small="./post/0099-1-small.jpg" normal="./post/0099-1-normal.jpg" />
      <image-element title="Cloth 2" small="./post/0099-2-small.jpg" normal="./post/0099-2-normal.jpg" />
      <image-element title="Cloth 3" small="./post/0099-3-small.jpg" normal="./post/0099-3-normal.jpg" />
      <image-element title="Cloth 4" small="./post/0099-4-small.png" normal="./post/0099-4-normal.png" />
    </image-list>
  </post>

  <post index="0098" date="23/04/2006" std-date="2006-04-23T14:00:00.00Z" title="GLM 0.3.2 et roadmap">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      GLM 0.3.2 corrige deux bugs importants. Le premier bug provient de la définition de l'opérateur de division des mat4 et imat4 et le second est une erreur dans l'accès aux composantes des vecteurs par (s t p q).
    </paragraph>
    <paragraph>
      Pour la suite, la version 0.4 complètera les opérateurs des matrices et des vecteurs et apportera des fonctionnalités de GLSL 1.2. Tout d'abord, la clarification sur les conversions sera intégrée. De plus, les matrices 4 par 3 et l'"outer product" seront disponibles sous forme d'extensions. La fonction "transpose" est déjà disponible sous forme d'extension.
    </paragraph>
    <paragraph>
      La version 0.5 intègrera les nouvelles fonctionnalités de GLSL 1.2 dans le core de GLM.
    </paragraph>
    <paragraph>
      La version 0.6 supportera les swizzles opérateurs en lecture et écriture. (cad: vec3 v1(1.0, 2.0, 3.0); vec3 v2 = v1.xxx; v1.zyx = v;).
    </paragraph>

    <source-list>
      <source-element type="Téléchargement" href="http://prdownloads.sourceforge.net/glf/glm-0.3.2.zip?download" title="GLM 0.3.2" />
      <source-element type="Lien" href="http://glm.g-truc.net" title="Le site de GLM" />
    </source-list>
  </post>

  <post index="0097" date="19/04/2006" std-date="2006-04-19T17:00:00.00Z" title="Réouverture de Game-Lab">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      Game-Lab réouvre ses portes. Ce site propose l'une des plus belle collection de tutoriaux sur la création et la modification de jeux vidéo. Pour l'occasion, l'article sur le smart pointer a été publié sur Game-Lab.
    </paragraph>
    <!--<![CDATA[http://www.game-lab.com/index.php?section=tutorials&section_id=1&p=tutorial&action=showtut&id=243]]>-->

    <source-list>
      <source-element type="Lien" href="http://www.game-lab.com" title="Le site Game-Lab" />
      <source-element type="Lien" href="http://www.game-lab.com/phpBB2/viewtopic.php?t=2625" title="Smart Pointer sur Game-Lab" />
    </source-list>
  </post>

  <post index="0096" date="07/04/2006" std-date="2006-04-07T17:40:00.00Z" title="Smart Pointer">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      Un nouvel article un disponible.
      Il présent le concept des smart pointer,
      un outil indispensable pour une résolution robuste des problemes de gestions de la mémoire.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="./article/smart_ptr.pdf" title="l'article" />
      <source-element type="Lien" href="./article/smart_ptr.zip" title="L'exemple d'implémentation" />
    </source-list>
  </post>

  <post index="0095" date="28/03/2006" std-date="2006-03-28T14:00:00.00Z" title="OpenGL Mathematics 0.3.1">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      Cette mise à jour apporte le support de GCC 4.0 sous MacOS X et le support GCC 4.0 et 4.1 sous Linux.
    </paragraph>

    <source-list>
      <source-element type="Téléchargement" href="http://prdownloads.sourceforge.net/glf/glm-0.3.1.zip?download" title="GLM 0.3.1" />
      <source-element type="Lien" href="http://glm.g-truc.net" title="Le site de GLM" />
    </source-list>
  </post>

  <post index="0094" date="25/03/2006" std-date="2006-03-25T17:00:00.00Z" title="OpenGL 2.1 et futur">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
    </meta>

    <paragraph>
      Lors de la <link href="http://www.gdconf.com/">GDC 2006</link>, s'est déroulé une journée de tutoriaux sur
      OpenGL comme chaque année. Une partie de cette journée a été consacré à OpenGL 2.1 et l'avenir d'OpenGL,
      elle nous est relayée par Dave Astle sur
      <link href="http://www.gamedev.net/columns/events/gdc2006/article.asp?id=233">GameDev.net</link>
      et je vous relaye à mon tout avec quelques compléments.
    </paragraph>
    <paragraph>
      On nous apprend tout d'abord qu'OpenGL charge de propriétaire, pour passer dans les mains du
      <link href="http://www.khronos.org/">Khronos Group</link>. Ceci était attendu, voir espéré,
      suite aux mauvaises nouvelles du coté de SGI, actuel propriétaire d'OpenGL, qui pourrait déposé le bilan cette année.
    </paragraph>
    <paragraph>
      Pour ce qui est d'OpenGL 2.1, <link href="http://oss.sgi.com/projects/ogl-sample/registry/ARB/pixel_buffer_object.txt">
        ARB_pixel_buffer_object
      </link> et
      <link href="http://oss.sgi.com/projects/ogl-sample/registry/EXT/texture_sRGB.txt">EXT_texture_sRGB</link>
      viennent compléter le core d'OpenGL.
    </paragraph>
    <paragraph>
      <link href="http://oss.sgi.com/projects/ogl-sample/registry/ARB/pixel_buffer_object.txt">ARB_pixel_buffer_object</link>
      reprend l'API des vertex buffer object (<link href="">ARB_vertex_buffer_object</link>)
      pour charger des pixels en mémoire. Cette fonctionnalité est disponible à partir des Radeon de première génération
      et des GeForce2 mx.
    </paragraph>
    <paragraph>
      Pour <link href="">EXT_texture_sRGB</link>, le format sRGB représente un système de couleurs non
      linéaire standardisé par l'International Electrotechnical Commission (IEC) sous la référence IEC 61966-2-1.
      Concrètement, pour une couleur sur 8 bits avec une texture usuelle, les 8 bits de données sont convertis
      dans un interval [0, 1] de manière linéaire. Avec un système de couleur sRGB se n'est plus le cas,
      les texels subissent une correction équivalente à du gamma 2.2. Le screenshot ci-dessous illustre le procédé.
      Ce format est disponible chez nVidia pour les GeForce FX et supérieur depuis les drivers 80.
    </paragraph>
    <paragraph>
      Intégré à OpenGL avec la version 2.0 par la promotion de <link href="http://oss.sgi.com/projects/ogl-sample/registry/ARB/texture_float.txt">ARB_texture_float</link>, les textures flottantes subissent une modification mineure. Si la carte ne supporte pas les textures flottantes, OpenGL retourne maintenant une erreur au lieu de tenter une conversion en entier.
    </paragraph>
    <paragraph>
      Deux nouvelles extensions sont prévues. La première, ARB_framebuffer_object est la promotion de <link href="http://oss.sgi.com/projects/ogl-sample/registry/EXT/framebuffer_object.txt">EXT_framebuffer_object</link>, <link href="http://oss.sgi.com/projects/ogl-sample/registry/EXT/framebuffer_multisample.txt">EXT_framebuffer_multisample</link> et <link href="http://oss.sgi.com/projects/ogl-sample/registry/EXT/framebuffer_blit.txt">EXT_framebuffer_blit</link> qui décrivent la notion de framebuffer object introduit récemment et qui a conquit les développeurs OpenGL. Les framebuffer objects sont particulièrement utiles et efficaces pour le rendu sur texture. Ils viennent remplacer l'immonde <link href="http://oss.sgi.com/projects/ogl-sample/registry/ARB/wgl_pbuffer.txt">WGL_ARB_pbuffer</link> mais ne sont disponible qu'à partir du GeForce FX et de Radeon 9500. La seconde est nommée ARB_synch_object et apporte des perspectives très intéressante au niveau de la synchronisation entre le CPU et le GPU. Jusqu'à présent, seuls deux mécanismes permettent de gérer cette synchronisation, glFinish et glFlush. glFlush force les commandes émises précédemment à commencer leur exécution et glFinish force l'achèvement de toutes les commandes OpenGL. Cette extension permet de forcer l'achèvement d'une partie du code. Par exemple, lors de l'upload des vertrices, cette extension permet de s'assurer que les données ont bien été envoyées dans la mémoire de la carte graphique avant de les modifier. Cette extension est basée sur <link href="http://oss.sgi.com/projects/ogl-sample/registry/NV/fence.txt">NV_fence</link>, disponible pour toutes les cartes nVidia depuis le GeForce 256.
    </paragraph>
    <paragraph>
      Enfin dernière évolution: GLSL 1.2. Pas de geometry shaders (nommés primitive shaders pour OpenGL) pour le moment, mais on pouvait s'y attendre du fait du processus de développement d'OpenGL basé sur la promotion. Il faudra attendre l'arrivé des extensions propriétaires qui seront disponible en même temps que les cartes. Au niveau des changements, il y a tout d'abord la possibilité d'accéder à un mipmap spécifique. Un nouveau qualificatif nommé "centroid" nous permettra de contrôler un texel lorsqu'il n'est pas couvert par un fragment ce qui pourrait être utile pour des tâches de filtrage ou éventuellement pour l'occlusion culling. Il est également état d'un nouvel attribut pour les fragments shaders lors de l'utilisation des points sprites basé sur un attribut déjà existant sous OpenGL ES. Je n'ai malheureusement pas trouvé cet attribut dans les spécifications de GLSL ES.
    </paragraph>
    <paragraph>
      Au niveau du langage lui-même, GLSL devient plus souple au niveau des conversions. Il était avant impossible d'appeler la fonction void exemple(float parameter) ainsi exemple(1) car 1 est un entier. Avec GLSL 1.2, la conversion sera automatiquement faite. Ce mécanisme fonctionne avec toutes les types primitifs ce qui inclut vec3, ivec2, mat4 par exemple mais le nombre de composantes doit correspondre. ivec3 peut-être convertie en vec3 par exemple mais pas en ivec4. Les tableaux disposent également de nouvelles possibilités au niveau des comparaisons ou de l'affectation qui seront direct si les tableaux ont la même taille. GLSL 1.2 supportera les matrices non carrés et deux nouvelles fonctions : transpose() et outerProduct(). Enfin pour utiliser GLSL 1.2, il faudra utiliser #version 120.
    </paragraph>
    <paragraph>
      OpenGL 2.1 sera annoncé au SIGGRAPH 2006.
    </paragraph>
    <paragraph>
      De plus, de nombreuses informations sur les sujets de réflexions de l'ARB ont étés présentés notamment sur OpenGL 3.0 qui devrait être divisé en deux profiles. Un premier reprend OpenGL tel que nous le connaissons et un deuxième apportera une vague de changement pour créer OpenGL LM (Lean and Mean), une version agressive d'OpenGL prévu pour concurrencer Direct3D sur le secteur des jeux. OpenGL est un API très souple voir trop souple ce qui limite les optimisations et complexifier l'implémentation. OpenGL LM retirera toutes les parties d'OpenGL qui ne sont pas directement implémenté dans les cartes graphiques. Concrètement et dans l'état du projet, OpenGL LM ne supporterait que les VBOs pour le transfère de la géométrie. Un nouvel objet serait créé pour la gestion de tous les états. Le fixe pipeline disparaîtrait et le model objet d'OpenGL devrait charger. Ainsi, à la place des unsigned int pour les noms d'objets nous utiliserions des GLobject qui ne seraient rien d'autres que des void*. Toutes les nouveautés d'OpenGL LM devraient voir le jour sous forme d'extensions dans un premier temps. Voici qui est intéressant, OpenGL LM reprend le principe de DirectX 10 d'une API simplifiée mais sans layer, le tout en laissant OpenGL backward compatible.
    </paragraph>

    <image-list>
      <image-element title="Illustration du système de couleur sRGB" small="./post/0094-small.jpg" normal="./post/0094-normal.jpg" />
    </image-list>
    <source-list>
      <source-element type="Lien" href="http://www.gamedev.net/columns/events/gdc2006/article.asp?id=233" title="Le résumé de Dave Astle" />
      <source-element type="Lien" href="http://www.gdconf.com/" title="Le site de la GDC" />
      <source-element type="Lien" href="http://www.khronos.org/" title="Le site du Khronos Group" />
      <source-element type="Lien" href="http://www.siggraph.org/" title="Le site du SIGGRAPH" />
    </source-list>
  </post>

  <post index="0093" date="24/03/2006" std-date="2006-03-24T12:00:00.00Z" title="GT Window 1.1">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Une update de la bibliothèque de fenêtrage est disponible.
      Elle apporche le support de Visual C++ 6.0 et 8.0 et améliore le support de MinGW pour l'édition WGL.
    </paragraph>

    <source-list>
      <source-element type="Téléchargement" href="./project/window/gt-window-wgl-1.1.0.zip" title="GT Window 1.1 WGL Edition (ZIP : 3.7 Mo)" />
      <source-element type="Téléchargement" href="./project/window/gt-window-wgl-1.1.0.7z" title="GT Window 1.1 WGL Edition (7Z : 797 Ko)" />
      <source-element type="Téléchargement" href="./project/window/gt-window-d3d9-1.1.0.zip" title="GT Window 1.1 Direct3D 9 Edition (ZIP : 529 Ko)" />
      <source-element type="Téléchargement" href="./project/window/gt-window-d3d9-1.1.0.7z" title="GT Window 1.1 Direct3D 9 Edition (7Z : 231 Ko)" />
    </source-list>
  </post>

  <post index="0092" date="21/03/2006" std-date="2006-03-21T08:00:00.00Z" title="Flux RSS">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      Voici une première évolution de G-Truc Creation depuis sa version 4 avec l'arrivé d'un flux RSS 2.0.
      Pour l'occasion, la dernière version des sources du site a été uploadé.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://www.g-truc.net/rss.xml" title="Le flux RSS" />
    </source-list>
  </post>

  <post index="0091" date="16/03/2006" std-date="2006-03-16T00:00:00.00Z" title="Actualité d'Ozone3D">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      Ozone3D demeure très actif avec la publication d'une nouvelle version d'Hyperion ainsi que de nouveaux tutoriaux.
    </paragraph>
    <paragraph>
      Un tutorial sur l'éclairage basé sur Phong est disponible, il aborde notamment les spots lights avec pénombre.
    </paragraph>
    <paragraph>
      Un autre tutorial aborde le format 3DO de ATI pour la compression de normalmaps.
      En effet, il n'est pas recommandé d'utiliser un format S3TC pour la compression de normalmaps car ce format est destructif ce qui entraîne une dénormalisation des normales.
    </paragraph>
    <paragraph>
      ATI a donc introduit la compression ATI2N avec les cartes X*00, présenté par Ozone3D,
      puis le format ATI1N avec la série X1*00. Espérons que nVidia entre dans la danse
      et que cette technologie se banalise à la manière du S3TC.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://www.ozone3d.net/tutorials/bump_map_compression.php?lang=1" title="Compression des Normal Maps Renormalisation Swizzled DXT5 - ATI 3Dc" />
      <source-element type="Lien" href="http://www.ozone3d.net/tutorials/glsl_lighting_phong.php" title="Eclairage en GLSL Modèle de Phong" />
      <source-element type="Lien" href="http://www.ati.com/developer/compressonator.html" title="TheCompressonator, outil de compression de texture de ATI" />
    </source-list>
  </post>

  <post index="0090" date="16/03/2006" std-date="2006-03-16T00:00:00.00Z" title="GeForce 7600 et 7900">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      Les fabricants ne se lassent décidément pas de sortir de "nouvelles" cartes graphiques toujours plus puissantes.
    </paragraph>
    <paragraph>
      Le GeForce 7600 GT vient prendre la relève de l'excellent GeForce 6600 GT avec une bonne progression
      au niveau des performances. Quand au GeForce 7900 GTX, le plus haut de gamme de nVidia,
      il ne améliore que très peu les performances du GeForce 7800 GTX 512.
    </paragraph>
    <paragraph>
      Technologiquement nVidia reste légèrement en retrait par rapport à ATI notamment sur le point
      des formats de texture à nombre flottant utilisé pour le rendu HDR.
      Pour les performances Radeon X1900 et GeForce 7900 se valent cependant l'architechture du Radeon X1900 dispose
      d'un net avantage pour les branchements dynamiques c'est pourquoi je lui accordes l'avantage.
      Pour le milieu de gamme, ATI ne semble pas en mesure de lutter contre le GeForce 7600 GT.
    </paragraph>
    <paragraph>
      A mon sens, ce qui ressort de ce nouveau chip c'est avant tout une bonne stratégie commerciale.
      Habituellement, ATI et nVidia ajoutent 10-20% de transistors pour chaque nouvelle génération de chips.
      Avec l'amélioration du procédé de gravure la taille du chip reste relativement stable.
      Pour cette génération, nVidia n'a pas ajouté de transistors mais en a retiré tout en passant
      d'un procédé en 110 nanomètres à un procédé en 90 nanomètres.
      Conclusion,le GeForce 7900 fait 2/3 de la taille du GeForce 7800 et le GeForce 7600 est plus petit que le GeForce 6600.
      En conséquence, la nouvelle génération chauffe moins et devrait coûter moins chère à nVidia
      car le coût d'un chip est directement proportionnel à sa taille.
    </paragraph>
    <paragraph>
      Pour les nouvelles technologies, il faudra attendre la prochaine génération qui supportera Direct3D 10
      dont notamment les geometry shaders et les shaders unifiés...
    </paragraph>

  </post>

  <post index="0089" date="06/03/2006" std-date="2006-03-06T00:00:00.00Z" title="Game Programming Gems 6">
    <meta>
      <tag>gtc-tech-devel-book</tag>
    </meta>

    <paragraph>
      Un nouveau volume de la série des Game Programming Gems est disponible au Royaume Uni.
      Il sera disponible le 8 mars au Etats Unis et le 30 mars en France.
    </paragraph>
    <paragraph>
      Espérons que ce volume soit aussi riche que le précédent !
    </paragraph>

    <image-list>
      <image-element title="Resultat du test" small="./post/0089-small.jpg" normal="./post/0089-normal.jpg" />
    </image-list>
  </post>

  <post index="0088" date="27/02/2006" std-date="2006-02-27T00:00:00.00Z" title="Error Handling avec logger XML">
    <meta>
      <tag>gtc-tech-project</tag>
      <tag>gtc-tech-devel-xml</tag>
    </meta>

    <paragraph>
      Je viens de mettre à jour la bibliothèque de debuging.
      Elle dispose de plusieurs améliorations tel qu'un auto-flush des loggers
      ce qui peut être utile en cas de crash du programme.
    </paragraph>
    <paragraph>
      J'ai également ajouté un logger XML comme je l'annonçais précédemment.
      Pour éviter une dépendance absolue avec TinyXML, le parseur XML utilisé,
      la bibliothèque est propose en deux versions, la première sans le parseur XML et la deuxième avec.
    </paragraph>
    <paragraph>
      Le projet intègre un exemple de transformation XSLT du log d'exemple,
      ce résultat est également disponible via le lien ci-dessous.
      Cette transformation est réalité avec Xalan.
    </paragraph>
    <paragraph>
      La bibliothèque et les exemples ont étés compilés et testés sous
      VC6.0, VC7.1, VC8.0, MinGW 3.2, MinGW 3.3 et MinGW 3.4.
    </paragraph>

    <source-list>
      <source-element type="Téléchargement" href="./project/error/error-1.0.zip" title="Error 1.0" />
      <source-element type="Lien" href="./project/error/log/index.html" title="Log généré avec la bliothèque et transformé avec Xalan" />
      <source-element type="Lien" href="http://xml.apache.org" title="Le site de Xalan" />
    </source-list>
  </post>

  <post index="0087" type="g-truc-content-articles" date="24/02/2006" std-date="2006-02-24T00:00:00.00Z" title="Precompiled headers">
    <meta>
      <tag>gtc-tech-devel-cpp</tag>
    </meta>

    <paragraph>
      Un nouvel article est disponible.
      Il traite des precompiled headers,
      un outil pour diminuer le temps de compilation d'un projet avec GCC (>= 3.4) et Visual C++ (>= 6.0).
      Cette technique est notamment utilisé dans les SDKs de Doom3 et Quake4 avec des résults ... intéressant !
    </paragraph>

    <source-list>
      <source-element type="Téléchargement" href="./article/precompiled.pdf" title="L'article" />
      <source-element type="Téléchargement" href="./article/precompiled.zip" title="Un exemple" />
      <source-element type="Lien" href="./article.html" title="La page des articles" />
    </source-list>
  </post>

  <post index="0086" date="19/02/2006" std-date="2006-02-19T00:00:00.00Z" title="OpenGL Mathematics 0.3">
    <meta>
      <tag>gtc-tech-project-glm</tag>
      <tag>gtc-tech-project-ovtsa</tag>
    </meta>

    <paragraph>
      Une nouvelle version de GLM est disponible.
      Elle améliore la conformité avec GLSL notamment au niveau de la création et conversion d'objets.
      De nouvelles extensions ont étés ajoutés.
      Ainsi GLM permet la gestion des nombres flottants à doubles précisions et démi précisions.
      De plus, plusieurs extensions ont étés développés pour améliorer mes performances des fonctions exponentielles
      et trigonométriques au détriment d'une précision légèrement réduite.
      Enfin une documentation Doxygen a été ajouté.
    </paragraph>
    <paragraph>
      Le raytracer a été mise à jour et le tout a été testé sous GCC 3.2.3, GCC 3.4.2, Visual C++ 7.1 et Visual C++ 8.0.
    </paragraph>

    <source-list>
      <source-element type="Téléchargement" href="http://prdownloads.sourceforge.net/glf/glm-0.3.zip?download" title="GLM 0.3" />
      <source-element type="Téléchargement" href="http://prdownloads.sourceforge.net/glf/raytrace-b2.0.zip?download" title="Raytrace compression zip (1.4 Mo)" />
      <source-element type="Téléchargement" href="http://prdownloads.sourceforge.net/glf/raytrace-b2.0.exe?download" title="Raytrace auto-exactable (1.0 Mo)" />
      <source-element type="Lien" href="http://glm.g-truc.net" title="Le site de GLM" />
    </source-list>
  </post>

  <post index="0085" date="15/02/2006" std-date="2006-02-15T00:00:00.00Z" title="Error Handling Library, photos de Londres">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Un nouveau projet est disponible.
      Il s'agit d'une bibliothèque destinée à faciliter la phase de debuging lors du developpement d'un projet.
    </paragraph>
    <paragraph>
      Pour cela, trois outils sont intégrés.
      Premièrement, un système de log dans des fichiers textes, dans la console,
      dans Visual C++ ou enfin dans un message box.
      Deuxièmement, il est possible de déterminer s'il y a des fuites de mémoires et même de les quantifier.
      Enfin, pour aider à la recherche des fuites, il est possible de traquer les fuites sur des instances de classes.
      Un exemple inclut, montre tous les utilisations de cette bibliothèque.
    </paragraph>
    <paragraph>
      Je vous invite à decouvrir ce projet surtout si vous n'utilisez pas d'outils tel que Boundchecker.
      Une update est prévue, elle intégrera un logger XML avec transformation en XHTML via XSLT.
    </paragraph>
    <paragraph>
      Dans un tout autre registre, je reviens de quelques jours de visites à Londre, des photos sont disponibles.
    </paragraph>

    <source-list>
      <source-element type="Téléchargement" href="./project/error/error-0.9.zip" title="Error 0.9 pour VC6.0, VC7.1 et VC8.0." />
    </source-list>
  </post>

  <post index="0084" date="06/02/2006" std-date="2006-02-06T00:00:00.00Z" title="G-Truc Creation Version 4">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      Comme vous pouvez le voir une toute nouvelle version de G-Truc Creation est disponible.
      Elle utilise toujours massivement XML, XSLT et CSS et grâce à l'utilisation de XML pour la précédente version,
      j'ai récupéré tous les données de la version 3.
    </paragraph>
    <paragraph>
      Le nouveau design à été tous spécialement étudier pour piquer un peu moins vos yeux,
      l'occasion de vous conseillez à nouveau d'utiliser un navigateur respectant les standards tel FireFox ou Opera.
      Internet Explorer (même la version 7 beta 2) reste une horreur.
    </paragraph>
    <paragraph>
      Au niveau des nouvelles parties, j'ai commencé un listing des GPUs donc le but est de présenter les performances.
      Si vous souhaitez connaitre les features d'une carte graphique, repportez vous plutôt à GL View,
      un soft ultime à cet effet.
    </paragraph>
    <paragraph>
      De plus, un "dictionnaire" est destiné à définir brièvement des concepts liés à la programmation de jeux et
      propose quelques références sur ce concept.
    </paragraph>
    <paragraph>
      Enfin, j'ai ajouté une petite page avec les albums de mes artistes préférés afin de leur faire un peu de pub :p.
    </paragraph>
    <paragraph>
      Pour bien commencé cette nouvelle version, j'ai ajouté deux commentaires de livres, le premier conserne
      More OpenGL Game Programming et le second décrit Game Programming Golden Rules.
    </paragraph>
    <paragraph>
      Enfin, j'ai commencé une nouvelle génération de samples, qui seront à la fois OpenGL et Direct3D.
      Ces samples sont basés sur une bibliothèque nommée GL Window. Je l'ai écrit afin de proposer une
      API identique pour la fenêtre graphique avec OpenGL ou Direct3D ceci pour limiter le "bruit"
      que le code de la fenêtre engendre.
    </paragraph>
    <paragraph>
      Si vous trouvez des bugs n'hésitez pas à me contacter.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="./contact.html" title="Contact" />
      <source-element type="Lien" href="./gpu.html" title="La page cartes graphiques" />
      <source-element type="Lien" href="./book.html" title="Commentaire de Livres" />
      <source-element type="Lien" href="./sample.html" title="La page samples" />
      <source-element type="Lien" href="./dictionary.html" title="La page dictionnaire" />
      <source-element type="Lien" href="./artiste.html" title="La page artistes" />
      <source-element type="Téléchargement" href="./project/glw/glw_wgl_v1.0.0.zip" title="GLW 1.0.0 GLW Edition pour VisualC++ 7.1 et MinGW." />
      <source-element type="Téléchargement" href="./project/glw/glw_d3d9_v1.0.0.zip" title="GLW 1.0.0 Direct3D 9 Edition pour VisualC++ 7.1." />
      <source-element type="Téléchargement" href="./sample/d3d9_base.zip" title="Version Direct3D 9" />
      <source-element type="Téléchargement" href="./sample/ogl_base.zip" title="Version OpenGL" />
      <source-element type="Documentation" href="http://sourceforge.net/projects/glew/" title="Site de GLEW" />
      <source-element type="Outil" href="http://www.realtech-vr.com/glview" title="GL View" />
    </source-list>
  </post>

  <post index="0083" date="27/01/2006" std-date="2006-01-27T00:00:00.00Z" title="Hyperion 1.1.0 et Mandelbrot sur GPU">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      oZone3D propose une nouvelle version de Hyperion.
      Elle intègre de nouvelles fonctionnalités afin de permettre les traitements GPGPU.
      De plus, un nouveau tutorial est disponible sur le site.
      Il décrit le procédé de création de fractals de Mandelbrot sur GPU.
    </paragraph>

    <source-list>
      <source-element type="Le site de oZone3D" href="http://www.ozone3d.net" title="www.ozone3d.net" />
    </source-list>
  </post>

  <post index="0082" date="11/01/2006" std-date="2006-01-11T00:00:00.00Z" title="Performances de VC 2005, VC 2003, GCC 3.4.2 et GCC 3.2.3">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
      <tag>gtc-tech-project-ovtsa</tag>
    </meta>

    <paragraph>
      J'engage mon passage à Visual Studio 2005 (VC 8.0). Ma principale motivation repose sur le support d'OpenMP par le compilateur, une API offrant de bonnes possibilités dans la gestion des processeurs multi-cores.
    </paragraph>
    <paragraph>
      Ce passage a commencé par le constat d'amélioration du support de la norme ISO98 du C++, notamment au niveau des templates.
    </paragraph>
    <paragraph>
      S'en est suivi des tests de performances sur mon raytracer qui m'a paru être un bon représentant des performances que je recherche, c'est à dire le rendu 3D.
    </paragraph>
    <paragraph>
      Les tests ont étés réalisés avec des programmes compilés en mode release et consistent à générer une image en 320*240 de la scene décrite par le fichier "full.xml". Le même code source est utilisé et compilé pour Visual C++ 2003 (VC 7.1), Visual C++ 2005 (VC 8.0), GCC 3.2.3 et GCC 3.4.2 avec les options décritent dans le résultat et le tout sous Windows XP SP2. Le résultat donne le temps en secondes pour la génération de l'image.
    </paragraph>
    <paragraph>
      Quelques remarques sur les paramètres utilisés. L'option /fp est une nouvelle option de VC 8.0, destinée au nombre flottant. Il existe plusieurs valeures dont "precise" et "fast". "fast" est une option qui dégrade la précision des nombres flottants pour améliorer les performances. Cette option est équivalente à l'option -ffast-math de GCC. La valeur "precise" utilise les nombres flottants normalisés IEEE. VC 7.1 ne support pas ces optimisations basérs sur des flottants dégradés donc si l'on veut justement comparer VC 7.1 et VC 8.0, je pense qu'il faut comparé avec la compilation VC 8.0 utilisant l'option /fp:precise.
    </paragraph>
    <paragraph>
      Les résultats sont ci-dessous et se passe de commentaires mais je les ai tout de même les chiffrés au moyens d'un ratio indique la vitesse des programmes générés via les différents compilateurs. Ce ratio est visible sur le graph suivant.
    </paragraph>
    <list title="Test sur Dothan 1.5 GHz">
      <element>18.23s: VC 8.0, /Ox, /Ot, /Ob1, /fp:precise, /GL, Whole Program Optimisation</element>
      <element>14.12s: VC 8.0, /Ox, /Ot, /Ob1, /fp:fast, /GL, Whole Program Optimisation</element>
      <element>10.13s: VC 7.1, /Ox, /Ot, /Ob1, /Og, Whole Program Optimisation</element>
      <element>16.22s: GCC 3.4.2, -O2</element>
      <element>11.95s: GCC 3.4.2, -O2, -ffast-math</element>
      <element>20.36s: GCC 3.2.3, -O2</element>
      <element>17.71s: GCC 3.2.3, -O2, -ffast-math</element>
    </list>
    <list title="Test sur Athlon 2.083 GHz">
      <element>13.73s: VC 8.0, /Ox, /Ot, /Ob1, /fp:precise, /GL, Whole Program Optimisation</element>
      <element>10.52s: VC 8.0, /Ox, /Ot, /Ob1, /fp:fast, /GL, Whole Program Optimisation</element>
      <element>8.02s: VC 7.1, /Ox, /Ot, /Ob1, /Og, Whole Program Optimisation</element>
      <element>10.81s: GCC 3.4.2, -O2</element>
      <element>9.08s: GCC 3.4.2, -O2, -ffast-math</element>
      <element>14.02s: GCC 3.2.3, -O2</element>
      <element>12.41s: GCC 3.2.3, -O2, -ffast-math</element>
    </list>
    <paragraph>
      ERRATUM : Les tests sur VC7.1 ont étés réalisés en mode "fast" et non "precise" comme je le pensais. En effet, VC 7.1 utilise par défaut des optimisation non standard sur les nombres flottants, pour passer en mode "precise" il faut utilise l'option "/op".
    </paragraph>

    <image-list>
      <image-element title="Resultat du test" small="./post/0082-small.png" normal="./post/0082-normal.png" />
    </image-list>
    <source-list>
      <source-element type="Lien" href="./contact.html" title="Contact" />
    </source-list>
  </post>

  <post index="0081" date="03/01/2006" std-date="2006-01-03T00:00:00.00Z" title="oZone3D">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      oZone3D est le nouveau partenaire de G-Truc Creation.
      Il s'agit d'un site dédié au rendu temps réel au moyen de tutoriaux et d'un demo system nommé Hyperion.
    </paragraph>
    <paragraph>
      Hyperion est distribué avec sa documentation en francais et anglais et plusieurs demoscenes sont disponibles.
      De plus de nombreux outils sont disponible pour l'accompagner.
    </paragraph>

    <source-list>
      <source-element type="Le site de oZone3D" href="http://www.ozone3d.net" title="www.ozone3d.net" />
    </source-list>
  </post>

  <post index="0080" date="03/01/2006" std-date="2006-01-03T00:00:00.00Z" title="Rendu de terrain pour Interstate Gangs">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Encore en rendu de terrain en actuscreen.
      Celui ci utilise GLSL notamment pour le rendu d'eau.
      D'autres rendus de terrains sont encore prévus mais il utiliseront d'autres algorithmes de génération de la geometrie.
      Il s'agit ici d'un quadtree qui diffère du précédent rendu de terrain, par une optimisation massive.
    </paragraph>

  </post>

  <post index="0079" date="24/11/2005" std-date="2005-11-24T00:00:00.00Z" title="Bump mapping">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Un nouvel actuscreen a été ajouté montrant le model d'éclairage de Interstate Gangs.
    </paragraph>

  </post>

  <post index="0078" date="22/10/2005" std-date="2005-10-22T00:00:00.00Z" title="Interstate Gangs">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Un nouvel actuscreen est disponible sur un projet que j'ai commencé l'été dernier et que je vais poursuivre.
    </paragraph>
    <paragraph>
      Il est vrai que je n'ai pas updaté G-Truc Creation depuis un moment pourtant mon activité ne s'est pas arrété, voir au contraire.
    </paragraph>
    <paragraph>
      J'ai d'ailleurs de nombreux sujets sur le feu, comme une mise à jour de GLM, de petites bibliothèques pour le chargement de textures ou la création de fenêtre, un nouveau pack de tutoriaux OpenGL voir encore une nouvelle version du site de G-Truc Creation.
    </paragraph>

  </post>

  <post index="0077" date="18/08/2005" std-date="2005-08-18T00:00:00.00Z" title="Sauvons OpenGL sous Windows Vista !">
    <meta>
      <tag>gtc-tech-project-openglstatus</tag>
    </meta>

    <paragraph>
      Vous êtes au courant j'espère, Microsoft a décidé de tuer OpenGL sous Windows Vista en l'émulant avec DirectX et en empêchant un système d'extension comme actuellement sous Windows 9X, 2K et XP.
    </paragraph>
    <paragraph>
      Les conséquences : Des performances très largement massacrés à hauteur de 50% et une limite au core d'OpenGL 1.4 : Pas de GLSL, c'est à dire pas de programmation GPU.
    </paragraph>
    <paragraph>
      Bref dans un tel état qui voudrait bien encore d'OpenGL sous Windows : en tout cas pas moi, et vous ?
    </paragraph>
    <paragraph>
      Alors si au niveau des jeux il est vrai que DirectX a pris le pas sur OpenGL nous étions en espoir de voir OpenGL revenir sur le devant de la scène car c'est cet API qui est utilisé pour programmer sous PS3. Plus important, la plus part des outils de développement tourne sous OpenGL et non DirectX (Lightware, Maya, After effect, ...)
    </paragraph>
    <paragraph>
      Avec Windows Vista, Microsoft souhait continué à obtenir le contrôle des spécifications de tout le matériel.
    </paragraph>
    <paragraph>
      Donc pour lutter contre ce fléau, la communauté OpenGL recommande d'écrire aux fabricants. Donc voici les adresses de deux bons colosses ci dessous.
    </paragraph>
    <paragraph>
      Sans OpenGL, asta la Vista Windows !
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://www.nvidia.fr/page/contact_information.html" title="Contactez nVidia" />
      <source-element type="Lien" href="http://www.ati.com/companyinfo/contact/coninfo.html" title="Contactez ATI" />
      <source-element type="Lien" href="http://www.microsoft.com/France/core/contacteznous/" title="Contactez Microsoft" />
    </source-list>
  </post>

  <post index="0076" date="20/06/2005" std-date="2005-06-20T00:00:00.00Z" title="Contest GameDev 4 Elements 4 : Interstate Gangs">
    <meta>
      <tag>gtc-tech-event</tag>
    </meta>

    <paragraph>
      Voici, pas mal de temps que je n'ai pas mis ajout le site et d'ailleurs il est vraisemblable
      qui ne sera plus être autant actualisé souvent avant novembre 2005.
    </paragraph>
    <paragraph>
      Mais pourquoi donc cette nouvelle ?! Pour plusieurs raisons dont l'une est ma participation au contest
      GameDev "4 elements 4" avec une entrée nommée Interstate Gangs qui sera fortement inspiré de
      Interstate 76 (HiHi, c'est la 76eme news de G-Truc Creation ^_^) pour le gameplay et de Fallout et
      MadMax pour le background.
    </paragraph>
    <paragraph>
      Je participe à ce projet avec DukeNuken(Codeur) et In_Head(Modeleur/Animateur) mais nous avons
      besoin de quelqu'un pour tout le coté scénario (Détail du scénario, rédaction des sous-titrage
      des cinématiques, etc...) ainsi que pour ce qui touche au bruitage. Donc si ca vous dit un petit email ;).
    </paragraph>
    <paragraph>
      Autre conséquence, je mets mes autres projets en pause.
    </paragraph>

  </post>

  <post index="0075" date="24/05/2005" std-date="2005-05-24T00:00:00.00Z" title="Spots Battle 0.2">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Voici une nouvelle version de Spots Battle.
      Elle intègre à présent une véritable FSM parfaitement robuste
      et introduit la notion de message router.
    </paragraph>
    <paragraph>
      Cet amélioration on permit de complixifier le comportement des points bien
      que le programme manque encore de maturité.
    </paragraph>

    <source-list>
      <source-element type="Téléchargement" href="./projets/spots/spots0.2.zip" title="Spots Battle 0.2 pour VisualC++ 7.1, DevCPP, MinGW et GCC." />
    </source-list>
  </post>

  <post index="0074" date="11/05/2005" std-date="2005-05-11T00:00:00.00Z" title="GLM 0.2 disponible">
    <meta>
      <tag>gtc-tech-project-glm</tag>
      <tag>gtc-tech-project-ovtsa</tag>
    </meta>

    <paragraph>
      J'ai le plaisir de vous annoncer la venue au monde d'un heureux évènement,
      il s'agit d'un magnifique bébé de 194 Ko prénommé GLM 0.2.
    </paragraph>
    <paragraph>
      Pour rappel, GLM (OpenGL Mathematics) est une bibliothèque mathématique basée
      sur les spécifications de GLSL (OpenGL Shading Langage).
    </paragraph>
    <paragraph>
      Cette nouvelle version étend les fonctionnalités issues de GLSL par le biais d'extensions
      et améliore le portage de GLSL à C++.
    </paragraph>
    <paragraph>
      Un exemple d'utilisation est disponible au travers du RayTracer que j'ai présenté en "Actuscreen".
    </paragraph>
    <paragraph>
      Pour plus d'informations, consultez le site de GLM.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://glm.g-truc.net" title="Le site de GLM" />
      <source-element type="Téléchargement" href="http://prdownloads.sourceforge.net/glf/glm-0.2.zip?download" title="GLM 0.2" />
      <source-element type="Téléchargement" href="http://prdownloads.sourceforge.net/glf/raytrace-b1.0.zip?download" title="Ray Tracer" />
    </source-list>
  </post>

  <post index="0073" date="04/05/2005" std-date="2005-05-04T00:00:00.00Z" title="Spots Battle">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Spots Battle est un petit programme d'"IA" basé sur les FSMs (Finite State Machines). Il n'y a aucun intéraction entre l'utilisateur et l'ordinateur, les points mènent leurs vie suivant leurs règles avec ici pour objectif, annihiler les autres races.
    </paragraph>
    <paragraph>
      Je n'ai plus Linux pendant encore plus de deux mois, donc j'ai inclut un makefile mais je n'ai put le tester.
    </paragraph>
    <paragraph>
      Dans un tout autre sujet, notez que le site de GLM a été mit à jour avec l'ajout d'un version anglaise réalisé par CH4NDL3R. Ceci annonce la sortie prochaine de GLM 0.2 ainsi que du Raytracer que j'ai présenté depuis quelques temps en guise d'exemple.
    </paragraph>

    <source-list>
      <source-element type="Téléchargement" href="./projets/spots/spots0.1.zip" title="Spots Battle 0.1 pour VisualC++ 7.1, DevCPP, MinGW et GCC" />
      <source-element type="Lien" href="http://glm.g-truc.net" title="Le site de GLM" />
    </source-list>
  </post>

  <post index="0072" date="24/04/2005" std-date="2005-04-24T00:00:00.00Z" title="Nouveaux forums">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      Les anciens forums, hébergés sur un autre site, ont été détruits
      c'est pourquoi j'en ai créé de nouveaux qui sont à présent hébergés sur G-Truc.net.
    </paragraph>
    <paragraph>
      J'ai ajouté un forum pour le postage de commentaires sur les livres
      que j'ai commenté. Si vous connaissez l'un des livres, voir d'autres n'ésitez pas partager votre point de vue.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="http://forums.g-truc.net" title="Accès aux forums" />
      <source-element type="Lien" href="http://forums.g-truc.net/viewforum.php?f=8" title="Accès au forum des commentaires de livres" />
    </source-list>
  </post>

  <post index="0071" date="05/04/2005" std-date="2005-04-05T00:00:00.00Z" title="Shoot(r) 1.2">
    <meta>
      <tag>gtc-tech-project-shooter</tag>
    </meta>

    <paragraph>
      Une nouvelle version de Shoot(r) est disponible. Rien de bien nouveau, deux immondes bugs corrigés ainsi qu'une mise à jour pour le support de GCC et MinGW 3.4.
    </paragraph>

    <source-list>
      <source-element type="Le site de Shoot(r)" href="http://shooter.g-truc.net" title="shooter.g-truc.net" />
      <source-element type="Shoot(r) v1.2 pour Windows" href="http://prdownloads.sourceforge.net/shooter/shooter-v1.2.exe?download" title="shooter-v1.2.exe" />
      <source-element type="Shoot(r) v1.2 pour Linux" href="http://prdownloads.sourceforge.net/shooter/shooter-v1.2.tar.bz2?download" title="shooter-v1.2.tar.bz2" />
    </source-list>
  </post>

  <post index="0070" date="29/03/2005" std-date="2005-03-29T00:00:00.00Z" title="Articles sur GLSL : suite et fin">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      Je viens de terminer la série d'articles sur GLSL avec la dernière partie nommée "Place à la pratique". Il inclut un exemple du multitexturing avec test alpha.
    </paragraph>
    <paragraph>
      De plus, tous les articles ont été transformé au format PDF.
    </paragraph>
    <paragraph>
      A l'avenir, des exemples de programmes GLSL seront ajoutés dans le pack du tutoriaux OpenGL de G-Truc Creation.
    </paragraph>

    <source-list>
      <source-element type="Lien" href="./articles/glsl5.zip" title="L'exemple" />
      <source-element type="Lien" href="./articles/glsl5.pdf" title="GLSL Partie 5 : Place à la pratique" />
      <source-element type="Lien" href="./articles/glsl4.pdf" title="GLSL Partie 4 : L'API" />
      <source-element type="Lien" href="./articles/glsl3.pdf" title="GLSL Partie 3 : Les fonctions intégrées" />
      <source-element type="Lien" href="./articles/glsl2.pdf" title="GLSL Partie 2 : Les variables" />
      <source-element type="Lien" href="./articles/glsl1.pdf" title="GLSL Partie 1 : Présentation" />
    </source-list>
  </post>

  <post index="0069" date="23/03/2005" std-date="2005-03-23T00:00:00.00Z" title="Photos : 'L'oeil du moustique'">
    <meta>
      <tag>gtc-crea</tag>
    </meta>

    <paragraph>
      J'ai ajouté un nouvel album de photos nommés 'L'oeil du moustique'.
    </paragraph>

    <source-element type="Lien" href="./photos.html" title="La page 'photos'" />
  </post>

  <post index="0068" date="11/03/2005" std-date="2005-03-11T00:00:00.00Z" title="Mise à jour des pages de GLM">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      Le site d'OpenGL Mathematics (GLM) est à présent disponible en français.
      Une nouvelle version anglaise est en cours de traduction par CH4NDL3R.
    </paragraph>

    <source-element type="Lien" href="http://glm.g-truc.net" title="Les pages d'OpenGL Mathematics" />
  </post>

  <post index="0067" date="07/03/2005" std-date="2005-03-07T00:00:00.00Z" title="Deusième partie de l'article sur les niveaux de détails">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      Je viens de mettre à jour l'article sur les niveaux de détails dédiés aux cartes de hauteurs. Il explique maintenant le fonctionnement de ROAM dans une optique de subdivision seul.
    </paragraph>

    <source-element type="L'article" href="./articles/lod.doc" title="Niveaux de détails et cartes de hauteurs" />
  </post>

  <post index="0066" date="02/03/2005" std-date="2005-03-02T00:00:00.00Z" title="Pour mieux développer avec C++">
    <meta>
      <tag>gtc-tech-devel-book</tag>
    </meta>

    <paragraph>
      J'ai ajouté un nouveau commentaire de livre sur "Pour mieux développer avec C++", encore un très bon livre.
    </paragraph>

    <source-element type="Lien" href="./livres.html#C/C++5" title="Pour mieux développer avec C++" />
  </post>

  <post index="0065" date="28/02/2005" std-date="2005-02-28T00:00:00.00Z" title="Niveau de detail, QuadTree et ROAM">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      J'ai commencé un nouvel article sur le rendu de cartes de hauteurs avec niveau de détails. Il pourra intéresser toute personne souhaitant s'investir dans le rendu de terrains. Pour le moment, il ne traite que du QuadTree mais ROAM viendra s'ajouter par la suite.
    </paragraph>
    <paragraph>
      Sinon oui, la suite de la série d'articles sur GLSL va venir ^^. Il en va de même pour le pack de tuts OpenGL, qui en passant, s'offrira un petit régime, utilisera GLF, disposera de projets pour DevCPP et se tournera plus que jamais vers la programmation GPU.
    </paragraph>
    <paragraph>
      Enfin, j'en profite pour signaler une information qui me semble importante mais qui est passée inaperçue. Les drivers BETA de 75.90 de nVidia sont disponible et sont qualifiés de drivers 'OpenGL 2.0'. Concrètement par rapport aux drivers officiels 66.93, il intègre deux nouvelles extensions : GL_ARB_half_float_pixel (Et dire que certains utilisent des 'double' :p) et surtout GL_EXT_framebuffer_object qui offre des possibilités de manipulation du framebuffer intéressantes et souples. Cette extension devrait être intégré au core d'OpenGL 2.1 selon les 'meeting notes'.
    </paragraph>

    <source-element type="L'article" href="./articles/lod.doc" title="Niveaux de détails et cartes de hauteurs" />
  </post>

  <post index="0064" date="21/02/2005" std-date="2005-02-21T00:00:00.00Z" title="OpenGL Framework et OpenGL Mathematics">
    <meta>
      <tag>gtc-tech-project-glm</tag>
    </meta>

    <paragraph>
      OpenGL Framework est une bibliothèque souhaitant offrir une implémentation C++ de l'API OpenGL. Il ne s'agit en aucun cas de proposer un modèle objet mais simplement de profiter de quelques fonctionnalités appréciables de C++ telle que la surcharge de fonctions, les constructeurs et les espaces de noms. En clair, au lieu d'utiliser la fonction glVertex3f(), l'implémentation proposera la fonction gl::Vertex(). Enfin, une interaction avec OpenGL Mathematics est prévu de tel manière que l'on pourra écrire : gl::Vertex(vec3(0,0,0)).
    </paragraph>
    <paragraph>
      Quand à OpenGL Mathematics (GLM), il s'agit d'une bibliothèque basée sur les spécifications de l'OpenGL Shading Language (GLSL) et inclut dans GLF. Il s'agit d'offrir à l'utilisateur le même confort de programmation OpenGL que lorsqu'il programme avec GLSL. Ainsi, toutes les types vecteurs et matrices de GLSL sont supportés et la plus part des fonctions sont disponibles.
    </paragraph>
    <paragraph>
      Actuellement, GLF est limité à GLM avec des headers portables pour OpenGL.
    </paragraph>
    <paragraph>
      Pour ces projets, j'ai recherché à construire une bonne démarche de développement. Ainsi, je me suis basé les spécifications d'OpenGL mais aussi sur les documents décrivant comment doit être développé OpenGL et enfin sur les "meeting notes" qui sont le meilleur moyen d'être à la pointe du progrès d'OpenGL.
    </paragraph>
    <paragraph>
      Enfin pour l'évolution des ces projets je compte sur vous car la pensée unique d'un seul homme n'est pas suffisante pour assurer un développement parfaitement robuste. Ceci explique pourquoi il existe deux types de releases : les 'users' et les 'contributors'. Les versions 'users' contiennent le minimum pour utiliser les bibliothèques et les contributors contiennent l'ensemble des documents utilisés pour le développement ainsi que tous les informations concernant les bugs connus les problématiques de développement ou encore des propositions d'extensions.
    </paragraph>

    <source-element type="Lien" href="http://glf.g-truc.net" title="" />Le site de GLF et GLM
    <source-element type="Download" href="http://prdownloads.sourceforge.net/glf/glm-0.1-ur.zip?download" title="GLF 0.1 User Release" />
    <source-element type="Download" href="http://prdownloads.sourceforge.net/glf/glm-0.1-cr.zip?download" title="GLF 0.1 Contributor Release" />
    <source-element type="Download" href="http://prdownloads.sourceforge.net/glf/glf-0.1-ur.zip?download" title="GLM 0.1 User Release" />
    <source-element type="Download" href="http://prdownloads.sourceforge.net/glf/glf-0.1-cr.zip?download" title="GLM 0.1 Contributor Release" />
  </post>

  <post index="0063" date="12/02/2005" std-date="2005-02-12T00:00:00.00Z" title="Le C++ Efficace">
    <meta>
      <tag>gtc-tech-devel-book</tag>
    </meta>

    <paragraph>
      Le C++ Efficace est le titre d'un livre que je viens d'ajouter dans les commentaires de livres. Ce n'est autre que la version française de Effective C++. Un excellent livre que je vous conseille.
    </paragraph>

    <source-element type="Lien" href="./livres.html#C/C++4" title="Le C++ Efficace" />
  </post>

  <post index="0062" date="07/02/2005" std-date="2005-02-07T00:00:00.00Z" title="Mod Party 2">
    <meta>
      <tag>gtc-tech-event</tag>
    </meta>

    <paragraph>
      Planet Mods organise une Mod Party sur Paris. Il s'agit d'une réunion de développeurs de modifications de jeux. Des projets amateurs seront présentés et j'y participerai comme ex-membre du mod WormsHL.
    </paragraph>

    <source-element type="Lien" href="http://modsparty.pmods.net" title="La page de la Mod Party" />
    <source-element type="Lien" href="http://www.wormshl.fr.st" title="Le site de WormsHL" />
    <source-element type="Lien " href="http://www.pmods.net" title="Le site de Planet Mods" />
  </post>

  <post index="0061" date="31/01/2005" std-date="2005-01-31T00:00:00.00Z" title="Tutorial GLSL : Partie 4">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      La quatrième partie du tutoriau sur GLSL est disponible. Elle est chargé de présenter l'API des extensions permettant d'utiliser GLSL. Bonne lecture !
    </paragraph>

    <source-element type="Tutorial GLSL Partie 4" href="./articles/glsl4.rtf" title="L'API" />
    <source-element type="Tutorial GLSL Partie 3" href="./articles/glsl3.rtf" title="Les fonctions intégrées" />
    <source-element type="Tutorial GLSL Partie 2" href="./articles/glsl2.rtf" title="Les variables" />
    <source-element type="Tutorial GLSL Partie 1" href="./articles/glsl1.rtf" title="Présentation" />
    <source-element type="Lien" href="./articles.html" title="La liste des articles" />
  </post>

  <post index="0060" date="31/01/2005" std-date="2005-01-31T00:00:00.00Z" title="Des tutoriaux payant :(">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      Le site GameTurotial a subit une mise à jour important. D'une part le design du site a complètement changé mais, surtout, tous les tutoriaux sont devenu payant. A 5$ le tutorial qui affiche un triangle dans une fenêtre !
    </paragraph>
    <paragraph>
      Voici une grosse perte pour la communauté amateur car de nombreux tutoriaux sont vraiment intéressant.
    </paragraph>
    <paragraph>
      GameTutorials choisi de rendre payant leurs tutoriaux, G-Truc Creation choisi de supprimer sont liens vers ce site et vous garantie qu'il n'en sera jamais de même sur ses pages.
    </paragraph>

    <source-element type="Le site Game Tutorials" href="http://www.gametutorials.com" title="www.gametutorials.com" />
  </post>

  <post index="0059" date="14/01/2005" std-date="2005-01-14T00:00:00.00Z" title="Mise à jour du site de Shoot(r) et sources.">
    <meta>
      <tag>gtc-tech-project-shooter</tag>
    </meta>

    <paragraph>
      Je viens de mettre le site de Shoot(r) à jour et j'en profit pour mettre à votre disposition ses sources. Pour rappel, le site est réalisé avec Flash MX et XML.
    </paragraph>

    <source-element type="Le site de Shoot(r)" href="http://shooter.g-truc.net" title="shooter.g-truc.net" />
    <source-element type="Les sources de Shoot(r)" href="http://shooter.g-truc.net/shooter-site.zip" title="Les sources Flash MX et XML" />
  </post>

  <post index="0058" date="12/01/2005" std-date="2005-01-12T00:00:00.00Z" title="Tutoriaux sur GLSL et mises à jour">
    <meta>
      <tag>gtc-tech-project-piranha</tag>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>
      J'ai commencé une série d'articles sur le langage GLSL (OpenGL Shading Langage) permettant la programmation GPU. Trois premiers documents sont disponibles et d'autres sont avenir.
    </paragraph>
    <paragraph>
      Le premier présent le langage mais aussi les tenants et aboutissants. Le second décrit les variables GLSL et le troisème liste les fonctions intégrés de GLSL.
    </paragraph>
    <paragraph>
      De plus, une mise à jour de Piranha est disponible. Elle corrige quelques bugs et intègre la carte qu'Invalide avait réalisé pour TAM.
    </paragraph>
    <paragraph>
      Enfin, vous pouvez télécharger GTL Beta 1.2 qui corrige quelques bugs.
    </paragraph>

    <source-element type="Articles sur GLSL" href="./articles/glsl1.rtf" title="GLSL Partie 1 : Présentation" />
    <source-element type="Articles sur GLSL" href="./articles/glsl2.rtf" title="GLSL Partie 2 : Les variables" />
    <source-element type="Articles sur GLSL" href="./articles/glsl3.rtf" title="GLSL Partie 3 : Les fonctions intégrées" />
    <source-download type="Download" index="103" />
    <source-element type="GTL B1.2 au format 7z" href="http://prdownloads.sourceforge.net/piranha-lp/gtl-b1.2.7z?download" title="gtl-b1.2.7z" />
    <source-element type="GTL B1.2 au format bz2" href="http://prdownloads.sourceforge.net/piranha-lp/gtl-b1.2.tar.bz2?download" title="gtl-b1.2.tar.bz2" />
    <source-element type="GTL B1.2 au format zip" href="http://prdownloads.sourceforge.net/piranha-lp/gtl-b1.2.zip?download" title="gtl-b1.2.zip" />
  </post>

  <post index="0057" date="03/01/2005" std-date="2005-01-03T00:00:00.00Z" title="Piranha Beta 1">
    <meta>
      <tag>gtc-tech-project-piranha</tag>
    </meta>

    <paragraph>
      Une nouvelle version de Piranha est disponible. De nouvelles scènes, des améliorations sur d'autres.
    </paragraph>

    <source-download type="Download" index="102" />
  </post>

  <paragraph>
    Since OpenCL get announced by Apple 6 months ago a lot of expectations grow up in the developer community but from my point of view it is firstly the result of the enthusiasm of the whole industry for parallel computing that makes OpenCL reaching our world.
  </paragraph>
  <paragraph>
    OpenCL have been designed on a fast track that's for sure! 6 month is roughly the time the Khronos Group used to give birth to it. However, it is obvious that OpenCL doesn't come from nowhere, it amazingly looks like CUDA ...
  </paragraph>
  <paragraph>
    Honestly, that's perfectly fine for me, especially because everyone seems to be really involved in OpenCL development and to agree on it. A side news but a good news is that the Kronos Group demonstrate for the first time that it can be more efficient than Microsoft, Direct3D 11 Compute Shaders are not here yet.
  </paragraph>
  <paragraph>
    One fear could be that OpenCL is just a cheap CUDA. It is definitely not! OpenCL is kind of CUDA + new features. A good example is the API to share data between OpenGL and OpenCL. It is so such more complete. With CUDA we could just work on "buffers". Now with OpenCL we can work on buffers and images. This changes everything! It makes OpenCL a lot more suitable for post processing effects than CUDA. With CUDA we have to use Pixel Buffer Object to read back the framebuffer into a buffer which involved useless copies and lost of the GPU 2D cache.
  </paragraph>
  <paragraph>
    OpenCL could even be some kind of salvation for OpenGL. A lot of requests from the OpenGL community just match with OpenCL design. A good example really complicated to changed in OpenGL is the texture model. We asked for a while for separated images and filter objects. It's done in OpenCL! On the feature side, OpenCL allows to load binary programs instead of just building on  software startup.
  </paragraph>
  <paragraph>
    One word on the language library. The number of functions is just huge! So much more complete than any shading languages. It gave me some ideas for GLM!
  </paragraph>
  <paragraph>
    OpenCL is really a flexible API. It could be use on GPU but also on CPU, Cell, Larabee, DSPs, etc... An extension mechanistic is already available and a wide range of features is available just through extensions. This allows to use OpenCL even on embedded devices.
  </paragraph>
  <paragraph>
    What about the portability issue then? First of all, just the idea writing a parallel oriented program involved always the same kind of software architecture so that whether if it is multi-threaded or/SIMD based. OpenCL can managed these two senarios so maybe a good guideline would be to write all software with multitple thread AND SIMD in minded. Then a program is design for a specific purpose which means that there is few reasons to expected all programs running on any device.
  </paragraph>
  <paragraph>
    nVidia plans to release its first OpenCL drivers within 6 months and will be included as part of CUDA. I bet on a close fellowing from AMD, S3, Intel and IBM. I hope Imagination Technologies follows too. Apple is really into it too first for Snow Leopard but OpenCL on the next iPhone... that could be reasonable.
  </paragraph>

  <post index="0056" date="03/01/2005" std-date="2005-01-03T00:00:00.00Z" title="Photos numériques">
    <meta>
      <tag>gtc-crea</tag>
    </meta>

    <paragraph>
      Je tombe a mon tour sour le joue de la photo numérique. J'ai ajouté une rubrique pour les photos ainsi que mon premier album nommé 'Il s'appelle Bob'.
    </paragraph>

    <source-element type="Lien" href="./photos.html" title="La page 'photos'" />
  </post>

  <post index="0055" date="18/12/2004" std-date="2004-12-18T00:00:00.00Z" title="Piranha Alpha 2">
    <meta>
      <tag>gtc-tech-project-piranha</tag>
    </meta>

    <paragraph>
      Une nouvelle version de Piranha est disponible. Beaucoup de travail a été réalisé pour nettoyer le code mais aussi sur le rendu de terrain pour les scènes sur terre.
    </paragraph>

    <source-download type="Download" index="101" />
  </post>

  <post index="0054" date="16/12/2004" std-date="2004-12-16T00:00:00.00Z" title="Bonnes fêtes ... déjà ?!">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
      <tag>gtc-tech-project-piranha</tag>
    </meta>

    <paragraph>
      Je n'aurais normalement plus accès au net jusqu'au 5 janvier 2005 donc je ne pourrais pas mettre à jour G-Truc Creation jusqu'à cette date.
    </paragraph>
    <paragraph>
      Pendant toute cette période de vacances, je vais passer un bon moment à programmer Piranha mais je pense aussi continuer le développement de G-Tut Pack avec de nouveaux exemples utilisant GLSL.
    </paragraph>

  </post>

  <post index="0053" date="09/12/2004" std-date="2004-12-09T00:00:00.00Z" title="Nouveau site de Shoot(r) ... en flash !">
    <meta>
      <tag>gtc-tech-project-shooter</tag>
    </meta>

    <paragraph>
      Je viens de terminer le nouveau site de Shoot(r). Il reprend le design de l'ancienne version mais est réalisé avec Flash MX.
    </paragraph>
    <paragraph>
      Oui en Flash ! En effet, l'utilisation d'un outil propriétaire n'est pas dans mon habitude mais Flash offre des fonctionnalités intéressantes si l'on prend soin de s'y intéresser. Remarquez que le design se tourne toujours vers l'ergonomie et non vers le graphisme. Toutes les données sont chargées dynamiquement depuis des fichiers XML, ce qui m'a permit d'intégrer une traduction anglaise.
    </paragraph>
    <paragraph>
      Je ne sais pas si je referais un site en Flash mais je suis convaincu que la normalisation d'une technologie issue de Flash pourrait énormément apporter à la programmation web.
    </paragraph>

    <source-element type="Lien" href="http://shooter.g-truc.net" title="Le site de Shoot(r)" />
  </post>

  <post index="0052" date="07/12/2004" std-date="2004-12-07T00:00:00.00Z" title="Piranha Alpha 1">
    <meta>
      <tag>gtc-tech-project-piranha</tag>
    </meta>

    <paragraph>
      Une première version de Piranha est à présent disponible au téléchargement. Le projet est prévu pour VC7.1, MinGW et GCC. Pour profiter de la démo, il vous faut une carte graphique comportant au moins 4 unités de textures et supportant GLSL 1.00, c'est à dire une GF FX 5200 ou une Radeon 9500 et supérieur.
    </paragraph>

    <source-download type="Download" index="100" />
  </post>

  <post index="0051" date="01/12/2004" std-date="2004-12-01T00:00:00.00Z" title="Nouveau partenariat">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      G-Truc Creation accueil un nouveau partenaire : <link href="http://www.coder-studio.com">Coder Studio</link>. Je vous invite à visiter ce site très intéressant.
    </paragraph>
    <paragraph>
      Notez également que j'ai modifié la bannière du site.
    </paragraph>

  </post>

  <post index="0050" date="26/11/2004" std-date="2004-11-26T00:00:00.00Z" title="Démoscènes OpenGL">
    <meta>
      <tag>gtc-tech-project-piranha</tag>
    </meta>

    <paragraph>
      Je réalise actuellement une démoscène OpenGL appelé Piranha.
      Voici, les premiers screenshots, des scènes d'intros et des scènes qui se déroulent dans l'espace.
      Retrouvez ces screenshots dans la rubrique actuscreen.
    </paragraph>

    <source-element type="Lien" href="./actuscreens.html" title="Page de la rubrique 'Actuscreens'" />
  </post>

  <post index="0049" date="10/11/2004" std-date="2004-11-10T00:00:00.00Z" title="GTL Beta 1.1">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Voici une petite mise à jour de GTL qui apporte principalement des corrections de bugs.
    </paragraph>
    <list name="Changelog : ">
      <list-element>Correction du bug de la transparence des particules dans l'exemple 'particles'.</list-element>
      <list-element>Optimisation de la gestion des collisions de l'exemple 'particles'.</list-element>
      <list-element>Correction des bugs des constructeurs des matrices CMatrix2x2 et CMatrix3x3.</list-element>
      <list-element>Correction des bugs des fonctions de rotation autour d'un axe de la matrice CMatrix4x4.</list-element>
      <list-element>Correction du calcul de déterminants et d'inverses de CMatrix3x3.</list-element>
      <list-element>Paramétrage de la longeur de champ de vision plus simple de la class CCamera.</list-element>
      <list-element>Amélioration de la classe CQuaternion.</list-element>
      <list-element>Correction des opérations += et -= de la classe CVector4.</list-element>
      <list-element>Amélioration des calculs de normes des classes CVector2, CVector3, CVector4.</list-element>
    </list>

    <source-element type="GTL Beta 1.1 au format 7z" href="./projets/gtl/gtl-b1.1.7z" title="gtl-b1.1.7z (1.35 Mo)" />
    <source-element type="GTL Beta 1.1 au format bz2" href="./projets/gtl/gtl-b1.1.tar.bz2" title="gtl-b1.1.tar.bz2 (2.03 Mo)" />
    <source-element type="GTL Beta 1.1 au format zip" href="./projets/gtl/gtl-b1.1.zip" title="gtl-b1.1.zip (2.96 Mo)" />
    <source-element type="La page de GTL : " href="./projet_gtl.html" title="ici" />
  </post>

  <post index="0048" date="05/11/2004" std-date="2004-11-05T00:00:00.00Z" title="Mise à jour de G-Tut-Pack et moteur de particules">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
      <tag>gtc-tech-project-piranha</tag>
    </meta>

    <paragraph>
      Je viens de mettre à jour le Pack de tutoriaux OpenGL avec 11 nouveaux exemples ainsi que la page des tutoriaux OpenGL.
    </paragraph>
    <list name="Changelog : ">
      <list-element>Ajout de l'exemple "ogl-fenetre2", Viewport</list-element>
      <list-element>Ajout de l'exemple "ogl-texture6", filtrage de textures</list-element>
      <list-element>Ajout de l'exemple "ogl-ligne1", lignes standards et stipples</list-element>
      <list-element>Ajout de l'exemple "ogl-ligne2", Algorithme de Bresenham</list-element>
      <list-element>Ajout de l'exemple "ogl-ligne3", Gestion des contours</list-element>
      <list-element>Ajout de l'exemple "ogl-lighting2", Materiaux</list-element>
      <list-element>Ajout de l'exemple "ogl-lighting3", Eclairage d'une texture</list-element>
      <list-element>Ajout de l'exemple "ogl-lighting4", Separate specular</list-element>
      <list-element>Ajout de l'exemple "ogl-test-scission2", Superposition de rendu</list-element>
      <list-element>Ajout de l'exemple "ogl-test-stencil1", masque de formes quelconques</list-element>
      <list-element>Ajout de l'exemple "ogl-test-stencil2", effet d'inversions chromatiques</list-element>
      <list-element>Renommage des exemples</list-element>
    </list>
    <paragraph>
      De plus, je mets à votre disposition une démo de moteur de particules que j'ai réalisé cet été et que j'ai commenté dans les actuscreens.
    </paragraph>

    <source-download index="900" />
    <source-element type="Piranha Demo" href="./projets/piranha/piranha-demo.zip" title="Au format zip pour Windows seulement (209 Ko)" />
    <source-element type="Lien" href="./tuts.html" title="La page de tutoriaux OpenGL" />
  </post>

  <post index="0047" date="29/10/2004" std-date="2004-10-29T00:00:00.00Z" title="MD5 et partenariat">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Une nouvelle version de mon visualisateur de modèles MD5 est disponible. Elle permet a présent de visualiser le modèle texture avec DOT3 bump mapping.
    </paragraph>
    <paragraph>
      Notez que G-MD5-Viewer est distribué sans modèle. Je recherche quelqu'un pour faire un modèle qui sera intégré au programme afin de mettre un exemple d'utilisation. Si vous êtes intéressé, veuillez me contacter.
    </paragraph>
    <paragraph>
      De plus, G-Truc Creation dispose d'un nouveau partenaire : Le site Texel. Je vous invite à le visiter, il comporte des projets et des tutoriaux intéressants.
    </paragraph>

    <source-element type="Téléchargement" href="./projets/md5/g-md5-viewer-b2.0.zip" title="G-MD5-Viewer Beta 2.0 pour VC7.1, MinGW et GCC" />
    <source-element type="Lien" href="http://texel3d.free.fr" title="Texel" />
    <source-element type="Lien" href="./contact.html" title="Contact pour la création d'un modèle" />
  </post>

  <post index="0046" date="25/10/2004" std-date="2004-10-25T00:00:00.00Z" title="MD5 Viewer">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Je réalise actuellement un loader MD5, le format des modèles de Doom 3.
    </paragraph>
    <paragraph>
      Ce format à la particularité d'être lisible sous forme de texte et d'être décomposé en trois partie : Mesh, Animation, Camera.
    </paragraph>
    <paragraph>
      Pour le moment, le loader ne charge que les meshes MD5 sans texture.
    </paragraph>

    <source-element type="Téléchargement pour VC7.1, MinGW et GCC" href="./projets/md5/g-md5-viewer-b1.0.zip" title="G-MD5-Viewer Beta 1.0" />
  </post>

  <post index="0045" date="20/10/2004" std-date="2004-10-20T00:00:00.00Z" title="Bon anniversaire G-Truc Creation !">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      Et oui, G-Truc Creation à 2 ans ! Né à la suite du site de <link href="http://zglu.g-truc.net">Zglu</link>, un mod que je développais pour Quake 2. Avec l'envie de partager mes connaissances, j'ai alors commencé à diffuser mes démos en open source. Ainsi, le site de <link href="http://zglu.g-truc.net">Zglu</link> quitta sa ligne directrice pour devenir G-Truc Creation.
    </paragraph>
    <paragraph>
      Pourquoi ce nom G-Truc Creation ? Non, ce n'est pas le fruit du hasard, d'ailleurs je ne crois pas au hasard. Le 'G', c'est simplement la première lettre de Groove, mon speudo que j'ai choisi quand j'ai découvert Interstate 76 en 1997. 'G-Truc' c'est en hommage à mes premiers programmes écrit en quick basic que j'ai écris la même époque. Oui, je n'avais jamais eu beaucoup d'imagination pour les noms. Concernant le qualificatif 'Creation' c'est une référence à une décision législative de 1985-1986 au moment où il a fallu définir le droit d'auteur pour le jeu vidéo. Il s'agissait de choisir d'appliquer soit les règles du droit d'auteur définit pour le logiciel, soit celles définit pour les ouvres audiovisuelles, cette dernière étant notamment défendu par les créateurs de jeux comme ATARI. La justice a décidé que le jeu vidéo serait soumit au droit d'auteur définit pour le logiciel, ce qui renit toutes inspirations artistiques et de ce fait on peut l'appelé produit et non chef-d'oeuvre. Le choix du qualificatif 'Creation' précise mes convictions en insistant sur ce qui est le propre de l'art, son coté créatif. Voilà , j'en termine avec cette réflexion Groovienne :p.
    </paragraph>
    <paragraph>
      Pour marquer cette journée, je vous propose tout d'abord une mise à jour du pack d'exemples de programmes OpenGL. Le nombre d'exemples passe à 48, soit 5 de plus que pour la version précédente. Quoi de neuf ? 2 exemples de motion blur supplémentaires. Le premier utilisant le tampon d'accumulation et le second utilisant l'extension d'OpenGL 2.0 nommée GL_ARB_texture_rentangle. En fait, pour cet exemple, je suis partie de l'exemple de motion blur utilisant les textures 2D pour montrer l'intérêt de l'extension car il est possible de réaliser un effet de motion blur en une seule passe alors qu'il en fallait deux jusqu'à présent. Un troisième exemple traite du texture adressing et enfin les deux derniers abordent l'OpenGL Shading Langage au travers d'un exemple élémentaire puis un exemple de vertex displacement avec une 'simulation de drapeaux'.
    </paragraph>
    <paragraph>
      Il me reste une dernière chose à vous présenter, c'est mon dernier projet nommé <link href="http://shooter.g-truc.net">Shoot(r)</link>. Il s'agit d'un simple Shoot 'em up OpenGL que j'ai réalisé pour le magazine <link href="http://www.codermag.com">Code(r)</link>. Il est disponible sous Windows et sous Linux sous licence GPL et j'espère pour votre plus grand plaisir.
    </paragraph>

    <source-element type="La page de G-Tut-Pack" href="./tuts.html" title="www.g-truc.net/tuts.html" />
    <source-element type="G-Tut-Pack Build 20041020" href="./projets/g-tut-pack/g-tut-pack-ogl-20041020.zip" title="g-tut-pack-ogl-20041020.zip" />
    <source-element type="Le site de Shoot(r)" href="http://shooter.g-truc.net" title="shooter.g-truc.net" />
    <source-element type="Shoot(r) v1.1 pour Windows" href="http://prdownloads.sourceforge.net/shooter/shooter-v1.1.exe?download" title="shooter-v1.1.exe" />
    <source-element type="Shoot(r) v1.1 pour Linux" href="http://prdownloads.sourceforge.net/shooter/shooter-v1.1.tar.bz2?download" title="shooter-v1.1.tar.bz2" />
  </post>

  <post index="0044" date="11/10/2004" std-date="2004-10-11T00:00:00.00Z" title="GTL Beta 1.0">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Après de nombreux mois de gestation la beta 1.0 du basecode de G-Truc Creation est disponible.
    </paragraph>
    <paragraph>
      Cette nouvelle version de GTL est utilisée dans la prochaine mise à jour de <link href="./tuts.html">G-Tut-Pack</link> et dans Shoot(r) v1.1 qui seront tous deux disponibles d'ici la fin du mois.
    </paragraph>
    <list name="Changelog : ">
      <list-element>Ajout du chargement de shaders.</list-element>
      <list-element>Ajout de la vérification du support des extensions.</list-element>
      <list-element>Ajout du support des nombres complexes sous forme algébrique et trigonométrique.</list-element>
      <list-element>Ajout de fonctionnalités pour aux vecteurs : Maximum, minimum, saturation et valeur absolue.</list-element>
      <list-element>Ajout de d'une fonctionnalité permettant de réaliser simultanément une multiplication et une addition.</list-element>
      <list-element>Ajout de matrice 2x2 et 3x3.</list-element>
      <list-element>Ajout de la prise de screenshot.</list-element>
      <list-element>Ajout de la détection des erreurs d'OpenGL.</list-element>
      <list-element>Ajout d'une classe quaternion.</list-element>
      <list-element>Ajout d'outils pour les transformations par des matrices.</list-element>
      <list-element>Ajout de la convertion de couleur RGB en couleur HLS.</list-element>
      <list-element>Ajout de calcules de vecteurs projetés et de vecteurs perpendiculaires.</list-element>
      <list-element>Ajout d'un exemple illustrant les transformations par les fonctions OpenGL, par matrices et par quaternions.</list-element>
      <list-element>Ajout d'un exemple montrant l'éclairage d'un terrain avec calcul de normales par sommet.</list-element>
      <list-element>Ajout d'un exemple utilisant la projection de vecteur pour la gestion des collisions.</list-element>
      <list-element>Correction de la matrice 4x4.</list-element>
      <list-element>Correction de gtl_math.h.</list-element>
      <list-element>Support des extensions d'OpenGL 2.0.</list-element>
      <list-element>Support de MinGW complet.</list-element>
    </list>
    <paragraph>
      Les archives suivantes contiennent des données identiques et fonctionnelles sous Linux et Windows. Notez l'efficacité du format libre 7z en terme de compression !
    </paragraph>

    <source-element type="GTL Beta 1.0 au format 7z" href="./projets/gtl/gtl-b1.0.7z" title="gtl-b1.0.7z (1.15 Mo)" />
    <source-element type="GTL Beta 1.0 au format tar.gz" href="./projets/gtl/gtl-b1.0.tar.gz" title="gtl-b1.0.tar.gz (1.96 Mo)" />
    <source-element type="GTL Beta 1.0 au format zip" href="./projets/gtl/gtl-b1.0.zip" title="gtl-b1.0.zip (2.40 Mo)" />
    <source-element type="La page de GTL" href="./projet_gtl.html" title="ici" />
  </post>

  <post index="0043" date="24/09/2004" std-date="2004-09-24T00:00:00.00Z" title="Site v3.7 et recherche d'un graphiste.">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      Voici la version 3.7 de G-Truc.net. Cette nouvelle version apporte notamment une réorganisation des menus mais surtout l'organisation des fichiers de données (les fichiers XML) a été complètement revue.
    </paragraph>
    <paragraph>
      En effet, à présent toutes les données sont enregistrées dans un seul et même fichier. Ceci permet de supprimer les redondances de données et facilités la mise à jour du site. Concrètement, j'utilise une feuille de style XSLT pour chaque page du site, appliquée sur un unique fichier XML, chaque fichier XSLT récupérant les données qu'il a besoin.
    </paragraph>
    <paragraph>
      Dans un autre sujet, je recherche un graphiste 2D pour réaliser des dessins de vaisseaux spatiaux, de bonus, de tires, etc. en vue de la publication de la version 1.1 de Shoot(r) du jeux début novembre sur ce site. Si vous êtes intéressé, merci de me contacter par e-mail.
    </paragraph>
    <paragraph>
      A propos de cette version 1.1, sachez qu'elle sera disponible pour Windows (Devcpp, MinGW, MinGW Developper Studio et VC7.1) et Linux (GCC).
    </paragraph>

  </post>

  <post index="0042" date="15/09/2004" std-date="2004-09-15T00:00:00.00Z" title="Nouveaux commentaires de livres">
    <meta>
      <tag>gtc-tech-devel-book</tag>
    </meta>

    <paragraph>
      Je vous propose aujourd'hui de partager mes lectures de l'été au travers de huit commentaires de livres.
    </paragraph>
    <list name="Listes des livres ajoutés : ">
      <list-element>
        Data Structures for Game Programmers
      </list-element>
      <list-element>
        Design Patterns
      </list-element>
      <list-element>
        UML 2.0
      </list-element>
      <list-element>
        The pragmatic programmer
      </list-element>
      <list-element>
        Mathematics for 3D Game Programming and Computer Graphics
      </list-element>
      <list-element>
        Game programming gems
      </list-element>
      <list-element>
        PHP 5
      </list-element>
      <list-element>
        MySQL et PHP
      </list-element>
    </list>
    <paragraph>
      Enfin, notez que le numéro 10 de Code(r), en kiosque depuis début septembre, publié deux articles que j'ai écrit. Le premier sur UML et le deuxième proposant la réalisation d'un shoot'em up.
    </paragraph>

  </post>

  <post index="0041" date="14/08/2004" std-date="2004-08-14T00:00:00.00Z" title="Mitose">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Mitose, c'est le nom de ma nouvelle démo OpenGL. Vous pouvez la télécharger <link href="./projets/mitose/mitose-v1.0.zip">ici</link>.
    </paragraph>

  </post>

  <post index="0040" date="17/07/2004" std-date="2004-07-17T00:00:00.00Z" title="G-Tut Pack et modifications">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      Comme je l'avais annoncé lors de la précédente news, j'ai supprimé la liste de tutoriaux pour en faire des groupes de tutoriaux afin de gagner de la place sur mon compte. Les tutoriaux sont donc regroupées dans un pack nommé G-Tut Pack et tous les tutoriaux sont disponibles pour GCC, MinGW et Visual C++ 7.1.
    </paragraph>
    <paragraph>
      J'ai également réalisé quelques modifications sur le site : Correction de quelques bugs et changement des pages "liens" et "Tutoriaux".
    </paragraph>

  </post>

  <post index="0039" date="30/06/2004" std-date="2004-06-30T00:00:00.00Z" title="Quoi de neuf ?">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      Vous avez certainement remarqué que le site évolue très peu en ce moment. En effet, d'une part j'ai eu moins de temps à y consacrer en juin d'autre part mon espace d'hébergement en totalement pleins.
    </paragraph>
    <paragraph>
      Pour remédier à ce second problème j'ai l'intention de transformer les tutoriaux en packs de tutoriaux qui seraient des groupes de tutoriaux en fonction du compilateur et de la bibliothèque pour la fenêtre OpenGL utilisés.
    </paragraph>
    <paragraph>
      De plus, je pense supprimer les versions DevCPP et MinGW Developper Studio pour ne laisser que la version MinGW en ligne de commande. Si vous souhaitez que je conserve les tutoriaux pour DevCPP écrivez moi <link href="./contact.html">un petit courrier</link>.
    </paragraph>
    <paragraph>
      Enfin, je pense ajouter des exemples d'utilisations des conteneurs de la STL. Il ne s'agira pas d'exemples ayant le moindre intérêt, ils montreront simplement comment s'en servir.
    </paragraph>

  </post>

  <post index="0038" date="24/05/2004" std-date="2004-05-24T00:00:00.00Z" title="Partenariat avec Game-Lab">
    <meta>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      G-Truc Creation accueil un nouveau partenaire : <link href="http://www.game-lab.com">Game-Lab</link>. Il s'agit d'un site sur la création de jeux vidéo et le game edting que je visite régulièrement et donc que je vous recommande personnellement.
    </paragraph>

    <source-element type="Lien" href="./partenariats.html" title="La liste des partenariats" />
  </post>

  <post index="0037" date="17/05/2004" std-date="2004-05-17T00:00:00.00Z" title="Troix Commentaires de livres ajoutés">
    <meta>
      <tag>gtc-tech-devel-book</tag>
    </meta>

    <paragraph>
      J'ai ajouté trois commentaires de livres. Comme habituellement j'ai ajouté des livres que je trouve particulièrement intéressant mais parmi ces livres, le livre sur XSLT sort véritablement du lot.
    </paragraph>
    <list name="Les nouveaux commentaires de livres : ">
      <list-element>
        Programmer en langage C++
      </list-element>
      <list-element>
        Langage C
      </list-element>
      <list-element>
        XSLT : Développement en XML et HTML
      </list-element>
    </list>

    <source-element type="Lien" href="./livres.html" title="La liste de tous les commentaires de livres" />
  </post>

  <post index="0036" date="09/05/2004" std-date="2004-05-09T00:00:00.00Z" title="Troix nouveaux tutoriaux OpenGL">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      J'ai ajouté 3 nouveaux tutoriaux OpenGL et modifié celui sur le piking OpenGL.
    </paragraph>
    <list name="Liste des nouveaux tutoriaux : ">
      <list-element>
        - <link href="./tuts.html#tut40">Piking : Sélection d'objets</link>
      </list-element>
      <list-element>
        - <link href="./tuts.html#tut41">Piking : Passage de coordonnées 2D en 3D</link>
      </list-element>
      <list-element>
        - <link href="./tuts.html#tut42">Test de scission</link>
      </list-element>
      <list-element>
        - <link href="./tuts.html#tut43">Test Alpha</link>
      </list-element>
    </list>

    <source-element type="Lien" href="./tuts.html" title="La liste de tous les toturiaux OpenGL" />
  </post>

  <post index="0035" date="26/04/2004" std-date="2004-04-26T00:00:00.00Z" title="Dix nouveaux tutoriaux OpenGL">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      J'ai ajouté 10 nouveaux tutoriaux. 6 sont consacrés aux vertex arrays avec notamment de l'utilisation de GL_ARB_vertex_buffer_object d'OpenGL 1.5, 2 montrant l'utilisation des display lists pour par exemple afficher du texte à l'écran, 1 sur l'extension GL_ARB_occlusion_query d'OpenGL 1.5 et 1 sur la sélection d'objets dans une scène 3D avec la souris.
    </paragraph>
    <list name="Liste des nouveaux tutoriaux : ">
      <list-element>
        - <link href="./tuts.html#tut40">Sélection d'objets</link>
      </list-element>
      <list-element>
        - <link href="./tuts.html#tut39">GL_ARB_occlusion_query</link>
      </list-element>
      <list-element>
        - <link href="./tuts.html#tut38">Display list : Affichage de textes</link>
      </list-element>
      <list-element>
        - <link href="./tuts.html#tut37">Display list</link>
      </list-element>
      <list-element>
        - <link href="./tuts.html#tut36">GL_ARB_vertex_buffer_object : Indexed interleaved vertex array</link>
      </list-element>
      <list-element>
        - <link href="./tuts.html#tut35">GL_ARB_vertex_buffer_object : Interleaved vertex array</link>
      </list-element>
      <list-element>
        - <link href="./tuts.html#tut34">GL_ARB_vertex_buffer_object : Vertex array</link>
      </list-element>
      <list-element>
        - <link href="./tuts.html#tut33">Indexed interleaved vertex array</link>
      </list-element>
      <list-element>
        - <link href="./tuts.html#tut32">Interleaved vertex array</link>
      </list-element>
      <list-element>
        - <link href="./tuts.html#tut31">Vertex array</link>
      </list-element>
    </list>

    <source-element type="Lien" href="./tuts.html" title="La liste de tous les toturiaux OpenGL" />
  </post>

  <post index="0034" date="23/04/2004" std-date="2004-04-23T00:00:00.00Z" title="Trois nouveaux commentaires de livres">
    <meta>
      <tag>gtc-tech-devel-book</tag>
    </meta>

    <paragraph>
      J'ai ajouté trois nouveaux commentaires de livres.
    </paragraph>
    <list name="Liste des nouveaux livres : ">
      <list-element>
        OpenGL Shading Language
      </list-element>
      <list-element>
        Assembleur x86
      </list-element>
      <list-element>
        Programmation Graphique C/C++ Assembleur
      </list-element>
    </list>

    <source-element type="Lien" href="./livres.html" title="La liste de tous les commentaires de livres" />
  </post>

  <post index="0033" date="19/04/2004" std-date="2004-04-19T00:00:00.00Z" title="Site v3.6, 30 tutoriaux OpenGL !">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      La version 3.5 du site n'a pas eu le temps de vivre bien longtemps. Celle nouvelle version 3.6 a été spécialement conçu pour supprimer la vieille architecture utilisant des frames qui avait été instauré dans la version 2.2 du site. Pourquoi ? D'une part pour simplifier la navigation et d'autre part pour s'assurer de la conformité avec le doctype de XHTML 1.1. Bien entendu le site est toujours entièrement réalisé en XML+XSLT+CSS et les sources sont disponible <link href="./projets/site/dl/g-truc-src.zip">ici</link>. Notez, juste pour le plaisir, que le design n'a encore une fois pas beaucoup changé malgré l'ampleur des changements.
    </paragraph>
    <paragraph>
      Avec ce site v3.6, voici onze nouveaux tutoriaux ce qui porte le nombre à pas moins de trente tutoriaux OpenGL ! De plus, tous les tutoriaux sont maintenant disponible pour <link href="http://www.bloodshed.net/dev/devcpp.html">DevCPP 5</link>, <link href="http://www.mingw.org/">MinGW</link>, <link href="http://www.parinya.ca/">MinGW Developer Studio</link>, Visual C++ 6 SP5 et Visual C++ 7.1. Un grand nombre de tutoriaux sont également disponibles pour GCC sous Linux.
    </paragraph>
    <paragraph>
      Parmi ces onze nouveaux tutoriaux, cinq sont consacrés au blending et quatre au Vertex Shader.
    </paragraph>
    <list name="Liste des nouveaux tutoriaux : ">
      <list-element>
        <link href="./tuts.html#tut20">Transformation : Pile de matrices</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut21">Blending : Alpha blending</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut22">Blending : Billboarding</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut23">Blending : Billboarding (2)</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut24">Blending : GL_EXT_blend_minmax</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut25">Blending : GL_EXT_blend_subtract</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut26">GL_ARB_vertex_shader : Utilisation de base</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut27">GL_ARB_vertex_shader : Caractéristiques matérielles</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut28">GL_ARB_vertex_shader : Variables d'environnement</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut29">GL_ARB_vertex_shader : Les couleurs</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut30">Gestion des erreurs</link>
      </list-element>
    </list>
    <paragraph>
      Concernant les prochaines évolutions, je compte refaire la partie <link href="./liens.html">liens</link>, qui ne me satisfait vraiment pas, changer le forum (PHPBB 2.2 ?) et dans l'immédiat je vais ajouter des commentaires de livres. Si vous avez des suggestions, je les attends soit par <link href="./contacts">email</link> soit via le <link href="http://www.expert-gamers.com/zglu/page/forums">forum</link>.
    </paragraph>
    <paragraph>
      Finalement, je commence véritablement à manquer de place sur mon compte ...
    </paragraph>

  </post>

  <post index="0032" date="14/04/2004" std-date="2004-04-14T00:00:00.00Z" title="Transformation et motion blur">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      L'ajout de tutoriaux OpenGL continue avec l'ajout de 2 nouveaux tutoriaux. Le premier sur la <link href="./tuts.html#tut19">transformation</link> et le second, dans le prolongement du rendu dans une texture, sur le <link href="./tuts.html#tut18">blur motion</link>.
    </paragraph>
    <paragraph>
      Ils sont disponible pour Visual C++ 6 SP5, 7.1 (.net 2003), <link href="http://www.bloodshed.net/dev/devcpp.html">DevCPP</link>, <link href="http://www.parinya.ca/">MinGW Dev Studio</link>, <link href="http://www.mingw.org/">MinGW</link> et GCC.
    </paragraph>
    <paragraph>
      De plus, un bon nombre de tutoriaux ont été porté ou mise à jour pour GCC.
    </paragraph>

  </post>

  <post index="0031" date="07/04/2004" std-date="2004-04-07T00:00:00.00Z" title="Nouveaux tutoriaux OpenGL et mise à jours">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      2 nouveaux tutoriaux sont disponibles. Le premier sur <link href="./tuts.html#tut16">les matrices de textures</link> et le second sur <link href="./tuts.html#tut17">le rendu de scene dans une texture</link>. Le nombre de tutoriaux est maintenant de 17.
    </paragraph>
    <paragraph>
      De plus de nombreux tutoriaux on subit des modifications mineurs afin de réduire la taille des archives. Pour cela, j'ai simplement surprimé les sources et exemples de <link href="./projets/gtl/index.html">GTL</link> dans les exemples qui l'utilise.
    </paragraph>
    <paragraph>
      J'ai également commencé le portage des exemples pour GCC et MinGW (avec makefile).
    </paragraph>

  </post>

  <post index="0030" date="05/03/2004" std-date="2004-03-05T00:00:00.00Z" title="Site v3.5 : Modifications; Tutoriaux; livres">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
      <tag>gtc-tech-g-truc-update</tag>
    </meta>

    <paragraph>
      Le site a subit quelques grandes modifications : Nouveau code pour la présentation, retouche du design, refonte de la partie <link href="./livres.html">"Livres"</link> et création d'une parties <link href="./tuts.html">"Tutoriaux OpenGL"</link>.
    </paragraph>
    <paragraph>
      Ainsi le code du site est toujours réalisé en XML, XSL et CSS mais à présent la transformation en fichiers HTML est réalisé niveau serveur. Ceci devrait permettre aux utilisateurs de vieux navigateurs (IE5, Navigator 4.7, etc) de pourvoir accéder au site. Notez que le code XML, XSL et CSS est disponible dans la rubrique <link href="./code.html">Code du site</link>, pour les amoureux de nouvelles technologies.
    </paragraph>
    <paragraph>
      En ce qui concerne la liste des livres je suis repartie de 0 et j'ai écris de nouveaux commentaires qui, j'espères, seront plus attrayant. N'ayant pas tous les livres dont j'avais fait des commentaires, certains seront perdus et les autres arriveront progressivement.
    </paragraph>
    <list name="Pour le moment 5 commentaires sont disponibles : ">
      <list-element>
        <link href="./livres.html#livre5">3D Math primer for Graphics and Game Development</link>
      </list-element>
      <list-element>
        <link href="./livres.html#livre4">Focus On 3D Terrain Programming</link>
      </list-element>
      <list-element>
        <link href="./livres.html#livre3">The OpenGL Extensions Guide</link>
      </list-element>
      <list-element>
        <link href="./livres.html#livre2">OpenGL Game Programming</link>
      </list-element>
      <list-element>
        <link href="./livres.html#livre1">OpenGL 1.2</link>
      </list-element>
    </list>
    <paragraph>
      En ce qui concerne la partie "Tutoriaux OpenGL", ce sont de petits programmes avec commentaires dont le but est de mettre en avant des éléments d'OpenGL.
    </paragraph>
    <list name="Ainsi 9 tutoriaux ont été ajouté : ">
      <list-element>
        <link href="./tuts.html#tut1">Fenêtre OpenGL</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut2">Extensions OpenGL</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut3">Face culling</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut4">Depth Test (Z-Buffer)</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut5">Lighting</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut6">Texture</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut9">GL_ARB_point_parameters</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut10">GL_ARB_point_sprite</link>
      </list-element>
      <list-element>
        <link href="./tuts.html#tut11">GL_ARB_point_sprite (Avec GL_ARB_point_parameters et transparence)</link>
      </list-element>
    </list>
    <paragraph>
      Certains tutoriaux sont associés à des documents explicatifs comme ceux sur GL_ARB_point_parameters et GL_ARB_point_sprite, où les extensions sont décrites très précisément et dans toutes leurs complétudes.
    </paragraph>
    <paragraph>
      Ils sont disponibles pour <link href="http://www.parinya.ca">MinGW Developer Studio</link>, <link href="http://www.bloodshed.net/dev/devcpp.html">DevCPP</link>, Visual C++ 6 et Visual C++ 7. L'idée n'est pas de se limiter à ces outils, des versions pour GCC sous Linux sont prévu.
    </paragraph>

  </post>

  <post index="0029" date="23/02/2004" std-date="2004-02-23T00:00:00.00Z" title="Contest NeHe Creative 2004">
    <meta>
      <tag>gtc-tech-event</tag>
    </meta>

    <paragraph>
      Jeff Molofee a publié les démos qui lui ont été envoyé pour le contest Creative 2004. Comme il l'annonçait dans une news de NeHe, les démos sont vraiment toutes magnifiques !
    </paragraph>
    <paragraph>
      Si vous souhaitez les téléchargés c'est <link href="http://nehe.gamedev.net/data/contests/contest.asp?contest=08">ici</link>. Et si vous souhaitez voir notre entrée à Invalide et moi vous pouvez la téléchargez : <link href="http://nehe.gamedev.net/counter.asp?url=http://nehe.gamedev.net/data/contests/2004_creative/demo/christophe_riccio.zip">ici</link>.
    </paragraph>

  </post>

  <post index="0028" date="05/02/2004" std-date="2004-02-05T00:00:00.00Z" title="3 tutoriaux et GTL alpha 4.2">
    <meta>
      <tag>gtc-tech-opengl-samples</tag>
    </meta>

    <paragraph>
      Je viens de commencer une série de tutoriaux batisée "Premier contact avec OpenGL". Le concept est de présenter un couple IDE et bibliothèque permettant de créer une application OpenGL élémentaire. Chaque tutorial indique comment configurer le compilateur, créer un projet et dispose d'un exemple.
    </paragraph>
    <paragraph>
      Aujourd'hui 3 tutoriaux utilisant successivement SDL + Visual C++ 6, SDL + DevCpp et SDL + MinGW Developer Studio on été ajouté à partir de ce concept.
    </paragraph>
    <paragraph>
      De plus une nouvelle version de GTL est disponible. En plus de divers améliorations, elle intégre à présent des projets pour DevCpp et MinGW Developer Studio.
    </paragraph>

    <source-element type="Tutorial" href="./articles/sdl-ogl-mingwdevstudio.html" title="Premier contact avec OpenGL grâce à SDL sous MinGW Developer Studio" />
    <source-element type="Tutorial" href="./articles/sdl-ogl-devcpp.html" title="Premier contact avec OpenGL grâce à SDL sous DevCPP" />
    <source-element type="Tutorial" href="./articles/sdl-ogl-vc6.html" title="Premier contact avec OpenGL grâce à SDL sous Visual C++ 6" />
    <source-element type="Lien" href="./articles.html" title="Découvrez les autres articles" />
    <source-element type="La page du projet" href="./projets/gtl/index.html" title="GTL Alpha 4.2" />
  </post>

  <post index="0027" date="23/01/2004" std-date="2004-01-23T00:00:00.00Z" title="Comparatif entre Inno Setup et NSIS">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      Et oui beaucoup d'actualité aujourd'hui !
    </paragraph>
    <paragraph>
      Etant particulièrement intéressé par les outils des distributions de logiciel, j'ai réalisé un comparatif entre les deux ténors du monde libre sous Windows : Inno Setup et NSIS.
    </paragraph>
    <paragraph>
      Pour finir, j'ai réalisé un petit lifting des articles qui sont, à présent, tous rédigées au format rtf et XHTML.
    </paragraph>

    <source-element type="Au format xhtml" href="./articles/inno_nsis.html" title="Le comparatif entre Inno Setup et NSIS (inno_nsis.html)" />
    <source-element type="Au format rtf" href="./articles/inno_nsis.rtf" title="Le comparatif entre Inno Setup et NSIS (inno_nsis.rtf)" />
    <source-element type="Un complément" href="./articles/inno_nsis_image.zip" title="Images commentées liées au comparatif" />
    <source-element type="Lien" href="./articles.html" title="Découvrez les autres articles" />
  </post>

  <post index="0026" date="23/01/2004" std-date="2004-01-23T00:00:00.00Z" title="Mise à jour de MultiTunnel">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      MultiTunnel passe en version 1.0. Les améliorations
      apportées concernent essentiellement l'aide à l'utilisation. Une page d'aide est
      maintenant accessible par la touche f1, afficher en cours d'exécution.
      Le nombre de FPS ainsi que le réglage du filtrage anisotrope sont également indiqués.
    </paragraph>
    <paragraph>
      A noter que l'installeur comprendre le script NSIS qui a permis de le générer ainsi qu'un script pour créer un installeur avec Inno Setup.
    </paragraph>

    <source-element type="Téléchargement" href="./projets/multitunnel/dl/multitunnelv1.0.exe" title="multitunnelv1.0.exe" />
  </post>

  <post index="0025" date="23/01/2004" std-date="2004-01-23T00:00:00.00Z" title="Contest NeHe">
    <meta>
      <tag>gtc-tech-event</tag>
    </meta>

    <paragraph>
      Invalide et moi avons participé au contest Creative 2003 de <link href="http://nehe.gamedev.net" target="_blank">NeHe</link>.
    </paragraph>
    <paragraph>
      Notre démo est un rendu de terrain métant en oeuvre l'évolution solaire d'une journée ... jour / nuit en fait. De plus le début de la démo présent une sorte de mutation du terain.
    </paragraph>
    <paragraph>
      La particularité de la démo c'est que le ciel, le brouillard et la couleur de l'éclairage évolue dans le temps, suivant "l'heure" de la journée dans la démo. L'évolution des différentes couleurs a été réalisée avec des fonctions polynomiales afin d'assurer la continuité (au sens mathématique) des couleurs.
    </paragraph>
    <paragraph>
      Découvrez cette démo en images dans l'actuscreen !
    </paragraph>

    <source-element type="Téléchargement" href="./projets/tam/dl/terrain_demo.zip" title="terrain_demo.zip" />
    <source-element type="Lien direct" href="actuscreens.html" title="Page actuscreen" />
  </post>

  <post index="0024" date="30/12/2003" std-date="2003-12-30T00:00:00.00Z" title="NSIS 2.0 rc1">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>
      Pour rappel NSIS est un puissant installeur Windows libre, notamment utilisé pour Winamp. La principale nouveauté de la version 2 est la Modern UI. Elle a permit de mieux intégrer les extensions de NSIS tout en simplifiant le langage de script.
    </paragraph>
    <paragraph>
      Comme je le pressentais avec NSIS 2.0 Beta 4.0, la version 2 de NSIS semble arriver à maturité, c'est pourquoi NSIS 2.0 passe en RC1. D'après le site de NSIS, cette nouvelle version annoncerai la version 2 Finale : "Assuming no big issues are found with rc1, the next version will be NSIS 2 final"
    </paragraph>
    <paragraph>
      Notons la principale nouveauté de cette RC1 : L'ajout de la compression LZMA, plus connu sous le nom 7z par les amateurs de 7-zip. Le site de NSIS annonce une compression jusqu'à 20% supérieur mais après test, ce nombre est en fait très variable et peu allez au dela des 20% annoncées. La compression LZMA est particulièrement efficace sur les fichiers textes mais n'apporte pas de véritable gain pour des photos par exemple. A notez enfin que la compression très lente mais la décompression est extrêmement rapide !
    </paragraph>

    <source-element type="Le site de NSIS" href="http://nsis.sourceforge.net" title="nsis.sourceforge.net" />
    <source-element type="La dernière version" href="http://prdownloads.sourceforge.net/nsis/nsis20rc1.exe?download" title="NSIS 2 RC 1" />
    <source-element type="Le site de 7-Zip" href="http://www.7-zip.org" title="www.7-zip.org" />
  </post>

  <post index="0023" date="26/12/2003" std-date="2003-12-26T00:00:00.00Z" type="g-truc-projects-other" title="GTL Alpha 4.1">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Comme prévu une version de GTL alpha 4 est maintenant disponible sous Linux. Du fait des nombreuses améliorations, GTL passe en alpha 4.1.
    </paragraph>
    <list name="Changelog : ">
      <list-element>Ajout de gtl::CFont.</list-element>
      <list-element>Ajout de gtl::CFontTGA.</list-element>
      <list-element>Ajout de fonctions de rotation des vecteurs dans les classes CVector*</list-element>
      <list-element>Ajout d'un exemple d'utilisation de gtl::CPolynamial</list-element>
      <list-element>Correction de gtl::CMatrix4.</list-element>
      <list-element>Supression de gtl::CText.</list-element>
      <list-element>Supression des exemples non concret</list-element>
      <list-element>Portage des exemples sous SDL</list-element>
    </list>
    <paragraph>
      Les archives suivantes sont indépendantes du système d'exploitation.
    </paragraph>

    <source-element type="Téléchargement" href="./projets/gtl/dl/gtl-a4.1.zip" title="GTL alpha 4.1 (zip)" />
    <source-element type="Téléchargement" href="./projets/gtl/dl/gtl-a4.1.tar.bz2" title="GTL alpha 4.1 (tar.gz)" />
    <source-element type="Téléchargement" href="./projets/gtl/dl/gtl-a4.1.tar.bz2" title="GTL alpha 4.1 (tar.bz2)" />
  </post>

  <post index="0022" date="28/11/2003" std-date="2003-11-28T00:00:00.00Z" title="Actualité des projets">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      En ce qui concerne T.A.M. le moteur graphique continu d'avancer, mais ce qui marque véritablement d'actualité c'est l'arrivé de 2 scénaristes (Solonce et Ultimate Peon) dans l'équipe.
    </paragraph>
    <paragraph>
      Quand à G.T.L. alpha 4.0, la version Windows est disponible ! <link href="./projets/gtl/dl/gtl-a4.0.zip">Au format zip</link> ou <link href="http://ftp.g-truc.net/projets/gtl/gtl-a4.0.tar.bz2" target="_blank">au format tar.bz2</link> suivant les goûts. La version linux arrivera avant la fin de l'année.
    </paragraph>
    <paragraph>
      Et enfin un nouveau projet : Multi Tunnel.
    </paragraph>
    <paragraph>
      Multi Tunnel est une petite démo OpenGL utilisant SDL et GTL alpha 4.0. Elle est basé sur un projet du magazine Code(r) N°5. Dans cette démo sont mise en oeuvre : l'éclairage, le filtrage Anisotrope (GL_EXT_texture_filter_anisotropic), le brouillard volumique (GL_EXT_fog_coord), le Culling.
    </paragraph>
    <paragraph>
      Vous pouvez télécharger la beta 1.0 <link href="./projets/multitunnel/dl/multitunnelb1.0.exe">ici</link>
    </paragraph>

    <source-element type="Téléchargement" href="./projets/gtl/dl/gtl-a4.0.zip" title="G.T.L. alpha 4.0 (zip)" />
    <source-element type="Téléchargement" href="./projets/gtl/dl/gtl-a4.0.tar.bz2" title="G.T.L. alpha 4.0 (tar.bz2)" />
    <source-element type="Téléchargement" href="./projets/multitunnel/dl/multitunnelb1.0.exe" title="MultiTunnel b1.0" />
  </post>

  <post index="0021" date="17/10/2003" std-date="2003-10-17T00:00:00.00Z" title="XForms, nouvelle recommendation du W3C autour d'XML">
    <meta>
      <tag>gtc-tech-devel-xml</tag>
    </meta>

    <paragraph>XForms se présente comme l'avenir des formulaires sur le Net.</paragraph>
    <paragraph>Bien sûr, il faudra attendre quelques temps avant que les navigateurs ne supportent correctement XForms. Pour le moment seul Mozilla supporte XForms mais avec quelques bugs.</paragraph>
    <paragraph>Cette nouvelle application de XML est accompagné de XML Event qui sera utilisé abondament dans un document XForms.</paragraph>

    <source-element type="Lien" href="http://www.w3.org/TR/2003/REC-xforms-20031014" title="Spécification XForms" />
    <source-element type="Lien" href="http://www.w3.org/TR/2003/REC-xml-events-20031014/" title="Spécification XML Events" />
  </post>

  <post index="0020" date="28/09/2003" std-date="2003-09-28T00:00:00.00Z" title="Présentation de XML">
    <meta>
      <tag>gtc-tech-devel-xml</tag>
    </meta>

    <paragraph>Un article sur XML est à présent disponible.</paragraph>
    <paragraph>Il présente XML ainsi que des langages et outils utilisables avec XML.</paragraph>

    <source-element type="L'article" href="http://www.g-truc.net/articles/xml_pre.rtf" title="www.g-truc.net/articles/xml_pre.rtf" />
  </post>

  <post index="0019" date="26/09/2003" std-date="2003-09-26T00:00:00.00Z" title="G-Particule 3.56">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>Cela fesait bien longtemps que G-Particule n'avait pas été mise à jour ... Le fait que je pense actuellement au moteur de particules de T.A.M. et avec l'arrivée prochaine de G.T.L. Alpha 4, mon tourné vers G-Particule.</paragraph>
    <paragraph>Cette nouvelle version surporte une pré-version de G.T.L. alpha 4 et je vous invite à noter que G-Particule sera intégré dans la version final de G.T.L.</paragraph>
    <paragraph>Pour recompiler G-Particule vous devrez télécharger une version 3.7 de GLUT.</paragraph>

    <source-element type="A télécharger" href="http://ftp.g-truc.net/projets/g-particule/g-particule-v3.56.zip" title="G-Particule 3.56 accompagné de GTL alpha 4 en pré-version" />
    <source-element type="Util" href="http://www.xmission.com/~nate/glut.html" title="GLUT 3.7.6" />
  </post>

  <post index="0018" date="26/09/2003" std-date="2003-09-26T00:00:00.00Z" title="Tutorial : Utiliser les extensions OpenGL">
    <meta>
      <tag>gtc-tech-opengl-tips</tag>
    </meta>

    <paragraph>Si cette connaissance vous manque le vous invite à consulter ce tutorial. Il est accompagné d'un exemple qui met en oeuvre l'extension GL_EXT_secondary_color.</paragraph>

    <source-element type="Le tutorial" href="http://www.g-truc.net/tut/extensions_opengl.rtf" title="extensions_opengl.rtf" />
    <source-element type="L'exemple" href="http://www.g-truc.net/tut/extensions_opengl.zip" title="extensions_opengl.zip" />
  </post>

  <post index="0017" date="01/09/2003" std-date="2003-09-01T00:00:00.00Z" title="SDL 1.2.6">
    <meta>
      <tag>gtc-tech-devel-tool</tag>
    </meta>

    <paragraph>Une nouvelle version stable de la SDL est disponible.</paragraph>
    <paragraph>Dans les principales nouveautés on compte un support des instructions MMX et 3Dnow! mais la liste est très longue.</paragraph>

    <source-element type="Lien" href="http://www.libsdl.org" title="www.libsdl.org" />
  </post>

  <post index="0016" date="17/08/2003" std-date="2003-08-17T00:00:00.00Z" title="Rubrique 'Liens'">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>La rubrique 'Liens' a été modifier et restructurer.</paragraph>
    <paragraph>Si vous souhaitez découvrir quelques super sites, allez y faire un tour.</paragraph>

    <source-element type="Rubrique 'liens'" href="./lien.html" title="ici" />
  </post>

  <post index="0015" date="02/08/2003" std-date="2003-08-02T00:00:00.00Z" title="G.T.L. Alpha 3.2">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>Voici le changelog :</paragraph>
    <paragraph>- Réécriture du code du chargement d'images TGA.</paragraph>
    <paragraph>- Sauvegarde d'images TGA.</paragraph>
    <paragraph>- Ajoute un exemple d'utilisation de chargement et sauvegarde d'une image TGA.</paragraph>

    <source-element type="Au format ZIP" href="http://ftp.g-truc.net/projets/gtl/gtl_alpha_3.2.tar.bz2" title="gtl_alpha_3.2.tar.bz2" />
    <source-element type="Au format TAR.BZ2" href="http://ftp.g-truc.net/projets/gtl/gtl_alpha_3.2.zip" title="gtl_alpha_3.2.zip" />
  </post>

  <post index="0014" date="31/07/2003" std-date="2003-07-31T00:00:00.00Z" title="Un site pour T.A.M.">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Aujourd'hui marque le début officiel du projet avec l'arrivée du site de ce projet.
    </paragraph>

    <source-element type="Le site de T.A.M." href="http://tam.g-truc.net" title="tam.g-truc.net" />
  </post>

  <post index="0013" date="28/07/2003" std-date="2003-07-28T00:00:00.00Z" title="OpenGL 1.5">
    <meta>
      <tag>gtc-tech-opengl-review</tag>
    </meta>

    <paragraph>
      Une nouvelle version d'OpenGL est sur le point de se diffuser au travers du monde.
    </paragraph>
    <paragraph>
      Alors que nous attendions tous OpenGL 2.0, le groupe ARB a choisi de créer une version 1.5 afin d'accélérer la disposibilité du Shading Language, la grande inovation attendu avec OpenGL 2.0.
    </paragraph>

    <source-element type="Plus d'indo" href="http://www.gamedev.net/info/news/FullStory.asp?StoryID=5390" title="Info sur www.gamedev.net" />
    <source-element type="Plus d'indo" href="http://www.opengl.org/developers/about/arb/notes/meeting_note_2003-06-10.html" title="Info sur www.opengl.org" />
  </post>

  <post index="0012" date="14/07/2003" std-date="2003-07-14T00:00:00.00Z" title="TAM, première visualisation chez vous.">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      Je n'ai pas l'habitude de faire une news pour un actuscreen mais cet actuscreen est très particulier !
    </paragraph>
    <paragraph>
      En effet, en plus du joli screenshot, vous pouvez visualiser ce petit moteur de terrain chez vous, grâce un petit executable qui vous permettra d'admirrer pleinement le rendu de l'éclairage dynamique.
    </paragraph>

    <source-element type="Pour tester" href="http://ftp.g-truc.net/projets/tam/wip/tam-wip14072003.zip" title="Le petit programme" />
    <source-element type="Plus d'indo" href="http://www.g-truc.net/actuscreen.html" title="l'actuscreen" />
  </post>

  <post index="0011" date="11/07/2003" std-date="2003-07-11T00:00:00.00Z" title="G.T.L. Alpha 3.1 dispo">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <list name="Voici le changelog :">
      <list-element>Ajoute des vecteurs de rang 4.</list-element>
      <list-element>Ajoute une fonction factorielle.</list-element>
      <list-element>Ajoute un exemple d'utilisation des fonts.</list-element>
      <list-element>Ajoute un exemple d'utilisation des dlls.</list-element>
      <list-element>Ajoute l'opérateur () pour accéder aux éléments d'un vecteur.</list-element>
      <list-element>Supprime l'opérateur [] pour accéder aux éléments d'un vecteur.</list-element>
      <list-element>Fixe les problèmes de surcharges similaires. </list-element>
      <list-element>Utilisation d'une bibliothèque static au lieu d'un groupe d'objet compiler avec GCC.</list-element>
      <list-element>Création d'un projet pour Dev C++.</list-element>
    </list>

    <source-element type="La page de G.T.L." href="http://www.g-truc.net/projets/gtl" title="www.g-truc.net/projets/gtl" />
    <source-element type="Lien 1" href="http://ftp.g-truc.net/projets/gtl/gtl_alpha_3.1.tar.bz2" title="gtl_alpha_3.1.tar.bz2" />
    <source-element type="Lien 2" href="http://ftp.g-truc.net/projets/gtl/gtl_alpha_3.1.zip" title="gtl_alpha_3.1.zip" />
  </post>

  <post index="0010" date="06/07/2003" std-date="2003-07-06T00:00:00.00Z" title="Zglu alpha 4 dispo !">
    <meta>
      <tag>gtc-tech-project-zglu</tag>
    </meta>

    <paragraph>
      Après de long mois d'attente voici l'alpha 4 de Zglu ! Que dire sur cette nouvelle version ? Vous donnez un conseille ! Visitez le nouveau site de Zglu.
    </paragraph>

    <source-element type="Le site de Zglu" href="http://zglu.g-truc.net" title="zglu.g-truc.net" />
    <source-element type="Zglu Alpha 4" href="http://ftp.g-truc.net/projets/zglu/zglu-a04.exe" title="ftp.g-truc.net/projets/zglu/zglu-a04.exe" />
  </post>

  <post index="0009" date="24/06/2003" std-date="2003-06-24T00:00:00.00Z" title="Salut TAM !">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <paragraph>
      TAM est mon nous super gros projet de ma vie et signifie Tactique A Mort. Je vous rassure ceci n'est qu'un nom de code rien de plus. Il incarne l'esprit du projet.
    </paragraph>
    <paragraph>
      TAM est un projet de jeu de stratégie très fortement axé vers la tactique. Pour gagner, il faudra réfléchir et non forcé dans le tas.
    </paragraph>
    <paragraph>
      A ce titre de fortement tactique, les joueurs disposeront de peu d'unités et ne pourront en contruire en cours de partie. Les unités seront configurés avant la partie.
    </paragraph>
    <paragraph>
      Le jeu sera riche en relief, climat dans une époque moderne voir futuriste mais toujours réaliste.
    </paragraph>
    <paragraph>
      TAM est un projet C++ et OpenGL pour Windows et Linux.
    </paragraph>
    <paragraph>
      Bien sur TAM recrute ! Si vous etes codeur, modeleur, dessinateur, sénariste, sounder ou encore webmaster et que vous etes instessé par le projet contactez moi via mon courrier ou grâce au forum.
    </paragraph>

  </post>

  <post index="0008" date="22/06/2003" std-date="2003-06-22T00:00:00.00Z" title="Le site v3.0">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      Niveau design pas de gros changement, c'est dans le fond qu'il y en a ! En effet le site v3.0 a été créer en XML+XML+CSS, ce qui impose d'utiliser IE6 et supérieur, Mozilla 1.2 final ou tout autre navigateur supportant XSL 1.1, pour profiter pleinement de cette nouvelle version du site.
    </paragraph>
    <paragraph>
      En ce qui conserne le contenu, j'ai ajouté de nouveaux liens et de nouveaux tests de livre de programmation.
    </paragraph>
    <paragraph>
      En hommage au ancienne version du site, découvrez le nouvel actuscreen.
    </paragraph>

    <source-element type="Les livres" href="http://www.g-truc.net/livre.html" title="ici" />
    <source-element type="Les liens" href="http://www.g-truc.net/lien.html" title="ici" />
    <source-element type="Les actuscreens" href="http://www.g-truc.net/actuscreen.html" title="ici" />
  </post>

  <post index="0007" date="28/05/2003" std-date="2003-05-28T00:00:00.00Z" title="Article sur la SDL">
    <meta>
      <tag>gtc-tech-devel-documentation</tag>
    </meta>

    <paragraph>
      Une nouvelle partie vient étoffer le menu de gauche du site et elle se nomme "Articles".
      Un premier article est disponible et présente la SDL et ses fonctionnalités.
    </paragraph>

    <source-element type="Voir l'article" href="www.g-truc.net/articles/sdl_intro.html" title="à partir du site" />
    <source-element type="Voir l'article" href="./articles/sdl_intro.rtf" title="au format RTF" />
  </post>

  <post index="0006" date="18/05/2003" std-date="2003-05-18T00:00:00.00Z" title="Zglu alpha 4 : récapitulatif">
    <meta>
      <tag>gtc-tech-project-zglu</tag>
    </meta>

    <paragraph>
      Le developement de Zglu Alpha 4 avance très bien. La partie de Zglu a été mise à jours avec de noubreux screenshots !
    </paragraph>

    <source-element type="Les screenshots" href="http://zglu.g-truc.net" title="A voir ici" />
  </post>

  <post index="0005" date="18/04/2003" std-date="2003-04-18T00:00:00.00Z" title="Ouverture du site d'Othello GL">
    <meta>
      <tag>gtc-tech-project-othellogl</tag>
    </meta>

    <paragraph>
      Othello GL dispose maintenant de sa propre page web.
    </paragraph>

    <source-element type="L'adresse" href="http://othellogl.g-truc.net/" title="othellogl.g-truc.net" />
  </post>

  <post index="0004" date="16/04/2003" std-date="2003-04-16T00:00:00.00Z" title="Site version 2.6">
    <meta>
      <tag>gtc-tech-g-truc-source</tag>
    </meta>

    <paragraph>
      Le site est à présent accessible grâce à l'adresse www.g-truc.net.
      La version 2.6 est optimisé pour du 1024*768 et supérieur, IE 5 et supérieur et Mozilla.
      Enjoy!
    </paragraph>
  </post>

  <post index="0003" date="04/04/2003" std-date="2003-04-04T00:00:00.00Z" title="Othello GL Beta 3.00">
    <meta>
      <tag>gtc-tech-project-othellogl</tag>
    </meta>

    <list name="Un petit extrait du fichier lisezmoi :">
      <list-element>G-Othello renommé en Othello GL.</list-element>
      <list-element>Optimisation du code, jusqu'à 31% plus rapide.</list-element>
      <list-element>Traduction anglaise, allemande et espagnole.</list-element>
      <list-element>Intègre la conception. </list-element>
      <list-element>Fixe le bug d'affichage des sauvegardes.</list-element>
      <list-element>Fixe le bug du curseur qui disparait et fait crasher.</list-element>
      <list-element>Fixe le bug de FPS erroné sous Linux. </list-element>
      <list-element>Fixe le bug de l'attente quand une IA joue sous Linux. </list-element>
    </list>

    <source-element type="Pour Windows" href="http://ftp.g-truc.net/projets/othello-gl/othello-gl-b3.00.exe" title="othello-gl-b3.00.exe" />
    <source-element type="Pour Linux (allemand)" href="http://ftp.g-truc.net/projets/othello-gl/othello-gl-b3.00.exe" title="othello-gl-b3.00.tar.bz2" />
    <source-element type="Pour Linux (anglais)" href="http://ftp.g-truc.net/projets/othello-gl/othello-gl-b3.00.exe" title="othello-gl-b3.00.tar.bz2" />
    <source-element type="Pour Linux (francais)" href="http://ftp.g-truc.net/projets/othello-gl/othello-gl-b3.00.exe" title="othello-gl-b3.00.tar.bz2" />
    <source-element type="Pour Linux (espagnol)" href="http://ftp.g-truc.net/projets/othello-gl/othello-gl-b3.00.exe" title="othello-gl-b3.00.tar.bz2" />
    <source-element type="Othello GL sur SourceForge" href="http://sourceforge.net/projects/othello-gl/" title="sourceforge.net/projects/othello-gl" />
  </post>

  <post index="0002" date="21/03/2003" std-date="2003-02-21T00:00:00.00Z" title="G.T.L. Alpha 3.00 dispo !">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <list name="Voici le changelog :">
      <list-element>Chargement, manipulation et affichage de charactères à l'écran en OpenGL.</list-element>
      <list-element>2 fonts disponibles.</list-element>
      <list-element>Chargement d'images BMP 24 bits aux formats RGB 24 bit ou BGR 24 bits.</list-element>
      <list-element>Chargement d'images TGA 8 bits (palette) aux formats RGB 24 bits et BGR 24 bits.</list-element>
      <list-element>Chargement d'images TGA 24 bits aux formats ARGB 16 bits, RGB 24 bits, BGR 24 bits, RGBA 32 bits et BGRA 32 bits.</list-element>
      <list-element>Chargement d'images TGA 32 bits aux formats RGBA 32 bits et BGRA 32 bits.</list-element>
      <list-element>Chargement d'images RAW. </list-element>
      <list-element>Ajoute un exemple d'utilisation du chargement d'images. </list-element>
      <list-element>Ajoute un exemple d'utilisation des fonts.</list-element>
      <list-element>Ajoute de header pour OpenGL 1.4.</list-element>
      <list-element>Aide pour la manipulation de la mémoire dynamique.</list-element>
      <list-element>Aide pour la manipulation des DLL et des SO.</list-element>
      <list-element>Fixe les problèmes de fuites de mémoires.</list-element>
      <list-element>Supprime les éléments concernant les matrices</list-element>
      <list-element>Supprime les éléments concernant la gestion des champs de bits</list-element>
      <list-element>Supprime les vecteurs de rang 4 et N</list-element>
      <list-element>Le tout pour Visual C++ 6, Visual C++ 7/.net et GCC 3.2</list-element>
    </list>

    <source-element type="Au format Ace" href="http://ftp.g-truc.net/projets/gtl/gtl_alpha_3.00.ace" title="gtl_alpha_3.00.ace" />
    <source-element type="Au format BZip 2" href="http://ftp.g-truc.net/projets/gtl/gtl_alpha_3.00.ace" title="gtl_alpha_3.00.tar.bz2" />
    <source-element type="Au format Zip" href="http://ftp.g-truc.net/projets/gtl/gtl_alpha_3.00.ace" title="gtl_alpha_3.00.zip" />
    <source-element type="Lien util" href="http://ftp.g-truc.net/files/glutdlls37beta.zip" title="GLUT 3.7 pour Windows" />
  </post>

  <post index="0001" date="29/02/2003" std-date="2003-02-29T00:00:00.00Z" title="Pack CS Interstate v2.03">
    <meta>
      <tag>gtc-tech-project</tag>
    </meta>

    <list name="Au programme de cette version :">
      <list-element>PODBot 2.6</list-element>
      <list-element>Mise à jour des waypoints</list-element>
      <list-element>Changement de quelques modèles de CS ... par des plus beaux !</list-element>
    </list>

    <source-element type="Pack CS Interstate v2.03 (9.82Mo)" href="http://ftp.g-truc.net/projets/pcsi/pcsi-v2.03.exe" title="pcsi-v2.03.exe" />
  </post>



</g-truc>
